
ICP02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010734  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001d950  080108f4  080108f4  000118f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802e244  0802e244  00030060  2**0
                  CONTENTS
  4 .ARM          00000008  0802e244  0802e244  0002f244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802e24c  0802e24c  00030060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802e24c  0802e24c  0002f24c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802e250  0802e250  0002f250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0802e254  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030060  2**0
                  CONTENTS
 10 .bss          0000a5c4  20000060  20000060  00030060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000a624  2000a624  00030060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030060  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003dfca  00000000  00000000  00030090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000075f3  00000000  00000000  0006e05a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002ad0  00000000  00000000  00075650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002033  00000000  00000000  00078120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00034c48  00000000  00000000  0007a153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003836c  00000000  00000000  000aed9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012d178  00000000  00000000  000e7107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000bc  00000000  00000000  0021427f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000bacc  00000000  00000000  0021433c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004a  00000000  00000000  0021fe08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00002fbb  00000000  00000000  0021fe52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 000000d0  00000000  00000000  00222e0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000060 	.word	0x20000060
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080108dc 	.word	0x080108dc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000064 	.word	0x20000064
 80001fc:	080108dc 	.word	0x080108dc

08000200 <__aeabi_dmul>:
 8000200:	b570      	push	{r4, r5, r6, lr}
 8000202:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000206:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800020a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800020e:	bf1d      	ittte	ne
 8000210:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000214:	ea94 0f0c 	teqne	r4, ip
 8000218:	ea95 0f0c 	teqne	r5, ip
 800021c:	f000 f8de 	bleq	80003dc <__aeabi_dmul+0x1dc>
 8000220:	442c      	add	r4, r5
 8000222:	ea81 0603 	eor.w	r6, r1, r3
 8000226:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800022a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800022e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000232:	bf18      	it	ne
 8000234:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000238:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800023c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000240:	d038      	beq.n	80002b4 <__aeabi_dmul+0xb4>
 8000242:	fba0 ce02 	umull	ip, lr, r0, r2
 8000246:	f04f 0500 	mov.w	r5, #0
 800024a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800024e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000252:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000256:	f04f 0600 	mov.w	r6, #0
 800025a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800025e:	f09c 0f00 	teq	ip, #0
 8000262:	bf18      	it	ne
 8000264:	f04e 0e01 	orrne.w	lr, lr, #1
 8000268:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800026c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000270:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000274:	d204      	bcs.n	8000280 <__aeabi_dmul+0x80>
 8000276:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800027a:	416d      	adcs	r5, r5
 800027c:	eb46 0606 	adc.w	r6, r6, r6
 8000280:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000284:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000288:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800028c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000290:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000294:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000298:	bf88      	it	hi
 800029a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800029e:	d81e      	bhi.n	80002de <__aeabi_dmul+0xde>
 80002a0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002b8:	ea46 0101 	orr.w	r1, r6, r1
 80002bc:	ea40 0002 	orr.w	r0, r0, r2
 80002c0:	ea81 0103 	eor.w	r1, r1, r3
 80002c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002c8:	bfc2      	ittt	gt
 80002ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002d2:	bd70      	popgt	{r4, r5, r6, pc}
 80002d4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002d8:	f04f 0e00 	mov.w	lr, #0
 80002dc:	3c01      	subs	r4, #1
 80002de:	f300 80ab 	bgt.w	8000438 <__aeabi_dmul+0x238>
 80002e2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002e6:	bfde      	ittt	le
 80002e8:	2000      	movle	r0, #0
 80002ea:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002ee:	bd70      	pople	{r4, r5, r6, pc}
 80002f0:	f1c4 0400 	rsb	r4, r4, #0
 80002f4:	3c20      	subs	r4, #32
 80002f6:	da35      	bge.n	8000364 <__aeabi_dmul+0x164>
 80002f8:	340c      	adds	r4, #12
 80002fa:	dc1b      	bgt.n	8000334 <__aeabi_dmul+0x134>
 80002fc:	f104 0414 	add.w	r4, r4, #20
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f305 	lsl.w	r3, r0, r5
 8000308:	fa20 f004 	lsr.w	r0, r0, r4
 800030c:	fa01 f205 	lsl.w	r2, r1, r5
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000318:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800031c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000320:	fa21 f604 	lsr.w	r6, r1, r4
 8000324:	eb42 0106 	adc.w	r1, r2, r6
 8000328:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800032c:	bf08      	it	eq
 800032e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f1c4 040c 	rsb	r4, r4, #12
 8000338:	f1c4 0520 	rsb	r5, r4, #32
 800033c:	fa00 f304 	lsl.w	r3, r0, r4
 8000340:	fa20 f005 	lsr.w	r0, r0, r5
 8000344:	fa01 f204 	lsl.w	r2, r1, r4
 8000348:	ea40 0002 	orr.w	r0, r0, r2
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000350:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000354:	f141 0100 	adc.w	r1, r1, #0
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f1c4 0520 	rsb	r5, r4, #32
 8000368:	fa00 f205 	lsl.w	r2, r0, r5
 800036c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000370:	fa20 f304 	lsr.w	r3, r0, r4
 8000374:	fa01 f205 	lsl.w	r2, r1, r5
 8000378:	ea43 0302 	orr.w	r3, r3, r2
 800037c:	fa21 f004 	lsr.w	r0, r1, r4
 8000380:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000384:	fa21 f204 	lsr.w	r2, r1, r4
 8000388:	ea20 0002 	bic.w	r0, r0, r2
 800038c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000390:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000394:	bf08      	it	eq
 8000396:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800039a:	bd70      	pop	{r4, r5, r6, pc}
 800039c:	f094 0f00 	teq	r4, #0
 80003a0:	d10f      	bne.n	80003c2 <__aeabi_dmul+0x1c2>
 80003a2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003a6:	0040      	lsls	r0, r0, #1
 80003a8:	eb41 0101 	adc.w	r1, r1, r1
 80003ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003b0:	bf08      	it	eq
 80003b2:	3c01      	subeq	r4, #1
 80003b4:	d0f7      	beq.n	80003a6 <__aeabi_dmul+0x1a6>
 80003b6:	ea41 0106 	orr.w	r1, r1, r6
 80003ba:	f095 0f00 	teq	r5, #0
 80003be:	bf18      	it	ne
 80003c0:	4770      	bxne	lr
 80003c2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003c6:	0052      	lsls	r2, r2, #1
 80003c8:	eb43 0303 	adc.w	r3, r3, r3
 80003cc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003d0:	bf08      	it	eq
 80003d2:	3d01      	subeq	r5, #1
 80003d4:	d0f7      	beq.n	80003c6 <__aeabi_dmul+0x1c6>
 80003d6:	ea43 0306 	orr.w	r3, r3, r6
 80003da:	4770      	bx	lr
 80003dc:	ea94 0f0c 	teq	r4, ip
 80003e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003e4:	bf18      	it	ne
 80003e6:	ea95 0f0c 	teqne	r5, ip
 80003ea:	d00c      	beq.n	8000406 <__aeabi_dmul+0x206>
 80003ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f0:	bf18      	it	ne
 80003f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003f6:	d1d1      	bne.n	800039c <__aeabi_dmul+0x19c>
 80003f8:	ea81 0103 	eor.w	r1, r1, r3
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000400:	f04f 0000 	mov.w	r0, #0
 8000404:	bd70      	pop	{r4, r5, r6, pc}
 8000406:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800040a:	bf06      	itte	eq
 800040c:	4610      	moveq	r0, r2
 800040e:	4619      	moveq	r1, r3
 8000410:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000414:	d019      	beq.n	800044a <__aeabi_dmul+0x24a>
 8000416:	ea94 0f0c 	teq	r4, ip
 800041a:	d102      	bne.n	8000422 <__aeabi_dmul+0x222>
 800041c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000420:	d113      	bne.n	800044a <__aeabi_dmul+0x24a>
 8000422:	ea95 0f0c 	teq	r5, ip
 8000426:	d105      	bne.n	8000434 <__aeabi_dmul+0x234>
 8000428:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800042c:	bf1c      	itt	ne
 800042e:	4610      	movne	r0, r2
 8000430:	4619      	movne	r1, r3
 8000432:	d10a      	bne.n	800044a <__aeabi_dmul+0x24a>
 8000434:	ea81 0103 	eor.w	r1, r1, r3
 8000438:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800043c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd70      	pop	{r4, r5, r6, pc}
 800044a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800044e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000452:	bd70      	pop	{r4, r5, r6, pc}

08000454 <__aeabi_drsub>:
 8000454:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e002      	b.n	8000460 <__adddf3>
 800045a:	bf00      	nop

0800045c <__aeabi_dsub>:
 800045c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000460 <__adddf3>:
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000466:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800046a:	ea94 0f05 	teq	r4, r5
 800046e:	bf08      	it	eq
 8000470:	ea90 0f02 	teqeq	r0, r2
 8000474:	bf1f      	itttt	ne
 8000476:	ea54 0c00 	orrsne.w	ip, r4, r0
 800047a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800047e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000482:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000486:	f000 80e2 	beq.w	800064e <__adddf3+0x1ee>
 800048a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800048e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000492:	bfb8      	it	lt
 8000494:	426d      	neglt	r5, r5
 8000496:	dd0c      	ble.n	80004b2 <__adddf3+0x52>
 8000498:	442c      	add	r4, r5
 800049a:	ea80 0202 	eor.w	r2, r0, r2
 800049e:	ea81 0303 	eor.w	r3, r1, r3
 80004a2:	ea82 0000 	eor.w	r0, r2, r0
 80004a6:	ea83 0101 	eor.w	r1, r3, r1
 80004aa:	ea80 0202 	eor.w	r2, r0, r2
 80004ae:	ea81 0303 	eor.w	r3, r1, r3
 80004b2:	2d36      	cmp	r5, #54	@ 0x36
 80004b4:	bf88      	it	hi
 80004b6:	bd30      	pophi	{r4, r5, pc}
 80004b8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004c0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004c4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004c8:	d002      	beq.n	80004d0 <__adddf3+0x70>
 80004ca:	4240      	negs	r0, r0
 80004cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004d8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004dc:	d002      	beq.n	80004e4 <__adddf3+0x84>
 80004de:	4252      	negs	r2, r2
 80004e0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004e4:	ea94 0f05 	teq	r4, r5
 80004e8:	f000 80a7 	beq.w	800063a <__adddf3+0x1da>
 80004ec:	f1a4 0401 	sub.w	r4, r4, #1
 80004f0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004f4:	db0d      	blt.n	8000512 <__adddf3+0xb2>
 80004f6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004fa:	fa22 f205 	lsr.w	r2, r2, r5
 80004fe:	1880      	adds	r0, r0, r2
 8000500:	f141 0100 	adc.w	r1, r1, #0
 8000504:	fa03 f20e 	lsl.w	r2, r3, lr
 8000508:	1880      	adds	r0, r0, r2
 800050a:	fa43 f305 	asr.w	r3, r3, r5
 800050e:	4159      	adcs	r1, r3
 8000510:	e00e      	b.n	8000530 <__adddf3+0xd0>
 8000512:	f1a5 0520 	sub.w	r5, r5, #32
 8000516:	f10e 0e20 	add.w	lr, lr, #32
 800051a:	2a01      	cmp	r2, #1
 800051c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000520:	bf28      	it	cs
 8000522:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000526:	fa43 f305 	asr.w	r3, r3, r5
 800052a:	18c0      	adds	r0, r0, r3
 800052c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	d507      	bpl.n	8000546 <__adddf3+0xe6>
 8000536:	f04f 0e00 	mov.w	lr, #0
 800053a:	f1dc 0c00 	rsbs	ip, ip, #0
 800053e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000542:	eb6e 0101 	sbc.w	r1, lr, r1
 8000546:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800054a:	d31b      	bcc.n	8000584 <__adddf3+0x124>
 800054c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000550:	d30c      	bcc.n	800056c <__adddf3+0x10c>
 8000552:	0849      	lsrs	r1, r1, #1
 8000554:	ea5f 0030 	movs.w	r0, r0, rrx
 8000558:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800055c:	f104 0401 	add.w	r4, r4, #1
 8000560:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000564:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000568:	f080 809a 	bcs.w	80006a0 <__adddf3+0x240>
 800056c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000570:	bf08      	it	eq
 8000572:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000576:	f150 0000 	adcs.w	r0, r0, #0
 800057a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057e:	ea41 0105 	orr.w	r1, r1, r5
 8000582:	bd30      	pop	{r4, r5, pc}
 8000584:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000588:	4140      	adcs	r0, r0
 800058a:	eb41 0101 	adc.w	r1, r1, r1
 800058e:	3c01      	subs	r4, #1
 8000590:	bf28      	it	cs
 8000592:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000596:	d2e9      	bcs.n	800056c <__adddf3+0x10c>
 8000598:	f091 0f00 	teq	r1, #0
 800059c:	bf04      	itt	eq
 800059e:	4601      	moveq	r1, r0
 80005a0:	2000      	moveq	r0, #0
 80005a2:	fab1 f381 	clz	r3, r1
 80005a6:	bf08      	it	eq
 80005a8:	3320      	addeq	r3, #32
 80005aa:	f1a3 030b 	sub.w	r3, r3, #11
 80005ae:	f1b3 0220 	subs.w	r2, r3, #32
 80005b2:	da0c      	bge.n	80005ce <__adddf3+0x16e>
 80005b4:	320c      	adds	r2, #12
 80005b6:	dd08      	ble.n	80005ca <__adddf3+0x16a>
 80005b8:	f102 0c14 	add.w	ip, r2, #20
 80005bc:	f1c2 020c 	rsb	r2, r2, #12
 80005c0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005c4:	fa21 f102 	lsr.w	r1, r1, r2
 80005c8:	e00c      	b.n	80005e4 <__adddf3+0x184>
 80005ca:	f102 0214 	add.w	r2, r2, #20
 80005ce:	bfd8      	it	le
 80005d0:	f1c2 0c20 	rsble	ip, r2, #32
 80005d4:	fa01 f102 	lsl.w	r1, r1, r2
 80005d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005dc:	bfdc      	itt	le
 80005de:	ea41 010c 	orrle.w	r1, r1, ip
 80005e2:	4090      	lslle	r0, r2
 80005e4:	1ae4      	subs	r4, r4, r3
 80005e6:	bfa2      	ittt	ge
 80005e8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005ec:	4329      	orrge	r1, r5
 80005ee:	bd30      	popge	{r4, r5, pc}
 80005f0:	ea6f 0404 	mvn.w	r4, r4
 80005f4:	3c1f      	subs	r4, #31
 80005f6:	da1c      	bge.n	8000632 <__adddf3+0x1d2>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc0e      	bgt.n	800061a <__adddf3+0x1ba>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0220 	rsb	r2, r4, #32
 8000604:	fa20 f004 	lsr.w	r0, r0, r4
 8000608:	fa01 f302 	lsl.w	r3, r1, r2
 800060c:	ea40 0003 	orr.w	r0, r0, r3
 8000610:	fa21 f304 	lsr.w	r3, r1, r4
 8000614:	ea45 0103 	orr.w	r1, r5, r3
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	f1c4 040c 	rsb	r4, r4, #12
 800061e:	f1c4 0220 	rsb	r2, r4, #32
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 f304 	lsl.w	r3, r1, r4
 800062a:	ea40 0003 	orr.w	r0, r0, r3
 800062e:	4629      	mov	r1, r5
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	fa21 f004 	lsr.w	r0, r1, r4
 8000636:	4629      	mov	r1, r5
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	f094 0f00 	teq	r4, #0
 800063e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000642:	bf06      	itte	eq
 8000644:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000648:	3401      	addeq	r4, #1
 800064a:	3d01      	subne	r5, #1
 800064c:	e74e      	b.n	80004ec <__adddf3+0x8c>
 800064e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000652:	bf18      	it	ne
 8000654:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000658:	d029      	beq.n	80006ae <__adddf3+0x24e>
 800065a:	ea94 0f05 	teq	r4, r5
 800065e:	bf08      	it	eq
 8000660:	ea90 0f02 	teqeq	r0, r2
 8000664:	d005      	beq.n	8000672 <__adddf3+0x212>
 8000666:	ea54 0c00 	orrs.w	ip, r4, r0
 800066a:	bf04      	itt	eq
 800066c:	4619      	moveq	r1, r3
 800066e:	4610      	moveq	r0, r2
 8000670:	bd30      	pop	{r4, r5, pc}
 8000672:	ea91 0f03 	teq	r1, r3
 8000676:	bf1e      	ittt	ne
 8000678:	2100      	movne	r1, #0
 800067a:	2000      	movne	r0, #0
 800067c:	bd30      	popne	{r4, r5, pc}
 800067e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000682:	d105      	bne.n	8000690 <__adddf3+0x230>
 8000684:	0040      	lsls	r0, r0, #1
 8000686:	4149      	adcs	r1, r1
 8000688:	bf28      	it	cs
 800068a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800068e:	bd30      	pop	{r4, r5, pc}
 8000690:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000694:	bf3c      	itt	cc
 8000696:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800069a:	bd30      	popcc	{r4, r5, pc}
 800069c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006a4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006a8:	f04f 0000 	mov.w	r0, #0
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006b2:	bf1a      	itte	ne
 80006b4:	4619      	movne	r1, r3
 80006b6:	4610      	movne	r0, r2
 80006b8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006bc:	bf1c      	itt	ne
 80006be:	460b      	movne	r3, r1
 80006c0:	4602      	movne	r2, r0
 80006c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006c6:	bf06      	itte	eq
 80006c8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006cc:	ea91 0f03 	teqeq	r1, r3
 80006d0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006d4:	bd30      	pop	{r4, r5, pc}
 80006d6:	bf00      	nop

080006d8 <__aeabi_ui2d>:
 80006d8:	f090 0f00 	teq	r0, #0
 80006dc:	bf04      	itt	eq
 80006de:	2100      	moveq	r1, #0
 80006e0:	4770      	bxeq	lr
 80006e2:	b530      	push	{r4, r5, lr}
 80006e4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ec:	f04f 0500 	mov.w	r5, #0
 80006f0:	f04f 0100 	mov.w	r1, #0
 80006f4:	e750      	b.n	8000598 <__adddf3+0x138>
 80006f6:	bf00      	nop

080006f8 <__aeabi_i2d>:
 80006f8:	f090 0f00 	teq	r0, #0
 80006fc:	bf04      	itt	eq
 80006fe:	2100      	moveq	r1, #0
 8000700:	4770      	bxeq	lr
 8000702:	b530      	push	{r4, r5, lr}
 8000704:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000708:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800070c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000710:	bf48      	it	mi
 8000712:	4240      	negmi	r0, r0
 8000714:	f04f 0100 	mov.w	r1, #0
 8000718:	e73e      	b.n	8000598 <__adddf3+0x138>
 800071a:	bf00      	nop

0800071c <__aeabi_f2d>:
 800071c:	0042      	lsls	r2, r0, #1
 800071e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000722:	ea4f 0131 	mov.w	r1, r1, rrx
 8000726:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800072a:	bf1f      	itttt	ne
 800072c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000730:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000734:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000738:	4770      	bxne	lr
 800073a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800073e:	bf08      	it	eq
 8000740:	4770      	bxeq	lr
 8000742:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000746:	bf04      	itt	eq
 8000748:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800074c:	4770      	bxeq	lr
 800074e:	b530      	push	{r4, r5, lr}
 8000750:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000754:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	e71c      	b.n	8000598 <__adddf3+0x138>
 800075e:	bf00      	nop

08000760 <__aeabi_ul2d>:
 8000760:	ea50 0201 	orrs.w	r2, r0, r1
 8000764:	bf08      	it	eq
 8000766:	4770      	bxeq	lr
 8000768:	b530      	push	{r4, r5, lr}
 800076a:	f04f 0500 	mov.w	r5, #0
 800076e:	e00a      	b.n	8000786 <__aeabi_l2d+0x16>

08000770 <__aeabi_l2d>:
 8000770:	ea50 0201 	orrs.w	r2, r0, r1
 8000774:	bf08      	it	eq
 8000776:	4770      	bxeq	lr
 8000778:	b530      	push	{r4, r5, lr}
 800077a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800077e:	d502      	bpl.n	8000786 <__aeabi_l2d+0x16>
 8000780:	4240      	negs	r0, r0
 8000782:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000786:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800078a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800078e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000792:	f43f aed8 	beq.w	8000546 <__adddf3+0xe6>
 8000796:	f04f 0203 	mov.w	r2, #3
 800079a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800079e:	bf18      	it	ne
 80007a0:	3203      	addne	r2, #3
 80007a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a6:	bf18      	it	ne
 80007a8:	3203      	addne	r2, #3
 80007aa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007ae:	f1c2 0320 	rsb	r3, r2, #32
 80007b2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007b6:	fa20 f002 	lsr.w	r0, r0, r2
 80007ba:	fa01 fe03 	lsl.w	lr, r1, r3
 80007be:	ea40 000e 	orr.w	r0, r0, lr
 80007c2:	fa21 f102 	lsr.w	r1, r1, r2
 80007c6:	4414      	add	r4, r2
 80007c8:	e6bd      	b.n	8000546 <__adddf3+0xe6>
 80007ca:	bf00      	nop

080007cc <__aeabi_d2f>:
 80007cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007d0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80007d4:	bf24      	itt	cs
 80007d6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80007da:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80007de:	d90d      	bls.n	80007fc <__aeabi_d2f+0x30>
 80007e0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80007e4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007e8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007ec:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80007f0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007f4:	bf08      	it	eq
 80007f6:	f020 0001 	biceq.w	r0, r0, #1
 80007fa:	4770      	bx	lr
 80007fc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000800:	d121      	bne.n	8000846 <__aeabi_d2f+0x7a>
 8000802:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000806:	bfbc      	itt	lt
 8000808:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800080c:	4770      	bxlt	lr
 800080e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000812:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000816:	f1c2 0218 	rsb	r2, r2, #24
 800081a:	f1c2 0c20 	rsb	ip, r2, #32
 800081e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000822:	fa20 f002 	lsr.w	r0, r0, r2
 8000826:	bf18      	it	ne
 8000828:	f040 0001 	orrne.w	r0, r0, #1
 800082c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000830:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000834:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000838:	ea40 000c 	orr.w	r0, r0, ip
 800083c:	fa23 f302 	lsr.w	r3, r3, r2
 8000840:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000844:	e7cc      	b.n	80007e0 <__aeabi_d2f+0x14>
 8000846:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800084a:	d107      	bne.n	800085c <__aeabi_d2f+0x90>
 800084c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000850:	bf1e      	ittt	ne
 8000852:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000856:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800085a:	4770      	bxne	lr
 800085c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000860:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000864:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop

0800086c <__aeabi_uldivmod>:
 800086c:	b953      	cbnz	r3, 8000884 <__aeabi_uldivmod+0x18>
 800086e:	b94a      	cbnz	r2, 8000884 <__aeabi_uldivmod+0x18>
 8000870:	2900      	cmp	r1, #0
 8000872:	bf08      	it	eq
 8000874:	2800      	cmpeq	r0, #0
 8000876:	bf1c      	itt	ne
 8000878:	f04f 31ff 	movne.w	r1, #4294967295
 800087c:	f04f 30ff 	movne.w	r0, #4294967295
 8000880:	f000 b96a 	b.w	8000b58 <__aeabi_idiv0>
 8000884:	f1ad 0c08 	sub.w	ip, sp, #8
 8000888:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800088c:	f000 f806 	bl	800089c <__udivmoddi4>
 8000890:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000894:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000898:	b004      	add	sp, #16
 800089a:	4770      	bx	lr

0800089c <__udivmoddi4>:
 800089c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008a0:	9d08      	ldr	r5, [sp, #32]
 80008a2:	460c      	mov	r4, r1
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d14e      	bne.n	8000946 <__udivmoddi4+0xaa>
 80008a8:	4694      	mov	ip, r2
 80008aa:	458c      	cmp	ip, r1
 80008ac:	4686      	mov	lr, r0
 80008ae:	fab2 f282 	clz	r2, r2
 80008b2:	d962      	bls.n	800097a <__udivmoddi4+0xde>
 80008b4:	b14a      	cbz	r2, 80008ca <__udivmoddi4+0x2e>
 80008b6:	f1c2 0320 	rsb	r3, r2, #32
 80008ba:	4091      	lsls	r1, r2
 80008bc:	fa20 f303 	lsr.w	r3, r0, r3
 80008c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80008c4:	4319      	orrs	r1, r3
 80008c6:	fa00 fe02 	lsl.w	lr, r0, r2
 80008ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008ce:	fa1f f68c 	uxth.w	r6, ip
 80008d2:	fbb1 f4f7 	udiv	r4, r1, r7
 80008d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008da:	fb07 1114 	mls	r1, r7, r4, r1
 80008de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008e2:	fb04 f106 	mul.w	r1, r4, r6
 80008e6:	4299      	cmp	r1, r3
 80008e8:	d90a      	bls.n	8000900 <__udivmoddi4+0x64>
 80008ea:	eb1c 0303 	adds.w	r3, ip, r3
 80008ee:	f104 30ff 	add.w	r0, r4, #4294967295
 80008f2:	f080 8112 	bcs.w	8000b1a <__udivmoddi4+0x27e>
 80008f6:	4299      	cmp	r1, r3
 80008f8:	f240 810f 	bls.w	8000b1a <__udivmoddi4+0x27e>
 80008fc:	3c02      	subs	r4, #2
 80008fe:	4463      	add	r3, ip
 8000900:	1a59      	subs	r1, r3, r1
 8000902:	fa1f f38e 	uxth.w	r3, lr
 8000906:	fbb1 f0f7 	udiv	r0, r1, r7
 800090a:	fb07 1110 	mls	r1, r7, r0, r1
 800090e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000912:	fb00 f606 	mul.w	r6, r0, r6
 8000916:	429e      	cmp	r6, r3
 8000918:	d90a      	bls.n	8000930 <__udivmoddi4+0x94>
 800091a:	eb1c 0303 	adds.w	r3, ip, r3
 800091e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000922:	f080 80fc 	bcs.w	8000b1e <__udivmoddi4+0x282>
 8000926:	429e      	cmp	r6, r3
 8000928:	f240 80f9 	bls.w	8000b1e <__udivmoddi4+0x282>
 800092c:	4463      	add	r3, ip
 800092e:	3802      	subs	r0, #2
 8000930:	1b9b      	subs	r3, r3, r6
 8000932:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000936:	2100      	movs	r1, #0
 8000938:	b11d      	cbz	r5, 8000942 <__udivmoddi4+0xa6>
 800093a:	40d3      	lsrs	r3, r2
 800093c:	2200      	movs	r2, #0
 800093e:	e9c5 3200 	strd	r3, r2, [r5]
 8000942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000946:	428b      	cmp	r3, r1
 8000948:	d905      	bls.n	8000956 <__udivmoddi4+0xba>
 800094a:	b10d      	cbz	r5, 8000950 <__udivmoddi4+0xb4>
 800094c:	e9c5 0100 	strd	r0, r1, [r5]
 8000950:	2100      	movs	r1, #0
 8000952:	4608      	mov	r0, r1
 8000954:	e7f5      	b.n	8000942 <__udivmoddi4+0xa6>
 8000956:	fab3 f183 	clz	r1, r3
 800095a:	2900      	cmp	r1, #0
 800095c:	d146      	bne.n	80009ec <__udivmoddi4+0x150>
 800095e:	42a3      	cmp	r3, r4
 8000960:	d302      	bcc.n	8000968 <__udivmoddi4+0xcc>
 8000962:	4290      	cmp	r0, r2
 8000964:	f0c0 80f0 	bcc.w	8000b48 <__udivmoddi4+0x2ac>
 8000968:	1a86      	subs	r6, r0, r2
 800096a:	eb64 0303 	sbc.w	r3, r4, r3
 800096e:	2001      	movs	r0, #1
 8000970:	2d00      	cmp	r5, #0
 8000972:	d0e6      	beq.n	8000942 <__udivmoddi4+0xa6>
 8000974:	e9c5 6300 	strd	r6, r3, [r5]
 8000978:	e7e3      	b.n	8000942 <__udivmoddi4+0xa6>
 800097a:	2a00      	cmp	r2, #0
 800097c:	f040 8090 	bne.w	8000aa0 <__udivmoddi4+0x204>
 8000980:	eba1 040c 	sub.w	r4, r1, ip
 8000984:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000988:	fa1f f78c 	uxth.w	r7, ip
 800098c:	2101      	movs	r1, #1
 800098e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000992:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000996:	fb08 4416 	mls	r4, r8, r6, r4
 800099a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800099e:	fb07 f006 	mul.w	r0, r7, r6
 80009a2:	4298      	cmp	r0, r3
 80009a4:	d908      	bls.n	80009b8 <__udivmoddi4+0x11c>
 80009a6:	eb1c 0303 	adds.w	r3, ip, r3
 80009aa:	f106 34ff 	add.w	r4, r6, #4294967295
 80009ae:	d202      	bcs.n	80009b6 <__udivmoddi4+0x11a>
 80009b0:	4298      	cmp	r0, r3
 80009b2:	f200 80cd 	bhi.w	8000b50 <__udivmoddi4+0x2b4>
 80009b6:	4626      	mov	r6, r4
 80009b8:	1a1c      	subs	r4, r3, r0
 80009ba:	fa1f f38e 	uxth.w	r3, lr
 80009be:	fbb4 f0f8 	udiv	r0, r4, r8
 80009c2:	fb08 4410 	mls	r4, r8, r0, r4
 80009c6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009ca:	fb00 f707 	mul.w	r7, r0, r7
 80009ce:	429f      	cmp	r7, r3
 80009d0:	d908      	bls.n	80009e4 <__udivmoddi4+0x148>
 80009d2:	eb1c 0303 	adds.w	r3, ip, r3
 80009d6:	f100 34ff 	add.w	r4, r0, #4294967295
 80009da:	d202      	bcs.n	80009e2 <__udivmoddi4+0x146>
 80009dc:	429f      	cmp	r7, r3
 80009de:	f200 80b0 	bhi.w	8000b42 <__udivmoddi4+0x2a6>
 80009e2:	4620      	mov	r0, r4
 80009e4:	1bdb      	subs	r3, r3, r7
 80009e6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009ea:	e7a5      	b.n	8000938 <__udivmoddi4+0x9c>
 80009ec:	f1c1 0620 	rsb	r6, r1, #32
 80009f0:	408b      	lsls	r3, r1
 80009f2:	fa22 f706 	lsr.w	r7, r2, r6
 80009f6:	431f      	orrs	r7, r3
 80009f8:	fa20 fc06 	lsr.w	ip, r0, r6
 80009fc:	fa04 f301 	lsl.w	r3, r4, r1
 8000a00:	ea43 030c 	orr.w	r3, r3, ip
 8000a04:	40f4      	lsrs	r4, r6
 8000a06:	fa00 f801 	lsl.w	r8, r0, r1
 8000a0a:	0c38      	lsrs	r0, r7, #16
 8000a0c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a10:	fbb4 fef0 	udiv	lr, r4, r0
 8000a14:	fa1f fc87 	uxth.w	ip, r7
 8000a18:	fb00 441e 	mls	r4, r0, lr, r4
 8000a1c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a20:	fb0e f90c 	mul.w	r9, lr, ip
 8000a24:	45a1      	cmp	r9, r4
 8000a26:	fa02 f201 	lsl.w	r2, r2, r1
 8000a2a:	d90a      	bls.n	8000a42 <__udivmoddi4+0x1a6>
 8000a2c:	193c      	adds	r4, r7, r4
 8000a2e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000a32:	f080 8084 	bcs.w	8000b3e <__udivmoddi4+0x2a2>
 8000a36:	45a1      	cmp	r9, r4
 8000a38:	f240 8081 	bls.w	8000b3e <__udivmoddi4+0x2a2>
 8000a3c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a40:	443c      	add	r4, r7
 8000a42:	eba4 0409 	sub.w	r4, r4, r9
 8000a46:	fa1f f983 	uxth.w	r9, r3
 8000a4a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a4e:	fb00 4413 	mls	r4, r0, r3, r4
 8000a52:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a56:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a5a:	45a4      	cmp	ip, r4
 8000a5c:	d907      	bls.n	8000a6e <__udivmoddi4+0x1d2>
 8000a5e:	193c      	adds	r4, r7, r4
 8000a60:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a64:	d267      	bcs.n	8000b36 <__udivmoddi4+0x29a>
 8000a66:	45a4      	cmp	ip, r4
 8000a68:	d965      	bls.n	8000b36 <__udivmoddi4+0x29a>
 8000a6a:	3b02      	subs	r3, #2
 8000a6c:	443c      	add	r4, r7
 8000a6e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a72:	fba0 9302 	umull	r9, r3, r0, r2
 8000a76:	eba4 040c 	sub.w	r4, r4, ip
 8000a7a:	429c      	cmp	r4, r3
 8000a7c:	46ce      	mov	lr, r9
 8000a7e:	469c      	mov	ip, r3
 8000a80:	d351      	bcc.n	8000b26 <__udivmoddi4+0x28a>
 8000a82:	d04e      	beq.n	8000b22 <__udivmoddi4+0x286>
 8000a84:	b155      	cbz	r5, 8000a9c <__udivmoddi4+0x200>
 8000a86:	ebb8 030e 	subs.w	r3, r8, lr
 8000a8a:	eb64 040c 	sbc.w	r4, r4, ip
 8000a8e:	fa04 f606 	lsl.w	r6, r4, r6
 8000a92:	40cb      	lsrs	r3, r1
 8000a94:	431e      	orrs	r6, r3
 8000a96:	40cc      	lsrs	r4, r1
 8000a98:	e9c5 6400 	strd	r6, r4, [r5]
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	e750      	b.n	8000942 <__udivmoddi4+0xa6>
 8000aa0:	f1c2 0320 	rsb	r3, r2, #32
 8000aa4:	fa20 f103 	lsr.w	r1, r0, r3
 8000aa8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aac:	fa24 f303 	lsr.w	r3, r4, r3
 8000ab0:	4094      	lsls	r4, r2
 8000ab2:	430c      	orrs	r4, r1
 8000ab4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ab8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000abc:	fa1f f78c 	uxth.w	r7, ip
 8000ac0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ac4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ac8:	0c23      	lsrs	r3, r4, #16
 8000aca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ace:	fb00 f107 	mul.w	r1, r0, r7
 8000ad2:	4299      	cmp	r1, r3
 8000ad4:	d908      	bls.n	8000ae8 <__udivmoddi4+0x24c>
 8000ad6:	eb1c 0303 	adds.w	r3, ip, r3
 8000ada:	f100 36ff 	add.w	r6, r0, #4294967295
 8000ade:	d22c      	bcs.n	8000b3a <__udivmoddi4+0x29e>
 8000ae0:	4299      	cmp	r1, r3
 8000ae2:	d92a      	bls.n	8000b3a <__udivmoddi4+0x29e>
 8000ae4:	3802      	subs	r0, #2
 8000ae6:	4463      	add	r3, ip
 8000ae8:	1a5b      	subs	r3, r3, r1
 8000aea:	b2a4      	uxth	r4, r4
 8000aec:	fbb3 f1f8 	udiv	r1, r3, r8
 8000af0:	fb08 3311 	mls	r3, r8, r1, r3
 8000af4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000af8:	fb01 f307 	mul.w	r3, r1, r7
 8000afc:	42a3      	cmp	r3, r4
 8000afe:	d908      	bls.n	8000b12 <__udivmoddi4+0x276>
 8000b00:	eb1c 0404 	adds.w	r4, ip, r4
 8000b04:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b08:	d213      	bcs.n	8000b32 <__udivmoddi4+0x296>
 8000b0a:	42a3      	cmp	r3, r4
 8000b0c:	d911      	bls.n	8000b32 <__udivmoddi4+0x296>
 8000b0e:	3902      	subs	r1, #2
 8000b10:	4464      	add	r4, ip
 8000b12:	1ae4      	subs	r4, r4, r3
 8000b14:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b18:	e739      	b.n	800098e <__udivmoddi4+0xf2>
 8000b1a:	4604      	mov	r4, r0
 8000b1c:	e6f0      	b.n	8000900 <__udivmoddi4+0x64>
 8000b1e:	4608      	mov	r0, r1
 8000b20:	e706      	b.n	8000930 <__udivmoddi4+0x94>
 8000b22:	45c8      	cmp	r8, r9
 8000b24:	d2ae      	bcs.n	8000a84 <__udivmoddi4+0x1e8>
 8000b26:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b2a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b2e:	3801      	subs	r0, #1
 8000b30:	e7a8      	b.n	8000a84 <__udivmoddi4+0x1e8>
 8000b32:	4631      	mov	r1, r6
 8000b34:	e7ed      	b.n	8000b12 <__udivmoddi4+0x276>
 8000b36:	4603      	mov	r3, r0
 8000b38:	e799      	b.n	8000a6e <__udivmoddi4+0x1d2>
 8000b3a:	4630      	mov	r0, r6
 8000b3c:	e7d4      	b.n	8000ae8 <__udivmoddi4+0x24c>
 8000b3e:	46d6      	mov	lr, sl
 8000b40:	e77f      	b.n	8000a42 <__udivmoddi4+0x1a6>
 8000b42:	4463      	add	r3, ip
 8000b44:	3802      	subs	r0, #2
 8000b46:	e74d      	b.n	80009e4 <__udivmoddi4+0x148>
 8000b48:	4606      	mov	r6, r0
 8000b4a:	4623      	mov	r3, r4
 8000b4c:	4608      	mov	r0, r1
 8000b4e:	e70f      	b.n	8000970 <__udivmoddi4+0xd4>
 8000b50:	3e02      	subs	r6, #2
 8000b52:	4463      	add	r3, ip
 8000b54:	e730      	b.n	80009b8 <__udivmoddi4+0x11c>
 8000b56:	bf00      	nop

08000b58 <__aeabi_idiv0>:
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop

08000b5c <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr

08000b6a <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	b083      	sub	sp, #12
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
 8000b72:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
	...

08000b90 <uint16_to_float32>:
//	}
// SEND PRINTF TO UART END



void uint16_to_float32(const uint16_t *input, float32_t *output, size_t length) {
 8000b90:	b480      	push	{r7}
 8000b92:	b087      	sub	sp, #28
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
    for (size_t i = 0; i < length; i++) {
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]
 8000ba0:	e021      	b.n	8000be6 <uint16_to_float32+0x56>
        output[i] = (float32_t)input[i];  // Cast uint16_t to float
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	68fa      	ldr	r2, [r7, #12]
 8000ba8:	4413      	add	r3, r2
 8000baa:	8819      	ldrh	r1, [r3, #0]
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	68ba      	ldr	r2, [r7, #8]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	ee07 1a90 	vmov	s15, r1
 8000bb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bbc:	edc3 7a00 	vstr	s15, [r3]
        output[i] -= 1000;
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	68ba      	ldr	r2, [r7, #8]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	edd3 7a00 	vldr	s15, [r3]
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	009b      	lsls	r3, r3, #2
 8000bd0:	68ba      	ldr	r2, [r7, #8]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8000bfc <uint16_to_float32+0x6c>
 8000bd8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000bdc:	edc3 7a00 	vstr	s15, [r3]
    for (size_t i = 0; i < length; i++) {
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	3301      	adds	r3, #1
 8000be4:	617b      	str	r3, [r7, #20]
 8000be6:	697a      	ldr	r2, [r7, #20]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	429a      	cmp	r2, r3
 8000bec:	d3d9      	bcc.n	8000ba2 <uint16_to_float32+0x12>
    }
}
 8000bee:	bf00      	nop
 8000bf0:	bf00      	nop
 8000bf2:	371c      	adds	r7, #28
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	447a0000 	.word	0x447a0000

08000c00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c04:	f002 f8e8 	bl	8002dd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c08:	f000 f882 	bl	8000d10 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000c0c:	f000 f8f2 	bl	8000df4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c10:	f000 fde2 	bl	80017d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c14:	f000 fd52 	bl	80016bc <MX_DMA_Init>
  MX_CRC_Init();
 8000c18:	f000 f96a 	bl	8000ef0 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000c1c:	f000 f9a6 	bl	8000f6c <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 8000c20:	f000 f9d6 	bl	8000fd0 <MX_DSIHOST_DSI_Init>
  MX_FMC_Init();
 8000c24:	f000 fd88 	bl	8001738 <MX_FMC_Init>
  MX_I2C1_Init();
 8000c28:	f000 fad2 	bl	80011d0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000c2c:	f000 fafe 	bl	800122c <MX_I2C2_Init>
  MX_LTDC_Init();
 8000c30:	f000 fb2a 	bl	8001288 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8000c34:	f000 fba6 	bl	8001384 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 8000c38:	f000 fbd0 	bl	80013dc <MX_SAI1_Init>
  MX_SDIO_SD_Init();
 8000c3c:	f000 fc2c 	bl	8001498 <MX_SDIO_SD_Init>
  MX_TIM1_Init();
 8000c40:	f000 fc4c 	bl	80014dc <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000c44:	f000 fce6 	bl	8001614 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8000c48:	f000 fd0e 	bl	8001668 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8000c4c:	f00a f846 	bl	800acdc <MX_FATFS_Init>
  MX_ADC1_Init();
 8000c50:	f000 f8fc 	bl	8000e4c <MX_ADC1_Init>
  MX_TIM2_Init();
 8000c54:	f000 fc92 	bl	800157c <MX_TIM2_Init>
  MX_DAC_Init();
 8000c58:	f000 f95e 	bl	8000f18 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */

  arm_rfft_fast_init_f32(&fft_instance, N);
 8000c5c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c60:	481c      	ldr	r0, [pc, #112]	@ (8000cd4 <main+0xd4>)
 8000c62:	f00e f80f 	bl	800ec84 <arm_rfft_fast_init_f32>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c66:	f00a fb1d 	bl	800b2a4 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of ADCHalfSem */
  ADCHalfSemHandle = osSemaphoreNew(1, 0, &ADCHalfSem_attributes);
 8000c6a:	4a1b      	ldr	r2, [pc, #108]	@ (8000cd8 <main+0xd8>)
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	2001      	movs	r0, #1
 8000c70:	f00a fc2b 	bl	800b4ca <osSemaphoreNew>
 8000c74:	4603      	mov	r3, r0
 8000c76:	4a19      	ldr	r2, [pc, #100]	@ (8000cdc <main+0xdc>)
 8000c78:	6013      	str	r3, [r2, #0]

  /* creation of ADCFullSem */
  ADCFullSemHandle = osSemaphoreNew(1, 0, &ADCFullSem_attributes);
 8000c7a:	4a19      	ldr	r2, [pc, #100]	@ (8000ce0 <main+0xe0>)
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	2001      	movs	r0, #1
 8000c80:	f00a fc23 	bl	800b4ca <osSemaphoreNew>
 8000c84:	4603      	mov	r3, r0
 8000c86:	4a17      	ldr	r2, [pc, #92]	@ (8000ce4 <main+0xe4>)
 8000c88:	6013      	str	r3, [r2, #0]

  /* creation of FFTHalfSem */
  FFTHalfSemHandle = osSemaphoreNew(1, 0, &FFTHalfSem_attributes);
 8000c8a:	4a17      	ldr	r2, [pc, #92]	@ (8000ce8 <main+0xe8>)
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	2001      	movs	r0, #1
 8000c90:	f00a fc1b 	bl	800b4ca <osSemaphoreNew>
 8000c94:	4603      	mov	r3, r0
 8000c96:	4a15      	ldr	r2, [pc, #84]	@ (8000cec <main+0xec>)
 8000c98:	6013      	str	r3, [r2, #0]

  /* creation of FFTFullSem */
  FFTFullSemHandle = osSemaphoreNew(1, 0, &FFTFullSem_attributes);
 8000c9a:	4a15      	ldr	r2, [pc, #84]	@ (8000cf0 <main+0xf0>)
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	f00a fc13 	bl	800b4ca <osSemaphoreNew>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	4a13      	ldr	r2, [pc, #76]	@ (8000cf4 <main+0xf4>)
 8000ca8:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000caa:	4a13      	ldr	r2, [pc, #76]	@ (8000cf8 <main+0xf8>)
 8000cac:	2100      	movs	r1, #0
 8000cae:	4813      	ldr	r0, [pc, #76]	@ (8000cfc <main+0xfc>)
 8000cb0:	f00a fb79 	bl	800b3a6 <osThreadNew>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	4a12      	ldr	r2, [pc, #72]	@ (8000d00 <main+0x100>)
 8000cb8:	6013      	str	r3, [r2, #0]

  /* creation of FFTTask */
  FFTTaskHandle = osThreadNew(StartFFTTask, NULL, &FFTTask_attributes);
 8000cba:	4a12      	ldr	r2, [pc, #72]	@ (8000d04 <main+0x104>)
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4812      	ldr	r0, [pc, #72]	@ (8000d08 <main+0x108>)
 8000cc0:	f00a fb71 	bl	800b3a6 <osThreadNew>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	4a11      	ldr	r2, [pc, #68]	@ (8000d0c <main+0x10c>)
 8000cc8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000cca:	f00a fb31 	bl	800b330 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cce:	bf00      	nop
 8000cd0:	e7fd      	b.n	8000cce <main+0xce>
 8000cd2:	bf00      	nop
 8000cd4:	20001670 	.word	0x20001670
 8000cd8:	08010998 	.word	0x08010998
 8000cdc:	20000660 	.word	0x20000660
 8000ce0:	080109a8 	.word	0x080109a8
 8000ce4:	20000664 	.word	0x20000664
 8000ce8:	080109b8 	.word	0x080109b8
 8000cec:	20000668 	.word	0x20000668
 8000cf0:	080109c8 	.word	0x080109c8
 8000cf4:	2000066c 	.word	0x2000066c
 8000cf8:	08010950 	.word	0x08010950
 8000cfc:	08001bc9 	.word	0x08001bc9
 8000d00:	20000658 	.word	0x20000658
 8000d04:	08010974 	.word	0x08010974
 8000d08:	08001ce1 	.word	0x08001ce1
 8000d0c:	2000065c 	.word	0x2000065c

08000d10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b094      	sub	sp, #80	@ 0x50
 8000d14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d16:	f107 031c 	add.w	r3, r7, #28
 8000d1a:	2234      	movs	r2, #52	@ 0x34
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f00e ff94 	bl	800fc4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d24:	f107 0308 	add.w	r3, r7, #8
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d34:	2300      	movs	r3, #0
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	4b2c      	ldr	r3, [pc, #176]	@ (8000dec <SystemClock_Config+0xdc>)
 8000d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d3c:	4a2b      	ldr	r2, [pc, #172]	@ (8000dec <SystemClock_Config+0xdc>)
 8000d3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d42:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d44:	4b29      	ldr	r3, [pc, #164]	@ (8000dec <SystemClock_Config+0xdc>)
 8000d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d4c:	607b      	str	r3, [r7, #4]
 8000d4e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d50:	2300      	movs	r3, #0
 8000d52:	603b      	str	r3, [r7, #0]
 8000d54:	4b26      	ldr	r3, [pc, #152]	@ (8000df0 <SystemClock_Config+0xe0>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a25      	ldr	r2, [pc, #148]	@ (8000df0 <SystemClock_Config+0xe0>)
 8000d5a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000d5e:	6013      	str	r3, [r2, #0]
 8000d60:	4b23      	ldr	r3, [pc, #140]	@ (8000df0 <SystemClock_Config+0xe0>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d68:	603b      	str	r3, [r7, #0]
 8000d6a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d70:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d74:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d76:	2302      	movs	r3, #2
 8000d78:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d7a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000d7e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d80:	2304      	movs	r3, #4
 8000d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000d84:	23b4      	movs	r3, #180	@ 0xb4
 8000d86:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8000d8c:	2306      	movs	r3, #6
 8000d8e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 6;
 8000d90:	2306      	movs	r3, #6
 8000d92:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d94:	f107 031c 	add.w	r3, r7, #28
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f005 fea3 	bl	8006ae4 <HAL_RCC_OscConfig>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000da4:	f001 f99e 	bl	80020e4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000da8:	f005 f8fa 	bl	8005fa0 <HAL_PWREx_EnableOverDrive>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000db2:	f001 f997 	bl	80020e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000db6:	230f      	movs	r3, #15
 8000db8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000dc2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000dc6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000dc8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dcc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000dce:	f107 0308 	add.w	r3, r7, #8
 8000dd2:	2105      	movs	r1, #5
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f005 f9f5 	bl	80061c4 <HAL_RCC_ClockConfig>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000de0:	f001 f980 	bl	80020e4 <Error_Handler>
  }
}
 8000de4:	bf00      	nop
 8000de6:	3750      	adds	r7, #80	@ 0x50
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40023800 	.word	0x40023800
 8000df0:	40007000 	.word	0x40007000

08000df4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b090      	sub	sp, #64	@ 0x40
 8000df8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dfa:	1d3b      	adds	r3, r7, #4
 8000dfc:	223c      	movs	r2, #60	@ 0x3c
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4618      	mov	r0, r3
 8000e02:	f00e ff23 	bl	800fc4c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI_PLLSAI|RCC_PERIPHCLK_SDIO
 8000e06:	f44f 73c6 	mov.w	r3, #396	@ 0x18c
 8000e0a:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_CLK48|RCC_PERIPHCLK_LTDC;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 144;
 8000e0c:	2390      	movs	r3, #144	@ 0x90
 8000e0e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000e10:	2302      	movs	r3, #2
 8000e12:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000e14:	2302      	movs	r3, #2
 8000e16:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV6;
 8000e18:	2306      	movs	r3, #6
 8000e1a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8000e20:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 8000e26:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000e2a:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e30:	1d3b      	adds	r3, r7, #4
 8000e32:	4618      	mov	r0, r3
 8000e34:	f005 fc18 	bl	8006668 <HAL_RCCEx_PeriphCLKConfig>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8000e3e:	f001 f951 	bl	80020e4 <Error_Handler>
  }
}
 8000e42:	bf00      	nop
 8000e44:	3740      	adds	r7, #64	@ 0x40
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
	...

08000e4c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e52:	463b      	mov	r3, r7
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e5e:	4b22      	ldr	r3, [pc, #136]	@ (8000ee8 <MX_ADC1_Init+0x9c>)
 8000e60:	4a22      	ldr	r2, [pc, #136]	@ (8000eec <MX_ADC1_Init+0xa0>)
 8000e62:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e64:	4b20      	ldr	r3, [pc, #128]	@ (8000ee8 <MX_ADC1_Init+0x9c>)
 8000e66:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000e6a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e6c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ee8 <MX_ADC1_Init+0x9c>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000e72:	4b1d      	ldr	r3, [pc, #116]	@ (8000ee8 <MX_ADC1_Init+0x9c>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e78:	4b1b      	ldr	r3, [pc, #108]	@ (8000ee8 <MX_ADC1_Init+0x9c>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e7e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ee8 <MX_ADC1_Init+0x9c>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000e86:	4b18      	ldr	r3, [pc, #96]	@ (8000ee8 <MX_ADC1_Init+0x9c>)
 8000e88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000e8c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000e8e:	4b16      	ldr	r3, [pc, #88]	@ (8000ee8 <MX_ADC1_Init+0x9c>)
 8000e90:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000e94:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e96:	4b14      	ldr	r3, [pc, #80]	@ (8000ee8 <MX_ADC1_Init+0x9c>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e9c:	4b12      	ldr	r3, [pc, #72]	@ (8000ee8 <MX_ADC1_Init+0x9c>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ea2:	4b11      	ldr	r3, [pc, #68]	@ (8000ee8 <MX_ADC1_Init+0x9c>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eaa:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee8 <MX_ADC1_Init+0x9c>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000eb0:	480d      	ldr	r0, [pc, #52]	@ (8000ee8 <MX_ADC1_Init+0x9c>)
 8000eb2:	f001 fff7 	bl	8002ea4 <HAL_ADC_Init>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000ebc:	f001 f912 	bl	80020e4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000ec0:	230f      	movs	r3, #15
 8000ec2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ecc:	463b      	mov	r3, r7
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4805      	ldr	r0, [pc, #20]	@ (8000ee8 <MX_ADC1_Init+0x9c>)
 8000ed2:	f002 f945 	bl	8003160 <HAL_ADC_ConfigChannel>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000edc:	f001 f902 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ee0:	bf00      	nop
 8000ee2:	3710      	adds	r7, #16
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	2000007c 	.word	0x2000007c
 8000eec:	40012000 	.word	0x40012000

08000ef0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000ef4:	4b06      	ldr	r3, [pc, #24]	@ (8000f10 <MX_CRC_Init+0x20>)
 8000ef6:	4a07      	ldr	r2, [pc, #28]	@ (8000f14 <MX_CRC_Init+0x24>)
 8000ef8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000efa:	4805      	ldr	r0, [pc, #20]	@ (8000f10 <MX_CRC_Init+0x20>)
 8000efc:	f002 fcc2 	bl	8003884 <HAL_CRC_Init>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000f06:	f001 f8ed 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000124 	.word	0x20000124
 8000f14:	40023000 	.word	0x40023000

08000f18 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000f1e:	463b      	mov	r3, r7
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000f26:	4b0f      	ldr	r3, [pc, #60]	@ (8000f64 <MX_DAC_Init+0x4c>)
 8000f28:	4a0f      	ldr	r2, [pc, #60]	@ (8000f68 <MX_DAC_Init+0x50>)
 8000f2a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000f2c:	480d      	ldr	r0, [pc, #52]	@ (8000f64 <MX_DAC_Init+0x4c>)
 8000f2e:	f002 fcc5 	bl	80038bc <HAL_DAC_Init>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000f38:	f001 f8d4 	bl	80020e4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000f3c:	2324      	movs	r3, #36	@ 0x24
 8000f3e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000f40:	2300      	movs	r3, #0
 8000f42:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000f44:	463b      	mov	r3, r7
 8000f46:	2200      	movs	r2, #0
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4806      	ldr	r0, [pc, #24]	@ (8000f64 <MX_DAC_Init+0x4c>)
 8000f4c:	f002 fd38 	bl	80039c0 <HAL_DAC_ConfigChannel>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000f56:	f001 f8c5 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	2000012c 	.word	0x2000012c
 8000f68:	40007400 	.word	0x40007400

08000f6c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000f70:	4b15      	ldr	r3, [pc, #84]	@ (8000fc8 <MX_DMA2D_Init+0x5c>)
 8000f72:	4a16      	ldr	r2, [pc, #88]	@ (8000fcc <MX_DMA2D_Init+0x60>)
 8000f74:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000f76:	4b14      	ldr	r3, [pc, #80]	@ (8000fc8 <MX_DMA2D_Init+0x5c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000f7c:	4b12      	ldr	r3, [pc, #72]	@ (8000fc8 <MX_DMA2D_Init+0x5c>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000f82:	4b11      	ldr	r3, [pc, #68]	@ (8000fc8 <MX_DMA2D_Init+0x5c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000f88:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc8 <MX_DMA2D_Init+0x5c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc8 <MX_DMA2D_Init+0x5c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000f94:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc8 <MX_DMA2D_Init+0x5c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc8 <MX_DMA2D_Init+0x5c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000fa0:	4809      	ldr	r0, [pc, #36]	@ (8000fc8 <MX_DMA2D_Init+0x5c>)
 8000fa2:	f003 f97f 	bl	80042a4 <HAL_DMA2D_Init>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000fac:	f001 f89a 	bl	80020e4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	4805      	ldr	r0, [pc, #20]	@ (8000fc8 <MX_DMA2D_Init+0x5c>)
 8000fb4:	f003 fad0 	bl	8004558 <HAL_DMA2D_ConfigLayer>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000fbe:	f001 f891 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	200001a0 	.word	0x200001a0
 8000fcc:	4002b000 	.word	0x4002b000

08000fd0 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b0aa      	sub	sp, #168	@ 0xa8
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8000fd6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000fe2:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000fe6:	2224      	movs	r2, #36	@ 0x24
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f00e fe2e 	bl	800fc4c <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000ff0:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
 8001000:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 8001002:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001006:	2234      	movs	r2, #52	@ 0x34
 8001008:	2100      	movs	r1, #0
 800100a:	4618      	mov	r0, r3
 800100c:	f00e fe1e 	bl	800fc4c <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8001010:	463b      	mov	r3, r7
 8001012:	222c      	movs	r2, #44	@ 0x2c
 8001014:	2100      	movs	r1, #0
 8001016:	4618      	mov	r0, r3
 8001018:	f00e fe18 	bl	800fc4c <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 800101c:	4b6a      	ldr	r3, [pc, #424]	@ (80011c8 <MX_DSIHOST_DSI_Init+0x1f8>)
 800101e:	4a6b      	ldr	r2, [pc, #428]	@ (80011cc <MX_DSIHOST_DSI_Init+0x1fc>)
 8001020:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8001022:	4b69      	ldr	r3, [pc, #420]	@ (80011c8 <MX_DSIHOST_DSI_Init+0x1f8>)
 8001024:	2200      	movs	r2, #0
 8001026:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8001028:	4b67      	ldr	r3, [pc, #412]	@ (80011c8 <MX_DSIHOST_DSI_Init+0x1f8>)
 800102a:	2204      	movs	r2, #4
 800102c:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 800102e:	4b66      	ldr	r3, [pc, #408]	@ (80011c8 <MX_DSIHOST_DSI_Init+0x1f8>)
 8001030:	2201      	movs	r2, #1
 8001032:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 125;
 8001034:	237d      	movs	r3, #125	@ 0x7d
 8001036:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV2;
 800103a:	2302      	movs	r3, #2
 800103c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8001040:	2300      	movs	r3, #0
 8001042:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8001046:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800104a:	4619      	mov	r1, r3
 800104c:	485e      	ldr	r0, [pc, #376]	@ (80011c8 <MX_DSIHOST_DSI_Init+0x1f8>)
 800104e:	f003 fb15 	bl	800467c <HAL_DSI_Init>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 8001058:	f001 f844 	bl	80020e4 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 800105c:	2301      	movs	r3, #1
 800105e:	67bb      	str	r3, [r7, #120]	@ 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	67fb      	str	r3, [r7, #124]	@ 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 8001070:	2300      	movs	r3, #0
 8001072:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 800107c:	2300      	movs	r3, #0
 800107e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  HostTimeouts.BTATimeout = 0;
 8001088:	2300      	movs	r3, #0
 800108a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 800108e:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001092:	4619      	mov	r1, r3
 8001094:	484c      	ldr	r0, [pc, #304]	@ (80011c8 <MX_DSIHOST_DSI_Init+0x1f8>)
 8001096:	f004 f805 	bl	80050a4 <HAL_DSI_ConfigHostTimeouts>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 80010a0:	f001 f820 	bl	80020e4 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 80010a4:	231c      	movs	r3, #28
 80010a6:	663b      	str	r3, [r7, #96]	@ 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 80010a8:	2321      	movs	r3, #33	@ 0x21
 80010aa:	667b      	str	r3, [r7, #100]	@ 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 80010ac:	230f      	movs	r3, #15
 80010ae:	66bb      	str	r3, [r7, #104]	@ 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 80010b0:	2319      	movs	r3, #25
 80010b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	673b      	str	r3, [r7, #112]	@ 0x70
  PhyTimings.StopWaitTime = 10;
 80010b8:	230a      	movs	r3, #10
 80010ba:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 80010bc:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80010c0:	4619      	mov	r1, r3
 80010c2:	4841      	ldr	r0, [pc, #260]	@ (80011c8 <MX_DSIHOST_DSI_Init+0x1f8>)
 80010c4:	f003 ff84 	bl	8004fd0 <HAL_DSI_ConfigPhyTimer>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 80010ce:	f001 f809 	bl	80020e4 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 80010d2:	2104      	movs	r1, #4
 80010d4:	483c      	ldr	r0, [pc, #240]	@ (80011c8 <MX_DSIHOST_DSI_Init+0x1f8>)
 80010d6:	f003 ff53 	bl	8004f80 <HAL_DSI_ConfigFlowControl>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 80010e0:	f001 f800 	bl	80020e4 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 80010e4:	f242 7110 	movw	r1, #10000	@ 0x2710
 80010e8:	4837      	ldr	r0, [pc, #220]	@ (80011c8 <MX_DSIHOST_DSI_Init+0x1f8>)
 80010ea:	f004 f8a1 	bl	8005230 <HAL_DSI_SetLowPowerRXFilter>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 80010f4:	f000 fff6 	bl	80020e4 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 80010f8:	2100      	movs	r1, #0
 80010fa:	4833      	ldr	r0, [pc, #204]	@ (80011c8 <MX_DSIHOST_DSI_Init+0x1f8>)
 80010fc:	f003 fc3e 	bl	800497c <HAL_DSI_ConfigErrorMonitor>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 8001106:	f000 ffed 	bl	80020e4 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_ENABLE;
 800110a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800110e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8001110:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001114:	633b      	str	r3, [r7, #48]	@ 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_ENABLE;
 8001116:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800111a:	637b      	str	r3, [r7, #52]	@ 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 800111c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001120:	63bb      	str	r3, [r7, #56]	@ 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_ENABLE;
 8001122:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001126:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8001128:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800112c:	643b      	str	r3, [r7, #64]	@ 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_ENABLE;
 800112e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001132:	647b      	str	r3, [r7, #68]	@ 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8001134:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001138:	64bb      	str	r3, [r7, #72]	@ 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_ENABLE;
 800113a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800113e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8001140:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001144:	653b      	str	r3, [r7, #80]	@ 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_ENABLE;
 8001146:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800114a:	657b      	str	r3, [r7, #84]	@ 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 800114c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001150:	65bb      	str	r3, [r7, #88]	@ 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 8001152:	2300      	movs	r3, #0
 8001154:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8001156:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800115a:	4619      	mov	r1, r3
 800115c:	481a      	ldr	r0, [pc, #104]	@ (80011c8 <MX_DSIHOST_DSI_Init+0x1f8>)
 800115e:	f003 feb1 	bl	8004ec4 <HAL_DSI_ConfigCommand>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_DSIHOST_DSI_Init+0x19c>
  {
    Error_Handler();
 8001168:	f000 ffbc 	bl	80020e4 <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB888;
 8001170:	2305      	movs	r3, #5
 8001172:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 200;
 8001174:	23c8      	movs	r3, #200	@ 0xc8
 8001176:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8001178:	2310      	movs	r3, #16
 800117a:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 800117c:	2300      	movs	r3, #0
 800117e:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 8001180:	2304      	movs	r3, #4
 8001182:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 8001184:	2302      	movs	r3, #2
 8001186:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8001188:	2300      	movs	r3, #0
 800118a:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 800118c:	2300      	movs	r3, #0
 800118e:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 8001190:	2340      	movs	r3, #64	@ 0x40
 8001192:	627b      	str	r3, [r7, #36]	@ 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8001194:	2301      	movs	r3, #1
 8001196:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8001198:	463b      	mov	r3, r7
 800119a:	4619      	mov	r1, r3
 800119c:	480a      	ldr	r0, [pc, #40]	@ (80011c8 <MX_DSIHOST_DSI_Init+0x1f8>)
 800119e:	f003 fdb9 	bl	8004d14 <HAL_DSI_ConfigAdaptedCommandMode>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_DSIHOST_DSI_Init+0x1dc>
  {
    Error_Handler();
 80011a8:	f000 ff9c 	bl	80020e4 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 80011ac:	2100      	movs	r1, #0
 80011ae:	4806      	ldr	r0, [pc, #24]	@ (80011c8 <MX_DSIHOST_DSI_Init+0x1f8>)
 80011b0:	f003 fd88 	bl	8004cc4 <HAL_DSI_SetGenericVCID>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_DSIHOST_DSI_Init+0x1ee>
  {
    Error_Handler();
 80011ba:	f000 ff93 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 80011be:	bf00      	nop
 80011c0:	37a8      	adds	r7, #168	@ 0xa8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	200001e0 	.word	0x200001e0
 80011cc:	40016c00 	.word	0x40016c00

080011d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011d4:	4b12      	ldr	r3, [pc, #72]	@ (8001220 <MX_I2C1_Init+0x50>)
 80011d6:	4a13      	ldr	r2, [pc, #76]	@ (8001224 <MX_I2C1_Init+0x54>)
 80011d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011da:	4b11      	ldr	r3, [pc, #68]	@ (8001220 <MX_I2C1_Init+0x50>)
 80011dc:	4a12      	ldr	r2, [pc, #72]	@ (8001228 <MX_I2C1_Init+0x58>)
 80011de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001220 <MX_I2C1_Init+0x50>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001220 <MX_I2C1_Init+0x50>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001220 <MX_I2C1_Init+0x50>)
 80011ee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001220 <MX_I2C1_Init+0x50>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011fa:	4b09      	ldr	r3, [pc, #36]	@ (8001220 <MX_I2C1_Init+0x50>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001200:	4b07      	ldr	r3, [pc, #28]	@ (8001220 <MX_I2C1_Init+0x50>)
 8001202:	2200      	movs	r2, #0
 8001204:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001206:	4b06      	ldr	r3, [pc, #24]	@ (8001220 <MX_I2C1_Init+0x50>)
 8001208:	2200      	movs	r2, #0
 800120a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800120c:	4804      	ldr	r0, [pc, #16]	@ (8001220 <MX_I2C1_Init+0x50>)
 800120e:	f004 fa1b 	bl	8005648 <HAL_I2C_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001218:	f000 ff64 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}
 8001220:	200001fc 	.word	0x200001fc
 8001224:	40005400 	.word	0x40005400
 8001228:	000186a0 	.word	0x000186a0

0800122c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001230:	4b12      	ldr	r3, [pc, #72]	@ (800127c <MX_I2C2_Init+0x50>)
 8001232:	4a13      	ldr	r2, [pc, #76]	@ (8001280 <MX_I2C2_Init+0x54>)
 8001234:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001236:	4b11      	ldr	r3, [pc, #68]	@ (800127c <MX_I2C2_Init+0x50>)
 8001238:	4a12      	ldr	r2, [pc, #72]	@ (8001284 <MX_I2C2_Init+0x58>)
 800123a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800123c:	4b0f      	ldr	r3, [pc, #60]	@ (800127c <MX_I2C2_Init+0x50>)
 800123e:	2200      	movs	r2, #0
 8001240:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001242:	4b0e      	ldr	r3, [pc, #56]	@ (800127c <MX_I2C2_Init+0x50>)
 8001244:	2200      	movs	r2, #0
 8001246:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001248:	4b0c      	ldr	r3, [pc, #48]	@ (800127c <MX_I2C2_Init+0x50>)
 800124a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800124e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001250:	4b0a      	ldr	r3, [pc, #40]	@ (800127c <MX_I2C2_Init+0x50>)
 8001252:	2200      	movs	r2, #0
 8001254:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001256:	4b09      	ldr	r3, [pc, #36]	@ (800127c <MX_I2C2_Init+0x50>)
 8001258:	2200      	movs	r2, #0
 800125a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800125c:	4b07      	ldr	r3, [pc, #28]	@ (800127c <MX_I2C2_Init+0x50>)
 800125e:	2200      	movs	r2, #0
 8001260:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001262:	4b06      	ldr	r3, [pc, #24]	@ (800127c <MX_I2C2_Init+0x50>)
 8001264:	2200      	movs	r2, #0
 8001266:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001268:	4804      	ldr	r0, [pc, #16]	@ (800127c <MX_I2C2_Init+0x50>)
 800126a:	f004 f9ed 	bl	8005648 <HAL_I2C_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001274:	f000 ff36 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20000250 	.word	0x20000250
 8001280:	40005800 	.word	0x40005800
 8001284:	000186a0 	.word	0x000186a0

08001288 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08e      	sub	sp, #56	@ 0x38
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	2234      	movs	r2, #52	@ 0x34
 8001292:	2100      	movs	r1, #0
 8001294:	4618      	mov	r0, r3
 8001296:	f00e fcd9 	bl	800fc4c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800129a:	4b38      	ldr	r3, [pc, #224]	@ (800137c <MX_LTDC_Init+0xf4>)
 800129c:	4a38      	ldr	r2, [pc, #224]	@ (8001380 <MX_LTDC_Init+0xf8>)
 800129e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80012a0:	4b36      	ldr	r3, [pc, #216]	@ (800137c <MX_LTDC_Init+0xf4>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80012a6:	4b35      	ldr	r3, [pc, #212]	@ (800137c <MX_LTDC_Init+0xf4>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80012ac:	4b33      	ldr	r3, [pc, #204]	@ (800137c <MX_LTDC_Init+0xf4>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80012b2:	4b32      	ldr	r3, [pc, #200]	@ (800137c <MX_LTDC_Init+0xf4>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 80012b8:	4b30      	ldr	r3, [pc, #192]	@ (800137c <MX_LTDC_Init+0xf4>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 80012be:	4b2f      	ldr	r3, [pc, #188]	@ (800137c <MX_LTDC_Init+0xf4>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 1;
 80012c4:	4b2d      	ldr	r3, [pc, #180]	@ (800137c <MX_LTDC_Init+0xf4>)
 80012c6:	2201      	movs	r2, #1
 80012c8:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 1;
 80012ca:	4b2c      	ldr	r3, [pc, #176]	@ (800137c <MX_LTDC_Init+0xf4>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 201;
 80012d0:	4b2a      	ldr	r3, [pc, #168]	@ (800137c <MX_LTDC_Init+0xf4>)
 80012d2:	22c9      	movs	r2, #201	@ 0xc9
 80012d4:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 481;
 80012d6:	4b29      	ldr	r3, [pc, #164]	@ (800137c <MX_LTDC_Init+0xf4>)
 80012d8:	f240 12e1 	movw	r2, #481	@ 0x1e1
 80012dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 202;
 80012de:	4b27      	ldr	r3, [pc, #156]	@ (800137c <MX_LTDC_Init+0xf4>)
 80012e0:	22ca      	movs	r2, #202	@ 0xca
 80012e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 482;
 80012e4:	4b25      	ldr	r3, [pc, #148]	@ (800137c <MX_LTDC_Init+0xf4>)
 80012e6:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 80012ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80012ec:	4b23      	ldr	r3, [pc, #140]	@ (800137c <MX_LTDC_Init+0xf4>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80012f4:	4b21      	ldr	r3, [pc, #132]	@ (800137c <MX_LTDC_Init+0xf4>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80012fc:	4b1f      	ldr	r3, [pc, #124]	@ (800137c <MX_LTDC_Init+0xf4>)
 80012fe:	2200      	movs	r2, #0
 8001300:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001304:	481d      	ldr	r0, [pc, #116]	@ (800137c <MX_LTDC_Init+0xf4>)
 8001306:	f004 fae3 	bl	80058d0 <HAL_LTDC_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_LTDC_Init+0x8c>
  {
    Error_Handler();
 8001310:	f000 fee8 	bl	80020e4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001314:	2300      	movs	r3, #0
 8001316:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 200;
 8001318:	23c8      	movs	r3, #200	@ 0xc8
 800131a:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8001320:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001324:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001326:	2302      	movs	r3, #2
 8001328:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800132a:	23ff      	movs	r3, #255	@ 0xff
 800132c:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001332:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001336:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001338:	2307      	movs	r3, #7
 800133a:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 800133c:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8001340:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 200;
 8001342:	23c8      	movs	r3, #200	@ 0xc8
 8001344:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 480;
 8001346:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800134a:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001352:	2300      	movs	r3, #0
 8001354:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001358:	2300      	movs	r3, #0
 800135a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800135e:	1d3b      	adds	r3, r7, #4
 8001360:	2200      	movs	r2, #0
 8001362:	4619      	mov	r1, r3
 8001364:	4805      	ldr	r0, [pc, #20]	@ (800137c <MX_LTDC_Init+0xf4>)
 8001366:	f004 fc45 	bl	8005bf4 <HAL_LTDC_ConfigLayer>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 8001370:	f000 feb8 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001374:	bf00      	nop
 8001376:	3738      	adds	r7, #56	@ 0x38
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	200002a4 	.word	0x200002a4
 8001380:	40016800 	.word	0x40016800

08001384 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001388:	4b12      	ldr	r3, [pc, #72]	@ (80013d4 <MX_QUADSPI_Init+0x50>)
 800138a:	4a13      	ldr	r2, [pc, #76]	@ (80013d8 <MX_QUADSPI_Init+0x54>)
 800138c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 800138e:	4b11      	ldr	r3, [pc, #68]	@ (80013d4 <MX_QUADSPI_Init+0x50>)
 8001390:	2201      	movs	r2, #1
 8001392:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001394:	4b0f      	ldr	r3, [pc, #60]	@ (80013d4 <MX_QUADSPI_Init+0x50>)
 8001396:	2201      	movs	r2, #1
 8001398:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800139a:	4b0e      	ldr	r3, [pc, #56]	@ (80013d4 <MX_QUADSPI_Init+0x50>)
 800139c:	2210      	movs	r2, #16
 800139e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 80013a0:	4b0c      	ldr	r3, [pc, #48]	@ (80013d4 <MX_QUADSPI_Init+0x50>)
 80013a2:	2218      	movs	r2, #24
 80013a4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 80013a6:	4b0b      	ldr	r3, [pc, #44]	@ (80013d4 <MX_QUADSPI_Init+0x50>)
 80013a8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013ac:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80013ae:	4b09      	ldr	r3, [pc, #36]	@ (80013d4 <MX_QUADSPI_Init+0x50>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80013b4:	4b07      	ldr	r3, [pc, #28]	@ (80013d4 <MX_QUADSPI_Init+0x50>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80013ba:	4b06      	ldr	r3, [pc, #24]	@ (80013d4 <MX_QUADSPI_Init+0x50>)
 80013bc:	2200      	movs	r2, #0
 80013be:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80013c0:	4804      	ldr	r0, [pc, #16]	@ (80013d4 <MX_QUADSPI_Init+0x50>)
 80013c2:	f004 fe3d 	bl	8006040 <HAL_QSPI_Init>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 80013cc:	f000 fe8a 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80013d0:	bf00      	nop
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	2000034c 	.word	0x2000034c
 80013d8:	a0001000 	.word	0xa0001000

080013dc <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 80013e0:	4b2a      	ldr	r3, [pc, #168]	@ (800148c <MX_SAI1_Init+0xb0>)
 80013e2:	4a2b      	ldr	r2, [pc, #172]	@ (8001490 <MX_SAI1_Init+0xb4>)
 80013e4:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 80013e6:	4b29      	ldr	r3, [pc, #164]	@ (800148c <MX_SAI1_Init+0xb0>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 80013ec:	4b27      	ldr	r3, [pc, #156]	@ (800148c <MX_SAI1_Init+0xb0>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 80013f2:	4b26      	ldr	r3, [pc, #152]	@ (800148c <MX_SAI1_Init+0xb0>)
 80013f4:	2240      	movs	r2, #64	@ 0x40
 80013f6:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80013f8:	4b24      	ldr	r3, [pc, #144]	@ (800148c <MX_SAI1_Init+0xb0>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80013fe:	4b23      	ldr	r3, [pc, #140]	@ (800148c <MX_SAI1_Init+0xb0>)
 8001400:	2200      	movs	r2, #0
 8001402:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001404:	4b21      	ldr	r3, [pc, #132]	@ (800148c <MX_SAI1_Init+0xb0>)
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800140a:	4b20      	ldr	r3, [pc, #128]	@ (800148c <MX_SAI1_Init+0xb0>)
 800140c:	2200      	movs	r2, #0
 800140e:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001410:	4b1e      	ldr	r3, [pc, #120]	@ (800148c <MX_SAI1_Init+0xb0>)
 8001412:	2200      	movs	r2, #0
 8001414:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001416:	4b1d      	ldr	r3, [pc, #116]	@ (800148c <MX_SAI1_Init+0xb0>)
 8001418:	2200      	movs	r2, #0
 800141a:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.ClockSource = SAI_CLKSOURCE_PLLSAI;
 800141c:	4b1b      	ldr	r3, [pc, #108]	@ (800148c <MX_SAI1_Init+0xb0>)
 800141e:	2200      	movs	r2, #0
 8001420:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001422:	4b1a      	ldr	r3, [pc, #104]	@ (800148c <MX_SAI1_Init+0xb0>)
 8001424:	4a1b      	ldr	r2, [pc, #108]	@ (8001494 <MX_SAI1_Init+0xb8>)
 8001426:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001428:	4b18      	ldr	r3, [pc, #96]	@ (800148c <MX_SAI1_Init+0xb0>)
 800142a:	2200      	movs	r2, #0
 800142c:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800142e:	4b17      	ldr	r3, [pc, #92]	@ (800148c <MX_SAI1_Init+0xb0>)
 8001430:	2200      	movs	r2, #0
 8001432:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001434:	4b15      	ldr	r3, [pc, #84]	@ (800148c <MX_SAI1_Init+0xb0>)
 8001436:	2200      	movs	r2, #0
 8001438:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800143a:	4b14      	ldr	r3, [pc, #80]	@ (800148c <MX_SAI1_Init+0xb0>)
 800143c:	2200      	movs	r2, #0
 800143e:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8001440:	4b12      	ldr	r3, [pc, #72]	@ (800148c <MX_SAI1_Init+0xb0>)
 8001442:	2208      	movs	r2, #8
 8001444:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8001446:	4b11      	ldr	r3, [pc, #68]	@ (800148c <MX_SAI1_Init+0xb0>)
 8001448:	2201      	movs	r2, #1
 800144a:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800144c:	4b0f      	ldr	r3, [pc, #60]	@ (800148c <MX_SAI1_Init+0xb0>)
 800144e:	2200      	movs	r2, #0
 8001450:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001452:	4b0e      	ldr	r3, [pc, #56]	@ (800148c <MX_SAI1_Init+0xb0>)
 8001454:	2200      	movs	r2, #0
 8001456:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001458:	4b0c      	ldr	r3, [pc, #48]	@ (800148c <MX_SAI1_Init+0xb0>)
 800145a:	2200      	movs	r2, #0
 800145c:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 800145e:	4b0b      	ldr	r3, [pc, #44]	@ (800148c <MX_SAI1_Init+0xb0>)
 8001460:	2200      	movs	r2, #0
 8001462:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001464:	4b09      	ldr	r3, [pc, #36]	@ (800148c <MX_SAI1_Init+0xb0>)
 8001466:	2200      	movs	r2, #0
 8001468:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 800146a:	4b08      	ldr	r3, [pc, #32]	@ (800148c <MX_SAI1_Init+0xb0>)
 800146c:	2201      	movs	r2, #1
 800146e:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8001470:	4b06      	ldr	r3, [pc, #24]	@ (800148c <MX_SAI1_Init+0xb0>)
 8001472:	2200      	movs	r2, #0
 8001474:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8001476:	4805      	ldr	r0, [pc, #20]	@ (800148c <MX_SAI1_Init+0xb0>)
 8001478:	f005 fdb8 	bl	8006fec <HAL_SAI_Init>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_SAI1_Init+0xaa>
  {
    Error_Handler();
 8001482:	f000 fe2f 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	20000398 	.word	0x20000398
 8001490:	40015804 	.word	0x40015804
 8001494:	0002ee00 	.word	0x0002ee00

08001498 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800149c:	4b0d      	ldr	r3, [pc, #52]	@ (80014d4 <MX_SDIO_SD_Init+0x3c>)
 800149e:	4a0e      	ldr	r2, [pc, #56]	@ (80014d8 <MX_SDIO_SD_Init+0x40>)
 80014a0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80014a2:	4b0c      	ldr	r3, [pc, #48]	@ (80014d4 <MX_SDIO_SD_Init+0x3c>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80014a8:	4b0a      	ldr	r3, [pc, #40]	@ (80014d4 <MX_SDIO_SD_Init+0x3c>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80014ae:	4b09      	ldr	r3, [pc, #36]	@ (80014d4 <MX_SDIO_SD_Init+0x3c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 80014b4:	4b07      	ldr	r3, [pc, #28]	@ (80014d4 <MX_SDIO_SD_Init+0x3c>)
 80014b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014ba:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80014bc:	4b05      	ldr	r3, [pc, #20]	@ (80014d4 <MX_SDIO_SD_Init+0x3c>)
 80014be:	2200      	movs	r2, #0
 80014c0:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80014c2:	4b04      	ldr	r3, [pc, #16]	@ (80014d4 <MX_SDIO_SD_Init+0x3c>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	20000420 	.word	0x20000420
 80014d8:	40012c00 	.word	0x40012c00

080014dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014e2:	f107 0308 	add.w	r3, r7, #8
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f0:	463b      	mov	r3, r7
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001574 <MX_TIM1_Init+0x98>)
 80014fa:	4a1f      	ldr	r2, [pc, #124]	@ (8001578 <MX_TIM1_Init+0x9c>)
 80014fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80014fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001574 <MX_TIM1_Init+0x98>)
 8001500:	2200      	movs	r2, #0
 8001502:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001504:	4b1b      	ldr	r3, [pc, #108]	@ (8001574 <MX_TIM1_Init+0x98>)
 8001506:	2200      	movs	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800150a:	4b1a      	ldr	r3, [pc, #104]	@ (8001574 <MX_TIM1_Init+0x98>)
 800150c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001510:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001512:	4b18      	ldr	r3, [pc, #96]	@ (8001574 <MX_TIM1_Init+0x98>)
 8001514:	2200      	movs	r2, #0
 8001516:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001518:	4b16      	ldr	r3, [pc, #88]	@ (8001574 <MX_TIM1_Init+0x98>)
 800151a:	2200      	movs	r2, #0
 800151c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800151e:	4b15      	ldr	r3, [pc, #84]	@ (8001574 <MX_TIM1_Init+0x98>)
 8001520:	2200      	movs	r2, #0
 8001522:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001524:	4813      	ldr	r0, [pc, #76]	@ (8001574 <MX_TIM1_Init+0x98>)
 8001526:	f007 f852 	bl	80085ce <HAL_TIM_Base_Init>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001530:	f000 fdd8 	bl	80020e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001534:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001538:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800153a:	f107 0308 	add.w	r3, r7, #8
 800153e:	4619      	mov	r1, r3
 8001540:	480c      	ldr	r0, [pc, #48]	@ (8001574 <MX_TIM1_Init+0x98>)
 8001542:	f007 fa5b 	bl	80089fc <HAL_TIM_ConfigClockSource>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800154c:	f000 fdca 	bl	80020e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001550:	2300      	movs	r3, #0
 8001552:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001554:	2300      	movs	r3, #0
 8001556:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001558:	463b      	mov	r3, r7
 800155a:	4619      	mov	r1, r3
 800155c:	4805      	ldr	r0, [pc, #20]	@ (8001574 <MX_TIM1_Init+0x98>)
 800155e:	f007 fc83 	bl	8008e68 <HAL_TIMEx_MasterConfigSynchronization>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001568:	f000 fdbc 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800156c:	bf00      	nop
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	200004a4 	.word	0x200004a4
 8001578:	40010000 	.word	0x40010000

0800157c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001582:	f107 0308 	add.w	r3, r7, #8
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001590:	463b      	mov	r3, r7
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001598:	4b1d      	ldr	r3, [pc, #116]	@ (8001610 <MX_TIM2_Init+0x94>)
 800159a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800159e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 80015a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001610 <MX_TIM2_Init+0x94>)
 80015a2:	2259      	movs	r2, #89	@ 0x59
 80015a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001610 <MX_TIM2_Init+0x94>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80015ac:	4b18      	ldr	r3, [pc, #96]	@ (8001610 <MX_TIM2_Init+0x94>)
 80015ae:	2263      	movs	r2, #99	@ 0x63
 80015b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015b2:	4b17      	ldr	r3, [pc, #92]	@ (8001610 <MX_TIM2_Init+0x94>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015b8:	4b15      	ldr	r3, [pc, #84]	@ (8001610 <MX_TIM2_Init+0x94>)
 80015ba:	2280      	movs	r2, #128	@ 0x80
 80015bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015be:	4814      	ldr	r0, [pc, #80]	@ (8001610 <MX_TIM2_Init+0x94>)
 80015c0:	f007 f805 	bl	80085ce <HAL_TIM_Base_Init>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80015ca:	f000 fd8b 	bl	80020e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015d4:	f107 0308 	add.w	r3, r7, #8
 80015d8:	4619      	mov	r1, r3
 80015da:	480d      	ldr	r0, [pc, #52]	@ (8001610 <MX_TIM2_Init+0x94>)
 80015dc:	f007 fa0e 	bl	80089fc <HAL_TIM_ConfigClockSource>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80015e6:	f000 fd7d 	bl	80020e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80015ea:	2320      	movs	r3, #32
 80015ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ee:	2300      	movs	r3, #0
 80015f0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015f2:	463b      	mov	r3, r7
 80015f4:	4619      	mov	r1, r3
 80015f6:	4806      	ldr	r0, [pc, #24]	@ (8001610 <MX_TIM2_Init+0x94>)
 80015f8:	f007 fc36 	bl	8008e68 <HAL_TIMEx_MasterConfigSynchronization>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001602:	f000 fd6f 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001606:	bf00      	nop
 8001608:	3718      	adds	r7, #24
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	200004ec 	.word	0x200004ec

08001614 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001618:	4b10      	ldr	r3, [pc, #64]	@ (800165c <MX_USART3_UART_Init+0x48>)
 800161a:	4a11      	ldr	r2, [pc, #68]	@ (8001660 <MX_USART3_UART_Init+0x4c>)
 800161c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1500000;
 800161e:	4b0f      	ldr	r3, [pc, #60]	@ (800165c <MX_USART3_UART_Init+0x48>)
 8001620:	4a10      	ldr	r2, [pc, #64]	@ (8001664 <MX_USART3_UART_Init+0x50>)
 8001622:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001624:	4b0d      	ldr	r3, [pc, #52]	@ (800165c <MX_USART3_UART_Init+0x48>)
 8001626:	2200      	movs	r2, #0
 8001628:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800162a:	4b0c      	ldr	r3, [pc, #48]	@ (800165c <MX_USART3_UART_Init+0x48>)
 800162c:	2200      	movs	r2, #0
 800162e:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001630:	4b0a      	ldr	r3, [pc, #40]	@ (800165c <MX_USART3_UART_Init+0x48>)
 8001632:	2200      	movs	r2, #0
 8001634:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001636:	4b09      	ldr	r3, [pc, #36]	@ (800165c <MX_USART3_UART_Init+0x48>)
 8001638:	220c      	movs	r2, #12
 800163a:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800163c:	4b07      	ldr	r3, [pc, #28]	@ (800165c <MX_USART3_UART_Init+0x48>)
 800163e:	2200      	movs	r2, #0
 8001640:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001642:	4b06      	ldr	r3, [pc, #24]	@ (800165c <MX_USART3_UART_Init+0x48>)
 8001644:	2200      	movs	r2, #0
 8001646:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001648:	4804      	ldr	r0, [pc, #16]	@ (800165c <MX_USART3_UART_Init+0x48>)
 800164a:	f007 fc9d 	bl	8008f88 <HAL_UART_Init>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 8001654:	f000 fd46 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001658:	bf00      	nop
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20000534 	.word	0x20000534
 8001660:	40004800 	.word	0x40004800
 8001664:	0016e360 	.word	0x0016e360

08001668 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800166c:	4b11      	ldr	r3, [pc, #68]	@ (80016b4 <MX_USART6_UART_Init+0x4c>)
 800166e:	4a12      	ldr	r2, [pc, #72]	@ (80016b8 <MX_USART6_UART_Init+0x50>)
 8001670:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001672:	4b10      	ldr	r3, [pc, #64]	@ (80016b4 <MX_USART6_UART_Init+0x4c>)
 8001674:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001678:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800167a:	4b0e      	ldr	r3, [pc, #56]	@ (80016b4 <MX_USART6_UART_Init+0x4c>)
 800167c:	2200      	movs	r2, #0
 800167e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001680:	4b0c      	ldr	r3, [pc, #48]	@ (80016b4 <MX_USART6_UART_Init+0x4c>)
 8001682:	2200      	movs	r2, #0
 8001684:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001686:	4b0b      	ldr	r3, [pc, #44]	@ (80016b4 <MX_USART6_UART_Init+0x4c>)
 8001688:	2200      	movs	r2, #0
 800168a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800168c:	4b09      	ldr	r3, [pc, #36]	@ (80016b4 <MX_USART6_UART_Init+0x4c>)
 800168e:	220c      	movs	r2, #12
 8001690:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001692:	4b08      	ldr	r3, [pc, #32]	@ (80016b4 <MX_USART6_UART_Init+0x4c>)
 8001694:	2200      	movs	r2, #0
 8001696:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001698:	4b06      	ldr	r3, [pc, #24]	@ (80016b4 <MX_USART6_UART_Init+0x4c>)
 800169a:	2200      	movs	r2, #0
 800169c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800169e:	4805      	ldr	r0, [pc, #20]	@ (80016b4 <MX_USART6_UART_Init+0x4c>)
 80016a0:	f007 fc72 	bl	8008f88 <HAL_UART_Init>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80016aa:	f000 fd1b 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	2000057c 	.word	0x2000057c
 80016b8:	40011400 	.word	0x40011400

080016bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	607b      	str	r3, [r7, #4]
 80016c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001734 <MX_DMA_Init+0x78>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ca:	4a1a      	ldr	r2, [pc, #104]	@ (8001734 <MX_DMA_Init+0x78>)
 80016cc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80016d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016d2:	4b18      	ldr	r3, [pc, #96]	@ (8001734 <MX_DMA_Init+0x78>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016da:	607b      	str	r3, [r7, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	603b      	str	r3, [r7, #0]
 80016e2:	4b14      	ldr	r3, [pc, #80]	@ (8001734 <MX_DMA_Init+0x78>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e6:	4a13      	ldr	r2, [pc, #76]	@ (8001734 <MX_DMA_Init+0x78>)
 80016e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ee:	4b11      	ldr	r3, [pc, #68]	@ (8001734 <MX_DMA_Init+0x78>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016f6:	603b      	str	r3, [r7, #0]
 80016f8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 80016fa:	2200      	movs	r2, #0
 80016fc:	2105      	movs	r1, #5
 80016fe:	200e      	movs	r0, #14
 8001700:	f002 f896 	bl	8003830 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001704:	200e      	movs	r0, #14
 8001706:	f002 f8af 	bl	8003868 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800170a:	2200      	movs	r2, #0
 800170c:	2105      	movs	r1, #5
 800170e:	2010      	movs	r0, #16
 8001710:	f002 f88e 	bl	8003830 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001714:	2010      	movs	r0, #16
 8001716:	f002 f8a7 	bl	8003868 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800171a:	2200      	movs	r2, #0
 800171c:	2105      	movs	r1, #5
 800171e:	2038      	movs	r0, #56	@ 0x38
 8001720:	f002 f886 	bl	8003830 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001724:	2038      	movs	r0, #56	@ 0x38
 8001726:	f002 f89f 	bl	8003868 <HAL_NVIC_EnableIRQ>

}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40023800 	.word	0x40023800

08001738 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b088      	sub	sp, #32
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800173e:	1d3b      	adds	r3, r7, #4
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
 800174a:	611a      	str	r2, [r3, #16]
 800174c:	615a      	str	r2, [r3, #20]
 800174e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001750:	4b1f      	ldr	r3, [pc, #124]	@ (80017d0 <MX_FMC_Init+0x98>)
 8001752:	4a20      	ldr	r2, [pc, #128]	@ (80017d4 <MX_FMC_Init+0x9c>)
 8001754:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001756:	4b1e      	ldr	r3, [pc, #120]	@ (80017d0 <MX_FMC_Init+0x98>)
 8001758:	2200      	movs	r2, #0
 800175a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800175c:	4b1c      	ldr	r3, [pc, #112]	@ (80017d0 <MX_FMC_Init+0x98>)
 800175e:	2200      	movs	r2, #0
 8001760:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001762:	4b1b      	ldr	r3, [pc, #108]	@ (80017d0 <MX_FMC_Init+0x98>)
 8001764:	2204      	movs	r2, #4
 8001766:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8001768:	4b19      	ldr	r3, [pc, #100]	@ (80017d0 <MX_FMC_Init+0x98>)
 800176a:	2220      	movs	r2, #32
 800176c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800176e:	4b18      	ldr	r3, [pc, #96]	@ (80017d0 <MX_FMC_Init+0x98>)
 8001770:	2240      	movs	r2, #64	@ 0x40
 8001772:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001774:	4b16      	ldr	r3, [pc, #88]	@ (80017d0 <MX_FMC_Init+0x98>)
 8001776:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800177a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800177c:	4b14      	ldr	r3, [pc, #80]	@ (80017d0 <MX_FMC_Init+0x98>)
 800177e:	2200      	movs	r2, #0
 8001780:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001782:	4b13      	ldr	r3, [pc, #76]	@ (80017d0 <MX_FMC_Init+0x98>)
 8001784:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001788:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800178a:	4b11      	ldr	r3, [pc, #68]	@ (80017d0 <MX_FMC_Init+0x98>)
 800178c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001790:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001792:	4b0f      	ldr	r3, [pc, #60]	@ (80017d0 <MX_FMC_Init+0x98>)
 8001794:	2200      	movs	r2, #0
 8001796:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001798:	2302      	movs	r3, #2
 800179a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800179c:	2307      	movs	r3, #7
 800179e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80017a0:	2304      	movs	r3, #4
 80017a2:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80017a4:	2307      	movs	r3, #7
 80017a6:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80017a8:	2303      	movs	r3, #3
 80017aa:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80017ac:	2302      	movs	r3, #2
 80017ae:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80017b0:	2302      	movs	r3, #2
 80017b2:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80017b4:	1d3b      	adds	r3, r7, #4
 80017b6:	4619      	mov	r1, r3
 80017b8:	4805      	ldr	r0, [pc, #20]	@ (80017d0 <MX_FMC_Init+0x98>)
 80017ba:	f006 fed4 	bl	8008566 <HAL_SDRAM_Init>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80017c4:	f000 fc8e 	bl	80020e4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80017c8:	bf00      	nop
 80017ca:	3720      	adds	r7, #32
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	20000624 	.word	0x20000624
 80017d4:	a0000140 	.word	0xa0000140

080017d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b090      	sub	sp, #64	@ 0x40
 80017dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	605a      	str	r2, [r3, #4]
 80017e8:	609a      	str	r2, [r3, #8]
 80017ea:	60da      	str	r2, [r3, #12]
 80017ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80017f2:	4bae      	ldr	r3, [pc, #696]	@ (8001aac <MX_GPIO_Init+0x2d4>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f6:	4aad      	ldr	r2, [pc, #692]	@ (8001aac <MX_GPIO_Init+0x2d4>)
 80017f8:	f043 0310 	orr.w	r3, r3, #16
 80017fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017fe:	4bab      	ldr	r3, [pc, #684]	@ (8001aac <MX_GPIO_Init+0x2d4>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001802:	f003 0310 	and.w	r3, r3, #16
 8001806:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	627b      	str	r3, [r7, #36]	@ 0x24
 800180e:	4ba7      	ldr	r3, [pc, #668]	@ (8001aac <MX_GPIO_Init+0x2d4>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001812:	4aa6      	ldr	r2, [pc, #664]	@ (8001aac <MX_GPIO_Init+0x2d4>)
 8001814:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001818:	6313      	str	r3, [r2, #48]	@ 0x30
 800181a:	4ba4      	ldr	r3, [pc, #656]	@ (8001aac <MX_GPIO_Init+0x2d4>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001822:	627b      	str	r3, [r7, #36]	@ 0x24
 8001824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	623b      	str	r3, [r7, #32]
 800182a:	4ba0      	ldr	r3, [pc, #640]	@ (8001aac <MX_GPIO_Init+0x2d4>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182e:	4a9f      	ldr	r2, [pc, #636]	@ (8001aac <MX_GPIO_Init+0x2d4>)
 8001830:	f043 0302 	orr.w	r3, r3, #2
 8001834:	6313      	str	r3, [r2, #48]	@ 0x30
 8001836:	4b9d      	ldr	r3, [pc, #628]	@ (8001aac <MX_GPIO_Init+0x2d4>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	623b      	str	r3, [r7, #32]
 8001840:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	61fb      	str	r3, [r7, #28]
 8001846:	4b99      	ldr	r3, [pc, #612]	@ (8001aac <MX_GPIO_Init+0x2d4>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184a:	4a98      	ldr	r2, [pc, #608]	@ (8001aac <MX_GPIO_Init+0x2d4>)
 800184c:	f043 0304 	orr.w	r3, r3, #4
 8001850:	6313      	str	r3, [r2, #48]	@ 0x30
 8001852:	4b96      	ldr	r3, [pc, #600]	@ (8001aac <MX_GPIO_Init+0x2d4>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001856:	f003 0304 	and.w	r3, r3, #4
 800185a:	61fb      	str	r3, [r7, #28]
 800185c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	61bb      	str	r3, [r7, #24]
 8001862:	4b92      	ldr	r3, [pc, #584]	@ (8001aac <MX_GPIO_Init+0x2d4>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001866:	4a91      	ldr	r2, [pc, #580]	@ (8001aac <MX_GPIO_Init+0x2d4>)
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	6313      	str	r3, [r2, #48]	@ 0x30
 800186e:	4b8f      	ldr	r3, [pc, #572]	@ (8001aac <MX_GPIO_Init+0x2d4>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	61bb      	str	r3, [r7, #24]
 8001878:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	617b      	str	r3, [r7, #20]
 800187e:	4b8b      	ldr	r3, [pc, #556]	@ (8001aac <MX_GPIO_Init+0x2d4>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001882:	4a8a      	ldr	r2, [pc, #552]	@ (8001aac <MX_GPIO_Init+0x2d4>)
 8001884:	f043 0308 	orr.w	r3, r3, #8
 8001888:	6313      	str	r3, [r2, #48]	@ 0x30
 800188a:	4b88      	ldr	r3, [pc, #544]	@ (8001aac <MX_GPIO_Init+0x2d4>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188e:	f003 0308 	and.w	r3, r3, #8
 8001892:	617b      	str	r3, [r7, #20]
 8001894:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	613b      	str	r3, [r7, #16]
 800189a:	4b84      	ldr	r3, [pc, #528]	@ (8001aac <MX_GPIO_Init+0x2d4>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189e:	4a83      	ldr	r2, [pc, #524]	@ (8001aac <MX_GPIO_Init+0x2d4>)
 80018a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018a6:	4b81      	ldr	r3, [pc, #516]	@ (8001aac <MX_GPIO_Init+0x2d4>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018ae:	613b      	str	r3, [r7, #16]
 80018b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	4b7d      	ldr	r3, [pc, #500]	@ (8001aac <MX_GPIO_Init+0x2d4>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ba:	4a7c      	ldr	r2, [pc, #496]	@ (8001aac <MX_GPIO_Init+0x2d4>)
 80018bc:	f043 0320 	orr.w	r3, r3, #32
 80018c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018c2:	4b7a      	ldr	r3, [pc, #488]	@ (8001aac <MX_GPIO_Init+0x2d4>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c6:	f003 0320 	and.w	r3, r3, #32
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	60bb      	str	r3, [r7, #8]
 80018d2:	4b76      	ldr	r3, [pc, #472]	@ (8001aac <MX_GPIO_Init+0x2d4>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d6:	4a75      	ldr	r2, [pc, #468]	@ (8001aac <MX_GPIO_Init+0x2d4>)
 80018d8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018de:	4b73      	ldr	r3, [pc, #460]	@ (8001aac <MX_GPIO_Init+0x2d4>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018e6:	60bb      	str	r3, [r7, #8]
 80018e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	607b      	str	r3, [r7, #4]
 80018ee:	4b6f      	ldr	r3, [pc, #444]	@ (8001aac <MX_GPIO_Init+0x2d4>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f2:	4a6e      	ldr	r2, [pc, #440]	@ (8001aac <MX_GPIO_Init+0x2d4>)
 80018f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018fa:	4b6c      	ldr	r3, [pc, #432]	@ (8001aac <MX_GPIO_Init+0x2d4>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001902:	607b      	str	r3, [r7, #4]
 8001904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	603b      	str	r3, [r7, #0]
 800190a:	4b68      	ldr	r3, [pc, #416]	@ (8001aac <MX_GPIO_Init+0x2d4>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190e:	4a67      	ldr	r2, [pc, #412]	@ (8001aac <MX_GPIO_Init+0x2d4>)
 8001910:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001914:	6313      	str	r3, [r2, #48]	@ 0x30
 8001916:	4b65      	ldr	r3, [pc, #404]	@ (8001aac <MX_GPIO_Init+0x2d4>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800191e:	603b      	str	r3, [r7, #0]
 8001920:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPKR_HP_Pin|AUDIO_RST_Pin, GPIO_PIN_RESET);
 8001922:	2200      	movs	r2, #0
 8001924:	210c      	movs	r1, #12
 8001926:	4862      	ldr	r0, [pc, #392]	@ (8001ab0 <MX_GPIO_Init+0x2d8>)
 8001928:	f003 fe74 	bl	8005614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 800192c:	2200      	movs	r2, #0
 800192e:	2130      	movs	r1, #48	@ 0x30
 8001930:	4860      	ldr	r0, [pc, #384]	@ (8001ab4 <MX_GPIO_Init+0x2dc>)
 8001932:	f003 fe6f 	bl	8005614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8001936:	2200      	movs	r2, #0
 8001938:	2108      	movs	r1, #8
 800193a:	485f      	ldr	r0, [pc, #380]	@ (8001ab8 <MX_GPIO_Init+0x2e0>)
 800193c:	f003 fe6a 	bl	8005614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001940:	2200      	movs	r2, #0
 8001942:	2140      	movs	r1, #64	@ 0x40
 8001944:	485d      	ldr	r0, [pc, #372]	@ (8001abc <MX_GPIO_Init+0x2e4>)
 8001946:	f003 fe65 	bl	8005614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin, GPIO_PIN_RESET);
 800194a:	2200      	movs	r2, #0
 800194c:	2105      	movs	r1, #5
 800194e:	485c      	ldr	r0, [pc, #368]	@ (8001ac0 <MX_GPIO_Init+0x2e8>)
 8001950:	f003 fe60 	bl	8005614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_RESET);
 8001954:	2200      	movs	r2, #0
 8001956:	2180      	movs	r1, #128	@ 0x80
 8001958:	485a      	ldr	r0, [pc, #360]	@ (8001ac4 <MX_GPIO_Init+0x2ec>)
 800195a:	f003 fe5b 	bl	8005614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 800195e:	2200      	movs	r2, #0
 8001960:	2108      	movs	r1, #8
 8001962:	4859      	ldr	r0, [pc, #356]	@ (8001ac8 <MX_GPIO_Init+0x2f0>)
 8001964:	f003 fe56 	bl	8005614 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPKR_HP_Pin AUDIO_RST_Pin */
  GPIO_InitStruct.Pin = SPKR_HP_Pin|AUDIO_RST_Pin;
 8001968:	230c      	movs	r3, #12
 800196a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800196c:	2301      	movs	r3, #1
 800196e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001974:	2300      	movs	r3, #0
 8001976:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001978:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800197c:	4619      	mov	r1, r3
 800197e:	484c      	ldr	r0, [pc, #304]	@ (8001ab0 <MX_GPIO_Init+0x2d8>)
 8001980:	f003 fc84 	bl	800528c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_CK_Pin */
  GPIO_InitStruct.Pin = I2S3_CK_Pin;
 8001984:	2308      	movs	r3, #8
 8001986:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001988:	2302      	movs	r3, #2
 800198a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001990:	2300      	movs	r3, #0
 8001992:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001994:	2306      	movs	r3, #6
 8001996:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(I2S3_CK_GPIO_Port, &GPIO_InitStruct);
 8001998:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800199c:	4619      	mov	r1, r3
 800199e:	4848      	ldr	r0, [pc, #288]	@ (8001ac0 <MX_GPIO_Init+0x2e8>)
 80019a0:	f003 fc74 	bl	800528c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS1_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS1_OverCurrent_Pin;
 80019a4:	2380      	movs	r3, #128	@ 0x80
 80019a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019a8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80019ac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS1_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80019b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019b6:	4619      	mov	r1, r3
 80019b8:	4841      	ldr	r0, [pc, #260]	@ (8001ac0 <MX_GPIO_Init+0x2e8>)
 80019ba:	f003 fc67 	bl	800528c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS1_P_Pin USB_FS1_N_Pin USB_FS1_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS1_P_Pin|USB_FS1_N_Pin|USB_FS1_ID_Pin;
 80019be:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80019c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c4:	2302      	movs	r3, #2
 80019c6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019cc:	2303      	movs	r3, #3
 80019ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80019d0:	230a      	movs	r3, #10
 80019d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019d8:	4619      	mov	r1, r3
 80019da:	483b      	ldr	r0, [pc, #236]	@ (8001ac8 <MX_GPIO_Init+0x2f0>)
 80019dc:	f003 fc56 	bl	800528c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 80019e0:	2330      	movs	r3, #48	@ 0x30
 80019e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80019e4:	2311      	movs	r3, #17
 80019e6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e8:	2300      	movs	r3, #0
 80019ea:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ec:	2300      	movs	r3, #0
 80019ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019f4:	4619      	mov	r1, r3
 80019f6:	482f      	ldr	r0, [pc, #188]	@ (8001ab4 <MX_GPIO_Init+0x2dc>)
 80019f8:	f003 fc48 	bl	800528c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED4_Pin */
  GPIO_InitStruct.Pin = LED4_Pin;
 80019fc:	2308      	movs	r3, #8
 80019fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001a00:	2311      	movs	r3, #17
 8001a02:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8001a0c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a10:	4619      	mov	r1, r3
 8001a12:	4829      	ldr	r0, [pc, #164]	@ (8001ab8 <MX_GPIO_Init+0x2e0>)
 8001a14:	f003 fc3a 	bl	800528c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS1_Pin */
  GPIO_InitStruct.Pin = VBUS_FS1_Pin;
 8001a18:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(VBUS_FS1_GPIO_Port, &GPIO_InitStruct);
 8001a26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4826      	ldr	r0, [pc, #152]	@ (8001ac8 <MX_GPIO_Init+0x2f0>)
 8001a2e:	f003 fc2d 	bl	800528c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001a32:	2340      	movs	r3, #64	@ 0x40
 8001a34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001a36:	2311      	movs	r3, #17
 8001a38:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001a42:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a46:	4619      	mov	r1, r3
 8001a48:	481c      	ldr	r0, [pc, #112]	@ (8001abc <MX_GPIO_Init+0x2e4>)
 8001a4a:	f003 fc1f 	bl	800528c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS1_PowerSwitchOn_Pin EXT_RESET_Pin */
  GPIO_InitStruct.Pin = OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin;
 8001a4e:	2305      	movs	r3, #5
 8001a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a52:	2301      	movs	r3, #1
 8001a54:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a5e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a62:	4619      	mov	r1, r3
 8001a64:	4816      	ldr	r0, [pc, #88]	@ (8001ac0 <MX_GPIO_Init+0x2e8>)
 8001a66:	f003 fc11 	bl	800528c <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_CK_Pin */
  GPIO_InitStruct.Pin = MIC_CK_Pin;
 8001a6a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a70:	2302      	movs	r3, #2
 8001a72:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(MIC_CK_GPIO_Port, &GPIO_InitStruct);
 8001a80:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a84:	4619      	mov	r1, r3
 8001a86:	480b      	ldr	r0, [pc, #44]	@ (8001ab4 <MX_GPIO_Init+0x2dc>)
 8001a88:	f003 fc00 	bl	800528c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001a8c:	2304      	movs	r3, #4
 8001a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a90:	2300      	movs	r3, #0
 8001a92:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a94:	2300      	movs	r3, #0
 8001a96:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001a98:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4807      	ldr	r0, [pc, #28]	@ (8001abc <MX_GPIO_Init+0x2e4>)
 8001aa0:	f003 fbf4 	bl	800528c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001aa4:	2320      	movs	r3, #32
 8001aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001aa8:	e010      	b.n	8001acc <MX_GPIO_Init+0x2f4>
 8001aaa:	bf00      	nop
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	40020c00 	.word	0x40020c00
 8001ab8:	40022800 	.word	0x40022800
 8001abc:	40021800 	.word	0x40021800
 8001ac0:	40020400 	.word	0x40020400
 8001ac4:	40021c00 	.word	0x40021c00
 8001ac8:	40020000 	.word	0x40020000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001acc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001ad0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001ad6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ada:	4619      	mov	r1, r3
 8001adc:	4811      	ldr	r0, [pc, #68]	@ (8001b24 <MX_GPIO_Init+0x34c>)
 8001ade:	f003 fbd5 	bl	800528c <HAL_GPIO_Init>

  /*Configure GPIO pin : PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001ae2:	2380      	movs	r3, #128	@ 0x80
 8001ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aee:	2300      	movs	r3, #0
 8001af0:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001af2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001af6:	4619      	mov	r1, r3
 8001af8:	480b      	ldr	r0, [pc, #44]	@ (8001b28 <MX_GPIO_Init+0x350>)
 8001afa:	f003 fbc7 	bl	800528c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001afe:	2308      	movs	r3, #8
 8001b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b02:	2301      	movs	r3, #1
 8001b04:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001b0e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b12:	4619      	mov	r1, r3
 8001b14:	4805      	ldr	r0, [pc, #20]	@ (8001b2c <MX_GPIO_Init+0x354>)
 8001b16:	f003 fbb9 	bl	800528c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b1a:	bf00      	nop
 8001b1c:	3740      	adds	r7, #64	@ 0x40
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40022400 	.word	0x40022400
 8001b28:	40021c00 	.word	0x40021c00
 8001b2c:	40020000 	.word	0x40020000

08001b30 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
	for (int n = 0; n < halfN; n++) {
 8001b38:	2300      	movs	r3, #0
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	e00a      	b.n	8001b54 <HAL_ADC_ConvHalfCpltCallback+0x24>
		dac_buffer[n] = adc_buffer[n];
 8001b3e:	4a0c      	ldr	r2, [pc, #48]	@ (8001b70 <HAL_ADC_ConvHalfCpltCallback+0x40>)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001b46:	4a0b      	ldr	r2, [pc, #44]	@ (8001b74 <HAL_ADC_ConvHalfCpltCallback+0x44>)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int n = 0; n < halfN; n++) {
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	3301      	adds	r3, #1
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b5a:	dbf0      	blt.n	8001b3e <HAL_ADC_ConvHalfCpltCallback+0xe>
	}
	osSemaphoreRelease(ADCHalfSemHandle);
 8001b5c:	4b06      	ldr	r3, [pc, #24]	@ (8001b78 <HAL_ADC_ConvHalfCpltCallback+0x48>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f009 fd8d 	bl	800b680 <osSemaphoreRelease>

}
 8001b66:	bf00      	nop
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000670 	.word	0x20000670
 8001b74:	20000e70 	.word	0x20000e70
 8001b78:	20000660 	.word	0x20000660

08001b7c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
	for (int n = halfN; n < N; n++) {
 8001b84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	e00a      	b.n	8001ba2 <HAL_ADC_ConvCpltCallback+0x26>
		dac_buffer[n] = adc_buffer[n];
 8001b8c:	4a0b      	ldr	r2, [pc, #44]	@ (8001bbc <HAL_ADC_ConvCpltCallback+0x40>)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001b94:	4a0a      	ldr	r2, [pc, #40]	@ (8001bc0 <HAL_ADC_ConvCpltCallback+0x44>)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int n = halfN; n < N; n++) {
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ba8:	dbf0      	blt.n	8001b8c <HAL_ADC_ConvCpltCallback+0x10>
	}
	osSemaphoreRelease(ADCFullSemHandle);
 8001baa:	4b06      	ldr	r3, [pc, #24]	@ (8001bc4 <HAL_ADC_ConvCpltCallback+0x48>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f009 fd66 	bl	800b680 <osSemaphoreRelease>

}
 8001bb4:	bf00      	nop
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	20000670 	.word	0x20000670
 8001bc0:	20000e70 	.word	0x20000e70
 8001bc4:	20000664 	.word	0x20000664

08001bc8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	f5ad 6d82 	sub.w	sp, sp, #1040	@ 0x410
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8001bd4:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8001bd8:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
	//	printf("....STARTING .... \r\n");
	HAL_TIM_Base_Start(&htim2);
 8001bda:	4837      	ldr	r0, [pc, #220]	@ (8001cb8 <StartDefaultTask+0xf0>)
 8001bdc:	f006 fd46 	bl	800866c <HAL_TIM_Base_Start>
	//	HAL_TIM_Base_Start(&htim7);

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buffer, N);
 8001be0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001be4:	4935      	ldr	r1, [pc, #212]	@ (8001cbc <StartDefaultTask+0xf4>)
 8001be6:	4836      	ldr	r0, [pc, #216]	@ (8001cc0 <StartDefaultTask+0xf8>)
 8001be8:	f001 f9a0 	bl	8002f2c <HAL_ADC_Start_DMA>
//	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*) dac_buffer, N, DAC_ALIGN_12B_R);

	/* Infinite loop */
	for (;;) {

    if (osSemaphoreAcquire(ADCHalfSemHandle, osWaitForever) == osOK) {
 8001bec:	4b35      	ldr	r3, [pc, #212]	@ (8001cc4 <StartDefaultTask+0xfc>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f009 fcf1 	bl	800b5dc <osSemaphoreAcquire>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d127      	bne.n	8001c50 <StartDefaultTask+0x88>
      // Create a temporary transmit buffer for the first half.
      // Size = number of ADC samples + 1 sync marker (each sample is 16 bits)
      uint16_t tx_buffer_half[halfN + 1];
      tx_buffer_half[0] = SYNC_MARKER; // Insert sync marker at the beginning.
 8001c00:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8001c04:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8001c08:	f245 52aa 	movw	r2, #21930	@ 0x55aa
 8001c0c:	801a      	strh	r2, [r3, #0]
      // Copy half-buffer ADC data after the marker.
      memcpy(&tx_buffer_half[1], dac_buffer, halfN * sizeof(uint16_t));
 8001c0e:	f107 030c 	add.w	r3, r7, #12
 8001c12:	3302      	adds	r3, #2
 8001c14:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c18:	492b      	ldr	r1, [pc, #172]	@ (8001cc8 <StartDefaultTask+0x100>)
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f00e f8a0 	bl	800fd60 <memcpy>

      // Transmit the sync marker + data block.
      if (HAL_UART_GetState(&huart3) == HAL_UART_STATE_READY) {
 8001c20:	482a      	ldr	r0, [pc, #168]	@ (8001ccc <StartDefaultTask+0x104>)
 8001c22:	f007 fd37 	bl	8009694 <HAL_UART_GetState>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b20      	cmp	r3, #32
 8001c2a:	d10c      	bne.n	8001c46 <StartDefaultTask+0x7e>
		  if (HAL_UART_Transmit_DMA(&huart3, (uint8_t*)tx_buffer_half, (halfN + 1) * sizeof(uint16_t)) != HAL_OK) {
 8001c2c:	f107 030c 	add.w	r3, r7, #12
 8001c30:	f240 4202 	movw	r2, #1026	@ 0x402
 8001c34:	4619      	mov	r1, r3
 8001c36:	4825      	ldr	r0, [pc, #148]	@ (8001ccc <StartDefaultTask+0x104>)
 8001c38:	f007 f9f6 	bl	8009028 <HAL_UART_Transmit_DMA>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <StartDefaultTask+0x7e>
			// Handle transmission error
			Error_Handler();
 8001c42:	f000 fa4f 	bl	80020e4 <Error_Handler>
		  }
      }
  	osSemaphoreRelease(FFTHalfSemHandle);
 8001c46:	4b22      	ldr	r3, [pc, #136]	@ (8001cd0 <StartDefaultTask+0x108>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f009 fd18 	bl	800b680 <osSemaphoreRelease>
    }

    if (osSemaphoreAcquire(ADCFullSemHandle, osWaitForever) == osOK) {
 8001c50:	4b20      	ldr	r3, [pc, #128]	@ (8001cd4 <StartDefaultTask+0x10c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f04f 31ff 	mov.w	r1, #4294967295
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f009 fcbf 	bl	800b5dc <osSemaphoreAcquire>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1c3      	bne.n	8001bec <StartDefaultTask+0x24>
      // Create a temporary transmit buffer for the second half.
      uint16_t tx_buffer_full[(N - halfN) + 1];
      tx_buffer_full[0] = SYNC_MARKER; // Insert sync marker.
 8001c64:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8001c68:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8001c6c:	f245 52aa 	movw	r2, #21930	@ 0x55aa
 8001c70:	801a      	strh	r2, [r3, #0]
      // Copy the second half of the ADC buffer.
      memcpy(&tx_buffer_full[1], &dac_buffer[halfN], (N - halfN) * sizeof(uint16_t));
 8001c72:	f107 030c 	add.w	r3, r7, #12
 8001c76:	3302      	adds	r3, #2
 8001c78:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c7c:	4916      	ldr	r1, [pc, #88]	@ (8001cd8 <StartDefaultTask+0x110>)
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f00e f86e 	bl	800fd60 <memcpy>

      // Transmit the sync marker + data block.
      if (HAL_UART_GetState(&huart3) == HAL_UART_STATE_READY){
 8001c84:	4811      	ldr	r0, [pc, #68]	@ (8001ccc <StartDefaultTask+0x104>)
 8001c86:	f007 fd05 	bl	8009694 <HAL_UART_GetState>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b20      	cmp	r3, #32
 8001c8e:	d10c      	bne.n	8001caa <StartDefaultTask+0xe2>
		  if (HAL_UART_Transmit_DMA(&huart3, (uint8_t*)tx_buffer_full, ((N - halfN) + 1) * sizeof(uint16_t)) != HAL_OK) {
 8001c90:	f107 030c 	add.w	r3, r7, #12
 8001c94:	f240 4202 	movw	r2, #1026	@ 0x402
 8001c98:	4619      	mov	r1, r3
 8001c9a:	480c      	ldr	r0, [pc, #48]	@ (8001ccc <StartDefaultTask+0x104>)
 8001c9c:	f007 f9c4 	bl	8009028 <HAL_UART_Transmit_DMA>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <StartDefaultTask+0xe2>
			// Handle transmission error
			Error_Handler();
 8001ca6:	f000 fa1d 	bl	80020e4 <Error_Handler>
		  }
      }
  	osSemaphoreRelease(FFTFullSemHandle);
 8001caa:	4b0c      	ldr	r3, [pc, #48]	@ (8001cdc <StartDefaultTask+0x114>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f009 fce6 	bl	800b680 <osSemaphoreRelease>
    if (osSemaphoreAcquire(ADCHalfSemHandle, osWaitForever) == osOK) {
 8001cb4:	e79a      	b.n	8001bec <StartDefaultTask+0x24>
 8001cb6:	bf00      	nop
 8001cb8:	200004ec 	.word	0x200004ec
 8001cbc:	20000670 	.word	0x20000670
 8001cc0:	2000007c 	.word	0x2000007c
 8001cc4:	20000660 	.word	0x20000660
 8001cc8:	20000e70 	.word	0x20000e70
 8001ccc:	20000534 	.word	0x20000534
 8001cd0:	20000668 	.word	0x20000668
 8001cd4:	20000664 	.word	0x20000664
 8001cd8:	20001270 	.word	0x20001270
 8001cdc:	2000066c 	.word	0x2000066c

08001ce0 <StartFFTTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFFTTask */
void StartFFTTask(void *argument)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	f5ad 4d80 	sub.w	sp, sp, #16384	@ 0x4000
 8001ce6:	b08a      	sub	sp, #40	@ 0x28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001cee:	f843 0c24 	str.w	r0, [r3, #-36]
	float32_t FFT_inp[N];  // = output of uint to float function and input to FFT computation
	float32_t FFT_out[N]; // = output of FFT computation = complex number: [0]=real part, [1]=imaginary part and so on
//	float32_t Complex_mag[N];
	float32_t peakVal;
	float32_t peakHz;
	float32_t normalization_factor = 1.0 / (N / 2) * 2.0;
 8001cf2:	f04f 536e 	mov.w	r3, #998244352	@ 0x3b800000
 8001cf6:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 8001cfa:	f102 0210 	add.w	r2, r2, #16
 8001cfe:	6013      	str	r3, [r2, #0]
//	float32_t hann_correction_factor = 2.0;  // ✅ Adjust for Hann window loss
	float32_t windowed_input[N];  // Windowed input
	float32_t hann_window[N];  // Precompute window
	uint16_t peakIndex;

    for (int i = 0; i < N; i++) {
 8001d00:	2300      	movs	r3, #0
 8001d02:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 8001d06:	f102 021c 	add.w	r2, r2, #28
 8001d0a:	6013      	str	r3, [r2, #0]
 8001d0c:	e043      	b.n	8001d96 <StartFFTTask+0xb6>
        hann_window[i] = 0.5 - 0.5 * cosf(2 * PI * i / (N - 1));  // Compute Hann window
 8001d0e:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8001d12:	f103 031c 	add.w	r3, r3, #28
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	ee07 3a90 	vmov	s15, r3
 8001d1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d20:	ed9f 7ade 	vldr	s14, [pc, #888]	@ 800209c <StartFFTTask+0x3bc>
 8001d24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d28:	eddf 6add 	vldr	s13, [pc, #884]	@ 80020a0 <StartFFTTask+0x3c0>
 8001d2c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001d30:	eeb0 0a47 	vmov.f32	s0, s14
 8001d34:	f00e f896 	bl	800fe64 <cosf>
 8001d38:	ee10 3a10 	vmov	r3, s0
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7fe fced 	bl	800071c <__aeabi_f2d>
 8001d42:	f04f 0200 	mov.w	r2, #0
 8001d46:	4bd7      	ldr	r3, [pc, #860]	@ (80020a4 <StartFFTTask+0x3c4>)
 8001d48:	f7fe fa5a 	bl	8000200 <__aeabi_dmul>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	460b      	mov	r3, r1
 8001d50:	f04f 0000 	mov.w	r0, #0
 8001d54:	49d3      	ldr	r1, [pc, #844]	@ (80020a4 <StartFFTTask+0x3c4>)
 8001d56:	f7fe fb81 	bl	800045c <__aeabi_dsub>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	4610      	mov	r0, r2
 8001d60:	4619      	mov	r1, r3
 8001d62:	f7fe fd33 	bl	80007cc <__aeabi_d2f>
 8001d66:	4602      	mov	r2, r0
 8001d68:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8001d72:	f103 031c 	add.w	r3, r3, #28
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	440b      	add	r3, r1
 8001d7c:	3b20      	subs	r3, #32
 8001d7e:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < N; i++) {
 8001d80:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8001d84:	f103 031c 	add.w	r3, r3, #28
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 8001d90:	f102 021c 	add.w	r2, r2, #28
 8001d94:	6013      	str	r3, [r2, #0]
 8001d96:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8001d9a:	f103 031c 	add.w	r3, r3, #28
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001da4:	dbb3      	blt.n	8001d0e <StartFFTTask+0x2e>
    }

  /* Infinite loop */
  for(;;)
  {
	  if (osSemaphoreAcquire(FFTHalfSemHandle, osWaitForever) == osOK) {
 8001da6:	4bc0      	ldr	r3, [pc, #768]	@ (80020a8 <StartFFTTask+0x3c8>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f04f 31ff 	mov.w	r1, #4294967295
 8001dae:	4618      	mov	r0, r3
 8001db0:	f009 fc14 	bl	800b5dc <osSemaphoreAcquire>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d109      	bne.n	8001dce <StartFFTTask+0xee>
		uint16_to_float32(&dac_buffer[0], &FFT_inp[0], halfN);
 8001dba:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8001dbe:	f103 0308 	add.w	r3, r3, #8
 8001dc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	48b8      	ldr	r0, [pc, #736]	@ (80020ac <StartFFTTask+0x3cc>)
 8001dca:	f7fe fee1 	bl	8000b90 <uint16_to_float32>
//		arm_rfft_fast_f32(&fft_instance, FFT_inp, FFT_out, 0);
//		arm_cmplx_mag_f32(FFT_out, Complex_mag, N);
	  }

	  if (osSemaphoreAcquire(FFTFullSemHandle, osWaitForever) == osOK) {
 8001dce:	4bb8      	ldr	r3, [pc, #736]	@ (80020b0 <StartFFTTask+0x3d0>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f04f 31ff 	mov.w	r1, #4294967295
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f009 fc00 	bl	800b5dc <osSemaphoreAcquire>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1e1      	bne.n	8001da6 <StartFFTTask+0xc6>
		  peakVal = 0.0f;
 8001de2:	f04f 0300 	mov.w	r3, #0
 8001de6:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 8001dea:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8001dee:	6013      	str	r3, [r2, #0]
		  peakHz = 0.0f;
 8001df0:	f04f 0300 	mov.w	r3, #0
 8001df4:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 8001df8:	f102 020c 	add.w	r2, r2, #12
 8001dfc:	6013      	str	r3, [r2, #0]
		  peakIndex=0;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 8001e04:	f102 0222 	add.w	r2, r2, #34	@ 0x22
 8001e08:	8013      	strh	r3, [r2, #0]
		  uint16_to_float32(&dac_buffer[N-halfN], &FFT_inp[N-halfN], halfN);
 8001e0a:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8001e0e:	f103 0308 	add.w	r3, r3, #8
 8001e12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	48a5      	ldr	r0, [pc, #660]	@ (80020b4 <StartFFTTask+0x3d4>)
 8001e1e:	f7fe feb7 	bl	8000b90 <uint16_to_float32>
		  for (int i = 0; i < N; i++){
 8001e22:	2300      	movs	r3, #0
 8001e24:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 8001e28:	f102 0218 	add.w	r2, r2, #24
 8001e2c:	6013      	str	r3, [r2, #0]
 8001e2e:	e037      	b.n	8001ea0 <StartFFTTask+0x1c0>
			  windowed_input[i] = FFT_inp[i] * hann_window[i];  // Apply window
 8001e30:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8001e34:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8001e38:	461a      	mov	r2, r3
 8001e3a:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8001e3e:	f103 0318 	add.w	r3, r3, #24
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	4413      	add	r3, r2
 8001e48:	3b20      	subs	r3, #32
 8001e4a:	ed93 7a00 	vldr	s14, [r3]
 8001e4e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e52:	461a      	mov	r2, r3
 8001e54:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8001e58:	f103 0318 	add.w	r3, r3, #24
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4413      	add	r3, r2
 8001e62:	3b20      	subs	r3, #32
 8001e64:	edd3 7a00 	vldr	s15, [r3]
 8001e68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e6c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001e70:	f103 0308 	add.w	r3, r3, #8
 8001e74:	461a      	mov	r2, r3
 8001e76:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8001e7a:	f103 0318 	add.w	r3, r3, #24
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4413      	add	r3, r2
 8001e84:	3b20      	subs	r3, #32
 8001e86:	edc3 7a00 	vstr	s15, [r3]
		  for (int i = 0; i < N; i++){
 8001e8a:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8001e8e:	f103 0318 	add.w	r3, r3, #24
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	3301      	adds	r3, #1
 8001e96:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 8001e9a:	f102 0218 	add.w	r2, r2, #24
 8001e9e:	6013      	str	r3, [r2, #0]
 8001ea0:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8001ea4:	f103 0318 	add.w	r3, r3, #24
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001eae:	dbbf      	blt.n	8001e30 <StartFFTTask+0x150>
		  }
		  arm_rfft_fast_f32(&fft_instance, windowed_input, FFT_out, 0);
 8001eb0:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8001eb4:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8001eb8:	3a20      	subs	r2, #32
 8001eba:	f507 5181 	add.w	r1, r7, #4128	@ 0x1020
 8001ebe:	f101 0108 	add.w	r1, r1, #8
 8001ec2:	3920      	subs	r1, #32
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	487c      	ldr	r0, [pc, #496]	@ (80020b8 <StartFFTTask+0x3d8>)
 8001ec8:	f00c ffc6 	bl	800ee58 <arm_rfft_fast_f32>
//		  arm_cmplx_mag_f32(FFT_out, Complex_mag, N);
		  FFT_out[0]=0; FFT_out[1]=0; FFT_out[2]=0; FFT_out[3]=0; //FFT_out[4]=0; FFT_out[5]=0;
 8001ecc:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8001ed0:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	f04f 0300 	mov.w	r3, #0
 8001eda:	f842 3c20 	str.w	r3, [r2, #-32]
 8001ede:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8001ee2:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	f04f 0300 	mov.w	r3, #0
 8001eec:	f842 3c1c 	str.w	r3, [r2, #-28]
 8001ef0:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8001ef4:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8001ef8:	461a      	mov	r2, r3
 8001efa:	f04f 0300 	mov.w	r3, #0
 8001efe:	f842 3c18 	str.w	r3, [r2, #-24]
 8001f02:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8001f06:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	f04f 0300 	mov.w	r3, #0
 8001f10:	f842 3c14 	str.w	r3, [r2, #-20]
		  for (uint16_t index = 0, bin = 0; index < N; index += 2, bin++) {
 8001f14:	2300      	movs	r3, #0
 8001f16:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 8001f1a:	f102 0216 	add.w	r2, r2, #22
 8001f1e:	8013      	strh	r3, [r2, #0]
 8001f20:	2300      	movs	r3, #0
 8001f22:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 8001f26:	f102 0214 	add.w	r2, r2, #20
 8001f2a:	8013      	strh	r3, [r2, #0]
 8001f2c:	e098      	b.n	8002060 <StartFFTTask+0x380>
//			  float32_t curVal = sqrtf((FFT_out[index]*FFT_out[index]) + (FFT_out[index+1]*FFT_out[index+1]));
			  float32_t curVal = sqrtf((FFT_out[index] * FFT_out[index]) + (FFT_out[index+1] * FFT_out[index+1]));
 8001f2e:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8001f32:	f103 0316 	add.w	r3, r3, #22
 8001f36:	881b      	ldrh	r3, [r3, #0]
 8001f38:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8001f3c:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	4413      	add	r3, r2
 8001f44:	3b20      	subs	r3, #32
 8001f46:	ed93 7a00 	vldr	s14, [r3]
 8001f4a:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8001f4e:	f103 0316 	add.w	r3, r3, #22
 8001f52:	881b      	ldrh	r3, [r3, #0]
 8001f54:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8001f58:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	4413      	add	r3, r2
 8001f60:	3b20      	subs	r3, #32
 8001f62:	edd3 7a00 	vldr	s15, [r3]
 8001f66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f6a:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8001f6e:	f103 0316 	add.w	r3, r3, #22
 8001f72:	881b      	ldrh	r3, [r3, #0]
 8001f74:	3301      	adds	r3, #1
 8001f76:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8001f7a:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	4413      	add	r3, r2
 8001f82:	3b20      	subs	r3, #32
 8001f84:	edd3 6a00 	vldr	s13, [r3]
 8001f88:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8001f8c:	f103 0316 	add.w	r3, r3, #22
 8001f90:	881b      	ldrh	r3, [r3, #0]
 8001f92:	3301      	adds	r3, #1
 8001f94:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8001f98:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	4413      	add	r3, r2
 8001fa0:	3b20      	subs	r3, #32
 8001fa2:	edd3 7a00 	vldr	s15, [r3]
 8001fa6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001faa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fae:	eeb0 0a67 	vmov.f32	s0, s15
 8001fb2:	f00d ff39 	bl	800fe28 <sqrtf>
 8001fb6:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8001fba:	f103 0308 	add.w	r3, r3, #8
 8001fbe:	ed83 0a00 	vstr	s0, [r3]
			  curVal *= normalization_factor;  // Apply normalization
 8001fc2:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8001fc6:	f103 0308 	add.w	r3, r3, #8
 8001fca:	ed93 7a00 	vldr	s14, [r3]
 8001fce:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8001fd2:	f103 0310 	add.w	r3, r3, #16
 8001fd6:	edd3 7a00 	vldr	s15, [r3]
 8001fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fde:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8001fe2:	f103 0308 	add.w	r3, r3, #8
 8001fe6:	edc3 7a00 	vstr	s15, [r3]
			  if (curVal > peakVal) {
 8001fea:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8001fee:	f103 0308 	add.w	r3, r3, #8
 8001ff2:	ed93 7a00 	vldr	s14, [r3]
 8001ff6:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8001ffa:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8001ffe:	edd3 7a00 	vldr	s15, [r3]
 8002002:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800200a:	dd13      	ble.n	8002034 <StartFFTTask+0x354>
				  peakVal = curVal;
 800200c:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8002010:	f103 0308 	add.w	r3, r3, #8
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 800201a:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 800201e:	6013      	str	r3, [r2, #0]
				  peakIndex = bin;
 8002020:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8002024:	f103 0314 	add.w	r3, r3, #20
 8002028:	881b      	ldrh	r3, [r3, #0]
 800202a:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 800202e:	f102 0222 	add.w	r2, r2, #34	@ 0x22
 8002032:	8013      	strh	r3, [r2, #0]
		  for (uint16_t index = 0, bin = 0; index < N; index += 2, bin++) {
 8002034:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8002038:	f103 0316 	add.w	r3, r3, #22
 800203c:	881b      	ldrh	r3, [r3, #0]
 800203e:	3302      	adds	r3, #2
 8002040:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 8002044:	f102 0216 	add.w	r2, r2, #22
 8002048:	8013      	strh	r3, [r2, #0]
 800204a:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 800204e:	f103 0314 	add.w	r3, r3, #20
 8002052:	881b      	ldrh	r3, [r3, #0]
 8002054:	3301      	adds	r3, #1
 8002056:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 800205a:	f102 0214 	add.w	r2, r2, #20
 800205e:	8013      	strh	r3, [r2, #0]
 8002060:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8002064:	f103 0316 	add.w	r3, r3, #22
 8002068:	881b      	ldrh	r3, [r3, #0]
 800206a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800206e:	f4ff af5e 	bcc.w	8001f2e <StartFFTTask+0x24e>
			  }
		  }
		  peakHz=peakIndex * (10000.0f / N);  // ✅ Correct frequency conversion
 8002072:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8002076:	f103 0322 	add.w	r3, r3, #34	@ 0x22
 800207a:	881b      	ldrh	r3, [r3, #0]
 800207c:	ee07 3a90 	vmov	s15, r3
 8002080:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002084:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80020bc <StartFFTTask+0x3dc>
 8002088:	ee67 7a87 	vmul.f32	s15, s15, s14
 800208c:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8002090:	f103 030c 	add.w	r3, r3, #12
 8002094:	edc3 7a00 	vstr	s15, [r3]
	  if (osSemaphoreAcquire(FFTHalfSemHandle, osWaitForever) == osOK) {
 8002098:	e685      	b.n	8001da6 <StartFFTTask+0xc6>
 800209a:	bf00      	nop
 800209c:	40c90fdb 	.word	0x40c90fdb
 80020a0:	447fc000 	.word	0x447fc000
 80020a4:	3fe00000 	.word	0x3fe00000
 80020a8:	20000668 	.word	0x20000668
 80020ac:	20000e70 	.word	0x20000e70
 80020b0:	2000066c 	.word	0x2000066c
 80020b4:	20001270 	.word	0x20001270
 80020b8:	20001670 	.word	0x20001670
 80020bc:	411c4000 	.word	0x411c4000

080020c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a04      	ldr	r2, [pc, #16]	@ (80020e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d101      	bne.n	80020d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80020d2:	f000 fea3 	bl	8002e1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80020d6:	bf00      	nop
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40001000 	.word	0x40001000

080020e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020e8:	b672      	cpsid	i
}
 80020ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020ec:	bf00      	nop
 80020ee:	e7fd      	b.n	80020ec <Error_Handler+0x8>

080020f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	607b      	str	r3, [r7, #4]
 80020fa:	4b12      	ldr	r3, [pc, #72]	@ (8002144 <HAL_MspInit+0x54>)
 80020fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020fe:	4a11      	ldr	r2, [pc, #68]	@ (8002144 <HAL_MspInit+0x54>)
 8002100:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002104:	6453      	str	r3, [r2, #68]	@ 0x44
 8002106:	4b0f      	ldr	r3, [pc, #60]	@ (8002144 <HAL_MspInit+0x54>)
 8002108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800210a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800210e:	607b      	str	r3, [r7, #4]
 8002110:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	603b      	str	r3, [r7, #0]
 8002116:	4b0b      	ldr	r3, [pc, #44]	@ (8002144 <HAL_MspInit+0x54>)
 8002118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211a:	4a0a      	ldr	r2, [pc, #40]	@ (8002144 <HAL_MspInit+0x54>)
 800211c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002120:	6413      	str	r3, [r2, #64]	@ 0x40
 8002122:	4b08      	ldr	r3, [pc, #32]	@ (8002144 <HAL_MspInit+0x54>)
 8002124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002126:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800212a:	603b      	str	r3, [r7, #0]
 800212c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800212e:	2200      	movs	r2, #0
 8002130:	210f      	movs	r1, #15
 8002132:	f06f 0001 	mvn.w	r0, #1
 8002136:	f001 fb7b 	bl	8003830 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800213a:	bf00      	nop
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40023800 	.word	0x40023800

08002148 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b08a      	sub	sp, #40	@ 0x28
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002150:	f107 0314 	add.w	r3, r7, #20
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	605a      	str	r2, [r3, #4]
 800215a:	609a      	str	r2, [r3, #8]
 800215c:	60da      	str	r2, [r3, #12]
 800215e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a2f      	ldr	r2, [pc, #188]	@ (8002224 <HAL_ADC_MspInit+0xdc>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d157      	bne.n	800221a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	613b      	str	r3, [r7, #16]
 800216e:	4b2e      	ldr	r3, [pc, #184]	@ (8002228 <HAL_ADC_MspInit+0xe0>)
 8002170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002172:	4a2d      	ldr	r2, [pc, #180]	@ (8002228 <HAL_ADC_MspInit+0xe0>)
 8002174:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002178:	6453      	str	r3, [r2, #68]	@ 0x44
 800217a:	4b2b      	ldr	r3, [pc, #172]	@ (8002228 <HAL_ADC_MspInit+0xe0>)
 800217c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800217e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002182:	613b      	str	r3, [r7, #16]
 8002184:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	60fb      	str	r3, [r7, #12]
 800218a:	4b27      	ldr	r3, [pc, #156]	@ (8002228 <HAL_ADC_MspInit+0xe0>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218e:	4a26      	ldr	r2, [pc, #152]	@ (8002228 <HAL_ADC_MspInit+0xe0>)
 8002190:	f043 0304 	orr.w	r3, r3, #4
 8002194:	6313      	str	r3, [r2, #48]	@ 0x30
 8002196:	4b24      	ldr	r3, [pc, #144]	@ (8002228 <HAL_ADC_MspInit+0xe0>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219a:	f003 0304 	and.w	r3, r3, #4
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80021a2:	2320      	movs	r3, #32
 80021a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021a6:	2303      	movs	r3, #3
 80021a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021aa:	2300      	movs	r3, #0
 80021ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021ae:	f107 0314 	add.w	r3, r7, #20
 80021b2:	4619      	mov	r1, r3
 80021b4:	481d      	ldr	r0, [pc, #116]	@ (800222c <HAL_ADC_MspInit+0xe4>)
 80021b6:	f003 f869 	bl	800528c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80021ba:	4b1d      	ldr	r3, [pc, #116]	@ (8002230 <HAL_ADC_MspInit+0xe8>)
 80021bc:	4a1d      	ldr	r2, [pc, #116]	@ (8002234 <HAL_ADC_MspInit+0xec>)
 80021be:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80021c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002230 <HAL_ADC_MspInit+0xe8>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002230 <HAL_ADC_MspInit+0xe8>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80021cc:	4b18      	ldr	r3, [pc, #96]	@ (8002230 <HAL_ADC_MspInit+0xe8>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80021d2:	4b17      	ldr	r3, [pc, #92]	@ (8002230 <HAL_ADC_MspInit+0xe8>)
 80021d4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021d8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80021da:	4b15      	ldr	r3, [pc, #84]	@ (8002230 <HAL_ADC_MspInit+0xe8>)
 80021dc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80021e0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80021e2:	4b13      	ldr	r3, [pc, #76]	@ (8002230 <HAL_ADC_MspInit+0xe8>)
 80021e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021e8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80021ea:	4b11      	ldr	r3, [pc, #68]	@ (8002230 <HAL_ADC_MspInit+0xe8>)
 80021ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021f0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80021f2:	4b0f      	ldr	r3, [pc, #60]	@ (8002230 <HAL_ADC_MspInit+0xe8>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021f8:	4b0d      	ldr	r3, [pc, #52]	@ (8002230 <HAL_ADC_MspInit+0xe8>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80021fe:	480c      	ldr	r0, [pc, #48]	@ (8002230 <HAL_ADC_MspInit+0xe8>)
 8002200:	f001 fc42 	bl	8003a88 <HAL_DMA_Init>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800220a:	f7ff ff6b 	bl	80020e4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a07      	ldr	r2, [pc, #28]	@ (8002230 <HAL_ADC_MspInit+0xe8>)
 8002212:	639a      	str	r2, [r3, #56]	@ 0x38
 8002214:	4a06      	ldr	r2, [pc, #24]	@ (8002230 <HAL_ADC_MspInit+0xe8>)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800221a:	bf00      	nop
 800221c:	3728      	adds	r7, #40	@ 0x28
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	40012000 	.word	0x40012000
 8002228:	40023800 	.word	0x40023800
 800222c:	40020800 	.word	0x40020800
 8002230:	200000c4 	.word	0x200000c4
 8002234:	40026410 	.word	0x40026410

08002238 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a0b      	ldr	r2, [pc, #44]	@ (8002274 <HAL_CRC_MspInit+0x3c>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d10d      	bne.n	8002266 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	60fb      	str	r3, [r7, #12]
 800224e:	4b0a      	ldr	r3, [pc, #40]	@ (8002278 <HAL_CRC_MspInit+0x40>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002252:	4a09      	ldr	r2, [pc, #36]	@ (8002278 <HAL_CRC_MspInit+0x40>)
 8002254:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002258:	6313      	str	r3, [r2, #48]	@ 0x30
 800225a:	4b07      	ldr	r3, [pc, #28]	@ (8002278 <HAL_CRC_MspInit+0x40>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002262:	60fb      	str	r3, [r7, #12]
 8002264:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8002266:	bf00      	nop
 8002268:	3714      	adds	r7, #20
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	40023000 	.word	0x40023000
 8002278:	40023800 	.word	0x40023800

0800227c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b08a      	sub	sp, #40	@ 0x28
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002284:	f107 0314 	add.w	r3, r7, #20
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	605a      	str	r2, [r3, #4]
 800228e:	609a      	str	r2, [r3, #8]
 8002290:	60da      	str	r2, [r3, #12]
 8002292:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a33      	ldr	r2, [pc, #204]	@ (8002368 <HAL_DAC_MspInit+0xec>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d160      	bne.n	8002360 <HAL_DAC_MspInit+0xe4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800229e:	2300      	movs	r3, #0
 80022a0:	613b      	str	r3, [r7, #16]
 80022a2:	4b32      	ldr	r3, [pc, #200]	@ (800236c <HAL_DAC_MspInit+0xf0>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a6:	4a31      	ldr	r2, [pc, #196]	@ (800236c <HAL_DAC_MspInit+0xf0>)
 80022a8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80022ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80022ae:	4b2f      	ldr	r3, [pc, #188]	@ (800236c <HAL_DAC_MspInit+0xf0>)
 80022b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80022b6:	613b      	str	r3, [r7, #16]
 80022b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	60fb      	str	r3, [r7, #12]
 80022be:	4b2b      	ldr	r3, [pc, #172]	@ (800236c <HAL_DAC_MspInit+0xf0>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c2:	4a2a      	ldr	r2, [pc, #168]	@ (800236c <HAL_DAC_MspInit+0xf0>)
 80022c4:	f043 0301 	orr.w	r3, r3, #1
 80022c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ca:	4b28      	ldr	r3, [pc, #160]	@ (800236c <HAL_DAC_MspInit+0xf0>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80022d6:	2310      	movs	r3, #16
 80022d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022da:	2303      	movs	r3, #3
 80022dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e2:	f107 0314 	add.w	r3, r7, #20
 80022e6:	4619      	mov	r1, r3
 80022e8:	4821      	ldr	r0, [pc, #132]	@ (8002370 <HAL_DAC_MspInit+0xf4>)
 80022ea:	f002 ffcf 	bl	800528c <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80022ee:	4b21      	ldr	r3, [pc, #132]	@ (8002374 <HAL_DAC_MspInit+0xf8>)
 80022f0:	4a21      	ldr	r2, [pc, #132]	@ (8002378 <HAL_DAC_MspInit+0xfc>)
 80022f2:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80022f4:	4b1f      	ldr	r3, [pc, #124]	@ (8002374 <HAL_DAC_MspInit+0xf8>)
 80022f6:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 80022fa:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002374 <HAL_DAC_MspInit+0xf8>)
 80022fe:	2240      	movs	r2, #64	@ 0x40
 8002300:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002302:	4b1c      	ldr	r3, [pc, #112]	@ (8002374 <HAL_DAC_MspInit+0xf8>)
 8002304:	2200      	movs	r2, #0
 8002306:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8002308:	4b1a      	ldr	r3, [pc, #104]	@ (8002374 <HAL_DAC_MspInit+0xf8>)
 800230a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800230e:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002310:	4b18      	ldr	r3, [pc, #96]	@ (8002374 <HAL_DAC_MspInit+0xf8>)
 8002312:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002316:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002318:	4b16      	ldr	r3, [pc, #88]	@ (8002374 <HAL_DAC_MspInit+0xf8>)
 800231a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800231e:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8002320:	4b14      	ldr	r3, [pc, #80]	@ (8002374 <HAL_DAC_MspInit+0xf8>)
 8002322:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002326:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8002328:	4b12      	ldr	r3, [pc, #72]	@ (8002374 <HAL_DAC_MspInit+0xf8>)
 800232a:	2200      	movs	r2, #0
 800232c:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800232e:	4b11      	ldr	r3, [pc, #68]	@ (8002374 <HAL_DAC_MspInit+0xf8>)
 8002330:	2200      	movs	r2, #0
 8002332:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8002334:	480f      	ldr	r0, [pc, #60]	@ (8002374 <HAL_DAC_MspInit+0xf8>)
 8002336:	f001 fba7 	bl	8003a88 <HAL_DMA_Init>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 8002340:	f7ff fed0 	bl	80020e4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4a0b      	ldr	r2, [pc, #44]	@ (8002374 <HAL_DAC_MspInit+0xf8>)
 8002348:	609a      	str	r2, [r3, #8]
 800234a:	4a0a      	ldr	r2, [pc, #40]	@ (8002374 <HAL_DAC_MspInit+0xf8>)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8002350:	2200      	movs	r2, #0
 8002352:	2105      	movs	r1, #5
 8002354:	2036      	movs	r0, #54	@ 0x36
 8002356:	f001 fa6b 	bl	8003830 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800235a:	2036      	movs	r0, #54	@ 0x36
 800235c:	f001 fa84 	bl	8003868 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DAC_MspInit 1 */

  }

}
 8002360:	bf00      	nop
 8002362:	3728      	adds	r7, #40	@ 0x28
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40007400 	.word	0x40007400
 800236c:	40023800 	.word	0x40023800
 8002370:	40020000 	.word	0x40020000
 8002374:	20000140 	.word	0x20000140
 8002378:	40026088 	.word	0x40026088

0800237c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a0e      	ldr	r2, [pc, #56]	@ (80023c4 <HAL_DMA2D_MspInit+0x48>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d115      	bne.n	80023ba <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800238e:	2300      	movs	r3, #0
 8002390:	60fb      	str	r3, [r7, #12]
 8002392:	4b0d      	ldr	r3, [pc, #52]	@ (80023c8 <HAL_DMA2D_MspInit+0x4c>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002396:	4a0c      	ldr	r2, [pc, #48]	@ (80023c8 <HAL_DMA2D_MspInit+0x4c>)
 8002398:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800239c:	6313      	str	r3, [r2, #48]	@ 0x30
 800239e:	4b0a      	ldr	r3, [pc, #40]	@ (80023c8 <HAL_DMA2D_MspInit+0x4c>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80023aa:	2200      	movs	r2, #0
 80023ac:	2105      	movs	r1, #5
 80023ae:	205a      	movs	r0, #90	@ 0x5a
 80023b0:	f001 fa3e 	bl	8003830 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80023b4:	205a      	movs	r0, #90	@ 0x5a
 80023b6:	f001 fa57 	bl	8003868 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 80023ba:	bf00      	nop
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	4002b000 	.word	0x4002b000
 80023c8:	40023800 	.word	0x40023800

080023cc <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b08a      	sub	sp, #40	@ 0x28
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d4:	f107 0314 	add.w	r3, r7, #20
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	605a      	str	r2, [r3, #4]
 80023de:	609a      	str	r2, [r3, #8]
 80023e0:	60da      	str	r2, [r3, #12]
 80023e2:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a1d      	ldr	r2, [pc, #116]	@ (8002460 <HAL_DSI_MspInit+0x94>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d133      	bne.n	8002456 <HAL_DSI_MspInit+0x8a>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 80023ee:	2300      	movs	r3, #0
 80023f0:	613b      	str	r3, [r7, #16]
 80023f2:	4b1c      	ldr	r3, [pc, #112]	@ (8002464 <HAL_DSI_MspInit+0x98>)
 80023f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023f6:	4a1b      	ldr	r2, [pc, #108]	@ (8002464 <HAL_DSI_MspInit+0x98>)
 80023f8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80023fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80023fe:	4b19      	ldr	r3, [pc, #100]	@ (8002464 <HAL_DSI_MspInit+0x98>)
 8002400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002402:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002406:	613b      	str	r3, [r7, #16]
 8002408:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800240a:	2300      	movs	r3, #0
 800240c:	60fb      	str	r3, [r7, #12]
 800240e:	4b15      	ldr	r3, [pc, #84]	@ (8002464 <HAL_DSI_MspInit+0x98>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002412:	4a14      	ldr	r2, [pc, #80]	@ (8002464 <HAL_DSI_MspInit+0x98>)
 8002414:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002418:	6313      	str	r3, [r2, #48]	@ 0x30
 800241a:	4b12      	ldr	r3, [pc, #72]	@ (8002464 <HAL_DSI_MspInit+0x98>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = DSI_TE_Pin;
 8002426:	2304      	movs	r3, #4
 8002428:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800242a:	2302      	movs	r3, #2
 800242c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242e:	2300      	movs	r3, #0
 8002430:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002432:	2303      	movs	r3, #3
 8002434:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8002436:	230d      	movs	r3, #13
 8002438:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 800243a:	f107 0314 	add.w	r3, r7, #20
 800243e:	4619      	mov	r1, r3
 8002440:	4809      	ldr	r0, [pc, #36]	@ (8002468 <HAL_DSI_MspInit+0x9c>)
 8002442:	f002 ff23 	bl	800528c <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 5, 0);
 8002446:	2200      	movs	r2, #0
 8002448:	2105      	movs	r1, #5
 800244a:	205c      	movs	r0, #92	@ 0x5c
 800244c:	f001 f9f0 	bl	8003830 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8002450:	205c      	movs	r0, #92	@ 0x5c
 8002452:	f001 fa09 	bl	8003868 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DSI_MspInit 1 */

  }

}
 8002456:	bf00      	nop
 8002458:	3728      	adds	r7, #40	@ 0x28
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40016c00 	.word	0x40016c00
 8002464:	40023800 	.word	0x40023800
 8002468:	40022400 	.word	0x40022400

0800246c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b08c      	sub	sp, #48	@ 0x30
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002474:	f107 031c 	add.w	r3, r7, #28
 8002478:	2200      	movs	r2, #0
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	605a      	str	r2, [r3, #4]
 800247e:	609a      	str	r2, [r3, #8]
 8002480:	60da      	str	r2, [r3, #12]
 8002482:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a32      	ldr	r2, [pc, #200]	@ (8002554 <HAL_I2C_MspInit+0xe8>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d12d      	bne.n	80024ea <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800248e:	2300      	movs	r3, #0
 8002490:	61bb      	str	r3, [r7, #24]
 8002492:	4b31      	ldr	r3, [pc, #196]	@ (8002558 <HAL_I2C_MspInit+0xec>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002496:	4a30      	ldr	r2, [pc, #192]	@ (8002558 <HAL_I2C_MspInit+0xec>)
 8002498:	f043 0302 	orr.w	r3, r3, #2
 800249c:	6313      	str	r3, [r2, #48]	@ 0x30
 800249e:	4b2e      	ldr	r3, [pc, #184]	@ (8002558 <HAL_I2C_MspInit+0xec>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	61bb      	str	r3, [r7, #24]
 80024a8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80024aa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80024ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024b0:	2312      	movs	r3, #18
 80024b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024b4:	2301      	movs	r3, #1
 80024b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024b8:	2303      	movs	r3, #3
 80024ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80024bc:	2304      	movs	r3, #4
 80024be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024c0:	f107 031c 	add.w	r3, r7, #28
 80024c4:	4619      	mov	r1, r3
 80024c6:	4825      	ldr	r0, [pc, #148]	@ (800255c <HAL_I2C_MspInit+0xf0>)
 80024c8:	f002 fee0 	bl	800528c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024cc:	2300      	movs	r3, #0
 80024ce:	617b      	str	r3, [r7, #20]
 80024d0:	4b21      	ldr	r3, [pc, #132]	@ (8002558 <HAL_I2C_MspInit+0xec>)
 80024d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d4:	4a20      	ldr	r2, [pc, #128]	@ (8002558 <HAL_I2C_MspInit+0xec>)
 80024d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80024da:	6413      	str	r3, [r2, #64]	@ 0x40
 80024dc:	4b1e      	ldr	r3, [pc, #120]	@ (8002558 <HAL_I2C_MspInit+0xec>)
 80024de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024e4:	617b      	str	r3, [r7, #20]
 80024e6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80024e8:	e030      	b.n	800254c <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a1c      	ldr	r2, [pc, #112]	@ (8002560 <HAL_I2C_MspInit+0xf4>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d12b      	bne.n	800254c <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80024f4:	2300      	movs	r3, #0
 80024f6:	613b      	str	r3, [r7, #16]
 80024f8:	4b17      	ldr	r3, [pc, #92]	@ (8002558 <HAL_I2C_MspInit+0xec>)
 80024fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fc:	4a16      	ldr	r2, [pc, #88]	@ (8002558 <HAL_I2C_MspInit+0xec>)
 80024fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002502:	6313      	str	r3, [r2, #48]	@ 0x30
 8002504:	4b14      	ldr	r3, [pc, #80]	@ (8002558 <HAL_I2C_MspInit+0xec>)
 8002506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002508:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800250c:	613b      	str	r3, [r7, #16]
 800250e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 8002510:	2330      	movs	r3, #48	@ 0x30
 8002512:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002514:	2312      	movs	r3, #18
 8002516:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002518:	2301      	movs	r3, #1
 800251a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800251c:	2303      	movs	r3, #3
 800251e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002520:	2304      	movs	r3, #4
 8002522:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002524:	f107 031c 	add.w	r3, r7, #28
 8002528:	4619      	mov	r1, r3
 800252a:	480e      	ldr	r0, [pc, #56]	@ (8002564 <HAL_I2C_MspInit+0xf8>)
 800252c:	f002 feae 	bl	800528c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002530:	2300      	movs	r3, #0
 8002532:	60fb      	str	r3, [r7, #12]
 8002534:	4b08      	ldr	r3, [pc, #32]	@ (8002558 <HAL_I2C_MspInit+0xec>)
 8002536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002538:	4a07      	ldr	r2, [pc, #28]	@ (8002558 <HAL_I2C_MspInit+0xec>)
 800253a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800253e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002540:	4b05      	ldr	r3, [pc, #20]	@ (8002558 <HAL_I2C_MspInit+0xec>)
 8002542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002544:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	68fb      	ldr	r3, [r7, #12]
}
 800254c:	bf00      	nop
 800254e:	3730      	adds	r7, #48	@ 0x30
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	40005400 	.word	0x40005400
 8002558:	40023800 	.word	0x40023800
 800255c:	40020400 	.word	0x40020400
 8002560:	40005800 	.word	0x40005800
 8002564:	40021c00 	.word	0x40021c00

08002568 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a0e      	ldr	r2, [pc, #56]	@ (80025b0 <HAL_LTDC_MspInit+0x48>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d115      	bne.n	80025a6 <HAL_LTDC_MspInit+0x3e>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	60fb      	str	r3, [r7, #12]
 800257e:	4b0d      	ldr	r3, [pc, #52]	@ (80025b4 <HAL_LTDC_MspInit+0x4c>)
 8002580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002582:	4a0c      	ldr	r2, [pc, #48]	@ (80025b4 <HAL_LTDC_MspInit+0x4c>)
 8002584:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002588:	6453      	str	r3, [r2, #68]	@ 0x44
 800258a:	4b0a      	ldr	r3, [pc, #40]	@ (80025b4 <HAL_LTDC_MspInit+0x4c>)
 800258c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800258e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	68fb      	ldr	r3, [r7, #12]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002596:	2200      	movs	r2, #0
 8002598:	2105      	movs	r1, #5
 800259a:	2058      	movs	r0, #88	@ 0x58
 800259c:	f001 f948 	bl	8003830 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80025a0:	2058      	movs	r0, #88	@ 0x58
 80025a2:	f001 f961 	bl	8003868 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80025a6:	bf00      	nop
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40016800 	.word	0x40016800
 80025b4:	40023800 	.word	0x40023800

080025b8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b08a      	sub	sp, #40	@ 0x28
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c0:	f107 0314 	add.w	r3, r7, #20
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	605a      	str	r2, [r3, #4]
 80025ca:	609a      	str	r2, [r3, #8]
 80025cc:	60da      	str	r2, [r3, #12]
 80025ce:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a31      	ldr	r2, [pc, #196]	@ (800269c <HAL_QSPI_MspInit+0xe4>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d15b      	bne.n	8002692 <HAL_QSPI_MspInit+0xda>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80025da:	2300      	movs	r3, #0
 80025dc:	613b      	str	r3, [r7, #16]
 80025de:	4b30      	ldr	r3, [pc, #192]	@ (80026a0 <HAL_QSPI_MspInit+0xe8>)
 80025e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025e2:	4a2f      	ldr	r2, [pc, #188]	@ (80026a0 <HAL_QSPI_MspInit+0xe8>)
 80025e4:	f043 0302 	orr.w	r3, r3, #2
 80025e8:	6393      	str	r3, [r2, #56]	@ 0x38
 80025ea:	4b2d      	ldr	r3, [pc, #180]	@ (80026a0 <HAL_QSPI_MspInit+0xe8>)
 80025ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	613b      	str	r3, [r7, #16]
 80025f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025f6:	2300      	movs	r3, #0
 80025f8:	60fb      	str	r3, [r7, #12]
 80025fa:	4b29      	ldr	r3, [pc, #164]	@ (80026a0 <HAL_QSPI_MspInit+0xe8>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025fe:	4a28      	ldr	r2, [pc, #160]	@ (80026a0 <HAL_QSPI_MspInit+0xe8>)
 8002600:	f043 0302 	orr.w	r3, r3, #2
 8002604:	6313      	str	r3, [r2, #48]	@ 0x30
 8002606:	4b26      	ldr	r3, [pc, #152]	@ (80026a0 <HAL_QSPI_MspInit+0xe8>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	60fb      	str	r3, [r7, #12]
 8002610:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002612:	2300      	movs	r3, #0
 8002614:	60bb      	str	r3, [r7, #8]
 8002616:	4b22      	ldr	r3, [pc, #136]	@ (80026a0 <HAL_QSPI_MspInit+0xe8>)
 8002618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800261a:	4a21      	ldr	r2, [pc, #132]	@ (80026a0 <HAL_QSPI_MspInit+0xe8>)
 800261c:	f043 0320 	orr.w	r3, r3, #32
 8002620:	6313      	str	r3, [r2, #48]	@ 0x30
 8002622:	4b1f      	ldr	r3, [pc, #124]	@ (80026a0 <HAL_QSPI_MspInit+0xe8>)
 8002624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002626:	f003 0320 	and.w	r3, r3, #32
 800262a:	60bb      	str	r3, [r7, #8]
 800262c:	68bb      	ldr	r3, [r7, #8]
    PF6     ------> QUADSPI_BK1_IO3
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PF8     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 800262e:	2340      	movs	r3, #64	@ 0x40
 8002630:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002632:	2302      	movs	r3, #2
 8002634:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002636:	2300      	movs	r3, #0
 8002638:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800263a:	2303      	movs	r3, #3
 800263c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 800263e:	230a      	movs	r3, #10
 8002640:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8002642:	f107 0314 	add.w	r3, r7, #20
 8002646:	4619      	mov	r1, r3
 8002648:	4816      	ldr	r0, [pc, #88]	@ (80026a4 <HAL_QSPI_MspInit+0xec>)
 800264a:	f002 fe1f 	bl	800528c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_BK1_IO3_Pin|QSPI_CLK_Pin;
 800264e:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002652:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002654:	2302      	movs	r3, #2
 8002656:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002658:	2300      	movs	r3, #0
 800265a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800265c:	2303      	movs	r3, #3
 800265e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8002660:	2309      	movs	r3, #9
 8002662:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002664:	f107 0314 	add.w	r3, r7, #20
 8002668:	4619      	mov	r1, r3
 800266a:	480f      	ldr	r0, [pc, #60]	@ (80026a8 <HAL_QSPI_MspInit+0xf0>)
 800266c:	f002 fe0e 	bl	800528c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 8002670:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002674:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002676:	2302      	movs	r3, #2
 8002678:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267a:	2300      	movs	r3, #0
 800267c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800267e:	2303      	movs	r3, #3
 8002680:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8002682:	230a      	movs	r3, #10
 8002684:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002686:	f107 0314 	add.w	r3, r7, #20
 800268a:	4619      	mov	r1, r3
 800268c:	4806      	ldr	r0, [pc, #24]	@ (80026a8 <HAL_QSPI_MspInit+0xf0>)
 800268e:	f002 fdfd 	bl	800528c <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8002692:	bf00      	nop
 8002694:	3728      	adds	r7, #40	@ 0x28
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	a0001000 	.word	0xa0001000
 80026a0:	40023800 	.word	0x40023800
 80026a4:	40020400 	.word	0x40020400
 80026a8:	40021400 	.word	0x40021400

080026ac <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b08a      	sub	sp, #40	@ 0x28
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b4:	f107 0314 	add.w	r3, r7, #20
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	605a      	str	r2, [r3, #4]
 80026be:	609a      	str	r2, [r3, #8]
 80026c0:	60da      	str	r2, [r3, #12]
 80026c2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a28      	ldr	r2, [pc, #160]	@ (800276c <HAL_SD_MspInit+0xc0>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d14a      	bne.n	8002764 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80026ce:	2300      	movs	r3, #0
 80026d0:	613b      	str	r3, [r7, #16]
 80026d2:	4b27      	ldr	r3, [pc, #156]	@ (8002770 <HAL_SD_MspInit+0xc4>)
 80026d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d6:	4a26      	ldr	r2, [pc, #152]	@ (8002770 <HAL_SD_MspInit+0xc4>)
 80026d8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80026dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80026de:	4b24      	ldr	r3, [pc, #144]	@ (8002770 <HAL_SD_MspInit+0xc4>)
 80026e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026e6:	613b      	str	r3, [r7, #16]
 80026e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026ea:	2300      	movs	r3, #0
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	4b20      	ldr	r3, [pc, #128]	@ (8002770 <HAL_SD_MspInit+0xc4>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f2:	4a1f      	ldr	r2, [pc, #124]	@ (8002770 <HAL_SD_MspInit+0xc4>)
 80026f4:	f043 0304 	orr.w	r3, r3, #4
 80026f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026fa:	4b1d      	ldr	r3, [pc, #116]	@ (8002770 <HAL_SD_MspInit+0xc4>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fe:	f003 0304 	and.w	r3, r3, #4
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	60bb      	str	r3, [r7, #8]
 800270a:	4b19      	ldr	r3, [pc, #100]	@ (8002770 <HAL_SD_MspInit+0xc4>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270e:	4a18      	ldr	r2, [pc, #96]	@ (8002770 <HAL_SD_MspInit+0xc4>)
 8002710:	f043 0308 	orr.w	r3, r3, #8
 8002714:	6313      	str	r3, [r2, #48]	@ 0x30
 8002716:	4b16      	ldr	r3, [pc, #88]	@ (8002770 <HAL_SD_MspInit+0xc4>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800271a:	f003 0308 	and.w	r3, r3, #8
 800271e:	60bb      	str	r3, [r7, #8]
 8002720:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PD2     ------> SDIO_CMD
    PC9     ------> SDIO_D1
    PC8     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = uSD_CLK_Pin|uSD_D3_Pin|uSD_D2_Pin|uSD_D1_Pin
 8002722:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8002726:	617b      	str	r3, [r7, #20]
                          |uSD_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002728:	2302      	movs	r3, #2
 800272a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272c:	2300      	movs	r3, #0
 800272e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002730:	2303      	movs	r3, #3
 8002732:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002734:	230c      	movs	r3, #12
 8002736:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002738:	f107 0314 	add.w	r3, r7, #20
 800273c:	4619      	mov	r1, r3
 800273e:	480d      	ldr	r0, [pc, #52]	@ (8002774 <HAL_SD_MspInit+0xc8>)
 8002740:	f002 fda4 	bl	800528c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 8002744:	2304      	movs	r3, #4
 8002746:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002748:	2302      	movs	r3, #2
 800274a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274c:	2300      	movs	r3, #0
 800274e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002750:	2303      	movs	r3, #3
 8002752:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002754:	230c      	movs	r3, #12
 8002756:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8002758:	f107 0314 	add.w	r3, r7, #20
 800275c:	4619      	mov	r1, r3
 800275e:	4806      	ldr	r0, [pc, #24]	@ (8002778 <HAL_SD_MspInit+0xcc>)
 8002760:	f002 fd94 	bl	800528c <HAL_GPIO_Init>

  /* USER CODE END SDIO_MspInit 1 */

  }

}
 8002764:	bf00      	nop
 8002766:	3728      	adds	r7, #40	@ 0x28
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40012c00 	.word	0x40012c00
 8002770:	40023800 	.word	0x40023800
 8002774:	40020800 	.word	0x40020800
 8002778:	40020c00 	.word	0x40020c00

0800277c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a15      	ldr	r2, [pc, #84]	@ (80027e0 <HAL_TIM_Base_MspInit+0x64>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d10e      	bne.n	80027ac <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800278e:	2300      	movs	r3, #0
 8002790:	60fb      	str	r3, [r7, #12]
 8002792:	4b14      	ldr	r3, [pc, #80]	@ (80027e4 <HAL_TIM_Base_MspInit+0x68>)
 8002794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002796:	4a13      	ldr	r2, [pc, #76]	@ (80027e4 <HAL_TIM_Base_MspInit+0x68>)
 8002798:	f043 0301 	orr.w	r3, r3, #1
 800279c:	6453      	str	r3, [r2, #68]	@ 0x44
 800279e:	4b11      	ldr	r3, [pc, #68]	@ (80027e4 <HAL_TIM_Base_MspInit+0x68>)
 80027a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	60fb      	str	r3, [r7, #12]
 80027a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80027aa:	e012      	b.n	80027d2 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027b4:	d10d      	bne.n	80027d2 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027b6:	2300      	movs	r3, #0
 80027b8:	60bb      	str	r3, [r7, #8]
 80027ba:	4b0a      	ldr	r3, [pc, #40]	@ (80027e4 <HAL_TIM_Base_MspInit+0x68>)
 80027bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027be:	4a09      	ldr	r2, [pc, #36]	@ (80027e4 <HAL_TIM_Base_MspInit+0x68>)
 80027c0:	f043 0301 	orr.w	r3, r3, #1
 80027c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80027c6:	4b07      	ldr	r3, [pc, #28]	@ (80027e4 <HAL_TIM_Base_MspInit+0x68>)
 80027c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	60bb      	str	r3, [r7, #8]
 80027d0:	68bb      	ldr	r3, [r7, #8]
}
 80027d2:	bf00      	nop
 80027d4:	3714      	adds	r7, #20
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	40010000 	.word	0x40010000
 80027e4:	40023800 	.word	0x40023800

080027e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b08c      	sub	sp, #48	@ 0x30
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f0:	f107 031c 	add.w	r3, r7, #28
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	605a      	str	r2, [r3, #4]
 80027fa:	609a      	str	r2, [r3, #8]
 80027fc:	60da      	str	r2, [r3, #12]
 80027fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a4e      	ldr	r2, [pc, #312]	@ (8002940 <HAL_UART_MspInit+0x158>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d164      	bne.n	80028d4 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800280a:	2300      	movs	r3, #0
 800280c:	61bb      	str	r3, [r7, #24]
 800280e:	4b4d      	ldr	r3, [pc, #308]	@ (8002944 <HAL_UART_MspInit+0x15c>)
 8002810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002812:	4a4c      	ldr	r2, [pc, #304]	@ (8002944 <HAL_UART_MspInit+0x15c>)
 8002814:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002818:	6413      	str	r3, [r2, #64]	@ 0x40
 800281a:	4b4a      	ldr	r3, [pc, #296]	@ (8002944 <HAL_UART_MspInit+0x15c>)
 800281c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002822:	61bb      	str	r3, [r7, #24]
 8002824:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002826:	2300      	movs	r3, #0
 8002828:	617b      	str	r3, [r7, #20]
 800282a:	4b46      	ldr	r3, [pc, #280]	@ (8002944 <HAL_UART_MspInit+0x15c>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282e:	4a45      	ldr	r2, [pc, #276]	@ (8002944 <HAL_UART_MspInit+0x15c>)
 8002830:	f043 0302 	orr.w	r3, r3, #2
 8002834:	6313      	str	r3, [r2, #48]	@ 0x30
 8002836:	4b43      	ldr	r3, [pc, #268]	@ (8002944 <HAL_UART_MspInit+0x15c>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	617b      	str	r3, [r7, #20]
 8002840:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002842:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002846:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002848:	2302      	movs	r3, #2
 800284a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800284c:	2301      	movs	r3, #1
 800284e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002850:	2303      	movs	r3, #3
 8002852:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002854:	2307      	movs	r3, #7
 8002856:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002858:	f107 031c 	add.w	r3, r7, #28
 800285c:	4619      	mov	r1, r3
 800285e:	483a      	ldr	r0, [pc, #232]	@ (8002948 <HAL_UART_MspInit+0x160>)
 8002860:	f002 fd14 	bl	800528c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8002864:	4b39      	ldr	r3, [pc, #228]	@ (800294c <HAL_UART_MspInit+0x164>)
 8002866:	4a3a      	ldr	r2, [pc, #232]	@ (8002950 <HAL_UART_MspInit+0x168>)
 8002868:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800286a:	4b38      	ldr	r3, [pc, #224]	@ (800294c <HAL_UART_MspInit+0x164>)
 800286c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002870:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002872:	4b36      	ldr	r3, [pc, #216]	@ (800294c <HAL_UART_MspInit+0x164>)
 8002874:	2240      	movs	r2, #64	@ 0x40
 8002876:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002878:	4b34      	ldr	r3, [pc, #208]	@ (800294c <HAL_UART_MspInit+0x164>)
 800287a:	2200      	movs	r2, #0
 800287c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800287e:	4b33      	ldr	r3, [pc, #204]	@ (800294c <HAL_UART_MspInit+0x164>)
 8002880:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002884:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002886:	4b31      	ldr	r3, [pc, #196]	@ (800294c <HAL_UART_MspInit+0x164>)
 8002888:	2200      	movs	r2, #0
 800288a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800288c:	4b2f      	ldr	r3, [pc, #188]	@ (800294c <HAL_UART_MspInit+0x164>)
 800288e:	2200      	movs	r2, #0
 8002890:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002892:	4b2e      	ldr	r3, [pc, #184]	@ (800294c <HAL_UART_MspInit+0x164>)
 8002894:	2200      	movs	r2, #0
 8002896:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002898:	4b2c      	ldr	r3, [pc, #176]	@ (800294c <HAL_UART_MspInit+0x164>)
 800289a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800289e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028a0:	4b2a      	ldr	r3, [pc, #168]	@ (800294c <HAL_UART_MspInit+0x164>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80028a6:	4829      	ldr	r0, [pc, #164]	@ (800294c <HAL_UART_MspInit+0x164>)
 80028a8:	f001 f8ee 	bl	8003a88 <HAL_DMA_Init>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80028b2:	f7ff fc17 	bl	80020e4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a24      	ldr	r2, [pc, #144]	@ (800294c <HAL_UART_MspInit+0x164>)
 80028ba:	639a      	str	r2, [r3, #56]	@ 0x38
 80028bc:	4a23      	ldr	r2, [pc, #140]	@ (800294c <HAL_UART_MspInit+0x164>)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80028c2:	2200      	movs	r2, #0
 80028c4:	2105      	movs	r1, #5
 80028c6:	2027      	movs	r0, #39	@ 0x27
 80028c8:	f000 ffb2 	bl	8003830 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80028cc:	2027      	movs	r0, #39	@ 0x27
 80028ce:	f000 ffcb 	bl	8003868 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80028d2:	e031      	b.n	8002938 <HAL_UART_MspInit+0x150>
  else if(huart->Instance==USART6)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a1e      	ldr	r2, [pc, #120]	@ (8002954 <HAL_UART_MspInit+0x16c>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d12c      	bne.n	8002938 <HAL_UART_MspInit+0x150>
    __HAL_RCC_USART6_CLK_ENABLE();
 80028de:	2300      	movs	r3, #0
 80028e0:	613b      	str	r3, [r7, #16]
 80028e2:	4b18      	ldr	r3, [pc, #96]	@ (8002944 <HAL_UART_MspInit+0x15c>)
 80028e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028e6:	4a17      	ldr	r2, [pc, #92]	@ (8002944 <HAL_UART_MspInit+0x15c>)
 80028e8:	f043 0320 	orr.w	r3, r3, #32
 80028ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80028ee:	4b15      	ldr	r3, [pc, #84]	@ (8002944 <HAL_UART_MspInit+0x15c>)
 80028f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f2:	f003 0320 	and.w	r3, r3, #32
 80028f6:	613b      	str	r3, [r7, #16]
 80028f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80028fa:	2300      	movs	r3, #0
 80028fc:	60fb      	str	r3, [r7, #12]
 80028fe:	4b11      	ldr	r3, [pc, #68]	@ (8002944 <HAL_UART_MspInit+0x15c>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002902:	4a10      	ldr	r2, [pc, #64]	@ (8002944 <HAL_UART_MspInit+0x15c>)
 8002904:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002908:	6313      	str	r3, [r2, #48]	@ 0x30
 800290a:	4b0e      	ldr	r3, [pc, #56]	@ (8002944 <HAL_UART_MspInit+0x15c>)
 800290c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800290e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002912:	60fb      	str	r3, [r7, #12]
 8002914:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_USART6_TX_Pin|USART6_RX_Pin;
 8002916:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 800291a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291c:	2302      	movs	r3, #2
 800291e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002920:	2300      	movs	r3, #0
 8002922:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002924:	2303      	movs	r3, #3
 8002926:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002928:	2308      	movs	r3, #8
 800292a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800292c:	f107 031c 	add.w	r3, r7, #28
 8002930:	4619      	mov	r1, r3
 8002932:	4809      	ldr	r0, [pc, #36]	@ (8002958 <HAL_UART_MspInit+0x170>)
 8002934:	f002 fcaa 	bl	800528c <HAL_GPIO_Init>
}
 8002938:	bf00      	nop
 800293a:	3730      	adds	r7, #48	@ 0x30
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	40004800 	.word	0x40004800
 8002944:	40023800 	.word	0x40023800
 8002948:	40020400 	.word	0x40020400
 800294c:	200005c4 	.word	0x200005c4
 8002950:	40026058 	.word	0x40026058
 8002954:	40011400 	.word	0x40011400
 8002958:	40021800 	.word	0x40021800

0800295c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002962:	1d3b      	adds	r3, r7, #4
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	60da      	str	r2, [r3, #12]
 800296e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002970:	4b44      	ldr	r3, [pc, #272]	@ (8002a84 <HAL_FMC_MspInit+0x128>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	f040 8081 	bne.w	8002a7c <HAL_FMC_MspInit+0x120>
    return;
  }
  FMC_Initialized = 1;
 800297a:	4b42      	ldr	r3, [pc, #264]	@ (8002a84 <HAL_FMC_MspInit+0x128>)
 800297c:	2201      	movs	r2, #1
 800297e:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002980:	2300      	movs	r3, #0
 8002982:	603b      	str	r3, [r7, #0]
 8002984:	4b40      	ldr	r3, [pc, #256]	@ (8002a88 <HAL_FMC_MspInit+0x12c>)
 8002986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002988:	4a3f      	ldr	r2, [pc, #252]	@ (8002a88 <HAL_FMC_MspInit+0x12c>)
 800298a:	f043 0301 	orr.w	r3, r3, #1
 800298e:	6393      	str	r3, [r2, #56]	@ 0x38
 8002990:	4b3d      	ldr	r3, [pc, #244]	@ (8002a88 <HAL_FMC_MspInit+0x12c>)
 8002992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	603b      	str	r3, [r7, #0]
 800299a:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|D5_Pin|D6_Pin
 800299c:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80029a0:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D11_Pin|D4_Pin|D7_Pin
                          |D9_Pin|D12_Pin|D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a2:	2302      	movs	r3, #2
 80029a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a6:	2300      	movs	r3, #0
 80029a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029aa:	2303      	movs	r3, #3
 80029ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80029ae:	230c      	movs	r3, #12
 80029b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029b2:	1d3b      	adds	r3, r7, #4
 80029b4:	4619      	mov	r1, r3
 80029b6:	4835      	ldr	r0, [pc, #212]	@ (8002a8c <HAL_FMC_MspInit+0x130>)
 80029b8:	f002 fc68 	bl	800528c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A11_Pin|A10_Pin
 80029bc:	f248 1333 	movw	r3, #33075	@ 0x8133
 80029c0:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c2:	2302      	movs	r3, #2
 80029c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c6:	2300      	movs	r3, #0
 80029c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ca:	2303      	movs	r3, #3
 80029cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80029ce:	230c      	movs	r3, #12
 80029d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80029d2:	1d3b      	adds	r3, r7, #4
 80029d4:	4619      	mov	r1, r3
 80029d6:	482e      	ldr	r0, [pc, #184]	@ (8002a90 <HAL_FMC_MspInit+0x134>)
 80029d8:	f002 fc58 	bl	800528c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|D3_Pin|D1_Pin|D15_Pin
 80029dc:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80029e0:	607b      	str	r3, [r7, #4]
                          |D0_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e2:	2302      	movs	r3, #2
 80029e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e6:	2300      	movs	r3, #0
 80029e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ea:	2303      	movs	r3, #3
 80029ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80029ee:	230c      	movs	r3, #12
 80029f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029f2:	1d3b      	adds	r3, r7, #4
 80029f4:	4619      	mov	r1, r3
 80029f6:	4827      	ldr	r0, [pc, #156]	@ (8002a94 <HAL_FMC_MspInit+0x138>)
 80029f8:	f002 fc48 	bl	800528c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 80029fc:	f240 63ff 	movw	r3, #1791	@ 0x6ff
 8002a00:	607b      	str	r3, [r7, #4]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a02:	2302      	movs	r3, #2
 8002a04:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a06:	2300      	movs	r3, #0
 8002a08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a0e:	230c      	movs	r3, #12
 8002a10:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002a12:	1d3b      	adds	r3, r7, #4
 8002a14:	4619      	mov	r1, r3
 8002a16:	4820      	ldr	r0, [pc, #128]	@ (8002a98 <HAL_FMC_MspInit+0x13c>)
 8002a18:	f002 fc38 	bl	800528c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8002a1c:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8002a20:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|A6_Pin|A9_Pin
                          |A7_Pin|A8_Pin|SDNMT48LC4M32B2B5_6A_RAS_RAS___Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a22:	2302      	movs	r3, #2
 8002a24:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a26:	2300      	movs	r3, #0
 8002a28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a2e:	230c      	movs	r3, #12
 8002a30:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a32:	1d3b      	adds	r3, r7, #4
 8002a34:	4619      	mov	r1, r3
 8002a36:	4819      	ldr	r0, [pc, #100]	@ (8002a9c <HAL_FMC_MspInit+0x140>)
 8002a38:	f002 fc28 	bl	800528c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|SDNE0_Pin
 8002a3c:	f64f 730c 	movw	r3, #65292	@ 0xff0c
 8002a40:	607b      	str	r3, [r7, #4]
                          |SDCKE0_Pin|D20_Pin|D17_Pin|D19_Pin
                          |D16_Pin|D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a42:	2302      	movs	r3, #2
 8002a44:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a46:	2300      	movs	r3, #0
 8002a48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a4e:	230c      	movs	r3, #12
 8002a50:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002a52:	1d3b      	adds	r3, r7, #4
 8002a54:	4619      	mov	r1, r3
 8002a56:	4812      	ldr	r0, [pc, #72]	@ (8002aa0 <HAL_FMC_MspInit+0x144>)
 8002a58:	f002 fc18 	bl	800528c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a60:	2302      	movs	r3, #2
 8002a62:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a64:	2300      	movs	r3, #0
 8002a66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a6c:	230c      	movs	r3, #12
 8002a6e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8002a70:	1d3b      	adds	r3, r7, #4
 8002a72:	4619      	mov	r1, r3
 8002a74:	480b      	ldr	r0, [pc, #44]	@ (8002aa4 <HAL_FMC_MspInit+0x148>)
 8002a76:	f002 fc09 	bl	800528c <HAL_GPIO_Init>
 8002a7a:	e000      	b.n	8002a7e <HAL_FMC_MspInit+0x122>
    return;
 8002a7c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002a7e:	3718      	adds	r7, #24
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	20001688 	.word	0x20001688
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	40021800 	.word	0x40021800
 8002a94:	40020c00 	.word	0x40020c00
 8002a98:	40022000 	.word	0x40022000
 8002a9c:	40021400 	.word	0x40021400
 8002aa0:	40021c00 	.word	0x40021c00
 8002aa4:	40020800 	.word	0x40020800

08002aa8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002ab0:	f7ff ff54 	bl	800295c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002ab4:	bf00      	nop
 8002ab6:	3708      	adds	r7, #8
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b088      	sub	sp, #32
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a26      	ldr	r2, [pc, #152]	@ (8002b64 <HAL_SAI_MspInit+0xa8>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d146      	bne.n	8002b5c <HAL_SAI_MspInit+0xa0>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8002ace:	4b26      	ldr	r3, [pc, #152]	@ (8002b68 <HAL_SAI_MspInit+0xac>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10d      	bne.n	8002af2 <HAL_SAI_MspInit+0x36>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	60bb      	str	r3, [r7, #8]
 8002ada:	4b24      	ldr	r3, [pc, #144]	@ (8002b6c <HAL_SAI_MspInit+0xb0>)
 8002adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ade:	4a23      	ldr	r2, [pc, #140]	@ (8002b6c <HAL_SAI_MspInit+0xb0>)
 8002ae0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002ae4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ae6:	4b21      	ldr	r3, [pc, #132]	@ (8002b6c <HAL_SAI_MspInit+0xb0>)
 8002ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002aee:	60bb      	str	r3, [r7, #8]
 8002af0:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 8002af2:	4b1d      	ldr	r3, [pc, #116]	@ (8002b68 <HAL_SAI_MspInit+0xac>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	3301      	adds	r3, #1
 8002af8:	4a1b      	ldr	r2, [pc, #108]	@ (8002b68 <HAL_SAI_MspInit+0xac>)
 8002afa:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PD6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SCKA_Pin;
 8002afc:	2330      	movs	r3, #48	@ 0x30
 8002afe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b00:	2302      	movs	r3, #2
 8002b02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b04:	2300      	movs	r3, #0
 8002b06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002b0c:	2306      	movs	r3, #6
 8002b0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b10:	f107 030c 	add.w	r3, r7, #12
 8002b14:	4619      	mov	r1, r3
 8002b16:	4816      	ldr	r0, [pc, #88]	@ (8002b70 <HAL_SAI_MspInit+0xb4>)
 8002b18:	f002 fbb8 	bl	800528c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MIC_DATA_Pin;
 8002b1c:	2340      	movs	r3, #64	@ 0x40
 8002b1e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b20:	2302      	movs	r3, #2
 8002b22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b24:	2300      	movs	r3, #0
 8002b26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002b2c:	2306      	movs	r3, #6
 8002b2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MIC_DATA_GPIO_Port, &GPIO_InitStruct);
 8002b30:	f107 030c 	add.w	r3, r7, #12
 8002b34:	4619      	mov	r1, r3
 8002b36:	480f      	ldr	r0, [pc, #60]	@ (8002b74 <HAL_SAI_MspInit+0xb8>)
 8002b38:	f002 fba8 	bl	800528c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8002b3c:	2380      	movs	r3, #128	@ 0x80
 8002b3e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b40:	2302      	movs	r3, #2
 8002b42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b44:	2300      	movs	r3, #0
 8002b46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002b4c:	2306      	movs	r3, #6
 8002b4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8002b50:	f107 030c 	add.w	r3, r7, #12
 8002b54:	4619      	mov	r1, r3
 8002b56:	4808      	ldr	r0, [pc, #32]	@ (8002b78 <HAL_SAI_MspInit+0xbc>)
 8002b58:	f002 fb98 	bl	800528c <HAL_GPIO_Init>

    }
}
 8002b5c:	bf00      	nop
 8002b5e:	3720      	adds	r7, #32
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	40015804 	.word	0x40015804
 8002b68:	2000168c 	.word	0x2000168c
 8002b6c:	40023800 	.word	0x40023800
 8002b70:	40021000 	.word	0x40021000
 8002b74:	40020c00 	.word	0x40020c00
 8002b78:	40021800 	.word	0x40021800

08002b7c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b08e      	sub	sp, #56	@ 0x38
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002b84:	2300      	movs	r3, #0
 8002b86:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	60fb      	str	r3, [r7, #12]
 8002b90:	4b33      	ldr	r3, [pc, #204]	@ (8002c60 <HAL_InitTick+0xe4>)
 8002b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b94:	4a32      	ldr	r2, [pc, #200]	@ (8002c60 <HAL_InitTick+0xe4>)
 8002b96:	f043 0310 	orr.w	r3, r3, #16
 8002b9a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b9c:	4b30      	ldr	r3, [pc, #192]	@ (8002c60 <HAL_InitTick+0xe4>)
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba0:	f003 0310 	and.w	r3, r3, #16
 8002ba4:	60fb      	str	r3, [r7, #12]
 8002ba6:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ba8:	f107 0210 	add.w	r2, r7, #16
 8002bac:	f107 0314 	add.w	r3, r7, #20
 8002bb0:	4611      	mov	r1, r2
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f003 fd26 	bl	8006604 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002bb8:	6a3b      	ldr	r3, [r7, #32]
 8002bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d103      	bne.n	8002bca <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002bc2:	f003 fcf7 	bl	80065b4 <HAL_RCC_GetPCLK1Freq>
 8002bc6:	6378      	str	r0, [r7, #52]	@ 0x34
 8002bc8:	e004      	b.n	8002bd4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002bca:	f003 fcf3 	bl	80065b4 <HAL_RCC_GetPCLK1Freq>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002bd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bd6:	4a23      	ldr	r2, [pc, #140]	@ (8002c64 <HAL_InitTick+0xe8>)
 8002bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bdc:	0c9b      	lsrs	r3, r3, #18
 8002bde:	3b01      	subs	r3, #1
 8002be0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002be2:	4b21      	ldr	r3, [pc, #132]	@ (8002c68 <HAL_InitTick+0xec>)
 8002be4:	4a21      	ldr	r2, [pc, #132]	@ (8002c6c <HAL_InitTick+0xf0>)
 8002be6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002be8:	4b1f      	ldr	r3, [pc, #124]	@ (8002c68 <HAL_InitTick+0xec>)
 8002bea:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002bee:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002bf0:	4a1d      	ldr	r2, [pc, #116]	@ (8002c68 <HAL_InitTick+0xec>)
 8002bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bf4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002bf6:	4b1c      	ldr	r3, [pc, #112]	@ (8002c68 <HAL_InitTick+0xec>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bfc:	4b1a      	ldr	r3, [pc, #104]	@ (8002c68 <HAL_InitTick+0xec>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c02:	4b19      	ldr	r3, [pc, #100]	@ (8002c68 <HAL_InitTick+0xec>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002c08:	4817      	ldr	r0, [pc, #92]	@ (8002c68 <HAL_InitTick+0xec>)
 8002c0a:	f005 fce0 	bl	80085ce <HAL_TIM_Base_Init>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002c14:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d11b      	bne.n	8002c54 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002c1c:	4812      	ldr	r0, [pc, #72]	@ (8002c68 <HAL_InitTick+0xec>)
 8002c1e:	f005 fd8d 	bl	800873c <HAL_TIM_Base_Start_IT>
 8002c22:	4603      	mov	r3, r0
 8002c24:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002c28:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d111      	bne.n	8002c54 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002c30:	2036      	movs	r0, #54	@ 0x36
 8002c32:	f000 fe19 	bl	8003868 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2b0f      	cmp	r3, #15
 8002c3a:	d808      	bhi.n	8002c4e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	6879      	ldr	r1, [r7, #4]
 8002c40:	2036      	movs	r0, #54	@ 0x36
 8002c42:	f000 fdf5 	bl	8003830 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c46:	4a0a      	ldr	r2, [pc, #40]	@ (8002c70 <HAL_InitTick+0xf4>)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6013      	str	r3, [r2, #0]
 8002c4c:	e002      	b.n	8002c54 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002c54:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3738      	adds	r7, #56	@ 0x38
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	40023800 	.word	0x40023800
 8002c64:	431bde83 	.word	0x431bde83
 8002c68:	20001690 	.word	0x20001690
 8002c6c:	40001000 	.word	0x40001000
 8002c70:	20000004 	.word	0x20000004

08002c74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c78:	bf00      	nop
 8002c7a:	e7fd      	b.n	8002c78 <NMI_Handler+0x4>

08002c7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c80:	bf00      	nop
 8002c82:	e7fd      	b.n	8002c80 <HardFault_Handler+0x4>

08002c84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c88:	bf00      	nop
 8002c8a:	e7fd      	b.n	8002c88 <MemManage_Handler+0x4>

08002c8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c90:	bf00      	nop
 8002c92:	e7fd      	b.n	8002c90 <BusFault_Handler+0x4>

08002c94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c98:	bf00      	nop
 8002c9a:	e7fd      	b.n	8002c98 <UsageFault_Handler+0x4>

08002c9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ca0:	bf00      	nop
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
	...

08002cac <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002cb0:	4802      	ldr	r0, [pc, #8]	@ (8002cbc <DMA1_Stream3_IRQHandler+0x10>)
 8002cb2:	f001 f881 	bl	8003db8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002cb6:	bf00      	nop
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	200005c4 	.word	0x200005c4

08002cc0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8002cc4:	4802      	ldr	r0, [pc, #8]	@ (8002cd0 <DMA1_Stream5_IRQHandler+0x10>)
 8002cc6:	f001 f877 	bl	8003db8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002cca:	bf00      	nop
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	20000140 	.word	0x20000140

08002cd4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002cd8:	4802      	ldr	r0, [pc, #8]	@ (8002ce4 <USART3_IRQHandler+0x10>)
 8002cda:	f006 fa15 	bl	8009108 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002cde:	bf00      	nop
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	20000534 	.word	0x20000534

08002ce8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8002cec:	4b06      	ldr	r3, [pc, #24]	@ (8002d08 <TIM6_DAC_IRQHandler+0x20>)
 8002cee:	791b      	ldrb	r3, [r3, #4]
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d002      	beq.n	8002cfc <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8002cf6:	4804      	ldr	r0, [pc, #16]	@ (8002d08 <TIM6_DAC_IRQHandler+0x20>)
 8002cf8:	f000 fe02 	bl	8003900 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8002cfc:	4803      	ldr	r0, [pc, #12]	@ (8002d0c <TIM6_DAC_IRQHandler+0x24>)
 8002cfe:	f005 fd8d 	bl	800881c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002d02:	bf00      	nop
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	2000012c 	.word	0x2000012c
 8002d0c:	20001690 	.word	0x20001690

08002d10 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002d14:	4802      	ldr	r0, [pc, #8]	@ (8002d20 <DMA2_Stream0_IRQHandler+0x10>)
 8002d16:	f001 f84f 	bl	8003db8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002d1a:	bf00      	nop
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	200000c4 	.word	0x200000c4

08002d24 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002d28:	4802      	ldr	r0, [pc, #8]	@ (8002d34 <LTDC_IRQHandler+0x10>)
 8002d2a:	f002 fea1 	bl	8005a70 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002d2e:	bf00      	nop
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	200002a4 	.word	0x200002a4

08002d38 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002d3c:	4802      	ldr	r0, [pc, #8]	@ (8002d48 <DMA2D_IRQHandler+0x10>)
 8002d3e:	f001 fafa 	bl	8004336 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002d42:	bf00      	nop
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	200001a0 	.word	0x200001a0

08002d4c <DSI_IRQHandler>:

/**
  * @brief This function handles DSI global interrupt.
  */
void DSI_IRQHandler(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8002d50:	4802      	ldr	r0, [pc, #8]	@ (8002d5c <DSI_IRQHandler+0x10>)
 8002d52:	f001 fed0 	bl	8004af6 <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 8002d56:	bf00      	nop
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	200001e0 	.word	0x200001e0

08002d60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d64:	4b06      	ldr	r3, [pc, #24]	@ (8002d80 <SystemInit+0x20>)
 8002d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d6a:	4a05      	ldr	r2, [pc, #20]	@ (8002d80 <SystemInit+0x20>)
 8002d6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d74:	bf00      	nop
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	e000ed00 	.word	0xe000ed00

08002d84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002d84:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002dbc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002d88:	f7ff ffea 	bl	8002d60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d8c:	480c      	ldr	r0, [pc, #48]	@ (8002dc0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d8e:	490d      	ldr	r1, [pc, #52]	@ (8002dc4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d90:	4a0d      	ldr	r2, [pc, #52]	@ (8002dc8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d94:	e002      	b.n	8002d9c <LoopCopyDataInit>

08002d96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d9a:	3304      	adds	r3, #4

08002d9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002da0:	d3f9      	bcc.n	8002d96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002da2:	4a0a      	ldr	r2, [pc, #40]	@ (8002dcc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002da4:	4c0a      	ldr	r4, [pc, #40]	@ (8002dd0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002da6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002da8:	e001      	b.n	8002dae <LoopFillZerobss>

08002daa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002daa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dac:	3204      	adds	r2, #4

08002dae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002db0:	d3fb      	bcc.n	8002daa <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002db2:	f00c ffaf 	bl	800fd14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002db6:	f7fd ff23 	bl	8000c00 <main>
  bx  lr    
 8002dba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002dbc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002dc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dc4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002dc8:	0802e254 	.word	0x0802e254
  ldr r2, =_sbss
 8002dcc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002dd0:	2000a624 	.word	0x2000a624

08002dd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002dd4:	e7fe      	b.n	8002dd4 <ADC_IRQHandler>
	...

08002dd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ddc:	4b0e      	ldr	r3, [pc, #56]	@ (8002e18 <HAL_Init+0x40>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a0d      	ldr	r2, [pc, #52]	@ (8002e18 <HAL_Init+0x40>)
 8002de2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002de6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002de8:	4b0b      	ldr	r3, [pc, #44]	@ (8002e18 <HAL_Init+0x40>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a0a      	ldr	r2, [pc, #40]	@ (8002e18 <HAL_Init+0x40>)
 8002dee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002df2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002df4:	4b08      	ldr	r3, [pc, #32]	@ (8002e18 <HAL_Init+0x40>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a07      	ldr	r2, [pc, #28]	@ (8002e18 <HAL_Init+0x40>)
 8002dfa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e00:	2003      	movs	r0, #3
 8002e02:	f000 fd0a 	bl	800381a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e06:	2005      	movs	r0, #5
 8002e08:	f7ff feb8 	bl	8002b7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e0c:	f7ff f970 	bl	80020f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	40023c00 	.word	0x40023c00

08002e1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e20:	4b06      	ldr	r3, [pc, #24]	@ (8002e3c <HAL_IncTick+0x20>)
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	461a      	mov	r2, r3
 8002e26:	4b06      	ldr	r3, [pc, #24]	@ (8002e40 <HAL_IncTick+0x24>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	4a04      	ldr	r2, [pc, #16]	@ (8002e40 <HAL_IncTick+0x24>)
 8002e2e:	6013      	str	r3, [r2, #0]
}
 8002e30:	bf00      	nop
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	20000008 	.word	0x20000008
 8002e40:	200016d8 	.word	0x200016d8

08002e44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
  return uwTick;
 8002e48:	4b03      	ldr	r3, [pc, #12]	@ (8002e58 <HAL_GetTick+0x14>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	200016d8 	.word	0x200016d8

08002e5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e64:	f7ff ffee 	bl	8002e44 <HAL_GetTick>
 8002e68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e74:	d005      	beq.n	8002e82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e76:	4b0a      	ldr	r3, [pc, #40]	@ (8002ea0 <HAL_Delay+0x44>)
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	4413      	add	r3, r2
 8002e80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e82:	bf00      	nop
 8002e84:	f7ff ffde 	bl	8002e44 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d8f7      	bhi.n	8002e84 <HAL_Delay+0x28>
  {
  }
}
 8002e94:	bf00      	nop
 8002e96:	bf00      	nop
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	20000008 	.word	0x20000008

08002ea4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002eac:	2300      	movs	r3, #0
 8002eae:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e033      	b.n	8002f22 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d109      	bne.n	8002ed6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7ff f940 	bl	8002148 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eda:	f003 0310 	and.w	r3, r3, #16
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d118      	bne.n	8002f14 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002eea:	f023 0302 	bic.w	r3, r3, #2
 8002eee:	f043 0202 	orr.w	r2, r3, #2
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 fa64 	bl	80033c4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f06:	f023 0303 	bic.w	r3, r3, #3
 8002f0a:	f043 0201 	orr.w	r2, r3, #1
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	641a      	str	r2, [r3, #64]	@ 0x40
 8002f12:	e001      	b.n	8002f18 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
	...

08002f2c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d101      	bne.n	8002f4a <HAL_ADC_Start_DMA+0x1e>
 8002f46:	2302      	movs	r3, #2
 8002f48:	e0e9      	b.n	800311e <HAL_ADC_Start_DMA+0x1f2>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d018      	beq.n	8002f92 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689a      	ldr	r2, [r3, #8]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f042 0201 	orr.w	r2, r2, #1
 8002f6e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f70:	4b6d      	ldr	r3, [pc, #436]	@ (8003128 <HAL_ADC_Start_DMA+0x1fc>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a6d      	ldr	r2, [pc, #436]	@ (800312c <HAL_ADC_Start_DMA+0x200>)
 8002f76:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7a:	0c9a      	lsrs	r2, r3, #18
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	4413      	add	r3, r2
 8002f82:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002f84:	e002      	b.n	8002f8c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1f9      	bne.n	8002f86 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fa0:	d107      	bne.n	8002fb2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002fb0:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	f040 80a1 	bne.w	8003104 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002fca:	f023 0301 	bic.w	r3, r3, #1
 8002fce:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d007      	beq.n	8002ff4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002fec:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ffc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003000:	d106      	bne.n	8003010 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003006:	f023 0206 	bic.w	r2, r3, #6
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	645a      	str	r2, [r3, #68]	@ 0x44
 800300e:	e002      	b.n	8003016 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800301e:	4b44      	ldr	r3, [pc, #272]	@ (8003130 <HAL_ADC_Start_DMA+0x204>)
 8003020:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003026:	4a43      	ldr	r2, [pc, #268]	@ (8003134 <HAL_ADC_Start_DMA+0x208>)
 8003028:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800302e:	4a42      	ldr	r2, [pc, #264]	@ (8003138 <HAL_ADC_Start_DMA+0x20c>)
 8003030:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003036:	4a41      	ldr	r2, [pc, #260]	@ (800313c <HAL_ADC_Start_DMA+0x210>)
 8003038:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003042:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	685a      	ldr	r2, [r3, #4]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003052:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689a      	ldr	r2, [r3, #8]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003062:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	334c      	adds	r3, #76	@ 0x4c
 800306e:	4619      	mov	r1, r3
 8003070:	68ba      	ldr	r2, [r7, #8]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f000 fdb6 	bl	8003be4 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f003 031f 	and.w	r3, r3, #31
 8003080:	2b00      	cmp	r3, #0
 8003082:	d12a      	bne.n	80030da <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a2d      	ldr	r2, [pc, #180]	@ (8003140 <HAL_ADC_Start_DMA+0x214>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d015      	beq.n	80030ba <HAL_ADC_Start_DMA+0x18e>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a2c      	ldr	r2, [pc, #176]	@ (8003144 <HAL_ADC_Start_DMA+0x218>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d105      	bne.n	80030a4 <HAL_ADC_Start_DMA+0x178>
 8003098:	4b25      	ldr	r3, [pc, #148]	@ (8003130 <HAL_ADC_Start_DMA+0x204>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f003 031f 	and.w	r3, r3, #31
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d00a      	beq.n	80030ba <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a27      	ldr	r2, [pc, #156]	@ (8003148 <HAL_ADC_Start_DMA+0x21c>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d136      	bne.n	800311c <HAL_ADC_Start_DMA+0x1f0>
 80030ae:	4b20      	ldr	r3, [pc, #128]	@ (8003130 <HAL_ADC_Start_DMA+0x204>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f003 0310 	and.w	r3, r3, #16
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d130      	bne.n	800311c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d129      	bne.n	800311c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689a      	ldr	r2, [r3, #8]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80030d6:	609a      	str	r2, [r3, #8]
 80030d8:	e020      	b.n	800311c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a18      	ldr	r2, [pc, #96]	@ (8003140 <HAL_ADC_Start_DMA+0x214>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d11b      	bne.n	800311c <HAL_ADC_Start_DMA+0x1f0>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d114      	bne.n	800311c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	689a      	ldr	r2, [r3, #8]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003100:	609a      	str	r2, [r3, #8]
 8003102:	e00b      	b.n	800311c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003108:	f043 0210 	orr.w	r2, r3, #16
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003114:	f043 0201 	orr.w	r2, r3, #1
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3718      	adds	r7, #24
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	20000000 	.word	0x20000000
 800312c:	431bde83 	.word	0x431bde83
 8003130:	40012300 	.word	0x40012300
 8003134:	080035bd 	.word	0x080035bd
 8003138:	08003677 	.word	0x08003677
 800313c:	08003693 	.word	0x08003693
 8003140:	40012000 	.word	0x40012000
 8003144:	40012100 	.word	0x40012100
 8003148:	40012200 	.word	0x40012200

0800314c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003160:	b480      	push	{r7}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800316a:	2300      	movs	r3, #0
 800316c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003174:	2b01      	cmp	r3, #1
 8003176:	d101      	bne.n	800317c <HAL_ADC_ConfigChannel+0x1c>
 8003178:	2302      	movs	r3, #2
 800317a:	e113      	b.n	80033a4 <HAL_ADC_ConfigChannel+0x244>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2b09      	cmp	r3, #9
 800318a:	d925      	bls.n	80031d8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68d9      	ldr	r1, [r3, #12]
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	b29b      	uxth	r3, r3
 8003198:	461a      	mov	r2, r3
 800319a:	4613      	mov	r3, r2
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	4413      	add	r3, r2
 80031a0:	3b1e      	subs	r3, #30
 80031a2:	2207      	movs	r2, #7
 80031a4:	fa02 f303 	lsl.w	r3, r2, r3
 80031a8:	43da      	mvns	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	400a      	ands	r2, r1
 80031b0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68d9      	ldr	r1, [r3, #12]
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	689a      	ldr	r2, [r3, #8]
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	4618      	mov	r0, r3
 80031c4:	4603      	mov	r3, r0
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	4403      	add	r3, r0
 80031ca:	3b1e      	subs	r3, #30
 80031cc:	409a      	lsls	r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	430a      	orrs	r2, r1
 80031d4:	60da      	str	r2, [r3, #12]
 80031d6:	e022      	b.n	800321e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6919      	ldr	r1, [r3, #16]
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	461a      	mov	r2, r3
 80031e6:	4613      	mov	r3, r2
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	4413      	add	r3, r2
 80031ec:	2207      	movs	r2, #7
 80031ee:	fa02 f303 	lsl.w	r3, r2, r3
 80031f2:	43da      	mvns	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	400a      	ands	r2, r1
 80031fa:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6919      	ldr	r1, [r3, #16]
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	689a      	ldr	r2, [r3, #8]
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	b29b      	uxth	r3, r3
 800320c:	4618      	mov	r0, r3
 800320e:	4603      	mov	r3, r0
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	4403      	add	r3, r0
 8003214:	409a      	lsls	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	430a      	orrs	r2, r1
 800321c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	2b06      	cmp	r3, #6
 8003224:	d824      	bhi.n	8003270 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685a      	ldr	r2, [r3, #4]
 8003230:	4613      	mov	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4413      	add	r3, r2
 8003236:	3b05      	subs	r3, #5
 8003238:	221f      	movs	r2, #31
 800323a:	fa02 f303 	lsl.w	r3, r2, r3
 800323e:	43da      	mvns	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	400a      	ands	r2, r1
 8003246:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	b29b      	uxth	r3, r3
 8003254:	4618      	mov	r0, r3
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	685a      	ldr	r2, [r3, #4]
 800325a:	4613      	mov	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4413      	add	r3, r2
 8003260:	3b05      	subs	r3, #5
 8003262:	fa00 f203 	lsl.w	r2, r0, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	430a      	orrs	r2, r1
 800326c:	635a      	str	r2, [r3, #52]	@ 0x34
 800326e:	e04c      	b.n	800330a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	2b0c      	cmp	r3, #12
 8003276:	d824      	bhi.n	80032c2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	685a      	ldr	r2, [r3, #4]
 8003282:	4613      	mov	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	4413      	add	r3, r2
 8003288:	3b23      	subs	r3, #35	@ 0x23
 800328a:	221f      	movs	r2, #31
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	43da      	mvns	r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	400a      	ands	r2, r1
 8003298:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	4618      	mov	r0, r3
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685a      	ldr	r2, [r3, #4]
 80032ac:	4613      	mov	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4413      	add	r3, r2
 80032b2:	3b23      	subs	r3, #35	@ 0x23
 80032b4:	fa00 f203 	lsl.w	r2, r0, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	430a      	orrs	r2, r1
 80032be:	631a      	str	r2, [r3, #48]	@ 0x30
 80032c0:	e023      	b.n	800330a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685a      	ldr	r2, [r3, #4]
 80032cc:	4613      	mov	r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	4413      	add	r3, r2
 80032d2:	3b41      	subs	r3, #65	@ 0x41
 80032d4:	221f      	movs	r2, #31
 80032d6:	fa02 f303 	lsl.w	r3, r2, r3
 80032da:	43da      	mvns	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	400a      	ands	r2, r1
 80032e2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	4618      	mov	r0, r3
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	685a      	ldr	r2, [r3, #4]
 80032f6:	4613      	mov	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4413      	add	r3, r2
 80032fc:	3b41      	subs	r3, #65	@ 0x41
 80032fe:	fa00 f203 	lsl.w	r2, r0, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	430a      	orrs	r2, r1
 8003308:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800330a:	4b29      	ldr	r3, [pc, #164]	@ (80033b0 <HAL_ADC_ConfigChannel+0x250>)
 800330c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a28      	ldr	r2, [pc, #160]	@ (80033b4 <HAL_ADC_ConfigChannel+0x254>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d10f      	bne.n	8003338 <HAL_ADC_ConfigChannel+0x1d8>
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2b12      	cmp	r3, #18
 800331e:	d10b      	bne.n	8003338 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a1d      	ldr	r2, [pc, #116]	@ (80033b4 <HAL_ADC_ConfigChannel+0x254>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d12b      	bne.n	800339a <HAL_ADC_ConfigChannel+0x23a>
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a1c      	ldr	r2, [pc, #112]	@ (80033b8 <HAL_ADC_ConfigChannel+0x258>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d003      	beq.n	8003354 <HAL_ADC_ConfigChannel+0x1f4>
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2b11      	cmp	r3, #17
 8003352:	d122      	bne.n	800339a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a11      	ldr	r2, [pc, #68]	@ (80033b8 <HAL_ADC_ConfigChannel+0x258>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d111      	bne.n	800339a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003376:	4b11      	ldr	r3, [pc, #68]	@ (80033bc <HAL_ADC_ConfigChannel+0x25c>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a11      	ldr	r2, [pc, #68]	@ (80033c0 <HAL_ADC_ConfigChannel+0x260>)
 800337c:	fba2 2303 	umull	r2, r3, r2, r3
 8003380:	0c9a      	lsrs	r2, r3, #18
 8003382:	4613      	mov	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	4413      	add	r3, r2
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800338c:	e002      	b.n	8003394 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	3b01      	subs	r3, #1
 8003392:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1f9      	bne.n	800338e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3714      	adds	r7, #20
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr
 80033b0:	40012300 	.word	0x40012300
 80033b4:	40012000 	.word	0x40012000
 80033b8:	10000012 	.word	0x10000012
 80033bc:	20000000 	.word	0x20000000
 80033c0:	431bde83 	.word	0x431bde83

080033c4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033cc:	4b79      	ldr	r3, [pc, #484]	@ (80035b4 <ADC_Init+0x1f0>)
 80033ce:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	685a      	ldr	r2, [r3, #4]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	431a      	orrs	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	685a      	ldr	r2, [r3, #4]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80033f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	6859      	ldr	r1, [r3, #4]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	021a      	lsls	r2, r3, #8
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	685a      	ldr	r2, [r3, #4]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800341c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6859      	ldr	r1, [r3, #4]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	430a      	orrs	r2, r1
 800342e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689a      	ldr	r2, [r3, #8]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800343e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6899      	ldr	r1, [r3, #8]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68da      	ldr	r2, [r3, #12]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	430a      	orrs	r2, r1
 8003450:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003456:	4a58      	ldr	r2, [pc, #352]	@ (80035b8 <ADC_Init+0x1f4>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d022      	beq.n	80034a2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689a      	ldr	r2, [r3, #8]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800346a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6899      	ldr	r1, [r3, #8]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	430a      	orrs	r2, r1
 800347c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800348c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	6899      	ldr	r1, [r3, #8]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	430a      	orrs	r2, r1
 800349e:	609a      	str	r2, [r3, #8]
 80034a0:	e00f      	b.n	80034c2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	689a      	ldr	r2, [r3, #8]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80034b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	689a      	ldr	r2, [r3, #8]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80034c0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	689a      	ldr	r2, [r3, #8]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 0202 	bic.w	r2, r2, #2
 80034d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	6899      	ldr	r1, [r3, #8]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	7e1b      	ldrb	r3, [r3, #24]
 80034dc:	005a      	lsls	r2, r3, #1
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	430a      	orrs	r2, r1
 80034e4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d01b      	beq.n	8003528 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	685a      	ldr	r2, [r3, #4]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034fe:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	685a      	ldr	r2, [r3, #4]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800350e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6859      	ldr	r1, [r3, #4]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351a:	3b01      	subs	r3, #1
 800351c:	035a      	lsls	r2, r3, #13
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	430a      	orrs	r2, r1
 8003524:	605a      	str	r2, [r3, #4]
 8003526:	e007      	b.n	8003538 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	685a      	ldr	r2, [r3, #4]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003536:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003546:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	3b01      	subs	r3, #1
 8003554:	051a      	lsls	r2, r3, #20
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	430a      	orrs	r2, r1
 800355c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	689a      	ldr	r2, [r3, #8]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800356c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6899      	ldr	r1, [r3, #8]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800357a:	025a      	lsls	r2, r3, #9
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	430a      	orrs	r2, r1
 8003582:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	689a      	ldr	r2, [r3, #8]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003592:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	6899      	ldr	r1, [r3, #8]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	029a      	lsls	r2, r3, #10
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	430a      	orrs	r2, r1
 80035a6:	609a      	str	r2, [r3, #8]
}
 80035a8:	bf00      	nop
 80035aa:	3714      	adds	r7, #20
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr
 80035b4:	40012300 	.word	0x40012300
 80035b8:	0f000001 	.word	0x0f000001

080035bc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035c8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ce:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d13c      	bne.n	8003650 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035da:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d12b      	bne.n	8003648 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d127      	bne.n	8003648 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035fe:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003602:	2b00      	cmp	r3, #0
 8003604:	d006      	beq.n	8003614 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003610:	2b00      	cmp	r3, #0
 8003612:	d119      	bne.n	8003648 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	685a      	ldr	r2, [r3, #4]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f022 0220 	bic.w	r2, r2, #32
 8003622:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003628:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003634:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d105      	bne.n	8003648 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003640:	f043 0201 	orr.w	r2, r3, #1
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	f7fe fa97 	bl	8001b7c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800364e:	e00e      	b.n	800366e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003654:	f003 0310 	and.w	r3, r3, #16
 8003658:	2b00      	cmp	r3, #0
 800365a:	d003      	beq.n	8003664 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f7ff fd75 	bl	800314c <HAL_ADC_ErrorCallback>
}
 8003662:	e004      	b.n	800366e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	4798      	blx	r3
}
 800366e:	bf00      	nop
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b084      	sub	sp, #16
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003682:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f7fe fa53 	bl	8001b30 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800368a:	bf00      	nop
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b084      	sub	sp, #16
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800369e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2240      	movs	r2, #64	@ 0x40
 80036a4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036aa:	f043 0204 	orr.w	r2, r3, #4
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80036b2:	68f8      	ldr	r0, [r7, #12]
 80036b4:	f7ff fd4a 	bl	800314c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80036b8:	bf00      	nop
 80036ba:	3710      	adds	r7, #16
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f003 0307 	and.w	r3, r3, #7
 80036ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003704 <__NVIC_SetPriorityGrouping+0x44>)
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036d6:	68ba      	ldr	r2, [r7, #8]
 80036d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80036dc:	4013      	ands	r3, r2
 80036de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80036ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036f2:	4a04      	ldr	r2, [pc, #16]	@ (8003704 <__NVIC_SetPriorityGrouping+0x44>)
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	60d3      	str	r3, [r2, #12]
}
 80036f8:	bf00      	nop
 80036fa:	3714      	adds	r7, #20
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr
 8003704:	e000ed00 	.word	0xe000ed00

08003708 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800370c:	4b04      	ldr	r3, [pc, #16]	@ (8003720 <__NVIC_GetPriorityGrouping+0x18>)
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	0a1b      	lsrs	r3, r3, #8
 8003712:	f003 0307 	and.w	r3, r3, #7
}
 8003716:	4618      	mov	r0, r3
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr
 8003720:	e000ed00 	.word	0xe000ed00

08003724 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	4603      	mov	r3, r0
 800372c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800372e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003732:	2b00      	cmp	r3, #0
 8003734:	db0b      	blt.n	800374e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003736:	79fb      	ldrb	r3, [r7, #7]
 8003738:	f003 021f 	and.w	r2, r3, #31
 800373c:	4907      	ldr	r1, [pc, #28]	@ (800375c <__NVIC_EnableIRQ+0x38>)
 800373e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003742:	095b      	lsrs	r3, r3, #5
 8003744:	2001      	movs	r0, #1
 8003746:	fa00 f202 	lsl.w	r2, r0, r2
 800374a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800374e:	bf00      	nop
 8003750:	370c      	adds	r7, #12
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	e000e100 	.word	0xe000e100

08003760 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	4603      	mov	r3, r0
 8003768:	6039      	str	r1, [r7, #0]
 800376a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800376c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003770:	2b00      	cmp	r3, #0
 8003772:	db0a      	blt.n	800378a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	b2da      	uxtb	r2, r3
 8003778:	490c      	ldr	r1, [pc, #48]	@ (80037ac <__NVIC_SetPriority+0x4c>)
 800377a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800377e:	0112      	lsls	r2, r2, #4
 8003780:	b2d2      	uxtb	r2, r2
 8003782:	440b      	add	r3, r1
 8003784:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003788:	e00a      	b.n	80037a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	b2da      	uxtb	r2, r3
 800378e:	4908      	ldr	r1, [pc, #32]	@ (80037b0 <__NVIC_SetPriority+0x50>)
 8003790:	79fb      	ldrb	r3, [r7, #7]
 8003792:	f003 030f 	and.w	r3, r3, #15
 8003796:	3b04      	subs	r3, #4
 8003798:	0112      	lsls	r2, r2, #4
 800379a:	b2d2      	uxtb	r2, r2
 800379c:	440b      	add	r3, r1
 800379e:	761a      	strb	r2, [r3, #24]
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr
 80037ac:	e000e100 	.word	0xe000e100
 80037b0:	e000ed00 	.word	0xe000ed00

080037b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b089      	sub	sp, #36	@ 0x24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f003 0307 	and.w	r3, r3, #7
 80037c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	f1c3 0307 	rsb	r3, r3, #7
 80037ce:	2b04      	cmp	r3, #4
 80037d0:	bf28      	it	cs
 80037d2:	2304      	movcs	r3, #4
 80037d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	3304      	adds	r3, #4
 80037da:	2b06      	cmp	r3, #6
 80037dc:	d902      	bls.n	80037e4 <NVIC_EncodePriority+0x30>
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	3b03      	subs	r3, #3
 80037e2:	e000      	b.n	80037e6 <NVIC_EncodePriority+0x32>
 80037e4:	2300      	movs	r3, #0
 80037e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037e8:	f04f 32ff 	mov.w	r2, #4294967295
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	fa02 f303 	lsl.w	r3, r2, r3
 80037f2:	43da      	mvns	r2, r3
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	401a      	ands	r2, r3
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	fa01 f303 	lsl.w	r3, r1, r3
 8003806:	43d9      	mvns	r1, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800380c:	4313      	orrs	r3, r2
         );
}
 800380e:	4618      	mov	r0, r3
 8003810:	3724      	adds	r7, #36	@ 0x24
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr

0800381a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b082      	sub	sp, #8
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f7ff ff4c 	bl	80036c0 <__NVIC_SetPriorityGrouping>
}
 8003828:	bf00      	nop
 800382a:	3708      	adds	r7, #8
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0
 8003836:	4603      	mov	r3, r0
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
 800383c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800383e:	2300      	movs	r3, #0
 8003840:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003842:	f7ff ff61 	bl	8003708 <__NVIC_GetPriorityGrouping>
 8003846:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	68b9      	ldr	r1, [r7, #8]
 800384c:	6978      	ldr	r0, [r7, #20]
 800384e:	f7ff ffb1 	bl	80037b4 <NVIC_EncodePriority>
 8003852:	4602      	mov	r2, r0
 8003854:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003858:	4611      	mov	r1, r2
 800385a:	4618      	mov	r0, r3
 800385c:	f7ff ff80 	bl	8003760 <__NVIC_SetPriority>
}
 8003860:	bf00      	nop
 8003862:	3718      	adds	r7, #24
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	4603      	mov	r3, r0
 8003870:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003876:	4618      	mov	r0, r3
 8003878:	f7ff ff54 	bl	8003724 <__NVIC_EnableIRQ>
}
 800387c:	bf00      	nop
 800387e:	3708      	adds	r7, #8
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d101      	bne.n	8003896 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e00e      	b.n	80038b4 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	795b      	ldrb	r3, [r3, #5]
 800389a:	b2db      	uxtb	r3, r3
 800389c:	2b00      	cmp	r3, #0
 800389e:	d105      	bne.n	80038ac <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f7fe fcc6 	bl	8002238 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3708      	adds	r7, #8
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e014      	b.n	80038f8 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	791b      	ldrb	r3, [r3, #4]
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d105      	bne.n	80038e4 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f7fe fccc 	bl	800227c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2202      	movs	r2, #2
 80038e8:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3708      	adds	r7, #8
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003916:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d01d      	beq.n	800395e <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d018      	beq.n	800395e <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2204      	movs	r2, #4
 8003930:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	f043 0201 	orr.w	r2, r3, #1
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003946:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003956:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 f827 	bl	80039ac <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d01d      	beq.n	80039a4 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d018      	beq.n	80039a4 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2204      	movs	r2, #4
 8003976:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	f043 0202 	orr.w	r2, r3, #2
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800398c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800399c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 f867 	bl	8003a72 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 80039a4:	bf00      	nop
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b089      	sub	sp, #36	@ 0x24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039cc:	2300      	movs	r3, #0
 80039ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d002      	beq.n	80039dc <HAL_DAC_ConfigChannel+0x1c>
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d101      	bne.n	80039e0 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e042      	b.n	8003a66 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	795b      	ldrb	r3, [r3, #5]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d101      	bne.n	80039ec <HAL_DAC_ConfigChannel+0x2c>
 80039e8:	2302      	movs	r3, #2
 80039ea:	e03c      	b.n	8003a66 <HAL_DAC_ConfigChannel+0xa6>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2201      	movs	r2, #1
 80039f0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2202      	movs	r2, #2
 80039f6:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f003 0310 	and.w	r3, r3, #16
 8003a06:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003a0a:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8003a0e:	43db      	mvns	r3, r3
 8003a10:	69ba      	ldr	r2, [r7, #24]
 8003a12:	4013      	ands	r3, r2
 8003a14:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f003 0310 	and.w	r3, r3, #16
 8003a28:	697a      	ldr	r2, [r7, #20]
 8003a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2e:	69ba      	ldr	r2, [r7, #24]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	69ba      	ldr	r2, [r7, #24]
 8003a3a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	6819      	ldr	r1, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f003 0310 	and.w	r3, r3, #16
 8003a48:	22c0      	movs	r2, #192	@ 0xc0
 8003a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4e:	43da      	mvns	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	400a      	ands	r2, r1
 8003a56:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2200      	movs	r2, #0
 8003a62:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003a64:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3724      	adds	r7, #36	@ 0x24
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr

08003a72 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003a72:	b480      	push	{r7}
 8003a74:	b083      	sub	sp, #12
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003a7a:	bf00      	nop
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
	...

08003a88 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a90:	2300      	movs	r3, #0
 8003a92:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003a94:	f7ff f9d6 	bl	8002e44 <HAL_GetTick>
 8003a98:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d101      	bne.n	8003aa4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e099      	b.n	8003bd8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f022 0201 	bic.w	r2, r2, #1
 8003ac2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ac4:	e00f      	b.n	8003ae6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ac6:	f7ff f9bd 	bl	8002e44 <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	2b05      	cmp	r3, #5
 8003ad2:	d908      	bls.n	8003ae6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2203      	movs	r2, #3
 8003ade:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e078      	b.n	8003bd8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0301 	and.w	r3, r3, #1
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1e8      	bne.n	8003ac6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	4b38      	ldr	r3, [pc, #224]	@ (8003be0 <HAL_DMA_Init+0x158>)
 8003b00:	4013      	ands	r3, r2
 8003b02:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685a      	ldr	r2, [r3, #4]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b12:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a1b      	ldr	r3, [r3, #32]
 8003b30:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b3c:	2b04      	cmp	r3, #4
 8003b3e:	d107      	bne.n	8003b50 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	f023 0307 	bic.w	r3, r3, #7
 8003b66:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b76:	2b04      	cmp	r3, #4
 8003b78:	d117      	bne.n	8003baa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00e      	beq.n	8003baa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 fb0d 	bl	80041ac <DMA_CheckFifoParam>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d008      	beq.n	8003baa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2240      	movs	r2, #64	@ 0x40
 8003b9c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e016      	b.n	8003bd8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 fac4 	bl	8004140 <DMA_CalcBaseAndBitshift>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bc0:	223f      	movs	r2, #63	@ 0x3f
 8003bc2:	409a      	lsls	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3718      	adds	r7, #24
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	f010803f 	.word	0xf010803f

08003be4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b086      	sub	sp, #24
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
 8003bf0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bfa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d101      	bne.n	8003c0a <HAL_DMA_Start_IT+0x26>
 8003c06:	2302      	movs	r3, #2
 8003c08:	e040      	b.n	8003c8c <HAL_DMA_Start_IT+0xa8>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d12f      	bne.n	8003c7e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2202      	movs	r2, #2
 8003c22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	68b9      	ldr	r1, [r7, #8]
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	f000 fa56 	bl	80040e4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c3c:	223f      	movs	r2, #63	@ 0x3f
 8003c3e:	409a      	lsls	r2, r3
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f042 0216 	orr.w	r2, r2, #22
 8003c52:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d007      	beq.n	8003c6c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f042 0208 	orr.w	r2, r2, #8
 8003c6a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f042 0201 	orr.w	r2, r2, #1
 8003c7a:	601a      	str	r2, [r3, #0]
 8003c7c:	e005      	b.n	8003c8a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003c86:	2302      	movs	r3, #2
 8003c88:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003c8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3718      	adds	r7, #24
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ca0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003ca2:	f7ff f8cf 	bl	8002e44 <HAL_GetTick>
 8003ca6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d008      	beq.n	8003cc6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2280      	movs	r2, #128	@ 0x80
 8003cb8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e052      	b.n	8003d6c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f022 0216 	bic.w	r2, r2, #22
 8003cd4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	695a      	ldr	r2, [r3, #20]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ce4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d103      	bne.n	8003cf6 <HAL_DMA_Abort+0x62>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d007      	beq.n	8003d06 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f022 0208 	bic.w	r2, r2, #8
 8003d04:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 0201 	bic.w	r2, r2, #1
 8003d14:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d16:	e013      	b.n	8003d40 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d18:	f7ff f894 	bl	8002e44 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b05      	cmp	r3, #5
 8003d24:	d90c      	bls.n	8003d40 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2220      	movs	r2, #32
 8003d2a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2203      	movs	r2, #3
 8003d30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e015      	b.n	8003d6c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1e4      	bne.n	8003d18 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d52:	223f      	movs	r2, #63	@ 0x3f
 8003d54:	409a      	lsls	r2, r3
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3710      	adds	r7, #16
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d004      	beq.n	8003d92 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2280      	movs	r2, #128	@ 0x80
 8003d8c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e00c      	b.n	8003dac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2205      	movs	r2, #5
 8003d96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f022 0201 	bic.w	r2, r2, #1
 8003da8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003dc4:	4b8e      	ldr	r3, [pc, #568]	@ (8004000 <HAL_DMA_IRQHandler+0x248>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a8e      	ldr	r2, [pc, #568]	@ (8004004 <HAL_DMA_IRQHandler+0x24c>)
 8003dca:	fba2 2303 	umull	r2, r3, r2, r3
 8003dce:	0a9b      	lsrs	r3, r3, #10
 8003dd0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dd6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003de2:	2208      	movs	r2, #8
 8003de4:	409a      	lsls	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	4013      	ands	r3, r2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d01a      	beq.n	8003e24 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0304 	and.w	r3, r3, #4
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d013      	beq.n	8003e24 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f022 0204 	bic.w	r2, r2, #4
 8003e0a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e10:	2208      	movs	r2, #8
 8003e12:	409a      	lsls	r2, r3
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e1c:	f043 0201 	orr.w	r2, r3, #1
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e28:	2201      	movs	r2, #1
 8003e2a:	409a      	lsls	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	4013      	ands	r3, r2
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d012      	beq.n	8003e5a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00b      	beq.n	8003e5a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e46:	2201      	movs	r2, #1
 8003e48:	409a      	lsls	r2, r3
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e52:	f043 0202 	orr.w	r2, r3, #2
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e5e:	2204      	movs	r2, #4
 8003e60:	409a      	lsls	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	4013      	ands	r3, r2
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d012      	beq.n	8003e90 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00b      	beq.n	8003e90 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e7c:	2204      	movs	r2, #4
 8003e7e:	409a      	lsls	r2, r3
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e88:	f043 0204 	orr.w	r2, r3, #4
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e94:	2210      	movs	r2, #16
 8003e96:	409a      	lsls	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d043      	beq.n	8003f28 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0308 	and.w	r3, r3, #8
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d03c      	beq.n	8003f28 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eb2:	2210      	movs	r2, #16
 8003eb4:	409a      	lsls	r2, r3
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d018      	beq.n	8003efa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d108      	bne.n	8003ee8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d024      	beq.n	8003f28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	4798      	blx	r3
 8003ee6:	e01f      	b.n	8003f28 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d01b      	beq.n	8003f28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	4798      	blx	r3
 8003ef8:	e016      	b.n	8003f28 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d107      	bne.n	8003f18 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f022 0208 	bic.w	r2, r2, #8
 8003f16:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d003      	beq.n	8003f28 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f2c:	2220      	movs	r2, #32
 8003f2e:	409a      	lsls	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	4013      	ands	r3, r2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	f000 808f 	beq.w	8004058 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0310 	and.w	r3, r3, #16
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	f000 8087 	beq.w	8004058 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f4e:	2220      	movs	r2, #32
 8003f50:	409a      	lsls	r2, r3
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b05      	cmp	r3, #5
 8003f60:	d136      	bne.n	8003fd0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f022 0216 	bic.w	r2, r2, #22
 8003f70:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	695a      	ldr	r2, [r3, #20]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f80:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d103      	bne.n	8003f92 <HAL_DMA_IRQHandler+0x1da>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d007      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f022 0208 	bic.w	r2, r2, #8
 8003fa0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fa6:	223f      	movs	r2, #63	@ 0x3f
 8003fa8:	409a      	lsls	r2, r3
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d07e      	beq.n	80040c4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	4798      	blx	r3
        }
        return;
 8003fce:	e079      	b.n	80040c4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d01d      	beq.n	800401a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d10d      	bne.n	8004008 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d031      	beq.n	8004058 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	4798      	blx	r3
 8003ffc:	e02c      	b.n	8004058 <HAL_DMA_IRQHandler+0x2a0>
 8003ffe:	bf00      	nop
 8004000:	20000000 	.word	0x20000000
 8004004:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800400c:	2b00      	cmp	r3, #0
 800400e:	d023      	beq.n	8004058 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	4798      	blx	r3
 8004018:	e01e      	b.n	8004058 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004024:	2b00      	cmp	r3, #0
 8004026:	d10f      	bne.n	8004048 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f022 0210 	bic.w	r2, r2, #16
 8004036:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800404c:	2b00      	cmp	r3, #0
 800404e:	d003      	beq.n	8004058 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800405c:	2b00      	cmp	r3, #0
 800405e:	d032      	beq.n	80040c6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004064:	f003 0301 	and.w	r3, r3, #1
 8004068:	2b00      	cmp	r3, #0
 800406a:	d022      	beq.n	80040b2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2205      	movs	r2, #5
 8004070:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f022 0201 	bic.w	r2, r2, #1
 8004082:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	3301      	adds	r3, #1
 8004088:	60bb      	str	r3, [r7, #8]
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	429a      	cmp	r2, r3
 800408e:	d307      	bcc.n	80040a0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1f2      	bne.n	8004084 <HAL_DMA_IRQHandler+0x2cc>
 800409e:	e000      	b.n	80040a2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80040a0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2201      	movs	r2, #1
 80040a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d005      	beq.n	80040c6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	4798      	blx	r3
 80040c2:	e000      	b.n	80040c6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80040c4:	bf00      	nop
    }
  }
}
 80040c6:	3718      	adds	r7, #24
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80040d8:	4618      	mov	r0, r3
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]
 80040f0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004100:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	683a      	ldr	r2, [r7, #0]
 8004108:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	2b40      	cmp	r3, #64	@ 0x40
 8004110:	d108      	bne.n	8004124 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68ba      	ldr	r2, [r7, #8]
 8004120:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004122:	e007      	b.n	8004134 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68ba      	ldr	r2, [r7, #8]
 800412a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	60da      	str	r2, [r3, #12]
}
 8004134:	bf00      	nop
 8004136:	3714      	adds	r7, #20
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004140:	b480      	push	{r7}
 8004142:	b085      	sub	sp, #20
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	b2db      	uxtb	r3, r3
 800414e:	3b10      	subs	r3, #16
 8004150:	4a14      	ldr	r2, [pc, #80]	@ (80041a4 <DMA_CalcBaseAndBitshift+0x64>)
 8004152:	fba2 2303 	umull	r2, r3, r2, r3
 8004156:	091b      	lsrs	r3, r3, #4
 8004158:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800415a:	4a13      	ldr	r2, [pc, #76]	@ (80041a8 <DMA_CalcBaseAndBitshift+0x68>)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	4413      	add	r3, r2
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	461a      	mov	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2b03      	cmp	r3, #3
 800416c:	d909      	bls.n	8004182 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004176:	f023 0303 	bic.w	r3, r3, #3
 800417a:	1d1a      	adds	r2, r3, #4
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	659a      	str	r2, [r3, #88]	@ 0x58
 8004180:	e007      	b.n	8004192 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800418a:	f023 0303 	bic.w	r3, r3, #3
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004196:	4618      	mov	r0, r3
 8004198:	3714      	adds	r7, #20
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	aaaaaaab 	.word	0xaaaaaaab
 80041a8:	080109f0 	.word	0x080109f0

080041ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041b4:	2300      	movs	r3, #0
 80041b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d11f      	bne.n	8004206 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	2b03      	cmp	r3, #3
 80041ca:	d856      	bhi.n	800427a <DMA_CheckFifoParam+0xce>
 80041cc:	a201      	add	r2, pc, #4	@ (adr r2, 80041d4 <DMA_CheckFifoParam+0x28>)
 80041ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d2:	bf00      	nop
 80041d4:	080041e5 	.word	0x080041e5
 80041d8:	080041f7 	.word	0x080041f7
 80041dc:	080041e5 	.word	0x080041e5
 80041e0:	0800427b 	.word	0x0800427b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d046      	beq.n	800427e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041f4:	e043      	b.n	800427e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041fa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80041fe:	d140      	bne.n	8004282 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004204:	e03d      	b.n	8004282 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800420e:	d121      	bne.n	8004254 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	2b03      	cmp	r3, #3
 8004214:	d837      	bhi.n	8004286 <DMA_CheckFifoParam+0xda>
 8004216:	a201      	add	r2, pc, #4	@ (adr r2, 800421c <DMA_CheckFifoParam+0x70>)
 8004218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800421c:	0800422d 	.word	0x0800422d
 8004220:	08004233 	.word	0x08004233
 8004224:	0800422d 	.word	0x0800422d
 8004228:	08004245 	.word	0x08004245
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	73fb      	strb	r3, [r7, #15]
      break;
 8004230:	e030      	b.n	8004294 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004236:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d025      	beq.n	800428a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004242:	e022      	b.n	800428a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004248:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800424c:	d11f      	bne.n	800428e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004252:	e01c      	b.n	800428e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	2b02      	cmp	r3, #2
 8004258:	d903      	bls.n	8004262 <DMA_CheckFifoParam+0xb6>
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	2b03      	cmp	r3, #3
 800425e:	d003      	beq.n	8004268 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004260:	e018      	b.n	8004294 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	73fb      	strb	r3, [r7, #15]
      break;
 8004266:	e015      	b.n	8004294 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800426c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00e      	beq.n	8004292 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	73fb      	strb	r3, [r7, #15]
      break;
 8004278:	e00b      	b.n	8004292 <DMA_CheckFifoParam+0xe6>
      break;
 800427a:	bf00      	nop
 800427c:	e00a      	b.n	8004294 <DMA_CheckFifoParam+0xe8>
      break;
 800427e:	bf00      	nop
 8004280:	e008      	b.n	8004294 <DMA_CheckFifoParam+0xe8>
      break;
 8004282:	bf00      	nop
 8004284:	e006      	b.n	8004294 <DMA_CheckFifoParam+0xe8>
      break;
 8004286:	bf00      	nop
 8004288:	e004      	b.n	8004294 <DMA_CheckFifoParam+0xe8>
      break;
 800428a:	bf00      	nop
 800428c:	e002      	b.n	8004294 <DMA_CheckFifoParam+0xe8>
      break;   
 800428e:	bf00      	nop
 8004290:	e000      	b.n	8004294 <DMA_CheckFifoParam+0xe8>
      break;
 8004292:	bf00      	nop
    }
  } 
  
  return status; 
 8004294:	7bfb      	ldrb	r3, [r7, #15]
}
 8004296:	4618      	mov	r0, r3
 8004298:	3714      	adds	r7, #20
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop

080042a4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d101      	bne.n	80042b6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e03b      	b.n	800432e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d106      	bne.n	80042d0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f7fe f856 	bl	800237c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2202      	movs	r2, #2
 80042d4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685a      	ldr	r2, [r3, #4]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	430a      	orrs	r2, r1
 80042ec:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042f4:	f023 0107 	bic.w	r1, r3, #7
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	689a      	ldr	r2, [r3, #8]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	430a      	orrs	r2, r1
 8004302:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800430a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800430e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	68d1      	ldr	r1, [r2, #12]
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	6812      	ldr	r2, [r2, #0]
 800431a:	430b      	orrs	r3, r1
 800431c:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3708      	adds	r7, #8
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b084      	sub	sp, #16
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f003 0301 	and.w	r3, r3, #1
 8004354:	2b00      	cmp	r3, #0
 8004356:	d026      	beq.n	80043a6 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800435e:	2b00      	cmp	r3, #0
 8004360:	d021      	beq.n	80043a6 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004370:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004376:	f043 0201 	orr.w	r2, r3, #1
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2201      	movs	r2, #1
 8004384:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2204      	movs	r2, #4
 800438a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d003      	beq.n	80043a6 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f003 0320 	and.w	r3, r3, #32
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d026      	beq.n	80043fe <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d021      	beq.n	80043fe <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80043c8:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2220      	movs	r2, #32
 80043d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043d6:	f043 0202 	orr.w	r2, r3, #2
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2204      	movs	r2, #4
 80043e2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d003      	beq.n	80043fe <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f003 0308 	and.w	r3, r3, #8
 8004404:	2b00      	cmp	r3, #0
 8004406:	d026      	beq.n	8004456 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800440e:	2b00      	cmp	r3, #0
 8004410:	d021      	beq.n	8004456 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004420:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2208      	movs	r2, #8
 8004428:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800442e:	f043 0204 	orr.w	r2, r3, #4
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2204      	movs	r2, #4
 800443a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d003      	beq.n	8004456 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f003 0304 	and.w	r3, r3, #4
 800445c:	2b00      	cmp	r3, #0
 800445e:	d013      	beq.n	8004488 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00e      	beq.n	8004488 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004478:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2204      	movs	r2, #4
 8004480:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f853 	bl	800452e <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d024      	beq.n	80044dc <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004498:	2b00      	cmp	r3, #0
 800449a:	d01f      	beq.n	80044dc <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80044aa:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2202      	movs	r2, #2
 80044b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d003      	beq.n	80044dc <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f003 0310 	and.w	r3, r3, #16
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d01f      	beq.n	8004526 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d01a      	beq.n	8004526 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80044fe:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2210      	movs	r2, #16
 8004506:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 f80e 	bl	8004542 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004526:	bf00      	nop
 8004528:	3710      	adds	r7, #16
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800452e:	b480      	push	{r7}
 8004530:	b083      	sub	sp, #12
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8004536:	bf00      	nop
 8004538:	370c      	adds	r7, #12
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr

08004542 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004542:	b480      	push	{r7}
 8004544:	b083      	sub	sp, #12
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800454a:	bf00      	nop
 800454c:	370c      	adds	r7, #12
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
	...

08004558 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004558:	b480      	push	{r7}
 800455a:	b087      	sub	sp, #28
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004570:	2b01      	cmp	r3, #1
 8004572:	d101      	bne.n	8004578 <HAL_DMA2D_ConfigLayer+0x20>
 8004574:	2302      	movs	r3, #2
 8004576:	e079      	b.n	800466c <HAL_DMA2D_ConfigLayer+0x114>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2202      	movs	r2, #2
 8004584:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	011b      	lsls	r3, r3, #4
 800458c:	3318      	adds	r3, #24
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	4413      	add	r3, r2
 8004592:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	685a      	ldr	r2, [r3, #4]
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	041b      	lsls	r3, r3, #16
 800459e:	4313      	orrs	r3, r2
 80045a0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80045a2:	4b35      	ldr	r3, [pc, #212]	@ (8004678 <HAL_DMA2D_ConfigLayer+0x120>)
 80045a4:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	2b0a      	cmp	r3, #10
 80045ac:	d003      	beq.n	80045b6 <HAL_DMA2D_ConfigLayer+0x5e>
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	2b09      	cmp	r3, #9
 80045b4:	d107      	bne.n	80045c6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80045be:	697a      	ldr	r2, [r7, #20]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	617b      	str	r3, [r7, #20]
 80045c4:	e005      	b.n	80045d2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	061b      	lsls	r3, r3, #24
 80045cc:	697a      	ldr	r2, [r7, #20]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d120      	bne.n	800461a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	43db      	mvns	r3, r3
 80045e2:	ea02 0103 	and.w	r1, r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	430a      	orrs	r2, r1
 80045ee:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	6812      	ldr	r2, [r2, #0]
 80045f8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	2b0a      	cmp	r3, #10
 8004600:	d003      	beq.n	800460a <HAL_DMA2D_ConfigLayer+0xb2>
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	2b09      	cmp	r3, #9
 8004608:	d127      	bne.n	800465a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	68da      	ldr	r2, [r3, #12]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8004616:	629a      	str	r2, [r3, #40]	@ 0x28
 8004618:	e01f      	b.n	800465a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	69da      	ldr	r2, [r3, #28]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	43db      	mvns	r3, r3
 8004624:	ea02 0103 	and.w	r1, r2, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	697a      	ldr	r2, [r7, #20]
 800462e:	430a      	orrs	r2, r1
 8004630:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	6812      	ldr	r2, [r2, #0]
 800463a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	2b0a      	cmp	r3, #10
 8004642:	d003      	beq.n	800464c <HAL_DMA2D_ConfigLayer+0xf4>
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	2b09      	cmp	r3, #9
 800464a:	d106      	bne.n	800465a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	68da      	ldr	r2, [r3, #12]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8004658:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 800466a:	2300      	movs	r3, #0
}
 800466c:	4618      	mov	r0, r3
 800466e:	371c      	adds	r7, #28
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr
 8004678:	ff03000f 	.word	0xff03000f

0800467c <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b08a      	sub	sp, #40	@ 0x28
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d101      	bne.n	8004690 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e16e      	b.n	800496e <HAL_DSI_Init+0x2f2>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	7c5b      	ldrb	r3, [r3, #17]
 8004694:	b2db      	uxtb	r3, r3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d102      	bne.n	80046a0 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f7fd fe96 	bl	80023cc <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2203      	movs	r2, #3
 80046a4:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 80046a6:	2300      	movs	r3, #0
 80046a8:	61bb      	str	r3, [r7, #24]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80046ba:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 80046c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80046ca:	61bb      	str	r3, [r7, #24]
 80046cc:	69bb      	ldr	r3, [r7, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80046ce:	f7fe fbb9 	bl	8002e44 <HAL_GetTick>
 80046d2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 80046d4:	e009      	b.n	80046ea <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80046d6:	f7fe fbb5 	bl	8002e44 <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80046e4:	d901      	bls.n	80046ea <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e141      	b.n	800496e <HAL_DSI_Init+0x2f2>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 80046f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d0ed      	beq.n	80046d6 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	6812      	ldr	r2, [r2, #0]
 8004706:	f423 335e 	bic.w	r3, r3, #227328	@ 0x37800
 800470a:	f423 73fe 	bic.w	r3, r3, #508	@ 0x1fc
 800470e:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8004726:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800472e:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	430a      	orrs	r2, r1
 8004736:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 800473a:	2300      	movs	r3, #0
 800473c:	617b      	str	r3, [r7, #20]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f042 0201 	orr.w	r2, r2, #1
 800474e:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	617b      	str	r3, [r7, #20]
 8004760:	697b      	ldr	r3, [r7, #20]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8004762:	2001      	movs	r0, #1
 8004764:	f7fe fb7a 	bl	8002e5c <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8004768:	f7fe fb6c 	bl	8002e44 <HAL_GetTick>
 800476c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800476e:	e009      	b.n	8004784 <HAL_DSI_Init+0x108>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004770:	f7fe fb68 	bl	8002e44 <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800477e:	d901      	bls.n	8004784 <HAL_DSI_Init+0x108>
    {
      return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e0f4      	b.n	800496e <HAL_DSI_Init+0x2f2>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 800478c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004790:	2b00      	cmp	r3, #0
 8004792:	d0ed      	beq.n	8004770 <HAL_DSI_Init+0xf4>
    }
  }

  __HAL_DSI_ENABLE(hdsi);
 8004794:	2300      	movs	r3, #0
 8004796:	613b      	str	r3, [r7, #16]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	685a      	ldr	r2, [r3, #4]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f042 0201 	orr.w	r2, r2, #1
 80047a6:	605a      	str	r2, [r3, #4]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	613b      	str	r3, [r7, #16]
 80047b4:	693b      	ldr	r3, [r7, #16]

  /************************ Set the DSI clock parameters ************************/
  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	689a      	ldr	r2, [r3, #8]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80047c4:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	6899      	ldr	r1, [r3, #8]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	689a      	ldr	r2, [r3, #8]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	430a      	orrs	r2, r1
 80047d6:	609a      	str	r2, [r3, #8]

  /*************************** Set the PHY parameters ***************************/
  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= DSI_PCTLR_DEN;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f042 0202 	orr.w	r2, r2, #2
 80047e8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  hdsi->Instance->PCTLR |= DSI_PCTLR_CKE;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f042 0204 	orr.w	r2, r2, #4
 80047fc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0


  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f022 0203 	bic.w	r2, r2, #3
 8004810:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	68da      	ldr	r2, [r3, #12]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Get tick */
  tickstart = HAL_GetTick();
 800482a:	f7fe fb0b 	bl	8002e44 <HAL_GetTick>
 800482e:	6278      	str	r0, [r7, #36]	@ 0x24
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004838:	f003 0303 	and.w	r3, r3, #3
 800483c:	2b00      	cmp	r3, #0
 800483e:	d123      	bne.n	8004888 <HAL_DSI_Init+0x20c>
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 8004840:	e00c      	b.n	800485c <HAL_DSI_Init+0x1e0>
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004842:	f7fe faff 	bl	8002e44 <HAL_GetTick>
 8004846:	4602      	mov	r2, r0
 8004848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004850:	d904      	bls.n	800485c <HAL_DSI_Init+0x1e0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	741a      	strb	r2, [r3, #16]

        return HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	e088      	b.n	800496e <HAL_DSI_Init+0x2f2>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004864:	f003 0314 	and.w	r3, r3, #20
 8004868:	2b14      	cmp	r3, #20
 800486a:	d1ea      	bne.n	8004842 <HAL_DSI_Init+0x1c6>
 800486c:	e014      	b.n	8004898 <HAL_DSI_Init+0x21c>
  else
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
                                                                                    DSI_PSR_PSS1 | DSI_PSR_PSSC))
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800486e:	f7fe fae9 	bl	8002e44 <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800487c:	d904      	bls.n	8004888 <HAL_DSI_Init+0x20c>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	741a      	strb	r2, [r3, #16]

        return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e072      	b.n	800496e <HAL_DSI_Init+0x2f2>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004890:	f003 0394 	and.w	r3, r3, #148	@ 0x94
 8004894:	2b94      	cmp	r3, #148	@ 0x94
 8004896:	d1ea      	bne.n	800486e <HAL_DSI_Init+0x1f2>
  }

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d002      	beq.n	80048a6 <HAL_DSI_Init+0x22a>
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	e000      	b.n	80048a8 <HAL_DSI_Init+0x22c>
 80048a6:	2301      	movs	r3, #1
 80048a8:	623b      	str	r3, [r7, #32]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80048aa:	6a3b      	ldr	r3, [r7, #32]
 80048ac:	4a32      	ldr	r2, [pc, #200]	@ (8004978 <HAL_DSI_Init+0x2fc>)
 80048ae:	fb03 f202 	mul.w	r2, r3, r2
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f003 0303 	and.w	r3, r3, #3
 80048ba:	409a      	lsls	r2, r3
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 80048c4:	fb01 f303 	mul.w	r3, r1, r3
 80048c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048cc:	61fb      	str	r3, [r7, #28]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f8d3 2418 	ldr.w	r2, [r3, #1048]	@ 0x418
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80048de:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	69fa      	ldr	r2, [r7, #28]
 80048f0:	430a      	orrs	r2, r1
 80048f2:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2200      	movs	r2, #0
 8004906:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hdsi->ErrorMsk = 0U;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	619a      	str	r2, [r3, #24]

  __HAL_DSI_DISABLE(hdsi);
 8004910:	2300      	movs	r3, #0
 8004912:	60fb      	str	r3, [r7, #12]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	685a      	ldr	r2, [r3, #4]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f022 0201 	bic.w	r2, r2, #1
 8004922:	605a      	str	r2, [r3, #4]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	60fb      	str	r3, [r7, #12]
 8004930:	68fb      	ldr	r3, [r7, #12]

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f022 0203 	bic.w	r2, r2, #3
 8004942:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	431a      	orrs	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f042 0201 	orr.w	r2, r2, #1
 800495c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3728      	adds	r7, #40	@ 0x28
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	003d0900 	.word	0x003d0900

0800497c <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	7c1b      	ldrb	r3, [r3, #16]
 800498a:	2b01      	cmp	r3, #1
 800498c:	d101      	bne.n	8004992 <HAL_DSI_ConfigErrorMonitor+0x16>
 800498e:	2302      	movs	r3, #2
 8004990:	e0ab      	b.n	8004aea <HAL_DSI_ConfigErrorMonitor+0x16e>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2201      	movs	r2, #1
 8004996:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2200      	movs	r2, #0
 800499e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	683a      	ldr	r2, [r7, #0]
 80049b0:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	f003 0301 	and.w	r3, r3, #1
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d00b      	beq.n	80049d4 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	6812      	ldr	r2, [r2, #0]
 80049c8:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 80049cc:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 80049d0:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	f003 0302 	and.w	r3, r3, #2
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d009      	beq.n	80049f2 <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f442 12f8 	orr.w	r2, r2, #2031616	@ 0x1f0000
 80049ee:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	f003 0304 	and.w	r3, r3, #4
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d009      	beq.n	8004a10 <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f042 0201 	orr.w	r2, r2, #1
 8004a0c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	f003 0308 	and.w	r3, r3, #8
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d009      	beq.n	8004a2e <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f042 0202 	orr.w	r2, r2, #2
 8004a2a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	f003 0310 	and.w	r3, r3, #16
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d009      	beq.n	8004a4c <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f042 020c 	orr.w	r2, r2, #12
 8004a48:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	f003 0320 	and.w	r3, r3, #32
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d009      	beq.n	8004a6a <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f042 0210 	orr.w	r2, r2, #16
 8004a66:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d009      	beq.n	8004a88 <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f042 0220 	orr.w	r2, r2, #32
 8004a84:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d009      	beq.n	8004aa6 <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004aa2:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d009      	beq.n	8004ac4 <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004ac0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d009      	beq.n	8004ae2 <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f442 52f8 	orr.w	r2, r2, #7936	@ 0x1f00
 8004ade:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	370c      	adds	r7, #12
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr

08004af6 <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 8004af6:	b580      	push	{r7, lr}
 8004af8:	b084      	sub	sp, #16
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00f      	beq.n	8004b2e <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d007      	beq.n	8004b2e <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f000 f8ad 	bl	8004c88 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8004b36:	f003 0302 	and.w	r3, r3, #2
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00f      	beq.n	8004b5e <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8004b46:	f003 0302 	and.w	r3, r3, #2
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d007      	beq.n	8004b5e <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2202      	movs	r2, #2
 8004b54:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 f89f 	bl	8004c9c <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	f000 808c 	beq.w	8004c80 <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004b70:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004b88:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004b92:	68ba      	ldr	r2, [r7, #8]
 8004b94:	4013      	ands	r3, r2
 8004b96:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d005      	beq.n	8004bac <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	695b      	ldr	r3, [r3, #20]
 8004ba4:	f043 0201 	orr.w	r2, r3, #1
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d005      	beq.n	8004bc2 <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	695b      	ldr	r3, [r3, #20]
 8004bba:	f043 0202 	orr.w	r2, r3, #2
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	f003 0301 	and.w	r3, r3, #1
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d005      	beq.n	8004bd8 <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	695b      	ldr	r3, [r3, #20]
 8004bd0:	f043 0204 	orr.w	r2, r3, #4
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d005      	beq.n	8004bee <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	f043 0208 	orr.w	r2, r3, #8
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	f003 030c 	and.w	r3, r3, #12
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d005      	beq.n	8004c04 <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	695b      	ldr	r3, [r3, #20]
 8004bfc:	f043 0210 	orr.w	r2, r3, #16
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	f003 0310 	and.w	r3, r3, #16
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d005      	beq.n	8004c1a <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	f043 0220 	orr.w	r2, r3, #32
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	f003 0320 	and.w	r3, r3, #32
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d005      	beq.n	8004c30 <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	695b      	ldr	r3, [r3, #20]
 8004c28:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d005      	beq.n	8004c46 <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d005      	beq.n	8004c5c <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	695b      	ldr	r3, [r3, #20]
 8004c54:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	f403 53f8 	and.w	r3, r3, #7936	@ 0x1f00
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d005      	beq.n	8004c72 <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d002      	beq.n	8004c80 <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 f818 	bl	8004cb0 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8004c80:	bf00      	nop
 8004c82:	3710      	adds	r7, #16
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 8004ca4:	bf00      	nop
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 8004cb8:	bf00      	nop
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	7c1b      	ldrb	r3, [r3, #16]
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d101      	bne.n	8004cda <HAL_DSI_SetGenericVCID+0x16>
 8004cd6:	2302      	movs	r3, #2
 8004cd8:	e016      	b.n	8004d08 <HAL_DSI_SetGenericVCID+0x44>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f022 0203 	bic.w	r2, r2, #3
 8004cee:	631a      	str	r2, [r3, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	683a      	ldr	r2, [r7, #0]
 8004cfc:	430a      	orrs	r2, r1
 8004cfe:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004d06:	2300      	movs	r3, #0
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	7c1b      	ldrb	r3, [r3, #16]
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d101      	bne.n	8004d2a <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 8004d26:	2302      	movs	r3, #2
 8004d28:	e0c5      	b.n	8004eb6 <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f042 0201 	orr.w	r2, r2, #1
 8004d3e:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f022 0201 	bic.w	r2, r2, #1
 8004d50:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f042 0201 	orr.w	r2, r2, #1
 8004d64:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68da      	ldr	r2, [r3, #12]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f022 0203 	bic.w	r2, r2, #3
 8004d76:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	68d9      	ldr	r1, [r3, #12]
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	430a      	orrs	r2, r1
 8004d88:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	695a      	ldr	r2, [r3, #20]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f022 0207 	bic.w	r2, r2, #7
 8004d98:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	6959      	ldr	r1, [r3, #20]
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	69da      	ldr	r2, [r3, #28]
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	431a      	orrs	r2, r3
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	431a      	orrs	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	430a      	orrs	r2, r1
 8004db6:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	691a      	ldr	r2, [r3, #16]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f022 020f 	bic.w	r2, r2, #15
 8004dc6:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	6919      	ldr	r1, [r3, #16]
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	685a      	ldr	r2, [r3, #4]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	430a      	orrs	r2, r1
 8004dd8:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f022 020e 	bic.w	r2, r2, #14
 8004dea:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	005a      	lsls	r2, r3, #1
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	430a      	orrs	r2, r1
 8004e02:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	6812      	ldr	r2, [r2, #0]
 8004e10:	0c1b      	lsrs	r3, r3, #16
 8004e12:	041b      	lsls	r3, r3, #16
 8004e14:	6653      	str	r3, [r2, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	689a      	ldr	r2, [r3, #8]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	430a      	orrs	r2, r1
 8004e26:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8004e38:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	68da      	ldr	r2, [r3, #12]
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	431a      	orrs	r2, r3
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e52:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8004e58:	431a      	orrs	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f022 0201 	bic.w	r2, r2, #1
 8004e72:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	430a      	orrs	r2, r1
 8004e84:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f042 0201 	orr.w	r2, r2, #1
 8004e96:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f042 0202 	orr.w	r2, r2, #2
 8004eaa:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	370c      	adds	r7, #12
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
	...

08004ec4 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	7c1b      	ldrb	r3, [r3, #16]
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d101      	bne.n	8004eda <HAL_DSI_ConfigCommand+0x16>
 8004ed6:	2302      	movs	r3, #2
 8004ed8:	e049      	b.n	8004f6e <HAL_DSI_ConfigCommand+0xaa>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2201      	movs	r2, #1
 8004ede:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	4b24      	ldr	r3, [pc, #144]	@ (8004f7c <HAL_DSI_ConfigCommand+0xb8>)
 8004eec:	400b      	ands	r3, r1
 8004eee:	6693      	str	r3, [r2, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004efe:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8004f04:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 8004f0a:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8004f10:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 8004f16:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 8004f1c:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 8004f22:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8004f28:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 8004f2e:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 8004f34:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                           LPCmd->LPDcsLongWrite      | \
 8004f3a:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	430a      	orrs	r2, r1
 8004f42:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f022 0202 	bic.w	r2, r2, #2
 8004f52:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	430a      	orrs	r2, r1
 8004f64:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	370c      	adds	r7, #12
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	fef080ff 	.word	0xfef080ff

08004f80 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	7c1b      	ldrb	r3, [r3, #16]
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d101      	bne.n	8004f96 <HAL_DSI_ConfigFlowControl+0x16>
 8004f92:	2302      	movs	r3, #2
 8004f94:	e016      	b.n	8004fc4 <HAL_DSI_ConfigFlowControl+0x44>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f022 021f 	bic.w	r2, r2, #31
 8004faa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	683a      	ldr	r2, [r7, #0]
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	7c1b      	ldrb	r3, [r3, #16]
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d101      	bne.n	8004fe6 <HAL_DSI_ConfigPhyTimer+0x16>
 8004fe2:	2302      	movs	r3, #2
 8004fe4:	e058      	b.n	8005098 <HAL_DSI_ConfigPhyTimer+0xc8>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	bf38      	it	cc
 8004ff8:	4613      	movcc	r3, r2
 8004ffa:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 800500c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	041a      	lsls	r2, r3, #16
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	431a      	orrs	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	430a      	orrs	r2, r1
 8005026:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 800503a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f8d3 109c 	ldr.w	r1, [r3, #156]	@ 0x9c
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	691a      	ldr	r2, [r3, #16]
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	041b      	lsls	r3, r3, #16
 8005050:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8005058:	431a      	orrs	r2, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	430a      	orrs	r2, r1
 8005060:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8005074:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	695b      	ldr	r3, [r3, #20]
 8005084:	021a      	lsls	r2, r3, #8
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	430a      	orrs	r2, r1
 800508c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005096:	2300      	movs	r3, #0
}
 8005098:	4618      	mov	r0, r3
 800509a:	3714      	adds	r7, #20
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	7c1b      	ldrb	r3, [r3, #16]
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d101      	bne.n	80050ba <HAL_DSI_ConfigHostTimeouts+0x16>
 80050b6:	2302      	movs	r3, #2
 80050b8:	e0b4      	b.n	8005224 <HAL_DSI_ConfigHostTimeouts+0x180>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2201      	movs	r2, #1
 80050be:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	689a      	ldr	r2, [r3, #8]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80050ce:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	6899      	ldr	r1, [r3, #8]
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	021a      	lsls	r2, r3, #8
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	430a      	orrs	r2, r1
 80050e2:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	b292      	uxth	r2, r2
 80050f0:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	041a      	lsls	r2, r3, #16
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	430a      	orrs	r2, r1
 8005104:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	6812      	ldr	r2, [r2, #0]
 8005110:	0c1b      	lsrs	r3, r3, #16
 8005112:	041b      	lsls	r3, r3, #16
 8005114:	6793      	str	r3, [r2, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	689a      	ldr	r2, [r3, #8]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	430a      	orrs	r2, r1
 8005126:	679a      	str	r2, [r3, #120]	@ 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	6812      	ldr	r2, [r2, #0]
 8005132:	0c1b      	lsrs	r3, r3, #16
 8005134:	041b      	lsls	r3, r3, #16
 8005136:	67d3      	str	r3, [r2, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	68da      	ldr	r2, [r3, #12]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	430a      	orrs	r2, r1
 8005148:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	6812      	ldr	r2, [r2, #0]
 8005156:	0c1b      	lsrs	r3, r3, #16
 8005158:	041b      	lsls	r3, r3, #16
 800515a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	691a      	ldr	r2, [r3, #16]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	430a      	orrs	r2, r1
 8005170:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	6812      	ldr	r2, [r2, #0]
 8005180:	0c1b      	lsrs	r3, r3, #16
 8005182:	041b      	lsls	r3, r3, #16
 8005184:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	695a      	ldr	r2, [r3, #20]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	430a      	orrs	r2, r1
 800519a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80051ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	699a      	ldr	r2, [r3, #24]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	430a      	orrs	r2, r1
 80051c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	6812      	ldr	r2, [r2, #0]
 80051d4:	0c1b      	lsrs	r3, r3, #16
 80051d6:	041b      	lsls	r3, r3, #16
 80051d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f8d3 1088 	ldr.w	r1, [r3, #136]	@ 0x88
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	69da      	ldr	r2, [r3, #28]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	430a      	orrs	r2, r1
 80051ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	6812      	ldr	r2, [r2, #0]
 80051fe:	0c1b      	lsrs	r3, r3, #16
 8005200:	041b      	lsls	r3, r3, #16
 8005202:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	6a1a      	ldr	r2, [r3, #32]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	430a      	orrs	r2, r1
 8005218:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	370c      	adds	r7, #12
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	7c1b      	ldrb	r3, [r3, #16]
 800523e:	2b01      	cmp	r3, #1
 8005240:	d101      	bne.n	8005246 <HAL_DSI_SetLowPowerRXFilter+0x16>
 8005242:	2302      	movs	r3, #2
 8005244:	e01b      	b.n	800527e <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2201      	movs	r2, #1
 800524a:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f8d3 241c 	ldr.w	r2, [r3, #1052]	@ 0x41c
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f022 62c0 	bic.w	r2, r2, #100663296	@ 0x6000000
 800525c:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f8d3 141c 	ldr.w	r1, [r3, #1052]	@ 0x41c
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	065a      	lsls	r2, r3, #25
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	430a      	orrs	r2, r1
 8005272:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	370c      	adds	r7, #12
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr
	...

0800528c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800528c:	b480      	push	{r7}
 800528e:	b089      	sub	sp, #36	@ 0x24
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005296:	2300      	movs	r3, #0
 8005298:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800529a:	2300      	movs	r3, #0
 800529c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800529e:	2300      	movs	r3, #0
 80052a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80052a2:	2300      	movs	r3, #0
 80052a4:	61fb      	str	r3, [r7, #28]
 80052a6:	e177      	b.n	8005598 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80052a8:	2201      	movs	r2, #1
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	fa02 f303 	lsl.w	r3, r2, r3
 80052b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	4013      	ands	r3, r2
 80052ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80052bc:	693a      	ldr	r2, [r7, #16]
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	f040 8166 	bne.w	8005592 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	f003 0303 	and.w	r3, r3, #3
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d005      	beq.n	80052de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d130      	bne.n	8005340 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	005b      	lsls	r3, r3, #1
 80052e8:	2203      	movs	r2, #3
 80052ea:	fa02 f303 	lsl.w	r3, r2, r3
 80052ee:	43db      	mvns	r3, r3
 80052f0:	69ba      	ldr	r2, [r7, #24]
 80052f2:	4013      	ands	r3, r2
 80052f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	68da      	ldr	r2, [r3, #12]
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	005b      	lsls	r3, r3, #1
 80052fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005302:	69ba      	ldr	r2, [r7, #24]
 8005304:	4313      	orrs	r3, r2
 8005306:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	69ba      	ldr	r2, [r7, #24]
 800530c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005314:	2201      	movs	r2, #1
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	fa02 f303 	lsl.w	r3, r2, r3
 800531c:	43db      	mvns	r3, r3
 800531e:	69ba      	ldr	r2, [r7, #24]
 8005320:	4013      	ands	r3, r2
 8005322:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	091b      	lsrs	r3, r3, #4
 800532a:	f003 0201 	and.w	r2, r3, #1
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	fa02 f303 	lsl.w	r3, r2, r3
 8005334:	69ba      	ldr	r2, [r7, #24]
 8005336:	4313      	orrs	r3, r2
 8005338:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	69ba      	ldr	r2, [r7, #24]
 800533e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	f003 0303 	and.w	r3, r3, #3
 8005348:	2b03      	cmp	r3, #3
 800534a:	d017      	beq.n	800537c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	005b      	lsls	r3, r3, #1
 8005356:	2203      	movs	r2, #3
 8005358:	fa02 f303 	lsl.w	r3, r2, r3
 800535c:	43db      	mvns	r3, r3
 800535e:	69ba      	ldr	r2, [r7, #24]
 8005360:	4013      	ands	r3, r2
 8005362:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	689a      	ldr	r2, [r3, #8]
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	005b      	lsls	r3, r3, #1
 800536c:	fa02 f303 	lsl.w	r3, r2, r3
 8005370:	69ba      	ldr	r2, [r7, #24]
 8005372:	4313      	orrs	r3, r2
 8005374:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	69ba      	ldr	r2, [r7, #24]
 800537a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	f003 0303 	and.w	r3, r3, #3
 8005384:	2b02      	cmp	r3, #2
 8005386:	d123      	bne.n	80053d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	08da      	lsrs	r2, r3, #3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	3208      	adds	r2, #8
 8005390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005394:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	f003 0307 	and.w	r3, r3, #7
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	220f      	movs	r2, #15
 80053a0:	fa02 f303 	lsl.w	r3, r2, r3
 80053a4:	43db      	mvns	r3, r3
 80053a6:	69ba      	ldr	r2, [r7, #24]
 80053a8:	4013      	ands	r3, r2
 80053aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	691a      	ldr	r2, [r3, #16]
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	f003 0307 	and.w	r3, r3, #7
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	fa02 f303 	lsl.w	r3, r2, r3
 80053bc:	69ba      	ldr	r2, [r7, #24]
 80053be:	4313      	orrs	r3, r2
 80053c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	08da      	lsrs	r2, r3, #3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	3208      	adds	r2, #8
 80053ca:	69b9      	ldr	r1, [r7, #24]
 80053cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	005b      	lsls	r3, r3, #1
 80053da:	2203      	movs	r2, #3
 80053dc:	fa02 f303 	lsl.w	r3, r2, r3
 80053e0:	43db      	mvns	r3, r3
 80053e2:	69ba      	ldr	r2, [r7, #24]
 80053e4:	4013      	ands	r3, r2
 80053e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	f003 0203 	and.w	r2, r3, #3
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	005b      	lsls	r3, r3, #1
 80053f4:	fa02 f303 	lsl.w	r3, r2, r3
 80053f8:	69ba      	ldr	r2, [r7, #24]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	69ba      	ldr	r2, [r7, #24]
 8005402:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800540c:	2b00      	cmp	r3, #0
 800540e:	f000 80c0 	beq.w	8005592 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005412:	2300      	movs	r3, #0
 8005414:	60fb      	str	r3, [r7, #12]
 8005416:	4b66      	ldr	r3, [pc, #408]	@ (80055b0 <HAL_GPIO_Init+0x324>)
 8005418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800541a:	4a65      	ldr	r2, [pc, #404]	@ (80055b0 <HAL_GPIO_Init+0x324>)
 800541c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005420:	6453      	str	r3, [r2, #68]	@ 0x44
 8005422:	4b63      	ldr	r3, [pc, #396]	@ (80055b0 <HAL_GPIO_Init+0x324>)
 8005424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005426:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800542a:	60fb      	str	r3, [r7, #12]
 800542c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800542e:	4a61      	ldr	r2, [pc, #388]	@ (80055b4 <HAL_GPIO_Init+0x328>)
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	089b      	lsrs	r3, r3, #2
 8005434:	3302      	adds	r3, #2
 8005436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800543a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	f003 0303 	and.w	r3, r3, #3
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	220f      	movs	r2, #15
 8005446:	fa02 f303 	lsl.w	r3, r2, r3
 800544a:	43db      	mvns	r3, r3
 800544c:	69ba      	ldr	r2, [r7, #24]
 800544e:	4013      	ands	r3, r2
 8005450:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a58      	ldr	r2, [pc, #352]	@ (80055b8 <HAL_GPIO_Init+0x32c>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d037      	beq.n	80054ca <HAL_GPIO_Init+0x23e>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a57      	ldr	r2, [pc, #348]	@ (80055bc <HAL_GPIO_Init+0x330>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d031      	beq.n	80054c6 <HAL_GPIO_Init+0x23a>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a56      	ldr	r2, [pc, #344]	@ (80055c0 <HAL_GPIO_Init+0x334>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d02b      	beq.n	80054c2 <HAL_GPIO_Init+0x236>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a55      	ldr	r2, [pc, #340]	@ (80055c4 <HAL_GPIO_Init+0x338>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d025      	beq.n	80054be <HAL_GPIO_Init+0x232>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a54      	ldr	r2, [pc, #336]	@ (80055c8 <HAL_GPIO_Init+0x33c>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d01f      	beq.n	80054ba <HAL_GPIO_Init+0x22e>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a53      	ldr	r2, [pc, #332]	@ (80055cc <HAL_GPIO_Init+0x340>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d019      	beq.n	80054b6 <HAL_GPIO_Init+0x22a>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a52      	ldr	r2, [pc, #328]	@ (80055d0 <HAL_GPIO_Init+0x344>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d013      	beq.n	80054b2 <HAL_GPIO_Init+0x226>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a51      	ldr	r2, [pc, #324]	@ (80055d4 <HAL_GPIO_Init+0x348>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d00d      	beq.n	80054ae <HAL_GPIO_Init+0x222>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a50      	ldr	r2, [pc, #320]	@ (80055d8 <HAL_GPIO_Init+0x34c>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d007      	beq.n	80054aa <HAL_GPIO_Init+0x21e>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a4f      	ldr	r2, [pc, #316]	@ (80055dc <HAL_GPIO_Init+0x350>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d101      	bne.n	80054a6 <HAL_GPIO_Init+0x21a>
 80054a2:	2309      	movs	r3, #9
 80054a4:	e012      	b.n	80054cc <HAL_GPIO_Init+0x240>
 80054a6:	230a      	movs	r3, #10
 80054a8:	e010      	b.n	80054cc <HAL_GPIO_Init+0x240>
 80054aa:	2308      	movs	r3, #8
 80054ac:	e00e      	b.n	80054cc <HAL_GPIO_Init+0x240>
 80054ae:	2307      	movs	r3, #7
 80054b0:	e00c      	b.n	80054cc <HAL_GPIO_Init+0x240>
 80054b2:	2306      	movs	r3, #6
 80054b4:	e00a      	b.n	80054cc <HAL_GPIO_Init+0x240>
 80054b6:	2305      	movs	r3, #5
 80054b8:	e008      	b.n	80054cc <HAL_GPIO_Init+0x240>
 80054ba:	2304      	movs	r3, #4
 80054bc:	e006      	b.n	80054cc <HAL_GPIO_Init+0x240>
 80054be:	2303      	movs	r3, #3
 80054c0:	e004      	b.n	80054cc <HAL_GPIO_Init+0x240>
 80054c2:	2302      	movs	r3, #2
 80054c4:	e002      	b.n	80054cc <HAL_GPIO_Init+0x240>
 80054c6:	2301      	movs	r3, #1
 80054c8:	e000      	b.n	80054cc <HAL_GPIO_Init+0x240>
 80054ca:	2300      	movs	r3, #0
 80054cc:	69fa      	ldr	r2, [r7, #28]
 80054ce:	f002 0203 	and.w	r2, r2, #3
 80054d2:	0092      	lsls	r2, r2, #2
 80054d4:	4093      	lsls	r3, r2
 80054d6:	69ba      	ldr	r2, [r7, #24]
 80054d8:	4313      	orrs	r3, r2
 80054da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80054dc:	4935      	ldr	r1, [pc, #212]	@ (80055b4 <HAL_GPIO_Init+0x328>)
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	089b      	lsrs	r3, r3, #2
 80054e2:	3302      	adds	r3, #2
 80054e4:	69ba      	ldr	r2, [r7, #24]
 80054e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80054ea:	4b3d      	ldr	r3, [pc, #244]	@ (80055e0 <HAL_GPIO_Init+0x354>)
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	43db      	mvns	r3, r3
 80054f4:	69ba      	ldr	r2, [r7, #24]
 80054f6:	4013      	ands	r3, r2
 80054f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d003      	beq.n	800550e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005506:	69ba      	ldr	r2, [r7, #24]
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	4313      	orrs	r3, r2
 800550c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800550e:	4a34      	ldr	r2, [pc, #208]	@ (80055e0 <HAL_GPIO_Init+0x354>)
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005514:	4b32      	ldr	r3, [pc, #200]	@ (80055e0 <HAL_GPIO_Init+0x354>)
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	43db      	mvns	r3, r3
 800551e:	69ba      	ldr	r2, [r7, #24]
 8005520:	4013      	ands	r3, r2
 8005522:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d003      	beq.n	8005538 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005530:	69ba      	ldr	r2, [r7, #24]
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	4313      	orrs	r3, r2
 8005536:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005538:	4a29      	ldr	r2, [pc, #164]	@ (80055e0 <HAL_GPIO_Init+0x354>)
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800553e:	4b28      	ldr	r3, [pc, #160]	@ (80055e0 <HAL_GPIO_Init+0x354>)
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	43db      	mvns	r3, r3
 8005548:	69ba      	ldr	r2, [r7, #24]
 800554a:	4013      	ands	r3, r2
 800554c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005556:	2b00      	cmp	r3, #0
 8005558:	d003      	beq.n	8005562 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800555a:	69ba      	ldr	r2, [r7, #24]
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	4313      	orrs	r3, r2
 8005560:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005562:	4a1f      	ldr	r2, [pc, #124]	@ (80055e0 <HAL_GPIO_Init+0x354>)
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005568:	4b1d      	ldr	r3, [pc, #116]	@ (80055e0 <HAL_GPIO_Init+0x354>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	43db      	mvns	r3, r3
 8005572:	69ba      	ldr	r2, [r7, #24]
 8005574:	4013      	ands	r3, r2
 8005576:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005580:	2b00      	cmp	r3, #0
 8005582:	d003      	beq.n	800558c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005584:	69ba      	ldr	r2, [r7, #24]
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	4313      	orrs	r3, r2
 800558a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800558c:	4a14      	ldr	r2, [pc, #80]	@ (80055e0 <HAL_GPIO_Init+0x354>)
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	3301      	adds	r3, #1
 8005596:	61fb      	str	r3, [r7, #28]
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	2b0f      	cmp	r3, #15
 800559c:	f67f ae84 	bls.w	80052a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80055a0:	bf00      	nop
 80055a2:	bf00      	nop
 80055a4:	3724      	adds	r7, #36	@ 0x24
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
 80055ae:	bf00      	nop
 80055b0:	40023800 	.word	0x40023800
 80055b4:	40013800 	.word	0x40013800
 80055b8:	40020000 	.word	0x40020000
 80055bc:	40020400 	.word	0x40020400
 80055c0:	40020800 	.word	0x40020800
 80055c4:	40020c00 	.word	0x40020c00
 80055c8:	40021000 	.word	0x40021000
 80055cc:	40021400 	.word	0x40021400
 80055d0:	40021800 	.word	0x40021800
 80055d4:	40021c00 	.word	0x40021c00
 80055d8:	40022000 	.word	0x40022000
 80055dc:	40022400 	.word	0x40022400
 80055e0:	40013c00 	.word	0x40013c00

080055e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b085      	sub	sp, #20
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	460b      	mov	r3, r1
 80055ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	691a      	ldr	r2, [r3, #16]
 80055f4:	887b      	ldrh	r3, [r7, #2]
 80055f6:	4013      	ands	r3, r2
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d002      	beq.n	8005602 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80055fc:	2301      	movs	r3, #1
 80055fe:	73fb      	strb	r3, [r7, #15]
 8005600:	e001      	b.n	8005606 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005602:	2300      	movs	r3, #0
 8005604:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005606:	7bfb      	ldrb	r3, [r7, #15]
}
 8005608:	4618      	mov	r0, r3
 800560a:	3714      	adds	r7, #20
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	460b      	mov	r3, r1
 800561e:	807b      	strh	r3, [r7, #2]
 8005620:	4613      	mov	r3, r2
 8005622:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005624:	787b      	ldrb	r3, [r7, #1]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d003      	beq.n	8005632 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800562a:	887a      	ldrh	r2, [r7, #2]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005630:	e003      	b.n	800563a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005632:	887b      	ldrh	r3, [r7, #2]
 8005634:	041a      	lsls	r2, r3, #16
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	619a      	str	r2, [r3, #24]
}
 800563a:	bf00      	nop
 800563c:	370c      	adds	r7, #12
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
	...

08005648 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d101      	bne.n	800565a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e12b      	b.n	80058b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005660:	b2db      	uxtb	r3, r3
 8005662:	2b00      	cmp	r3, #0
 8005664:	d106      	bne.n	8005674 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f7fc fefc 	bl	800246c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2224      	movs	r2, #36	@ 0x24
 8005678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f022 0201 	bic.w	r2, r2, #1
 800568a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800569a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80056aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80056ac:	f000 ff82 	bl	80065b4 <HAL_RCC_GetPCLK1Freq>
 80056b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	4a81      	ldr	r2, [pc, #516]	@ (80058bc <HAL_I2C_Init+0x274>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d807      	bhi.n	80056cc <HAL_I2C_Init+0x84>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	4a80      	ldr	r2, [pc, #512]	@ (80058c0 <HAL_I2C_Init+0x278>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	bf94      	ite	ls
 80056c4:	2301      	movls	r3, #1
 80056c6:	2300      	movhi	r3, #0
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	e006      	b.n	80056da <HAL_I2C_Init+0x92>
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	4a7d      	ldr	r2, [pc, #500]	@ (80058c4 <HAL_I2C_Init+0x27c>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	bf94      	ite	ls
 80056d4:	2301      	movls	r3, #1
 80056d6:	2300      	movhi	r3, #0
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d001      	beq.n	80056e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e0e7      	b.n	80058b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	4a78      	ldr	r2, [pc, #480]	@ (80058c8 <HAL_I2C_Init+0x280>)
 80056e6:	fba2 2303 	umull	r2, r3, r2, r3
 80056ea:	0c9b      	lsrs	r3, r3, #18
 80056ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68ba      	ldr	r2, [r7, #8]
 80056fe:	430a      	orrs	r2, r1
 8005700:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	6a1b      	ldr	r3, [r3, #32]
 8005708:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	4a6a      	ldr	r2, [pc, #424]	@ (80058bc <HAL_I2C_Init+0x274>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d802      	bhi.n	800571c <HAL_I2C_Init+0xd4>
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	3301      	adds	r3, #1
 800571a:	e009      	b.n	8005730 <HAL_I2C_Init+0xe8>
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005722:	fb02 f303 	mul.w	r3, r2, r3
 8005726:	4a69      	ldr	r2, [pc, #420]	@ (80058cc <HAL_I2C_Init+0x284>)
 8005728:	fba2 2303 	umull	r2, r3, r2, r3
 800572c:	099b      	lsrs	r3, r3, #6
 800572e:	3301      	adds	r3, #1
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	6812      	ldr	r2, [r2, #0]
 8005734:	430b      	orrs	r3, r1
 8005736:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	69db      	ldr	r3, [r3, #28]
 800573e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005742:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	495c      	ldr	r1, [pc, #368]	@ (80058bc <HAL_I2C_Init+0x274>)
 800574c:	428b      	cmp	r3, r1
 800574e:	d819      	bhi.n	8005784 <HAL_I2C_Init+0x13c>
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	1e59      	subs	r1, r3, #1
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	005b      	lsls	r3, r3, #1
 800575a:	fbb1 f3f3 	udiv	r3, r1, r3
 800575e:	1c59      	adds	r1, r3, #1
 8005760:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005764:	400b      	ands	r3, r1
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00a      	beq.n	8005780 <HAL_I2C_Init+0x138>
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	1e59      	subs	r1, r3, #1
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	005b      	lsls	r3, r3, #1
 8005774:	fbb1 f3f3 	udiv	r3, r1, r3
 8005778:	3301      	adds	r3, #1
 800577a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800577e:	e051      	b.n	8005824 <HAL_I2C_Init+0x1dc>
 8005780:	2304      	movs	r3, #4
 8005782:	e04f      	b.n	8005824 <HAL_I2C_Init+0x1dc>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d111      	bne.n	80057b0 <HAL_I2C_Init+0x168>
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	1e58      	subs	r0, r3, #1
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6859      	ldr	r1, [r3, #4]
 8005794:	460b      	mov	r3, r1
 8005796:	005b      	lsls	r3, r3, #1
 8005798:	440b      	add	r3, r1
 800579a:	fbb0 f3f3 	udiv	r3, r0, r3
 800579e:	3301      	adds	r3, #1
 80057a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	bf0c      	ite	eq
 80057a8:	2301      	moveq	r3, #1
 80057aa:	2300      	movne	r3, #0
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	e012      	b.n	80057d6 <HAL_I2C_Init+0x18e>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	1e58      	subs	r0, r3, #1
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6859      	ldr	r1, [r3, #4]
 80057b8:	460b      	mov	r3, r1
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	440b      	add	r3, r1
 80057be:	0099      	lsls	r1, r3, #2
 80057c0:	440b      	add	r3, r1
 80057c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80057c6:	3301      	adds	r3, #1
 80057c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	bf0c      	ite	eq
 80057d0:	2301      	moveq	r3, #1
 80057d2:	2300      	movne	r3, #0
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d001      	beq.n	80057de <HAL_I2C_Init+0x196>
 80057da:	2301      	movs	r3, #1
 80057dc:	e022      	b.n	8005824 <HAL_I2C_Init+0x1dc>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d10e      	bne.n	8005804 <HAL_I2C_Init+0x1bc>
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	1e58      	subs	r0, r3, #1
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6859      	ldr	r1, [r3, #4]
 80057ee:	460b      	mov	r3, r1
 80057f0:	005b      	lsls	r3, r3, #1
 80057f2:	440b      	add	r3, r1
 80057f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80057f8:	3301      	adds	r3, #1
 80057fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005802:	e00f      	b.n	8005824 <HAL_I2C_Init+0x1dc>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	1e58      	subs	r0, r3, #1
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6859      	ldr	r1, [r3, #4]
 800580c:	460b      	mov	r3, r1
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	440b      	add	r3, r1
 8005812:	0099      	lsls	r1, r3, #2
 8005814:	440b      	add	r3, r1
 8005816:	fbb0 f3f3 	udiv	r3, r0, r3
 800581a:	3301      	adds	r3, #1
 800581c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005820:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005824:	6879      	ldr	r1, [r7, #4]
 8005826:	6809      	ldr	r1, [r1, #0]
 8005828:	4313      	orrs	r3, r2
 800582a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	69da      	ldr	r2, [r3, #28]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a1b      	ldr	r3, [r3, #32]
 800583e:	431a      	orrs	r2, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	430a      	orrs	r2, r1
 8005846:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005852:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	6911      	ldr	r1, [r2, #16]
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	68d2      	ldr	r2, [r2, #12]
 800585e:	4311      	orrs	r1, r2
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	6812      	ldr	r2, [r2, #0]
 8005864:	430b      	orrs	r3, r1
 8005866:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	695a      	ldr	r2, [r3, #20]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	431a      	orrs	r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	430a      	orrs	r2, r1
 8005882:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f042 0201 	orr.w	r2, r2, #1
 8005892:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2220      	movs	r2, #32
 800589e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3710      	adds	r7, #16
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	000186a0 	.word	0x000186a0
 80058c0:	001e847f 	.word	0x001e847f
 80058c4:	003d08ff 	.word	0x003d08ff
 80058c8:	431bde83 	.word	0x431bde83
 80058cc:	10624dd3 	.word	0x10624dd3

080058d0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d101      	bne.n	80058e2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e0bf      	b.n	8005a62 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d106      	bne.n	80058fc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f7fc fe36 	bl	8002568 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2202      	movs	r2, #2
 8005900:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	699a      	ldr	r2, [r3, #24]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8005912:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	6999      	ldr	r1, [r3, #24]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	685a      	ldr	r2, [r3, #4]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005928:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	430a      	orrs	r2, r1
 8005936:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	6899      	ldr	r1, [r3, #8]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	4b4a      	ldr	r3, [pc, #296]	@ (8005a6c <HAL_LTDC_Init+0x19c>)
 8005944:	400b      	ands	r3, r1
 8005946:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	695b      	ldr	r3, [r3, #20]
 800594c:	041b      	lsls	r3, r3, #16
 800594e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	6899      	ldr	r1, [r3, #8]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	699a      	ldr	r2, [r3, #24]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	431a      	orrs	r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	430a      	orrs	r2, r1
 8005964:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68d9      	ldr	r1, [r3, #12]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	4b3e      	ldr	r3, [pc, #248]	@ (8005a6c <HAL_LTDC_Init+0x19c>)
 8005972:	400b      	ands	r3, r1
 8005974:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	69db      	ldr	r3, [r3, #28]
 800597a:	041b      	lsls	r3, r3, #16
 800597c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68d9      	ldr	r1, [r3, #12]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6a1a      	ldr	r2, [r3, #32]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	431a      	orrs	r2, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	430a      	orrs	r2, r1
 8005992:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	6919      	ldr	r1, [r3, #16]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	4b33      	ldr	r3, [pc, #204]	@ (8005a6c <HAL_LTDC_Init+0x19c>)
 80059a0:	400b      	ands	r3, r1
 80059a2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a8:	041b      	lsls	r3, r3, #16
 80059aa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	6919      	ldr	r1, [r3, #16]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	431a      	orrs	r2, r3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	430a      	orrs	r2, r1
 80059c0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	6959      	ldr	r1, [r3, #20]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	4b27      	ldr	r3, [pc, #156]	@ (8005a6c <HAL_LTDC_Init+0x19c>)
 80059ce:	400b      	ands	r3, r1
 80059d0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059d6:	041b      	lsls	r3, r3, #16
 80059d8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	6959      	ldr	r1, [r3, #20]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	431a      	orrs	r2, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	430a      	orrs	r2, r1
 80059ee:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80059f6:	021b      	lsls	r3, r3, #8
 80059f8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005a00:	041b      	lsls	r3, r3, #16
 8005a02:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8005a12:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005a1a:	68ba      	ldr	r2, [r7, #8]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8005a26:	431a      	orrs	r2, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	430a      	orrs	r2, r1
 8005a2e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f042 0206 	orr.w	r2, r2, #6
 8005a3e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	699a      	ldr	r2, [r3, #24]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f042 0201 	orr.w	r2, r2, #1
 8005a4e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8005a60:	2300      	movs	r3, #0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3710      	adds	r7, #16
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	f000f800 	.word	0xf000f800

08005a70 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a7e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a86:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f003 0304 	and.w	r3, r3, #4
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d023      	beq.n	8005ada <HAL_LTDC_IRQHandler+0x6a>
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	f003 0304 	and.w	r3, r3, #4
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d01e      	beq.n	8005ada <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f022 0204 	bic.w	r2, r2, #4
 8005aaa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2204      	movs	r2, #4
 8005ab2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005aba:	f043 0201 	orr.w	r2, r3, #1
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2204      	movs	r2, #4
 8005ac8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 f86f 	bl	8005bb8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f003 0302 	and.w	r3, r3, #2
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d023      	beq.n	8005b2c <HAL_LTDC_IRQHandler+0xbc>
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	f003 0302 	and.w	r3, r3, #2
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d01e      	beq.n	8005b2c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f022 0202 	bic.w	r2, r2, #2
 8005afc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2202      	movs	r2, #2
 8005b04:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005b0c:	f043 0202 	orr.w	r2, r3, #2
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2204      	movs	r2, #4
 8005b1a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 f846 	bl	8005bb8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f003 0301 	and.w	r3, r3, #1
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d01b      	beq.n	8005b6e <HAL_LTDC_IRQHandler+0xfe>
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	f003 0301 	and.w	r3, r3, #1
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d016      	beq.n	8005b6e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f022 0201 	bic.w	r2, r2, #1
 8005b4e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2201      	movs	r2, #1
 8005b56:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 f82f 	bl	8005bcc <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f003 0308 	and.w	r3, r3, #8
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d01b      	beq.n	8005bb0 <HAL_LTDC_IRQHandler+0x140>
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	f003 0308 	and.w	r3, r3, #8
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d016      	beq.n	8005bb0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f022 0208 	bic.w	r2, r2, #8
 8005b90:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2208      	movs	r2, #8
 8005b98:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 f818 	bl	8005be0 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005bb0:	bf00      	nop
 8005bb2:	3710      	adds	r7, #16
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005bc0:	bf00      	nop
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8005bd4:	bf00      	nop
 8005bd6:	370c      	adds	r7, #12
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005be8:	bf00      	nop
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005bf4:	b5b0      	push	{r4, r5, r7, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d101      	bne.n	8005c0e <HAL_LTDC_ConfigLayer+0x1a>
 8005c0a:	2302      	movs	r3, #2
 8005c0c:	e02c      	b.n	8005c68 <HAL_LTDC_ConfigLayer+0x74>
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2201      	movs	r2, #1
 8005c12:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2202      	movs	r2, #2
 8005c1a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005c1e:	68fa      	ldr	r2, [r7, #12]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2134      	movs	r1, #52	@ 0x34
 8005c24:	fb01 f303 	mul.w	r3, r1, r3
 8005c28:	4413      	add	r3, r2
 8005c2a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	4614      	mov	r4, r2
 8005c32:	461d      	mov	r5, r3
 8005c34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c40:	682b      	ldr	r3, [r5, #0]
 8005c42:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	68b9      	ldr	r1, [r7, #8]
 8005c48:	68f8      	ldr	r0, [r7, #12]
 8005c4a:	f000 f811 	bl	8005c70 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2201      	movs	r2, #1
 8005c54:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3710      	adds	r7, #16
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bdb0      	pop	{r4, r5, r7, pc}

08005c70 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b089      	sub	sp, #36	@ 0x24
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	685a      	ldr	r2, [r3, #4]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	0c1b      	lsrs	r3, r3, #16
 8005c88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c8c:	4413      	add	r3, r2
 8005c8e:	041b      	lsls	r3, r3, #16
 8005c90:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	461a      	mov	r2, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	01db      	lsls	r3, r3, #7
 8005c9c:	4413      	add	r3, r2
 8005c9e:	3384      	adds	r3, #132	@ 0x84
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	6812      	ldr	r2, [r2, #0]
 8005ca6:	4611      	mov	r1, r2
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	01d2      	lsls	r2, r2, #7
 8005cac:	440a      	add	r2, r1
 8005cae:	3284      	adds	r2, #132	@ 0x84
 8005cb0:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005cb4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	0c1b      	lsrs	r3, r3, #16
 8005cc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005cc6:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005cc8:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4619      	mov	r1, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	01db      	lsls	r3, r3, #7
 8005cd4:	440b      	add	r3, r1
 8005cd6:	3384      	adds	r3, #132	@ 0x84
 8005cd8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005cde:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	68da      	ldr	r2, [r3, #12]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005cee:	4413      	add	r3, r2
 8005cf0:	041b      	lsls	r3, r3, #16
 8005cf2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	01db      	lsls	r3, r3, #7
 8005cfe:	4413      	add	r3, r2
 8005d00:	3384      	adds	r3, #132	@ 0x84
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	6812      	ldr	r2, [r2, #0]
 8005d08:	4611      	mov	r1, r2
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	01d2      	lsls	r2, r2, #7
 8005d0e:	440a      	add	r2, r1
 8005d10:	3284      	adds	r2, #132	@ 0x84
 8005d12:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005d16:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	689a      	ldr	r2, [r3, #8]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d26:	4413      	add	r3, r2
 8005d28:	1c5a      	adds	r2, r3, #1
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4619      	mov	r1, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	01db      	lsls	r3, r3, #7
 8005d34:	440b      	add	r3, r1
 8005d36:	3384      	adds	r3, #132	@ 0x84
 8005d38:	4619      	mov	r1, r3
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	461a      	mov	r2, r3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	01db      	lsls	r3, r3, #7
 8005d4a:	4413      	add	r3, r2
 8005d4c:	3384      	adds	r3, #132	@ 0x84
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	6812      	ldr	r2, [r2, #0]
 8005d54:	4611      	mov	r1, r2
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	01d2      	lsls	r2, r2, #7
 8005d5a:	440a      	add	r2, r1
 8005d5c:	3284      	adds	r2, #132	@ 0x84
 8005d5e:	f023 0307 	bic.w	r3, r3, #7
 8005d62:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	461a      	mov	r2, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	01db      	lsls	r3, r3, #7
 8005d6e:	4413      	add	r3, r2
 8005d70:	3384      	adds	r3, #132	@ 0x84
 8005d72:	461a      	mov	r2, r3
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	691b      	ldr	r3, [r3, #16]
 8005d78:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005d80:	021b      	lsls	r3, r3, #8
 8005d82:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005d8a:	041b      	lsls	r3, r3, #16
 8005d8c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	699b      	ldr	r3, [r3, #24]
 8005d92:	061b      	lsls	r3, r3, #24
 8005d94:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	01db      	lsls	r3, r3, #7
 8005da0:	4413      	add	r3, r2
 8005da2:	3384      	adds	r3, #132	@ 0x84
 8005da4:	699b      	ldr	r3, [r3, #24]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	461a      	mov	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	01db      	lsls	r3, r3, #7
 8005db0:	4413      	add	r3, r2
 8005db2:	3384      	adds	r3, #132	@ 0x84
 8005db4:	461a      	mov	r2, r3
 8005db6:	2300      	movs	r3, #0
 8005db8:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	431a      	orrs	r2, r3
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	431a      	orrs	r2, r3
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4619      	mov	r1, r3
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	01db      	lsls	r3, r3, #7
 8005dd4:	440b      	add	r3, r1
 8005dd6:	3384      	adds	r3, #132	@ 0x84
 8005dd8:	4619      	mov	r1, r3
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	461a      	mov	r2, r3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	01db      	lsls	r3, r3, #7
 8005dea:	4413      	add	r3, r2
 8005dec:	3384      	adds	r3, #132	@ 0x84
 8005dee:	695b      	ldr	r3, [r3, #20]
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	6812      	ldr	r2, [r2, #0]
 8005df4:	4611      	mov	r1, r2
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	01d2      	lsls	r2, r2, #7
 8005dfa:	440a      	add	r2, r1
 8005dfc:	3284      	adds	r2, #132	@ 0x84
 8005dfe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005e02:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	461a      	mov	r2, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	01db      	lsls	r3, r3, #7
 8005e0e:	4413      	add	r3, r2
 8005e10:	3384      	adds	r3, #132	@ 0x84
 8005e12:	461a      	mov	r2, r3
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	695b      	ldr	r3, [r3, #20]
 8005e18:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	461a      	mov	r2, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	01db      	lsls	r3, r3, #7
 8005e24:	4413      	add	r3, r2
 8005e26:	3384      	adds	r3, #132	@ 0x84
 8005e28:	69db      	ldr	r3, [r3, #28]
 8005e2a:	68fa      	ldr	r2, [r7, #12]
 8005e2c:	6812      	ldr	r2, [r2, #0]
 8005e2e:	4611      	mov	r1, r2
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	01d2      	lsls	r2, r2, #7
 8005e34:	440a      	add	r2, r1
 8005e36:	3284      	adds	r2, #132	@ 0x84
 8005e38:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005e3c:	f023 0307 	bic.w	r3, r3, #7
 8005e40:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	69da      	ldr	r2, [r3, #28]
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	6a1b      	ldr	r3, [r3, #32]
 8005e4a:	68f9      	ldr	r1, [r7, #12]
 8005e4c:	6809      	ldr	r1, [r1, #0]
 8005e4e:	4608      	mov	r0, r1
 8005e50:	6879      	ldr	r1, [r7, #4]
 8005e52:	01c9      	lsls	r1, r1, #7
 8005e54:	4401      	add	r1, r0
 8005e56:	3184      	adds	r1, #132	@ 0x84
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	461a      	mov	r2, r3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	01db      	lsls	r3, r3, #7
 8005e66:	4413      	add	r3, r2
 8005e68:	3384      	adds	r3, #132	@ 0x84
 8005e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	461a      	mov	r2, r3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	01db      	lsls	r3, r3, #7
 8005e76:	4413      	add	r3, r2
 8005e78:	3384      	adds	r3, #132	@ 0x84
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	461a      	mov	r2, r3
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	01db      	lsls	r3, r3, #7
 8005e8a:	4413      	add	r3, r2
 8005e8c:	3384      	adds	r3, #132	@ 0x84
 8005e8e:	461a      	mov	r2, r3
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e94:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	691b      	ldr	r3, [r3, #16]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d102      	bne.n	8005ea4 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005e9e:	2304      	movs	r3, #4
 8005ea0:	61fb      	str	r3, [r7, #28]
 8005ea2:	e01b      	b.n	8005edc <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d102      	bne.n	8005eb2 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005eac:	2303      	movs	r3, #3
 8005eae:	61fb      	str	r3, [r7, #28]
 8005eb0:	e014      	b.n	8005edc <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	2b04      	cmp	r3, #4
 8005eb8:	d00b      	beq.n	8005ed2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	d007      	beq.n	8005ed2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005ec6:	2b03      	cmp	r3, #3
 8005ec8:	d003      	beq.n	8005ed2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005ece:	2b07      	cmp	r3, #7
 8005ed0:	d102      	bne.n	8005ed8 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005ed2:	2302      	movs	r3, #2
 8005ed4:	61fb      	str	r3, [r7, #28]
 8005ed6:	e001      	b.n	8005edc <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	01db      	lsls	r3, r3, #7
 8005ee6:	4413      	add	r3, r2
 8005ee8:	3384      	adds	r3, #132	@ 0x84
 8005eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	6812      	ldr	r2, [r2, #0]
 8005ef0:	4611      	mov	r1, r2
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	01d2      	lsls	r2, r2, #7
 8005ef6:	440a      	add	r2, r1
 8005ef8:	3284      	adds	r2, #132	@ 0x84
 8005efa:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8005efe:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f04:	69fa      	ldr	r2, [r7, #28]
 8005f06:	fb02 f303 	mul.w	r3, r2, r3
 8005f0a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	6859      	ldr	r1, [r3, #4]
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	1acb      	subs	r3, r1, r3
 8005f16:	69f9      	ldr	r1, [r7, #28]
 8005f18:	fb01 f303 	mul.w	r3, r1, r3
 8005f1c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005f1e:	68f9      	ldr	r1, [r7, #12]
 8005f20:	6809      	ldr	r1, [r1, #0]
 8005f22:	4608      	mov	r0, r1
 8005f24:	6879      	ldr	r1, [r7, #4]
 8005f26:	01c9      	lsls	r1, r1, #7
 8005f28:	4401      	add	r1, r0
 8005f2a:	3184      	adds	r1, #132	@ 0x84
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	461a      	mov	r2, r3
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	01db      	lsls	r3, r3, #7
 8005f3a:	4413      	add	r3, r2
 8005f3c:	3384      	adds	r3, #132	@ 0x84
 8005f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	6812      	ldr	r2, [r2, #0]
 8005f44:	4611      	mov	r1, r2
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	01d2      	lsls	r2, r2, #7
 8005f4a:	440a      	add	r2, r1
 8005f4c:	3284      	adds	r2, #132	@ 0x84
 8005f4e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005f52:	f023 0307 	bic.w	r3, r3, #7
 8005f56:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	01db      	lsls	r3, r3, #7
 8005f62:	4413      	add	r3, r2
 8005f64:	3384      	adds	r3, #132	@ 0x84
 8005f66:	461a      	mov	r2, r3
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f6c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	461a      	mov	r2, r3
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	01db      	lsls	r3, r3, #7
 8005f78:	4413      	add	r3, r2
 8005f7a:	3384      	adds	r3, #132	@ 0x84
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68fa      	ldr	r2, [r7, #12]
 8005f80:	6812      	ldr	r2, [r2, #0]
 8005f82:	4611      	mov	r1, r2
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	01d2      	lsls	r2, r2, #7
 8005f88:	440a      	add	r2, r1
 8005f8a:	3284      	adds	r2, #132	@ 0x84
 8005f8c:	f043 0301 	orr.w	r3, r3, #1
 8005f90:	6013      	str	r3, [r2, #0]
}
 8005f92:	bf00      	nop
 8005f94:	3724      	adds	r7, #36	@ 0x24
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
	...

08005fa0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b082      	sub	sp, #8
 8005fa4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005faa:	2300      	movs	r3, #0
 8005fac:	603b      	str	r3, [r7, #0]
 8005fae:	4b20      	ldr	r3, [pc, #128]	@ (8006030 <HAL_PWREx_EnableOverDrive+0x90>)
 8005fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fb2:	4a1f      	ldr	r2, [pc, #124]	@ (8006030 <HAL_PWREx_EnableOverDrive+0x90>)
 8005fb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8005fba:	4b1d      	ldr	r3, [pc, #116]	@ (8006030 <HAL_PWREx_EnableOverDrive+0x90>)
 8005fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fc2:	603b      	str	r3, [r7, #0]
 8005fc4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005fc6:	4b1b      	ldr	r3, [pc, #108]	@ (8006034 <HAL_PWREx_EnableOverDrive+0x94>)
 8005fc8:	2201      	movs	r2, #1
 8005fca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005fcc:	f7fc ff3a 	bl	8002e44 <HAL_GetTick>
 8005fd0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005fd2:	e009      	b.n	8005fe8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005fd4:	f7fc ff36 	bl	8002e44 <HAL_GetTick>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005fe2:	d901      	bls.n	8005fe8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e01f      	b.n	8006028 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005fe8:	4b13      	ldr	r3, [pc, #76]	@ (8006038 <HAL_PWREx_EnableOverDrive+0x98>)
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ff0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ff4:	d1ee      	bne.n	8005fd4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005ff6:	4b11      	ldr	r3, [pc, #68]	@ (800603c <HAL_PWREx_EnableOverDrive+0x9c>)
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005ffc:	f7fc ff22 	bl	8002e44 <HAL_GetTick>
 8006000:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006002:	e009      	b.n	8006018 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006004:	f7fc ff1e 	bl	8002e44 <HAL_GetTick>
 8006008:	4602      	mov	r2, r0
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006012:	d901      	bls.n	8006018 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006014:	2303      	movs	r3, #3
 8006016:	e007      	b.n	8006028 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006018:	4b07      	ldr	r3, [pc, #28]	@ (8006038 <HAL_PWREx_EnableOverDrive+0x98>)
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006020:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006024:	d1ee      	bne.n	8006004 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8006026:	2300      	movs	r3, #0
}
 8006028:	4618      	mov	r0, r3
 800602a:	3708      	adds	r7, #8
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}
 8006030:	40023800 	.word	0x40023800
 8006034:	420e0040 	.word	0x420e0040
 8006038:	40007000 	.word	0x40007000
 800603c:	420e0044 	.word	0x420e0044

08006040 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b086      	sub	sp, #24
 8006044:	af02      	add	r7, sp, #8
 8006046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006048:	f7fc fefc 	bl	8002e44 <HAL_GetTick>
 800604c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d101      	bne.n	8006058 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	e069      	b.n	800612c <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800605e:	b2db      	uxtb	r3, r3
 8006060:	2b00      	cmp	r3, #0
 8006062:	d10b      	bne.n	800607c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f7fc faa3 	bl	80025b8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006072:	f241 3188 	movw	r1, #5000	@ 0x1388
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 f85e 	bl	8006138 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	3b01      	subs	r3, #1
 800608c:	021a      	lsls	r2, r3, #8
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	430a      	orrs	r2, r1
 8006094:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800609a:	9300      	str	r3, [sp, #0]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	2120      	movs	r1, #32
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 f856 	bl	8006154 <QSPI_WaitFlagStateUntilTimeout>
 80060a8:	4603      	mov	r3, r0
 80060aa:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80060ac:	7afb      	ldrb	r3, [r7, #11]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d137      	bne.n	8006122 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80060bc:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	6852      	ldr	r2, [r2, #4]
 80060c4:	0611      	lsls	r1, r2, #24
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	68d2      	ldr	r2, [r2, #12]
 80060ca:	4311      	orrs	r1, r2
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	69d2      	ldr	r2, [r2, #28]
 80060d0:	4311      	orrs	r1, r2
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	6a12      	ldr	r2, [r2, #32]
 80060d6:	4311      	orrs	r1, r2
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	6812      	ldr	r2, [r2, #0]
 80060dc:	430b      	orrs	r3, r1
 80060de:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	685a      	ldr	r2, [r3, #4]
 80060e6:	4b13      	ldr	r3, [pc, #76]	@ (8006134 <HAL_QSPI_Init+0xf4>)
 80060e8:	4013      	ands	r3, r2
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	6912      	ldr	r2, [r2, #16]
 80060ee:	0411      	lsls	r1, r2, #16
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	6952      	ldr	r2, [r2, #20]
 80060f4:	4311      	orrs	r1, r2
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	6992      	ldr	r2, [r2, #24]
 80060fa:	4311      	orrs	r1, r2
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	6812      	ldr	r2, [r2, #0]
 8006100:	430b      	orrs	r3, r1
 8006102:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f042 0201 	orr.w	r2, r2, #1
 8006112:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2201      	movs	r2, #1
 800611e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 800612a:	7afb      	ldrb	r3, [r7, #11]
}
 800612c:	4618      	mov	r0, r3
 800612e:	3710      	adds	r7, #16
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}
 8006134:	ffe0f8fe 	.word	0xffe0f8fe

08006138 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	683a      	ldr	r2, [r7, #0]
 8006146:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8006148:	bf00      	nop
 800614a:	370c      	adds	r7, #12
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	603b      	str	r3, [r7, #0]
 8006160:	4613      	mov	r3, r2
 8006162:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006164:	e01a      	b.n	800619c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800616c:	d016      	beq.n	800619c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800616e:	f7fc fe69 	bl	8002e44 <HAL_GetTick>
 8006172:	4602      	mov	r2, r0
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	1ad3      	subs	r3, r2, r3
 8006178:	69ba      	ldr	r2, [r7, #24]
 800617a:	429a      	cmp	r2, r3
 800617c:	d302      	bcc.n	8006184 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d10b      	bne.n	800619c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2204      	movs	r2, #4
 8006188:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006190:	f043 0201 	orr.w	r2, r3, #1
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	e00e      	b.n	80061ba <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	689a      	ldr	r2, [r3, #8]
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	4013      	ands	r3, r2
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	bf14      	ite	ne
 80061aa:	2301      	movne	r3, #1
 80061ac:	2300      	moveq	r3, #0
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	461a      	mov	r2, r3
 80061b2:	79fb      	ldrb	r3, [r7, #7]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d1d6      	bne.n	8006166 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80061b8:	2300      	movs	r3, #0
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3710      	adds	r7, #16
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
	...

080061c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d101      	bne.n	80061d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	e0cc      	b.n	8006372 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80061d8:	4b68      	ldr	r3, [pc, #416]	@ (800637c <HAL_RCC_ClockConfig+0x1b8>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f003 030f 	and.w	r3, r3, #15
 80061e0:	683a      	ldr	r2, [r7, #0]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d90c      	bls.n	8006200 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061e6:	4b65      	ldr	r3, [pc, #404]	@ (800637c <HAL_RCC_ClockConfig+0x1b8>)
 80061e8:	683a      	ldr	r2, [r7, #0]
 80061ea:	b2d2      	uxtb	r2, r2
 80061ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061ee:	4b63      	ldr	r3, [pc, #396]	@ (800637c <HAL_RCC_ClockConfig+0x1b8>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 030f 	and.w	r3, r3, #15
 80061f6:	683a      	ldr	r2, [r7, #0]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d001      	beq.n	8006200 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e0b8      	b.n	8006372 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0302 	and.w	r3, r3, #2
 8006208:	2b00      	cmp	r3, #0
 800620a:	d020      	beq.n	800624e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 0304 	and.w	r3, r3, #4
 8006214:	2b00      	cmp	r3, #0
 8006216:	d005      	beq.n	8006224 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006218:	4b59      	ldr	r3, [pc, #356]	@ (8006380 <HAL_RCC_ClockConfig+0x1bc>)
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	4a58      	ldr	r2, [pc, #352]	@ (8006380 <HAL_RCC_ClockConfig+0x1bc>)
 800621e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006222:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 0308 	and.w	r3, r3, #8
 800622c:	2b00      	cmp	r3, #0
 800622e:	d005      	beq.n	800623c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006230:	4b53      	ldr	r3, [pc, #332]	@ (8006380 <HAL_RCC_ClockConfig+0x1bc>)
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	4a52      	ldr	r2, [pc, #328]	@ (8006380 <HAL_RCC_ClockConfig+0x1bc>)
 8006236:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800623a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800623c:	4b50      	ldr	r3, [pc, #320]	@ (8006380 <HAL_RCC_ClockConfig+0x1bc>)
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	494d      	ldr	r1, [pc, #308]	@ (8006380 <HAL_RCC_ClockConfig+0x1bc>)
 800624a:	4313      	orrs	r3, r2
 800624c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 0301 	and.w	r3, r3, #1
 8006256:	2b00      	cmp	r3, #0
 8006258:	d044      	beq.n	80062e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	2b01      	cmp	r3, #1
 8006260:	d107      	bne.n	8006272 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006262:	4b47      	ldr	r3, [pc, #284]	@ (8006380 <HAL_RCC_ClockConfig+0x1bc>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800626a:	2b00      	cmp	r3, #0
 800626c:	d119      	bne.n	80062a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e07f      	b.n	8006372 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	2b02      	cmp	r3, #2
 8006278:	d003      	beq.n	8006282 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800627e:	2b03      	cmp	r3, #3
 8006280:	d107      	bne.n	8006292 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006282:	4b3f      	ldr	r3, [pc, #252]	@ (8006380 <HAL_RCC_ClockConfig+0x1bc>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800628a:	2b00      	cmp	r3, #0
 800628c:	d109      	bne.n	80062a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e06f      	b.n	8006372 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006292:	4b3b      	ldr	r3, [pc, #236]	@ (8006380 <HAL_RCC_ClockConfig+0x1bc>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f003 0302 	and.w	r3, r3, #2
 800629a:	2b00      	cmp	r3, #0
 800629c:	d101      	bne.n	80062a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e067      	b.n	8006372 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80062a2:	4b37      	ldr	r3, [pc, #220]	@ (8006380 <HAL_RCC_ClockConfig+0x1bc>)
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	f023 0203 	bic.w	r2, r3, #3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	4934      	ldr	r1, [pc, #208]	@ (8006380 <HAL_RCC_ClockConfig+0x1bc>)
 80062b0:	4313      	orrs	r3, r2
 80062b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80062b4:	f7fc fdc6 	bl	8002e44 <HAL_GetTick>
 80062b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062ba:	e00a      	b.n	80062d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062bc:	f7fc fdc2 	bl	8002e44 <HAL_GetTick>
 80062c0:	4602      	mov	r2, r0
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d901      	bls.n	80062d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80062ce:	2303      	movs	r3, #3
 80062d0:	e04f      	b.n	8006372 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062d2:	4b2b      	ldr	r3, [pc, #172]	@ (8006380 <HAL_RCC_ClockConfig+0x1bc>)
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	f003 020c 	and.w	r2, r3, #12
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d1eb      	bne.n	80062bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80062e4:	4b25      	ldr	r3, [pc, #148]	@ (800637c <HAL_RCC_ClockConfig+0x1b8>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 030f 	and.w	r3, r3, #15
 80062ec:	683a      	ldr	r2, [r7, #0]
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d20c      	bcs.n	800630c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062f2:	4b22      	ldr	r3, [pc, #136]	@ (800637c <HAL_RCC_ClockConfig+0x1b8>)
 80062f4:	683a      	ldr	r2, [r7, #0]
 80062f6:	b2d2      	uxtb	r2, r2
 80062f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062fa:	4b20      	ldr	r3, [pc, #128]	@ (800637c <HAL_RCC_ClockConfig+0x1b8>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 030f 	and.w	r3, r3, #15
 8006302:	683a      	ldr	r2, [r7, #0]
 8006304:	429a      	cmp	r2, r3
 8006306:	d001      	beq.n	800630c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	e032      	b.n	8006372 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 0304 	and.w	r3, r3, #4
 8006314:	2b00      	cmp	r3, #0
 8006316:	d008      	beq.n	800632a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006318:	4b19      	ldr	r3, [pc, #100]	@ (8006380 <HAL_RCC_ClockConfig+0x1bc>)
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	4916      	ldr	r1, [pc, #88]	@ (8006380 <HAL_RCC_ClockConfig+0x1bc>)
 8006326:	4313      	orrs	r3, r2
 8006328:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 0308 	and.w	r3, r3, #8
 8006332:	2b00      	cmp	r3, #0
 8006334:	d009      	beq.n	800634a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006336:	4b12      	ldr	r3, [pc, #72]	@ (8006380 <HAL_RCC_ClockConfig+0x1bc>)
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	00db      	lsls	r3, r3, #3
 8006344:	490e      	ldr	r1, [pc, #56]	@ (8006380 <HAL_RCC_ClockConfig+0x1bc>)
 8006346:	4313      	orrs	r3, r2
 8006348:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800634a:	f000 f821 	bl	8006390 <HAL_RCC_GetSysClockFreq>
 800634e:	4602      	mov	r2, r0
 8006350:	4b0b      	ldr	r3, [pc, #44]	@ (8006380 <HAL_RCC_ClockConfig+0x1bc>)
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	091b      	lsrs	r3, r3, #4
 8006356:	f003 030f 	and.w	r3, r3, #15
 800635a:	490a      	ldr	r1, [pc, #40]	@ (8006384 <HAL_RCC_ClockConfig+0x1c0>)
 800635c:	5ccb      	ldrb	r3, [r1, r3]
 800635e:	fa22 f303 	lsr.w	r3, r2, r3
 8006362:	4a09      	ldr	r2, [pc, #36]	@ (8006388 <HAL_RCC_ClockConfig+0x1c4>)
 8006364:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006366:	4b09      	ldr	r3, [pc, #36]	@ (800638c <HAL_RCC_ClockConfig+0x1c8>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4618      	mov	r0, r3
 800636c:	f7fc fc06 	bl	8002b7c <HAL_InitTick>

  return HAL_OK;
 8006370:	2300      	movs	r3, #0
}
 8006372:	4618      	mov	r0, r3
 8006374:	3710      	adds	r7, #16
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop
 800637c:	40023c00 	.word	0x40023c00
 8006380:	40023800 	.word	0x40023800
 8006384:	080109d8 	.word	0x080109d8
 8006388:	20000000 	.word	0x20000000
 800638c:	20000004 	.word	0x20000004

08006390 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006390:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006394:	b094      	sub	sp, #80	@ 0x50
 8006396:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006398:	2300      	movs	r3, #0
 800639a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800639c:	2300      	movs	r3, #0
 800639e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80063a0:	2300      	movs	r3, #0
 80063a2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80063a4:	2300      	movs	r3, #0
 80063a6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80063a8:	4b79      	ldr	r3, [pc, #484]	@ (8006590 <HAL_RCC_GetSysClockFreq+0x200>)
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	f003 030c 	and.w	r3, r3, #12
 80063b0:	2b08      	cmp	r3, #8
 80063b2:	d00d      	beq.n	80063d0 <HAL_RCC_GetSysClockFreq+0x40>
 80063b4:	2b08      	cmp	r3, #8
 80063b6:	f200 80e1 	bhi.w	800657c <HAL_RCC_GetSysClockFreq+0x1ec>
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d002      	beq.n	80063c4 <HAL_RCC_GetSysClockFreq+0x34>
 80063be:	2b04      	cmp	r3, #4
 80063c0:	d003      	beq.n	80063ca <HAL_RCC_GetSysClockFreq+0x3a>
 80063c2:	e0db      	b.n	800657c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80063c4:	4b73      	ldr	r3, [pc, #460]	@ (8006594 <HAL_RCC_GetSysClockFreq+0x204>)
 80063c6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80063c8:	e0db      	b.n	8006582 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80063ca:	4b73      	ldr	r3, [pc, #460]	@ (8006598 <HAL_RCC_GetSysClockFreq+0x208>)
 80063cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80063ce:	e0d8      	b.n	8006582 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80063d0:	4b6f      	ldr	r3, [pc, #444]	@ (8006590 <HAL_RCC_GetSysClockFreq+0x200>)
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80063d8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80063da:	4b6d      	ldr	r3, [pc, #436]	@ (8006590 <HAL_RCC_GetSysClockFreq+0x200>)
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d063      	beq.n	80064ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063e6:	4b6a      	ldr	r3, [pc, #424]	@ (8006590 <HAL_RCC_GetSysClockFreq+0x200>)
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	099b      	lsrs	r3, r3, #6
 80063ec:	2200      	movs	r2, #0
 80063ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80063f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80063f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80063fa:	2300      	movs	r3, #0
 80063fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80063fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006402:	4622      	mov	r2, r4
 8006404:	462b      	mov	r3, r5
 8006406:	f04f 0000 	mov.w	r0, #0
 800640a:	f04f 0100 	mov.w	r1, #0
 800640e:	0159      	lsls	r1, r3, #5
 8006410:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006414:	0150      	lsls	r0, r2, #5
 8006416:	4602      	mov	r2, r0
 8006418:	460b      	mov	r3, r1
 800641a:	4621      	mov	r1, r4
 800641c:	1a51      	subs	r1, r2, r1
 800641e:	6139      	str	r1, [r7, #16]
 8006420:	4629      	mov	r1, r5
 8006422:	eb63 0301 	sbc.w	r3, r3, r1
 8006426:	617b      	str	r3, [r7, #20]
 8006428:	f04f 0200 	mov.w	r2, #0
 800642c:	f04f 0300 	mov.w	r3, #0
 8006430:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006434:	4659      	mov	r1, fp
 8006436:	018b      	lsls	r3, r1, #6
 8006438:	4651      	mov	r1, sl
 800643a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800643e:	4651      	mov	r1, sl
 8006440:	018a      	lsls	r2, r1, #6
 8006442:	4651      	mov	r1, sl
 8006444:	ebb2 0801 	subs.w	r8, r2, r1
 8006448:	4659      	mov	r1, fp
 800644a:	eb63 0901 	sbc.w	r9, r3, r1
 800644e:	f04f 0200 	mov.w	r2, #0
 8006452:	f04f 0300 	mov.w	r3, #0
 8006456:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800645a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800645e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006462:	4690      	mov	r8, r2
 8006464:	4699      	mov	r9, r3
 8006466:	4623      	mov	r3, r4
 8006468:	eb18 0303 	adds.w	r3, r8, r3
 800646c:	60bb      	str	r3, [r7, #8]
 800646e:	462b      	mov	r3, r5
 8006470:	eb49 0303 	adc.w	r3, r9, r3
 8006474:	60fb      	str	r3, [r7, #12]
 8006476:	f04f 0200 	mov.w	r2, #0
 800647a:	f04f 0300 	mov.w	r3, #0
 800647e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006482:	4629      	mov	r1, r5
 8006484:	024b      	lsls	r3, r1, #9
 8006486:	4621      	mov	r1, r4
 8006488:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800648c:	4621      	mov	r1, r4
 800648e:	024a      	lsls	r2, r1, #9
 8006490:	4610      	mov	r0, r2
 8006492:	4619      	mov	r1, r3
 8006494:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006496:	2200      	movs	r2, #0
 8006498:	62bb      	str	r3, [r7, #40]	@ 0x28
 800649a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800649c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80064a0:	f7fa f9e4 	bl	800086c <__aeabi_uldivmod>
 80064a4:	4602      	mov	r2, r0
 80064a6:	460b      	mov	r3, r1
 80064a8:	4613      	mov	r3, r2
 80064aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064ac:	e058      	b.n	8006560 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064ae:	4b38      	ldr	r3, [pc, #224]	@ (8006590 <HAL_RCC_GetSysClockFreq+0x200>)
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	099b      	lsrs	r3, r3, #6
 80064b4:	2200      	movs	r2, #0
 80064b6:	4618      	mov	r0, r3
 80064b8:	4611      	mov	r1, r2
 80064ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80064be:	623b      	str	r3, [r7, #32]
 80064c0:	2300      	movs	r3, #0
 80064c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80064c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80064c8:	4642      	mov	r2, r8
 80064ca:	464b      	mov	r3, r9
 80064cc:	f04f 0000 	mov.w	r0, #0
 80064d0:	f04f 0100 	mov.w	r1, #0
 80064d4:	0159      	lsls	r1, r3, #5
 80064d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80064da:	0150      	lsls	r0, r2, #5
 80064dc:	4602      	mov	r2, r0
 80064de:	460b      	mov	r3, r1
 80064e0:	4641      	mov	r1, r8
 80064e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80064e6:	4649      	mov	r1, r9
 80064e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80064ec:	f04f 0200 	mov.w	r2, #0
 80064f0:	f04f 0300 	mov.w	r3, #0
 80064f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80064f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80064fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006500:	ebb2 040a 	subs.w	r4, r2, sl
 8006504:	eb63 050b 	sbc.w	r5, r3, fp
 8006508:	f04f 0200 	mov.w	r2, #0
 800650c:	f04f 0300 	mov.w	r3, #0
 8006510:	00eb      	lsls	r3, r5, #3
 8006512:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006516:	00e2      	lsls	r2, r4, #3
 8006518:	4614      	mov	r4, r2
 800651a:	461d      	mov	r5, r3
 800651c:	4643      	mov	r3, r8
 800651e:	18e3      	adds	r3, r4, r3
 8006520:	603b      	str	r3, [r7, #0]
 8006522:	464b      	mov	r3, r9
 8006524:	eb45 0303 	adc.w	r3, r5, r3
 8006528:	607b      	str	r3, [r7, #4]
 800652a:	f04f 0200 	mov.w	r2, #0
 800652e:	f04f 0300 	mov.w	r3, #0
 8006532:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006536:	4629      	mov	r1, r5
 8006538:	028b      	lsls	r3, r1, #10
 800653a:	4621      	mov	r1, r4
 800653c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006540:	4621      	mov	r1, r4
 8006542:	028a      	lsls	r2, r1, #10
 8006544:	4610      	mov	r0, r2
 8006546:	4619      	mov	r1, r3
 8006548:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800654a:	2200      	movs	r2, #0
 800654c:	61bb      	str	r3, [r7, #24]
 800654e:	61fa      	str	r2, [r7, #28]
 8006550:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006554:	f7fa f98a 	bl	800086c <__aeabi_uldivmod>
 8006558:	4602      	mov	r2, r0
 800655a:	460b      	mov	r3, r1
 800655c:	4613      	mov	r3, r2
 800655e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006560:	4b0b      	ldr	r3, [pc, #44]	@ (8006590 <HAL_RCC_GetSysClockFreq+0x200>)
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	0c1b      	lsrs	r3, r3, #16
 8006566:	f003 0303 	and.w	r3, r3, #3
 800656a:	3301      	adds	r3, #1
 800656c:	005b      	lsls	r3, r3, #1
 800656e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006570:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006572:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006574:	fbb2 f3f3 	udiv	r3, r2, r3
 8006578:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800657a:	e002      	b.n	8006582 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800657c:	4b05      	ldr	r3, [pc, #20]	@ (8006594 <HAL_RCC_GetSysClockFreq+0x204>)
 800657e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006580:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006582:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006584:	4618      	mov	r0, r3
 8006586:	3750      	adds	r7, #80	@ 0x50
 8006588:	46bd      	mov	sp, r7
 800658a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800658e:	bf00      	nop
 8006590:	40023800 	.word	0x40023800
 8006594:	00f42400 	.word	0x00f42400
 8006598:	007a1200 	.word	0x007a1200

0800659c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800659c:	b480      	push	{r7}
 800659e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065a0:	4b03      	ldr	r3, [pc, #12]	@ (80065b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80065a2:	681b      	ldr	r3, [r3, #0]
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop
 80065b0:	20000000 	.word	0x20000000

080065b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80065b8:	f7ff fff0 	bl	800659c <HAL_RCC_GetHCLKFreq>
 80065bc:	4602      	mov	r2, r0
 80065be:	4b05      	ldr	r3, [pc, #20]	@ (80065d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	0a9b      	lsrs	r3, r3, #10
 80065c4:	f003 0307 	and.w	r3, r3, #7
 80065c8:	4903      	ldr	r1, [pc, #12]	@ (80065d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80065ca:	5ccb      	ldrb	r3, [r1, r3]
 80065cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	40023800 	.word	0x40023800
 80065d8:	080109e8 	.word	0x080109e8

080065dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80065e0:	f7ff ffdc 	bl	800659c <HAL_RCC_GetHCLKFreq>
 80065e4:	4602      	mov	r2, r0
 80065e6:	4b05      	ldr	r3, [pc, #20]	@ (80065fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	0b5b      	lsrs	r3, r3, #13
 80065ec:	f003 0307 	and.w	r3, r3, #7
 80065f0:	4903      	ldr	r1, [pc, #12]	@ (8006600 <HAL_RCC_GetPCLK2Freq+0x24>)
 80065f2:	5ccb      	ldrb	r3, [r1, r3]
 80065f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	40023800 	.word	0x40023800
 8006600:	080109e8 	.word	0x080109e8

08006604 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	220f      	movs	r2, #15
 8006612:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006614:	4b12      	ldr	r3, [pc, #72]	@ (8006660 <HAL_RCC_GetClockConfig+0x5c>)
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	f003 0203 	and.w	r2, r3, #3
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006620:	4b0f      	ldr	r3, [pc, #60]	@ (8006660 <HAL_RCC_GetClockConfig+0x5c>)
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800662c:	4b0c      	ldr	r3, [pc, #48]	@ (8006660 <HAL_RCC_GetClockConfig+0x5c>)
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006638:	4b09      	ldr	r3, [pc, #36]	@ (8006660 <HAL_RCC_GetClockConfig+0x5c>)
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	08db      	lsrs	r3, r3, #3
 800663e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006646:	4b07      	ldr	r3, [pc, #28]	@ (8006664 <HAL_RCC_GetClockConfig+0x60>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 020f 	and.w	r2, r3, #15
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	601a      	str	r2, [r3, #0]
}
 8006652:	bf00      	nop
 8006654:	370c      	adds	r7, #12
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr
 800665e:	bf00      	nop
 8006660:	40023800 	.word	0x40023800
 8006664:	40023c00 	.word	0x40023c00

08006668 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b088      	sub	sp, #32
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006670:	2300      	movs	r3, #0
 8006672:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 8006674:	2300      	movs	r3, #0
 8006676:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 8006678:	2300      	movs	r3, #0
 800667a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800667c:	2300      	movs	r3, #0
 800667e:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 8006680:	2300      	movs	r3, #0
 8006682:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800668c:	2b00      	cmp	r3, #0
 800668e:	d00a      	beq.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006690:	4b66      	ldr	r3, [pc, #408]	@ (800682c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006692:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006696:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800669e:	4963      	ldr	r1, [pc, #396]	@ (800682c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80066a0:	4313      	orrs	r3, r2
 80066a2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d00a      	beq.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80066b2:	4b5e      	ldr	r3, [pc, #376]	@ (800682c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80066b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80066b8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066c0:	495a      	ldr	r1, [pc, #360]	@ (800682c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80066c2:	4313      	orrs	r3, r2
 80066c4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0301 	and.w	r3, r3, #1
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d10b      	bne.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x84>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d105      	bne.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x84>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d075      	beq.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80066ec:	4b50      	ldr	r3, [pc, #320]	@ (8006830 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80066ee:	2200      	movs	r2, #0
 80066f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80066f2:	f7fc fba7 	bl	8002e44 <HAL_GetTick>
 80066f6:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80066f8:	e008      	b.n	800670c <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80066fa:	f7fc fba3 	bl	8002e44 <HAL_GetTick>
 80066fe:	4602      	mov	r2, r0
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	2b02      	cmp	r3, #2
 8006706:	d901      	bls.n	800670c <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006708:	2303      	movs	r3, #3
 800670a:	e1dc      	b.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800670c:	4b47      	ldr	r3, [pc, #284]	@ (800682c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006714:	2b00      	cmp	r3, #0
 8006716:	d1f0      	bne.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f003 0301 	and.w	r3, r3, #1
 8006720:	2b00      	cmp	r3, #0
 8006722:	d009      	beq.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	019a      	lsls	r2, r3, #6
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	071b      	lsls	r3, r3, #28
 8006730:	493e      	ldr	r1, [pc, #248]	@ (800682c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006732:	4313      	orrs	r3, r2
 8006734:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 0302 	and.w	r3, r3, #2
 8006740:	2b00      	cmp	r3, #0
 8006742:	d01f      	beq.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006744:	4b39      	ldr	r3, [pc, #228]	@ (800682c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006746:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800674a:	0f1b      	lsrs	r3, r3, #28
 800674c:	f003 0307 	and.w	r3, r3, #7
 8006750:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	019a      	lsls	r2, r3, #6
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	061b      	lsls	r3, r3, #24
 800675e:	431a      	orrs	r2, r3
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	071b      	lsls	r3, r3, #28
 8006764:	4931      	ldr	r1, [pc, #196]	@ (800682c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006766:	4313      	orrs	r3, r2
 8006768:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800676c:	4b2f      	ldr	r3, [pc, #188]	@ (800682c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800676e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006772:	f023 021f 	bic.w	r2, r3, #31
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a1b      	ldr	r3, [r3, #32]
 800677a:	3b01      	subs	r3, #1
 800677c:	492b      	ldr	r1, [pc, #172]	@ (800682c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800677e:	4313      	orrs	r3, r2
 8006780:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800678c:	2b00      	cmp	r3, #0
 800678e:	d00d      	beq.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	019a      	lsls	r2, r3, #6
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	68db      	ldr	r3, [r3, #12]
 800679a:	061b      	lsls	r3, r3, #24
 800679c:	431a      	orrs	r2, r3
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	071b      	lsls	r3, r3, #28
 80067a4:	4921      	ldr	r1, [pc, #132]	@ (800682c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80067a6:	4313      	orrs	r3, r2
 80067a8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80067ac:	4b20      	ldr	r3, [pc, #128]	@ (8006830 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80067ae:	2201      	movs	r2, #1
 80067b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80067b2:	f7fc fb47 	bl	8002e44 <HAL_GetTick>
 80067b6:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80067b8:	e008      	b.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80067ba:	f7fc fb43 	bl	8002e44 <HAL_GetTick>
 80067be:	4602      	mov	r2, r0
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	1ad3      	subs	r3, r2, r3
 80067c4:	2b02      	cmp	r3, #2
 80067c6:	d901      	bls.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80067c8:	2303      	movs	r3, #3
 80067ca:	e17c      	b.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80067cc:	4b17      	ldr	r3, [pc, #92]	@ (800682c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d0f0      	beq.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f003 0304 	and.w	r3, r3, #4
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d112      	bne.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d10c      	bne.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	f000 80ce 	beq.w	800699a <HAL_RCCEx_PeriphCLKConfig+0x332>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8006802:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006806:	f040 80c8 	bne.w	800699a <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800680a:	4b0a      	ldr	r3, [pc, #40]	@ (8006834 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800680c:	2200      	movs	r2, #0
 800680e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006810:	f7fc fb18 	bl	8002e44 <HAL_GetTick>
 8006814:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006816:	e00f      	b.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006818:	f7fc fb14 	bl	8002e44 <HAL_GetTick>
 800681c:	4602      	mov	r2, r0
 800681e:	69fb      	ldr	r3, [r7, #28]
 8006820:	1ad3      	subs	r3, r2, r3
 8006822:	2b02      	cmp	r3, #2
 8006824:	d908      	bls.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006826:	2303      	movs	r3, #3
 8006828:	e14d      	b.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800682a:	bf00      	nop
 800682c:	40023800 	.word	0x40023800
 8006830:	42470068 	.word	0x42470068
 8006834:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006838:	4ba5      	ldr	r3, [pc, #660]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006840:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006844:	d0e8      	beq.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f003 0304 	and.w	r3, r3, #4
 800684e:	2b00      	cmp	r3, #0
 8006850:	d02e      	beq.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8006852:	4b9f      	ldr	r3, [pc, #636]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006854:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006858:	0c1b      	lsrs	r3, r3, #16
 800685a:	f003 0303 	and.w	r3, r3, #3
 800685e:	3301      	adds	r3, #1
 8006860:	005b      	lsls	r3, r3, #1
 8006862:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006864:	4b9a      	ldr	r3, [pc, #616]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006866:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800686a:	0f1b      	lsrs	r3, r3, #28
 800686c:	f003 0307 	and.w	r3, r3, #7
 8006870:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	019a      	lsls	r2, r3, #6
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	085b      	lsrs	r3, r3, #1
 800687c:	3b01      	subs	r3, #1
 800687e:	041b      	lsls	r3, r3, #16
 8006880:	431a      	orrs	r2, r3
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	699b      	ldr	r3, [r3, #24]
 8006886:	061b      	lsls	r3, r3, #24
 8006888:	431a      	orrs	r2, r3
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	071b      	lsls	r3, r3, #28
 800688e:	4990      	ldr	r1, [pc, #576]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006890:	4313      	orrs	r3, r2
 8006892:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006896:	4b8e      	ldr	r3, [pc, #568]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006898:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800689c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068a4:	3b01      	subs	r3, #1
 80068a6:	021b      	lsls	r3, r3, #8
 80068a8:	4989      	ldr	r1, [pc, #548]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80068aa:	4313      	orrs	r3, r2
 80068ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 0308 	and.w	r3, r3, #8
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d02c      	beq.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80068bc:	4b84      	ldr	r3, [pc, #528]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80068be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068c2:	0c1b      	lsrs	r3, r3, #16
 80068c4:	f003 0303 	and.w	r3, r3, #3
 80068c8:	3301      	adds	r3, #1
 80068ca:	005b      	lsls	r3, r3, #1
 80068cc:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80068ce:	4b80      	ldr	r3, [pc, #512]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80068d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068d4:	0e1b      	lsrs	r3, r3, #24
 80068d6:	f003 030f 	and.w	r3, r3, #15
 80068da:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	691b      	ldr	r3, [r3, #16]
 80068e0:	019a      	lsls	r2, r3, #6
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	085b      	lsrs	r3, r3, #1
 80068e6:	3b01      	subs	r3, #1
 80068e8:	041b      	lsls	r3, r3, #16
 80068ea:	431a      	orrs	r2, r3
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	061b      	lsls	r3, r3, #24
 80068f0:	431a      	orrs	r2, r3
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	69db      	ldr	r3, [r3, #28]
 80068f6:	071b      	lsls	r3, r3, #28
 80068f8:	4975      	ldr	r1, [pc, #468]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80068fa:	4313      	orrs	r3, r2
 80068fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006900:	4b73      	ldr	r3, [pc, #460]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006902:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006906:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800690e:	4970      	ldr	r1, [pc, #448]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006910:	4313      	orrs	r3, r2
 8006912:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800691e:	2b00      	cmp	r3, #0
 8006920:	d024      	beq.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x304>
        (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8006926:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800692a:	d11f      	bne.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800692c:	4b68      	ldr	r3, [pc, #416]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800692e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006932:	0e1b      	lsrs	r3, r3, #24
 8006934:	f003 030f 	and.w	r3, r3, #15
 8006938:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800693a:	4b65      	ldr	r3, [pc, #404]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800693c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006940:	0f1b      	lsrs	r3, r3, #28
 8006942:	f003 0307 	and.w	r3, r3, #7
 8006946:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	691b      	ldr	r3, [r3, #16]
 800694c:	019a      	lsls	r2, r3, #6
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	695b      	ldr	r3, [r3, #20]
 8006952:	085b      	lsrs	r3, r3, #1
 8006954:	3b01      	subs	r3, #1
 8006956:	041b      	lsls	r3, r3, #16
 8006958:	431a      	orrs	r2, r3
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	061b      	lsls	r3, r3, #24
 800695e:	431a      	orrs	r2, r3
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	071b      	lsls	r3, r3, #28
 8006964:	495a      	ldr	r1, [pc, #360]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006966:	4313      	orrs	r3, r2
 8006968:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800696c:	4b59      	ldr	r3, [pc, #356]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800696e:	2201      	movs	r2, #1
 8006970:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006972:	f7fc fa67 	bl	8002e44 <HAL_GetTick>
 8006976:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006978:	e008      	b.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800697a:	f7fc fa63 	bl	8002e44 <HAL_GetTick>
 800697e:	4602      	mov	r2, r0
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	1ad3      	subs	r3, r2, r3
 8006984:	2b02      	cmp	r3, #2
 8006986:	d901      	bls.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006988:	2303      	movs	r3, #3
 800698a:	e09c      	b.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800698c:	4b50      	ldr	r3, [pc, #320]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006994:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006998:	d1ef      	bne.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 0320 	and.w	r3, r3, #32
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	f000 8083 	beq.w	8006aae <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80069a8:	2300      	movs	r3, #0
 80069aa:	60bb      	str	r3, [r7, #8]
 80069ac:	4b48      	ldr	r3, [pc, #288]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80069ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069b0:	4a47      	ldr	r2, [pc, #284]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80069b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80069b8:	4b45      	ldr	r3, [pc, #276]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80069ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069c0:	60bb      	str	r3, [r7, #8]
 80069c2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80069c4:	4b44      	ldr	r3, [pc, #272]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a43      	ldr	r2, [pc, #268]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80069ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069ce:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80069d0:	f7fc fa38 	bl	8002e44 <HAL_GetTick>
 80069d4:	61f8      	str	r0, [r7, #28]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80069d6:	e008      	b.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069d8:	f7fc fa34 	bl	8002e44 <HAL_GetTick>
 80069dc:	4602      	mov	r2, r0
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	1ad3      	subs	r3, r2, r3
 80069e2:	2b02      	cmp	r3, #2
 80069e4:	d901      	bls.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 80069e6:	2303      	movs	r3, #3
 80069e8:	e06d      	b.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80069ea:	4b3b      	ldr	r3, [pc, #236]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d0f0      	beq.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80069f6:	4b36      	ldr	r3, [pc, #216]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80069f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069fe:	61bb      	str	r3, [r7, #24]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006a00:	69bb      	ldr	r3, [r7, #24]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d02f      	beq.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a0e:	69ba      	ldr	r2, [r7, #24]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d028      	beq.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a14:	4b2e      	ldr	r3, [pc, #184]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006a16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a1c:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006a1e:	4b2f      	ldr	r3, [pc, #188]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006a20:	2201      	movs	r2, #1
 8006a22:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006a24:	4b2d      	ldr	r3, [pc, #180]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006a26:	2200      	movs	r2, #0
 8006a28:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006a2a:	4a29      	ldr	r2, [pc, #164]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006a2c:	69bb      	ldr	r3, [r7, #24]
 8006a2e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006a30:	4b27      	ldr	r3, [pc, #156]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006a32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a34:	f003 0301 	and.w	r3, r3, #1
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d114      	bne.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006a3c:	f7fc fa02 	bl	8002e44 <HAL_GetTick>
 8006a40:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a42:	e00a      	b.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a44:	f7fc f9fe 	bl	8002e44 <HAL_GetTick>
 8006a48:	4602      	mov	r2, r0
 8006a4a:	69fb      	ldr	r3, [r7, #28]
 8006a4c:	1ad3      	subs	r3, r2, r3
 8006a4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d901      	bls.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 8006a56:	2303      	movs	r3, #3
 8006a58:	e035      	b.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a5a:	4b1d      	ldr	r3, [pc, #116]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006a5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a5e:	f003 0302 	and.w	r3, r3, #2
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d0ee      	beq.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a72:	d10d      	bne.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8006a74:	4b16      	ldr	r3, [pc, #88]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a80:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006a84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a88:	4911      	ldr	r1, [pc, #68]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	608b      	str	r3, [r1, #8]
 8006a8e:	e005      	b.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x434>
 8006a90:	4b0f      	ldr	r3, [pc, #60]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	4a0e      	ldr	r2, [pc, #56]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006a96:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006a9a:	6093      	str	r3, [r2, #8]
 8006a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006a9e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006aa8:	4909      	ldr	r1, [pc, #36]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 0310 	and.w	r3, r3, #16
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d004      	beq.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8006ac0:	4b07      	ldr	r3, [pc, #28]	@ (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 8006ac2:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3720      	adds	r7, #32
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	bf00      	nop
 8006ad0:	40023800 	.word	0x40023800
 8006ad4:	42470070 	.word	0x42470070
 8006ad8:	40007000 	.word	0x40007000
 8006adc:	42470e40 	.word	0x42470e40
 8006ae0:	424711e0 	.word	0x424711e0

08006ae4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b086      	sub	sp, #24
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d101      	bne.n	8006af6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e273      	b.n	8006fde <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f003 0301 	and.w	r3, r3, #1
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d075      	beq.n	8006bee <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006b02:	4b88      	ldr	r3, [pc, #544]	@ (8006d24 <HAL_RCC_OscConfig+0x240>)
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	f003 030c 	and.w	r3, r3, #12
 8006b0a:	2b04      	cmp	r3, #4
 8006b0c:	d00c      	beq.n	8006b28 <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b0e:	4b85      	ldr	r3, [pc, #532]	@ (8006d24 <HAL_RCC_OscConfig+0x240>)
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	f003 030c 	and.w	r3, r3, #12
        || \
 8006b16:	2b08      	cmp	r3, #8
 8006b18:	d112      	bne.n	8006b40 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b1a:	4b82      	ldr	r3, [pc, #520]	@ (8006d24 <HAL_RCC_OscConfig+0x240>)
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b26:	d10b      	bne.n	8006b40 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b28:	4b7e      	ldr	r3, [pc, #504]	@ (8006d24 <HAL_RCC_OscConfig+0x240>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d05b      	beq.n	8006bec <HAL_RCC_OscConfig+0x108>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d157      	bne.n	8006bec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e24e      	b.n	8006fde <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b48:	d106      	bne.n	8006b58 <HAL_RCC_OscConfig+0x74>
 8006b4a:	4b76      	ldr	r3, [pc, #472]	@ (8006d24 <HAL_RCC_OscConfig+0x240>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a75      	ldr	r2, [pc, #468]	@ (8006d24 <HAL_RCC_OscConfig+0x240>)
 8006b50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b54:	6013      	str	r3, [r2, #0]
 8006b56:	e01d      	b.n	8006b94 <HAL_RCC_OscConfig+0xb0>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006b60:	d10c      	bne.n	8006b7c <HAL_RCC_OscConfig+0x98>
 8006b62:	4b70      	ldr	r3, [pc, #448]	@ (8006d24 <HAL_RCC_OscConfig+0x240>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a6f      	ldr	r2, [pc, #444]	@ (8006d24 <HAL_RCC_OscConfig+0x240>)
 8006b68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006b6c:	6013      	str	r3, [r2, #0]
 8006b6e:	4b6d      	ldr	r3, [pc, #436]	@ (8006d24 <HAL_RCC_OscConfig+0x240>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a6c      	ldr	r2, [pc, #432]	@ (8006d24 <HAL_RCC_OscConfig+0x240>)
 8006b74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b78:	6013      	str	r3, [r2, #0]
 8006b7a:	e00b      	b.n	8006b94 <HAL_RCC_OscConfig+0xb0>
 8006b7c:	4b69      	ldr	r3, [pc, #420]	@ (8006d24 <HAL_RCC_OscConfig+0x240>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a68      	ldr	r2, [pc, #416]	@ (8006d24 <HAL_RCC_OscConfig+0x240>)
 8006b82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b86:	6013      	str	r3, [r2, #0]
 8006b88:	4b66      	ldr	r3, [pc, #408]	@ (8006d24 <HAL_RCC_OscConfig+0x240>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a65      	ldr	r2, [pc, #404]	@ (8006d24 <HAL_RCC_OscConfig+0x240>)
 8006b8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006b92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d013      	beq.n	8006bc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b9c:	f7fc f952 	bl	8002e44 <HAL_GetTick>
 8006ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ba2:	e008      	b.n	8006bb6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ba4:	f7fc f94e 	bl	8002e44 <HAL_GetTick>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	1ad3      	subs	r3, r2, r3
 8006bae:	2b64      	cmp	r3, #100	@ 0x64
 8006bb0:	d901      	bls.n	8006bb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006bb2:	2303      	movs	r3, #3
 8006bb4:	e213      	b.n	8006fde <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bb6:	4b5b      	ldr	r3, [pc, #364]	@ (8006d24 <HAL_RCC_OscConfig+0x240>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d0f0      	beq.n	8006ba4 <HAL_RCC_OscConfig+0xc0>
 8006bc2:	e014      	b.n	8006bee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bc4:	f7fc f93e 	bl	8002e44 <HAL_GetTick>
 8006bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bca:	e008      	b.n	8006bde <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006bcc:	f7fc f93a 	bl	8002e44 <HAL_GetTick>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	1ad3      	subs	r3, r2, r3
 8006bd6:	2b64      	cmp	r3, #100	@ 0x64
 8006bd8:	d901      	bls.n	8006bde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006bda:	2303      	movs	r3, #3
 8006bdc:	e1ff      	b.n	8006fde <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bde:	4b51      	ldr	r3, [pc, #324]	@ (8006d24 <HAL_RCC_OscConfig+0x240>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d1f0      	bne.n	8006bcc <HAL_RCC_OscConfig+0xe8>
 8006bea:	e000      	b.n	8006bee <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f003 0302 	and.w	r3, r3, #2
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d063      	beq.n	8006cc2 <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006bfa:	4b4a      	ldr	r3, [pc, #296]	@ (8006d24 <HAL_RCC_OscConfig+0x240>)
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	f003 030c 	and.w	r3, r3, #12
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d00b      	beq.n	8006c1e <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c06:	4b47      	ldr	r3, [pc, #284]	@ (8006d24 <HAL_RCC_OscConfig+0x240>)
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	f003 030c 	and.w	r3, r3, #12
        || \
 8006c0e:	2b08      	cmp	r3, #8
 8006c10:	d11c      	bne.n	8006c4c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c12:	4b44      	ldr	r3, [pc, #272]	@ (8006d24 <HAL_RCC_OscConfig+0x240>)
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d116      	bne.n	8006c4c <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c1e:	4b41      	ldr	r3, [pc, #260]	@ (8006d24 <HAL_RCC_OscConfig+0x240>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f003 0302 	and.w	r3, r3, #2
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d005      	beq.n	8006c36 <HAL_RCC_OscConfig+0x152>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d001      	beq.n	8006c36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e1d3      	b.n	8006fde <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c36:	4b3b      	ldr	r3, [pc, #236]	@ (8006d24 <HAL_RCC_OscConfig+0x240>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	00db      	lsls	r3, r3, #3
 8006c44:	4937      	ldr	r1, [pc, #220]	@ (8006d24 <HAL_RCC_OscConfig+0x240>)
 8006c46:	4313      	orrs	r3, r2
 8006c48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c4a:	e03a      	b.n	8006cc2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d020      	beq.n	8006c96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c54:	4b34      	ldr	r3, [pc, #208]	@ (8006d28 <HAL_RCC_OscConfig+0x244>)
 8006c56:	2201      	movs	r2, #1
 8006c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c5a:	f7fc f8f3 	bl	8002e44 <HAL_GetTick>
 8006c5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c60:	e008      	b.n	8006c74 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c62:	f7fc f8ef 	bl	8002e44 <HAL_GetTick>
 8006c66:	4602      	mov	r2, r0
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	1ad3      	subs	r3, r2, r3
 8006c6c:	2b02      	cmp	r3, #2
 8006c6e:	d901      	bls.n	8006c74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006c70:	2303      	movs	r3, #3
 8006c72:	e1b4      	b.n	8006fde <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c74:	4b2b      	ldr	r3, [pc, #172]	@ (8006d24 <HAL_RCC_OscConfig+0x240>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f003 0302 	and.w	r3, r3, #2
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d0f0      	beq.n	8006c62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c80:	4b28      	ldr	r3, [pc, #160]	@ (8006d24 <HAL_RCC_OscConfig+0x240>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	691b      	ldr	r3, [r3, #16]
 8006c8c:	00db      	lsls	r3, r3, #3
 8006c8e:	4925      	ldr	r1, [pc, #148]	@ (8006d24 <HAL_RCC_OscConfig+0x240>)
 8006c90:	4313      	orrs	r3, r2
 8006c92:	600b      	str	r3, [r1, #0]
 8006c94:	e015      	b.n	8006cc2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c96:	4b24      	ldr	r3, [pc, #144]	@ (8006d28 <HAL_RCC_OscConfig+0x244>)
 8006c98:	2200      	movs	r2, #0
 8006c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c9c:	f7fc f8d2 	bl	8002e44 <HAL_GetTick>
 8006ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ca2:	e008      	b.n	8006cb6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ca4:	f7fc f8ce 	bl	8002e44 <HAL_GetTick>
 8006ca8:	4602      	mov	r2, r0
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	1ad3      	subs	r3, r2, r3
 8006cae:	2b02      	cmp	r3, #2
 8006cb0:	d901      	bls.n	8006cb6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006cb2:	2303      	movs	r3, #3
 8006cb4:	e193      	b.n	8006fde <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cb6:	4b1b      	ldr	r3, [pc, #108]	@ (8006d24 <HAL_RCC_OscConfig+0x240>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f003 0302 	and.w	r3, r3, #2
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d1f0      	bne.n	8006ca4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f003 0308 	and.w	r3, r3, #8
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d036      	beq.n	8006d3c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	695b      	ldr	r3, [r3, #20]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d016      	beq.n	8006d04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006cd6:	4b15      	ldr	r3, [pc, #84]	@ (8006d2c <HAL_RCC_OscConfig+0x248>)
 8006cd8:	2201      	movs	r2, #1
 8006cda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cdc:	f7fc f8b2 	bl	8002e44 <HAL_GetTick>
 8006ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ce2:	e008      	b.n	8006cf6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ce4:	f7fc f8ae 	bl	8002e44 <HAL_GetTick>
 8006ce8:	4602      	mov	r2, r0
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	1ad3      	subs	r3, r2, r3
 8006cee:	2b02      	cmp	r3, #2
 8006cf0:	d901      	bls.n	8006cf6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006cf2:	2303      	movs	r3, #3
 8006cf4:	e173      	b.n	8006fde <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8006d24 <HAL_RCC_OscConfig+0x240>)
 8006cf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cfa:	f003 0302 	and.w	r3, r3, #2
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d0f0      	beq.n	8006ce4 <HAL_RCC_OscConfig+0x200>
 8006d02:	e01b      	b.n	8006d3c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d04:	4b09      	ldr	r3, [pc, #36]	@ (8006d2c <HAL_RCC_OscConfig+0x248>)
 8006d06:	2200      	movs	r2, #0
 8006d08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d0a:	f7fc f89b 	bl	8002e44 <HAL_GetTick>
 8006d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d10:	e00e      	b.n	8006d30 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d12:	f7fc f897 	bl	8002e44 <HAL_GetTick>
 8006d16:	4602      	mov	r2, r0
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	1ad3      	subs	r3, r2, r3
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	d907      	bls.n	8006d30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006d20:	2303      	movs	r3, #3
 8006d22:	e15c      	b.n	8006fde <HAL_RCC_OscConfig+0x4fa>
 8006d24:	40023800 	.word	0x40023800
 8006d28:	42470000 	.word	0x42470000
 8006d2c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d30:	4b8a      	ldr	r3, [pc, #552]	@ (8006f5c <HAL_RCC_OscConfig+0x478>)
 8006d32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d34:	f003 0302 	and.w	r3, r3, #2
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d1ea      	bne.n	8006d12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f003 0304 	and.w	r3, r3, #4
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	f000 8097 	beq.w	8006e78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d4e:	4b83      	ldr	r3, [pc, #524]	@ (8006f5c <HAL_RCC_OscConfig+0x478>)
 8006d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d10f      	bne.n	8006d7a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	60bb      	str	r3, [r7, #8]
 8006d5e:	4b7f      	ldr	r3, [pc, #508]	@ (8006f5c <HAL_RCC_OscConfig+0x478>)
 8006d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d62:	4a7e      	ldr	r2, [pc, #504]	@ (8006f5c <HAL_RCC_OscConfig+0x478>)
 8006d64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d68:	6413      	str	r3, [r2, #64]	@ 0x40
 8006d6a:	4b7c      	ldr	r3, [pc, #496]	@ (8006f5c <HAL_RCC_OscConfig+0x478>)
 8006d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d72:	60bb      	str	r3, [r7, #8]
 8006d74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d76:	2301      	movs	r3, #1
 8006d78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d7a:	4b79      	ldr	r3, [pc, #484]	@ (8006f60 <HAL_RCC_OscConfig+0x47c>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d118      	bne.n	8006db8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d86:	4b76      	ldr	r3, [pc, #472]	@ (8006f60 <HAL_RCC_OscConfig+0x47c>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a75      	ldr	r2, [pc, #468]	@ (8006f60 <HAL_RCC_OscConfig+0x47c>)
 8006d8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d92:	f7fc f857 	bl	8002e44 <HAL_GetTick>
 8006d96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d98:	e008      	b.n	8006dac <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d9a:	f7fc f853 	bl	8002e44 <HAL_GetTick>
 8006d9e:	4602      	mov	r2, r0
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	1ad3      	subs	r3, r2, r3
 8006da4:	2b02      	cmp	r3, #2
 8006da6:	d901      	bls.n	8006dac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006da8:	2303      	movs	r3, #3
 8006daa:	e118      	b.n	8006fde <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dac:	4b6c      	ldr	r3, [pc, #432]	@ (8006f60 <HAL_RCC_OscConfig+0x47c>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d0f0      	beq.n	8006d9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d106      	bne.n	8006dce <HAL_RCC_OscConfig+0x2ea>
 8006dc0:	4b66      	ldr	r3, [pc, #408]	@ (8006f5c <HAL_RCC_OscConfig+0x478>)
 8006dc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dc4:	4a65      	ldr	r2, [pc, #404]	@ (8006f5c <HAL_RCC_OscConfig+0x478>)
 8006dc6:	f043 0301 	orr.w	r3, r3, #1
 8006dca:	6713      	str	r3, [r2, #112]	@ 0x70
 8006dcc:	e01c      	b.n	8006e08 <HAL_RCC_OscConfig+0x324>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	2b05      	cmp	r3, #5
 8006dd4:	d10c      	bne.n	8006df0 <HAL_RCC_OscConfig+0x30c>
 8006dd6:	4b61      	ldr	r3, [pc, #388]	@ (8006f5c <HAL_RCC_OscConfig+0x478>)
 8006dd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dda:	4a60      	ldr	r2, [pc, #384]	@ (8006f5c <HAL_RCC_OscConfig+0x478>)
 8006ddc:	f043 0304 	orr.w	r3, r3, #4
 8006de0:	6713      	str	r3, [r2, #112]	@ 0x70
 8006de2:	4b5e      	ldr	r3, [pc, #376]	@ (8006f5c <HAL_RCC_OscConfig+0x478>)
 8006de4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006de6:	4a5d      	ldr	r2, [pc, #372]	@ (8006f5c <HAL_RCC_OscConfig+0x478>)
 8006de8:	f043 0301 	orr.w	r3, r3, #1
 8006dec:	6713      	str	r3, [r2, #112]	@ 0x70
 8006dee:	e00b      	b.n	8006e08 <HAL_RCC_OscConfig+0x324>
 8006df0:	4b5a      	ldr	r3, [pc, #360]	@ (8006f5c <HAL_RCC_OscConfig+0x478>)
 8006df2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006df4:	4a59      	ldr	r2, [pc, #356]	@ (8006f5c <HAL_RCC_OscConfig+0x478>)
 8006df6:	f023 0301 	bic.w	r3, r3, #1
 8006dfa:	6713      	str	r3, [r2, #112]	@ 0x70
 8006dfc:	4b57      	ldr	r3, [pc, #348]	@ (8006f5c <HAL_RCC_OscConfig+0x478>)
 8006dfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e00:	4a56      	ldr	r2, [pc, #344]	@ (8006f5c <HAL_RCC_OscConfig+0x478>)
 8006e02:	f023 0304 	bic.w	r3, r3, #4
 8006e06:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d015      	beq.n	8006e3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e10:	f7fc f818 	bl	8002e44 <HAL_GetTick>
 8006e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e16:	e00a      	b.n	8006e2e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e18:	f7fc f814 	bl	8002e44 <HAL_GetTick>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	1ad3      	subs	r3, r2, r3
 8006e22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d901      	bls.n	8006e2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	e0d7      	b.n	8006fde <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e2e:	4b4b      	ldr	r3, [pc, #300]	@ (8006f5c <HAL_RCC_OscConfig+0x478>)
 8006e30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e32:	f003 0302 	and.w	r3, r3, #2
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d0ee      	beq.n	8006e18 <HAL_RCC_OscConfig+0x334>
 8006e3a:	e014      	b.n	8006e66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e3c:	f7fc f802 	bl	8002e44 <HAL_GetTick>
 8006e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e42:	e00a      	b.n	8006e5a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e44:	f7fb fffe 	bl	8002e44 <HAL_GetTick>
 8006e48:	4602      	mov	r2, r0
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	1ad3      	subs	r3, r2, r3
 8006e4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d901      	bls.n	8006e5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006e56:	2303      	movs	r3, #3
 8006e58:	e0c1      	b.n	8006fde <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e5a:	4b40      	ldr	r3, [pc, #256]	@ (8006f5c <HAL_RCC_OscConfig+0x478>)
 8006e5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e5e:	f003 0302 	and.w	r3, r3, #2
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d1ee      	bne.n	8006e44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006e66:	7dfb      	ldrb	r3, [r7, #23]
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d105      	bne.n	8006e78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e6c:	4b3b      	ldr	r3, [pc, #236]	@ (8006f5c <HAL_RCC_OscConfig+0x478>)
 8006e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e70:	4a3a      	ldr	r2, [pc, #232]	@ (8006f5c <HAL_RCC_OscConfig+0x478>)
 8006e72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e76:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	699b      	ldr	r3, [r3, #24]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	f000 80ad 	beq.w	8006fdc <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006e82:	4b36      	ldr	r3, [pc, #216]	@ (8006f5c <HAL_RCC_OscConfig+0x478>)
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	f003 030c 	and.w	r3, r3, #12
 8006e8a:	2b08      	cmp	r3, #8
 8006e8c:	d060      	beq.n	8006f50 <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	699b      	ldr	r3, [r3, #24]
 8006e92:	2b02      	cmp	r3, #2
 8006e94:	d145      	bne.n	8006f22 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e96:	4b33      	ldr	r3, [pc, #204]	@ (8006f64 <HAL_RCC_OscConfig+0x480>)
 8006e98:	2200      	movs	r2, #0
 8006e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e9c:	f7fb ffd2 	bl	8002e44 <HAL_GetTick>
 8006ea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ea2:	e008      	b.n	8006eb6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ea4:	f7fb ffce 	bl	8002e44 <HAL_GetTick>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	1ad3      	subs	r3, r2, r3
 8006eae:	2b02      	cmp	r3, #2
 8006eb0:	d901      	bls.n	8006eb6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	e093      	b.n	8006fde <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006eb6:	4b29      	ldr	r3, [pc, #164]	@ (8006f5c <HAL_RCC_OscConfig+0x478>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d1f0      	bne.n	8006ea4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	69da      	ldr	r2, [r3, #28]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a1b      	ldr	r3, [r3, #32]
 8006eca:	431a      	orrs	r2, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ed0:	019b      	lsls	r3, r3, #6
 8006ed2:	431a      	orrs	r2, r3
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ed8:	085b      	lsrs	r3, r3, #1
 8006eda:	3b01      	subs	r3, #1
 8006edc:	041b      	lsls	r3, r3, #16
 8006ede:	431a      	orrs	r2, r3
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ee4:	061b      	lsls	r3, r3, #24
 8006ee6:	431a      	orrs	r2, r3
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eec:	071b      	lsls	r3, r3, #28
 8006eee:	491b      	ldr	r1, [pc, #108]	@ (8006f5c <HAL_RCC_OscConfig+0x478>)
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ef4:	4b1b      	ldr	r3, [pc, #108]	@ (8006f64 <HAL_RCC_OscConfig+0x480>)
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006efa:	f7fb ffa3 	bl	8002e44 <HAL_GetTick>
 8006efe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f00:	e008      	b.n	8006f14 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f02:	f7fb ff9f 	bl	8002e44 <HAL_GetTick>
 8006f06:	4602      	mov	r2, r0
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	1ad3      	subs	r3, r2, r3
 8006f0c:	2b02      	cmp	r3, #2
 8006f0e:	d901      	bls.n	8006f14 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8006f10:	2303      	movs	r3, #3
 8006f12:	e064      	b.n	8006fde <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f14:	4b11      	ldr	r3, [pc, #68]	@ (8006f5c <HAL_RCC_OscConfig+0x478>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d0f0      	beq.n	8006f02 <HAL_RCC_OscConfig+0x41e>
 8006f20:	e05c      	b.n	8006fdc <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f22:	4b10      	ldr	r3, [pc, #64]	@ (8006f64 <HAL_RCC_OscConfig+0x480>)
 8006f24:	2200      	movs	r2, #0
 8006f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f28:	f7fb ff8c 	bl	8002e44 <HAL_GetTick>
 8006f2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f2e:	e008      	b.n	8006f42 <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f30:	f7fb ff88 	bl	8002e44 <HAL_GetTick>
 8006f34:	4602      	mov	r2, r0
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	1ad3      	subs	r3, r2, r3
 8006f3a:	2b02      	cmp	r3, #2
 8006f3c:	d901      	bls.n	8006f42 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8006f3e:	2303      	movs	r3, #3
 8006f40:	e04d      	b.n	8006fde <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f42:	4b06      	ldr	r3, [pc, #24]	@ (8006f5c <HAL_RCC_OscConfig+0x478>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d1f0      	bne.n	8006f30 <HAL_RCC_OscConfig+0x44c>
 8006f4e:	e045      	b.n	8006fdc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	699b      	ldr	r3, [r3, #24]
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d107      	bne.n	8006f68 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e040      	b.n	8006fde <HAL_RCC_OscConfig+0x4fa>
 8006f5c:	40023800 	.word	0x40023800
 8006f60:	40007000 	.word	0x40007000
 8006f64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006f68:	4b1f      	ldr	r3, [pc, #124]	@ (8006fe8 <HAL_RCC_OscConfig+0x504>)
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	699b      	ldr	r3, [r3, #24]
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d030      	beq.n	8006fd8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d129      	bne.n	8006fd8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d122      	bne.n	8006fd8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f92:	68fa      	ldr	r2, [r7, #12]
 8006f94:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006f98:	4013      	ands	r3, r2
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006f9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d119      	bne.n	8006fd8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fae:	085b      	lsrs	r3, r3, #1
 8006fb0:	3b01      	subs	r3, #1
 8006fb2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d10f      	bne.n	8006fd8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fc2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d107      	bne.n	8006fd8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fd2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d001      	beq.n	8006fdc <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	e000      	b.n	8006fde <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8006fdc:	2300      	movs	r3, #0
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3718      	adds	r7, #24
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	bf00      	nop
 8006fe8:	40023800 	.word	0x40023800

08006fec <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b086      	sub	sp, #24
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0U;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	60fb      	str	r3, [r7, #12]

  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t freq = 0U;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	60bb      	str	r3, [r7, #8]

  /* This variable is used to compute CKSTR bits of SAI CR1 according to
     ClockStrobing and AudioMode fields */
  uint32_t ckstr_bits = 0U;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	617b      	str	r3, [r7, #20]
  uint32_t syncen_bits = 0U;
 8007000:	2300      	movs	r3, #0
 8007002:	613b      	str	r3, [r7, #16]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d101      	bne.n	800700e <HAL_SAI_Init+0x22>
  {
    return HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	e10c      	b.n	8007228 <HAL_SAI_Init+0x23c>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007014:	b2db      	uxtb	r3, r3
 8007016:	2b00      	cmp	r3, #0
 8007018:	d106      	bne.n	8007028 <HAL_SAI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2200      	movs	r2, #0
 800701e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f7fb fd4a 	bl	8002abc <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2202      	movs	r2, #2
 800702c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f000 f903 	bl	800723c <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  SAI_BlockSynchroConfig(hsai);
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 f938 	bl	80072ac <SAI_BlockSynchroConfig>

  /* Configure Master Clock using the following formula :
     MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
     FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
     MCKDIV[3:0] = SAI_CK_x / FS * 512 */
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6a1b      	ldr	r3, [r3, #32]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d030      	beq.n	80070a6 <HAL_SAI_Init+0xba>
  {
    /* Get SAI clock source based on Source clock selection from RCC */
    freq = SAI_GetInputClock(hsai);
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 f957 	bl	80072f8 <SAI_GetInputClock>
 800704a:	60b8      	str	r0, [r7, #8]

    /* (saiclocksource x 10) to keep Significant digits */
    tmpregisterGCR = (((freq * 10U) / ((hsai->Init.AudioFrequency) * 512U)));
 800704c:	68ba      	ldr	r2, [r7, #8]
 800704e:	4613      	mov	r3, r2
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	4413      	add	r3, r2
 8007054:	005b      	lsls	r3, r3, #1
 8007056:	461a      	mov	r2, r3
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6a1b      	ldr	r3, [r3, #32]
 800705c:	025b      	lsls	r3, r3, #9
 800705e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007062:	60fb      	str	r3, [r7, #12]

    hsai->Init.Mckdiv = tmpregisterGCR / 10U;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	4a72      	ldr	r2, [pc, #456]	@ (8007230 <HAL_SAI_Init+0x244>)
 8007068:	fba2 2303 	umull	r2, r3, r2, r3
 800706c:	08da      	lsrs	r2, r3, #3
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpregisterGCR % 10U) > 8U)
 8007072:	68f9      	ldr	r1, [r7, #12]
 8007074:	4b6e      	ldr	r3, [pc, #440]	@ (8007230 <HAL_SAI_Init+0x244>)
 8007076:	fba3 2301 	umull	r2, r3, r3, r1
 800707a:	08da      	lsrs	r2, r3, #3
 800707c:	4613      	mov	r3, r2
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	4413      	add	r3, r2
 8007082:	005b      	lsls	r3, r3, #1
 8007084:	1aca      	subs	r2, r1, r3
 8007086:	2a08      	cmp	r2, #8
 8007088:	d904      	bls.n	8007094 <HAL_SAI_Init+0xa8>
    {
      hsai->Init.Mckdiv += 1U;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800708e:	1c5a      	adds	r2, r3, #1
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007098:	2b04      	cmp	r3, #4
 800709a:	d104      	bne.n	80070a6 <HAL_SAI_Init+0xba>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070a0:	085a      	lsrs	r2, r3, #1
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according to ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d003      	beq.n	80070b6 <HAL_SAI_Init+0xca>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	2b02      	cmp	r3, #2
 80070b4:	d109      	bne.n	80070ca <HAL_SAI_Init+0xde>
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d101      	bne.n	80070c2 <HAL_SAI_Init+0xd6>
 80070be:	2300      	movs	r3, #0
 80070c0:	e001      	b.n	80070c6 <HAL_SAI_Init+0xda>
 80070c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80070c6:	617b      	str	r3, [r7, #20]
 80070c8:	e008      	b.n	80070dc <HAL_SAI_Init+0xf0>
  }
  else
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d102      	bne.n	80070d8 <HAL_SAI_Init+0xec>
 80070d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80070d6:	e000      	b.n	80070da <HAL_SAI_Init+0xee>
 80070d8:	2300      	movs	r3, #0
 80070da:	617b      	str	r3, [r7, #20]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  switch (hsai->Init.Synchro)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	2b03      	cmp	r3, #3
 80070e2:	d811      	bhi.n	8007108 <HAL_SAI_Init+0x11c>
 80070e4:	2b02      	cmp	r3, #2
 80070e6:	d20b      	bcs.n	8007100 <HAL_SAI_Init+0x114>
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d002      	beq.n	80070f2 <HAL_SAI_Init+0x106>
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d003      	beq.n	80070f8 <HAL_SAI_Init+0x10c>
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
    }
    break;
    default:
      break;
 80070f0:	e00a      	b.n	8007108 <HAL_SAI_Init+0x11c>
      syncen_bits = 0U;
 80070f2:	2300      	movs	r3, #0
 80070f4:	613b      	str	r3, [r7, #16]
    break;
 80070f6:	e008      	b.n	800710a <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80070f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80070fc:	613b      	str	r3, [r7, #16]
    break;
 80070fe:	e004      	b.n	800710a <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007100:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007104:	613b      	str	r3, [r7, #16]
    break;
 8007106:	e000      	b.n	800710a <HAL_SAI_Init+0x11e>
      break;
 8007108:	bf00      	nop
  }

  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	6819      	ldr	r1, [r3, #0]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	4b47      	ldr	r3, [pc, #284]	@ (8007234 <HAL_SAI_Init+0x248>)
 8007116:	400b      	ands	r3, r1
 8007118:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	6819      	ldr	r1, [r3, #0]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	685a      	ldr	r2, [r3, #4]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007128:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800712e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007134:	431a      	orrs	r2, r3
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          ckstr_bits | syncen_bits |                             \
 8007142:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	691b      	ldr	r3, [r3, #16]
 8007148:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800714e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007154:	051b      	lsls	r3, r3, #20
 8007156:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	430a      	orrs	r2, r1
 800715e:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	6812      	ldr	r2, [r2, #0]
 800716a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800716e:	f023 030f 	bic.w	r3, r3, #15
 8007172:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	6859      	ldr	r1, [r3, #4]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	699a      	ldr	r2, [r3, #24]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007182:	431a      	orrs	r2, r3
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007188:	431a      	orrs	r2, r3
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	430a      	orrs	r2, r1
 8007190:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	6899      	ldr	r1, [r3, #8]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	4b26      	ldr	r3, [pc, #152]	@ (8007238 <HAL_SAI_Init+0x24c>)
 800719e:	400b      	ands	r3, r1
 80071a0:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	6899      	ldr	r1, [r3, #8]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071ac:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset     |
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80071b2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSOffset     |
 80071b8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                           hsai->FrameInit.FSDefinition |
 80071be:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8U));
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071c4:	3b01      	subs	r3, #1
 80071c6:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80071c8:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	430a      	orrs	r2, r1
 80071d0:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= ~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ | \
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	68d9      	ldr	r1, [r3, #12]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	f24f 0320 	movw	r3, #61472	@ 0xf020
 80071e0:	400b      	ands	r3, r1
 80071e2:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN);

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	68d9      	ldr	r1, [r3, #12]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071f2:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071f8:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 80071fa:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007200:	3b01      	subs	r3, #1
 8007202:	021b      	lsls	r3, r3, #8
 8007204:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	430a      	orrs	r2, r1
 800720c:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2200      	movs	r2, #0
 8007212:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2201      	movs	r2, #1
 800721a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	3718      	adds	r7, #24
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}
 8007230:	cccccccd 	.word	0xcccccccd
 8007234:	ff05c010 	.word	0xff05c010
 8007238:	fff88000 	.word	0xfff88000

0800723c <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800723c:	b480      	push	{r7}
 800723e:	b085      	sub	sp, #20
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8007244:	4b17      	ldr	r3, [pc, #92]	@ (80072a4 <SAI_Disable+0x68>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a17      	ldr	r2, [pc, #92]	@ (80072a8 <SAI_Disable+0x6c>)
 800724a:	fba2 2303 	umull	r2, r3, r2, r3
 800724e:	0b1b      	lsrs	r3, r3, #12
 8007250:	009b      	lsls	r3, r3, #2
 8007252:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007254:	2300      	movs	r3, #0
 8007256:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007266:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0U)
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	1e5a      	subs	r2, r3, #1
 800726c:	60fa      	str	r2, [r7, #12]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d10a      	bne.n	8007288 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007278:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      status = HAL_TIMEOUT;
 8007282:	2303      	movs	r3, #3
 8007284:	72fb      	strb	r3, [r7, #11]
      break;
 8007286:	e006      	b.n	8007296 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007292:	2b00      	cmp	r3, #0
 8007294:	d1e8      	bne.n	8007268 <SAI_Disable+0x2c>

  return status;
 8007296:	7afb      	ldrb	r3, [r7, #11]
}
 8007298:	4618      	mov	r0, r3
 800729a:	3714      	adds	r7, #20
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr
 80072a4:	20000000 	.word	0x20000000
 80072a8:	95cbec1b 	.word	0x95cbec1b

080072ac <SAI_BlockSynchroConfig>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval SAI Clock Input
  */
void SAI_BlockSynchroConfig(const SAI_HandleTypeDef *hsai)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b085      	sub	sp, #20
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  }
#endif /* STM32F446xx */
#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || \
    defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	2b02      	cmp	r3, #2
 80072ba:	d00c      	beq.n	80072d6 <SAI_BlockSynchroConfig+0x2a>
 80072bc:	2b02      	cmp	r3, #2
 80072be:	d80d      	bhi.n	80072dc <SAI_BlockSynchroConfig+0x30>
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d002      	beq.n	80072ca <SAI_BlockSynchroConfig+0x1e>
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d003      	beq.n	80072d0 <SAI_BlockSynchroConfig+0x24>
 80072c8:	e008      	b.n	80072dc <SAI_BlockSynchroConfig+0x30>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0U;
 80072ca:	2300      	movs	r3, #0
 80072cc:	60fb      	str	r3, [r7, #12]
      break;
 80072ce:	e008      	b.n	80072e2 <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80072d0:	2310      	movs	r3, #16
 80072d2:	60fb      	str	r3, [r7, #12]
      break;
 80072d4:	e005      	b.n	80072e2 <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80072d6:	2320      	movs	r3, #32
 80072d8:	60fb      	str	r3, [r7, #12]
      break;
 80072da:	e002      	b.n	80072e2 <SAI_BlockSynchroConfig+0x36>
    default:
      tmpregisterGCR = 0U;
 80072dc:	2300      	movs	r3, #0
 80072de:	60fb      	str	r3, [r7, #12]
      break;
 80072e0:	bf00      	nop
  }
  SAI1->GCR = tmpregisterGCR;
 80072e2:	4a04      	ldr	r2, [pc, #16]	@ (80072f4 <SAI_BlockSynchroConfig+0x48>)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6013      	str	r3, [r2, #0]
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
}
 80072e8:	bf00      	nop
 80072ea:	3714      	adds	r7, #20
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr
 80072f4:	40015800 	.word	0x40015800

080072f8 <SAI_GetInputClock>:
* @param  hsai pointer to a SAI_HandleTypeDef structure that contains
*               the configuration information for SAI module.
* @retval SAI Clock Input
*/
uint32_t SAI_GetInputClock(const SAI_HandleTypeDef *hsai)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b087      	sub	sp, #28
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t saiclocksource = 0U;
 8007300:	2300      	movs	r3, #0
 8007302:	617b      	str	r3, [r7, #20]
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
  }
#endif /* STM32F446xx */
#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || \
  defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t vcoinput = 0U, tmpreg = 0U;
 8007304:	2300      	movs	r3, #0
 8007306:	613b      	str	r3, [r7, #16]
 8007308:	2300      	movs	r3, #0
 800730a:	60fb      	str	r3, [r7, #12]

  /* Check the SAI Block parameters */
  assert_param(IS_SAI_CLK_SOURCE(hsai->Init.ClockSource));

  /* SAI Block clock source selection */
  if (hsai->Instance == SAI1_Block_A)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a46      	ldr	r2, [pc, #280]	@ (800742c <SAI_GetInputClock+0x134>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d10b      	bne.n	800732e <SAI_GetInputClock+0x36>
  {
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(hsai->Init.ClockSource);
 8007316:	4b46      	ldr	r3, [pc, #280]	@ (8007430 <SAI_GetInputClock+0x138>)
 8007318:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800731c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	69db      	ldr	r3, [r3, #28]
 8007324:	4942      	ldr	r1, [pc, #264]	@ (8007430 <SAI_GetInputClock+0x138>)
 8007326:	4313      	orrs	r3, r2
 8007328:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
 800732c:	e00b      	b.n	8007346 <SAI_GetInputClock+0x4e>
  }
  else
  {
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG((uint32_t)(hsai->Init.ClockSource << 2U));
 800732e:	4b40      	ldr	r3, [pc, #256]	@ (8007430 <SAI_GetInputClock+0x138>)
 8007330:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007334:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	69db      	ldr	r3, [r3, #28]
 800733c:	009b      	lsls	r3, r3, #2
 800733e:	493c      	ldr	r1, [pc, #240]	@ (8007430 <SAI_GetInputClock+0x138>)
 8007340:	4313      	orrs	r3, r2
 8007342:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /* VCO Input Clock value calculation */
  if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007346:	4b3a      	ldr	r3, [pc, #232]	@ (8007430 <SAI_GetInputClock+0x138>)
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800734e:	2b00      	cmp	r3, #0
 8007350:	d108      	bne.n	8007364 <SAI_GetInputClock+0x6c>
  {
    /* In Case the PLL Source is HSI (Internal Clock) */
    vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007352:	4b37      	ldr	r3, [pc, #220]	@ (8007430 <SAI_GetInputClock+0x138>)
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800735a:	4a36      	ldr	r2, [pc, #216]	@ (8007434 <SAI_GetInputClock+0x13c>)
 800735c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007360:	613b      	str	r3, [r7, #16]
 8007362:	e007      	b.n	8007374 <SAI_GetInputClock+0x7c>
  }
  else
  {
    /* In Case the PLL Source is HSE (External Clock) */
    vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007364:	4b32      	ldr	r3, [pc, #200]	@ (8007430 <SAI_GetInputClock+0x138>)
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800736c:	4a32      	ldr	r2, [pc, #200]	@ (8007438 <SAI_GetInputClock+0x140>)
 800736e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007372:	613b      	str	r3, [r7, #16]
  {
    saiclocksource = EXTERNAL_CLOCK_VALUE;
  }
#else
  /* SAI_CLK_x : SAI Block Clock configuration for different clock sources selected */
  if (hsai->Init.ClockSource == SAI_CLKSOURCE_PLLSAI)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	69db      	ldr	r3, [r3, #28]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d121      	bne.n	80073c0 <SAI_GetInputClock+0xc8>
  {
    /* Configure the PLLI2S division factor */
    /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
    /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
    tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 800737c:	4b2c      	ldr	r3, [pc, #176]	@ (8007430 <SAI_GetInputClock+0x138>)
 800737e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007382:	0e1b      	lsrs	r3, r3, #24
 8007384:	f003 030f 	and.w	r3, r3, #15
 8007388:	60fb      	str	r3, [r7, #12]
    saiclocksource = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U)) / (tmpreg);
 800738a:	4b29      	ldr	r3, [pc, #164]	@ (8007430 <SAI_GetInputClock+0x138>)
 800738c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007390:	099b      	lsrs	r3, r3, #6
 8007392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007396:	693a      	ldr	r2, [r7, #16]
 8007398:	fb03 f202 	mul.w	r2, r3, r2
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	fbb2 f3f3 	udiv	r3, r2, r3
 80073a2:	617b      	str	r3, [r7, #20]

    /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
    tmpreg = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 80073a4:	4b22      	ldr	r3, [pc, #136]	@ (8007430 <SAI_GetInputClock+0x138>)
 80073a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80073aa:	0a1b      	lsrs	r3, r3, #8
 80073ac:	f003 031f 	and.w	r3, r3, #31
 80073b0:	3301      	adds	r3, #1
 80073b2:	60fb      	str	r3, [r7, #12]
    saiclocksource = saiclocksource / (tmpreg);
 80073b4:	697a      	ldr	r2, [r7, #20]
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80073bc:	617b      	str	r3, [r7, #20]
 80073be:	e02d      	b.n	800741c <SAI_GetInputClock+0x124>

  }
  else if (hsai->Init.ClockSource == SAI_CLKSOURCE_PLLI2S)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	69db      	ldr	r3, [r3, #28]
 80073c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80073c8:	d120      	bne.n	800740c <SAI_GetInputClock+0x114>
  {
    /* Configure the PLLI2S division factor */
    /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
    /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
    tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 80073ca:	4b19      	ldr	r3, [pc, #100]	@ (8007430 <SAI_GetInputClock+0x138>)
 80073cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073d0:	0e1b      	lsrs	r3, r3, #24
 80073d2:	f003 030f 	and.w	r3, r3, #15
 80073d6:	60fb      	str	r3, [r7, #12]
    saiclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 80073d8:	4b15      	ldr	r3, [pc, #84]	@ (8007430 <SAI_GetInputClock+0x138>)
 80073da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073de:	099b      	lsrs	r3, r3, #6
 80073e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073e4:	693a      	ldr	r2, [r7, #16]
 80073e6:	fb03 f202 	mul.w	r2, r3, r2
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80073f0:	617b      	str	r3, [r7, #20]

    /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
    tmpreg = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 80073f2:	4b0f      	ldr	r3, [pc, #60]	@ (8007430 <SAI_GetInputClock+0x138>)
 80073f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80073f8:	f003 031f 	and.w	r3, r3, #31
 80073fc:	3301      	adds	r3, #1
 80073fe:	60fb      	str	r3, [r7, #12]
    saiclocksource = saiclocksource / (tmpreg);
 8007400:	697a      	ldr	r2, [r7, #20]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	fbb2 f3f3 	udiv	r3, r2, r3
 8007408:	617b      	str	r3, [r7, #20]
 800740a:	e007      	b.n	800741c <SAI_GetInputClock+0x124>
  }
  else /* sConfig->ClockSource == SAI_CLKSource_Ext */
  {
    /* Enable the External Clock selection */
    __HAL_RCC_I2S_CONFIG(RCC_I2SCLKSOURCE_EXT);
 800740c:	4b08      	ldr	r3, [pc, #32]	@ (8007430 <SAI_GetInputClock+0x138>)
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	4a07      	ldr	r2, [pc, #28]	@ (8007430 <SAI_GetInputClock+0x138>)
 8007412:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007416:	6093      	str	r3, [r2, #8]

    saiclocksource = EXTERNAL_CLOCK_VALUE;
 8007418:	4b08      	ldr	r3, [pc, #32]	@ (800743c <SAI_GetInputClock+0x144>)
 800741a:	617b      	str	r3, [r7, #20]
  }
#endif /* STM32F413xx || STM32F423xx */
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
  /* the return result is the value of SAI clock */
  return saiclocksource;
 800741c:	697b      	ldr	r3, [r7, #20]
}
 800741e:	4618      	mov	r0, r3
 8007420:	371c      	adds	r7, #28
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr
 800742a:	bf00      	nop
 800742c:	40015804 	.word	0x40015804
 8007430:	40023800 	.word	0x40023800
 8007434:	00f42400 	.word	0x00f42400
 8007438:	007a1200 	.word	0x007a1200
 800743c:	00bb8000 	.word	0x00bb8000

08007440 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d101      	bne.n	8007452 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800744e:	2301      	movs	r3, #1
 8007450:	e022      	b.n	8007498 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007458:	b2db      	uxtb	r3, r3
 800745a:	2b00      	cmp	r3, #0
 800745c:	d105      	bne.n	800746a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2200      	movs	r2, #0
 8007462:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f7fb f921 	bl	80026ac <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2203      	movs	r2, #3
 800746e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 f814 	bl	80074a0 <HAL_SD_InitCard>
 8007478:	4603      	mov	r3, r0
 800747a:	2b00      	cmp	r3, #0
 800747c:	d001      	beq.n	8007482 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	e00a      	b.n	8007498 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2200      	movs	r2, #0
 8007486:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2200      	movs	r2, #0
 800748c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2201      	movs	r2, #1
 8007492:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007496:	2300      	movs	r3, #0
}
 8007498:	4618      	mov	r0, r3
 800749a:	3708      	adds	r7, #8
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80074a0:	b5b0      	push	{r4, r5, r7, lr}
 80074a2:	b08e      	sub	sp, #56	@ 0x38
 80074a4:	af04      	add	r7, sp, #16
 80074a6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80074a8:	2300      	movs	r3, #0
 80074aa:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80074ac:	2300      	movs	r3, #0
 80074ae:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80074b0:	2300      	movs	r3, #0
 80074b2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80074b4:	2300      	movs	r3, #0
 80074b6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80074b8:	2300      	movs	r3, #0
 80074ba:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80074bc:	2376      	movs	r3, #118	@ 0x76
 80074be:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681d      	ldr	r5, [r3, #0]
 80074c4:	466c      	mov	r4, sp
 80074c6:	f107 0314 	add.w	r3, r7, #20
 80074ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80074ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80074d2:	f107 0308 	add.w	r3, r7, #8
 80074d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80074d8:	4628      	mov	r0, r5
 80074da:	f002 fe9d 	bl	800a218 <SDIO_Init>
 80074de:	4603      	mov	r3, r0
 80074e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 80074e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d001      	beq.n	80074f0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80074ec:	2301      	movs	r3, #1
 80074ee:	e04f      	b.n	8007590 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80074f0:	4b29      	ldr	r3, [pc, #164]	@ (8007598 <HAL_SD_InitCard+0xf8>)
 80074f2:	2200      	movs	r2, #0
 80074f4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4618      	mov	r0, r3
 80074fc:	f002 fec4 	bl	800a288 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8007500:	4b25      	ldr	r3, [pc, #148]	@ (8007598 <HAL_SD_InitCard+0xf8>)
 8007502:	2201      	movs	r2, #1
 8007504:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8007506:	2002      	movs	r0, #2
 8007508:	f7fb fca8 	bl	8002e5c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 fe0b 	bl	8008128 <SD_PowerON>
 8007512:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007514:	6a3b      	ldr	r3, [r7, #32]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d00b      	beq.n	8007532 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2201      	movs	r2, #1
 800751e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007526:	6a3b      	ldr	r3, [r7, #32]
 8007528:	431a      	orrs	r2, r3
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800752e:	2301      	movs	r3, #1
 8007530:	e02e      	b.n	8007590 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 fd2a 	bl	8007f8c <SD_InitCard>
 8007538:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800753a:	6a3b      	ldr	r3, [r7, #32]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d00b      	beq.n	8007558 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2201      	movs	r2, #1
 8007544:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800754c:	6a3b      	ldr	r3, [r7, #32]
 800754e:	431a      	orrs	r2, r3
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007554:	2301      	movs	r3, #1
 8007556:	e01b      	b.n	8007590 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007560:	4618      	mov	r0, r3
 8007562:	f002 ff23 	bl	800a3ac <SDMMC_CmdBlockLength>
 8007566:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007568:	6a3b      	ldr	r3, [r7, #32]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d00f      	beq.n	800758e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a0a      	ldr	r2, [pc, #40]	@ (800759c <HAL_SD_InitCard+0xfc>)
 8007574:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800757a:	6a3b      	ldr	r3, [r7, #32]
 800757c:	431a      	orrs	r2, r3
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2201      	movs	r2, #1
 8007586:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800758a:	2301      	movs	r3, #1
 800758c:	e000      	b.n	8007590 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800758e:	2300      	movs	r3, #0
}
 8007590:	4618      	mov	r0, r3
 8007592:	3728      	adds	r7, #40	@ 0x28
 8007594:	46bd      	mov	sp, r7
 8007596:	bdb0      	pop	{r4, r5, r7, pc}
 8007598:	422580a0 	.word	0x422580a0
 800759c:	004005ff 	.word	0x004005ff

080075a0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b08c      	sub	sp, #48	@ 0x30
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	60f8      	str	r0, [r7, #12]
 80075a8:	60b9      	str	r1, [r7, #8]
 80075aa:	607a      	str	r2, [r7, #4]
 80075ac:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d107      	bne.n	80075c8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075bc:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80075c4:	2301      	movs	r3, #1
 80075c6:	e0be      	b.n	8007746 <HAL_SD_ReadBlocks_DMA+0x1a6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	f040 80b7 	bne.w	8007744 <HAL_SD_ReadBlocks_DMA+0x1a4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2200      	movs	r2, #0
 80075da:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80075dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	441a      	add	r2, r3
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d907      	bls.n	80075fa <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075ee:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	e0a5      	b.n	8007746 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2203      	movs	r2, #3
 80075fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	2200      	movs	r2, #0
 8007608:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8007618:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800761e:	4a4c      	ldr	r2, [pc, #304]	@ (8007750 <HAL_SD_ReadBlocks_DMA+0x1b0>)
 8007620:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007626:	4a4b      	ldr	r2, [pc, #300]	@ (8007754 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8007628:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800762e:	2200      	movs	r2, #0
 8007630:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007636:	2200      	movs	r2, #0
 8007638:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800764a:	689a      	ldr	r2, [r3, #8]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	430a      	orrs	r2, r1
 8007654:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	3380      	adds	r3, #128	@ 0x80
 8007660:	4619      	mov	r1, r3
 8007662:	68ba      	ldr	r2, [r7, #8]
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	025b      	lsls	r3, r3, #9
 8007668:	089b      	lsrs	r3, r3, #2
 800766a:	f7fc fabb 	bl	8003be4 <HAL_DMA_Start_IT>
 800766e:	4603      	mov	r3, r0
 8007670:	2b00      	cmp	r3, #0
 8007672:	d017      	beq.n	80076a4 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8007682:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a33      	ldr	r2, [pc, #204]	@ (8007758 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800768a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007690:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2201      	movs	r2, #1
 800769c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	e050      	b.n	8007746 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80076a4:	4b2d      	ldr	r3, [pc, #180]	@ (800775c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80076a6:	2201      	movs	r2, #1
 80076a8:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d002      	beq.n	80076b8 <HAL_SD_ReadBlocks_DMA+0x118>
      {
        add *= 512U;
 80076b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076b4:	025b      	lsls	r3, r3, #9
 80076b6:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80076b8:	f04f 33ff 	mov.w	r3, #4294967295
 80076bc:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	025b      	lsls	r3, r3, #9
 80076c2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80076c4:	2390      	movs	r3, #144	@ 0x90
 80076c6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80076c8:	2302      	movs	r3, #2
 80076ca:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80076cc:	2300      	movs	r3, #0
 80076ce:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80076d0:	2301      	movs	r3, #1
 80076d2:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f107 0210 	add.w	r2, r7, #16
 80076dc:	4611      	mov	r1, r2
 80076de:	4618      	mov	r0, r3
 80076e0:	f002 fe38 	bl	800a354 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d90a      	bls.n	8007700 <HAL_SD_ReadBlocks_DMA+0x160>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2282      	movs	r2, #130	@ 0x82
 80076ee:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80076f6:	4618      	mov	r0, r3
 80076f8:	f002 fe9c 	bl	800a434 <SDMMC_CmdReadMultiBlock>
 80076fc:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80076fe:	e009      	b.n	8007714 <HAL_SD_ReadBlocks_DMA+0x174>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2281      	movs	r2, #129	@ 0x81
 8007704:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800770c:	4618      	mov	r0, r3
 800770e:	f002 fe6f 	bl	800a3f0 <SDMMC_CmdReadSingleBlock>
 8007712:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8007714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007716:	2b00      	cmp	r3, #0
 8007718:	d012      	beq.n	8007740 <HAL_SD_ReadBlocks_DMA+0x1a0>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a0e      	ldr	r2, [pc, #56]	@ (8007758 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8007720:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007728:	431a      	orrs	r2, r3
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2201      	movs	r2, #1
 8007732:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2200      	movs	r2, #0
 800773a:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800773c:	2301      	movs	r3, #1
 800773e:	e002      	b.n	8007746 <HAL_SD_ReadBlocks_DMA+0x1a6>
      }

      return HAL_OK;
 8007740:	2300      	movs	r3, #0
 8007742:	e000      	b.n	8007746 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_BUSY;
 8007744:	2302      	movs	r3, #2
  }
}
 8007746:	4618      	mov	r0, r3
 8007748:	3730      	adds	r7, #48	@ 0x30
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
 800774e:	bf00      	nop
 8007750:	08007e77 	.word	0x08007e77
 8007754:	08007ee9 	.word	0x08007ee9
 8007758:	004005ff 	.word	0x004005ff
 800775c:	4225858c 	.word	0x4225858c

08007760 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b08c      	sub	sp, #48	@ 0x30
 8007764:	af00      	add	r7, sp, #0
 8007766:	60f8      	str	r0, [r7, #12]
 8007768:	60b9      	str	r1, [r7, #8]
 800776a:	607a      	str	r2, [r7, #4]
 800776c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d107      	bne.n	8007788 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800777c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007784:	2301      	movs	r3, #1
 8007786:	e0c1      	b.n	800790c <HAL_SD_WriteBlocks_DMA+0x1ac>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800778e:	b2db      	uxtb	r3, r3
 8007790:	2b01      	cmp	r3, #1
 8007792:	f040 80ba 	bne.w	800790a <HAL_SD_WriteBlocks_DMA+0x1aa>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2200      	movs	r2, #0
 800779a:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800779c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	441a      	add	r2, r3
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d907      	bls.n	80077ba <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077ae:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	e0a8      	b.n	800790c <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2203      	movs	r2, #3
 80077be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	2200      	movs	r2, #0
 80077c8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f042 021a 	orr.w	r2, r2, #26
 80077d8:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077de:	4a4d      	ldr	r2, [pc, #308]	@ (8007914 <HAL_SD_WriteBlocks_DMA+0x1b4>)
 80077e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077e6:	4a4c      	ldr	r2, [pc, #304]	@ (8007918 <HAL_SD_WriteBlocks_DMA+0x1b8>)
 80077e8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077ee:	2200      	movs	r2, #0
 80077f0:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d002      	beq.n	8007800 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80077fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077fc:	025b      	lsls	r3, r3, #9
 80077fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	2b01      	cmp	r3, #1
 8007804:	d90a      	bls.n	800781c <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	22a0      	movs	r2, #160	@ 0xa0
 800780a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007812:	4618      	mov	r0, r3
 8007814:	f002 fe52 	bl	800a4bc <SDMMC_CmdWriteMultiBlock>
 8007818:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800781a:	e009      	b.n	8007830 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2290      	movs	r2, #144	@ 0x90
 8007820:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007828:	4618      	mov	r0, r3
 800782a:	f002 fe25 	bl	800a478 <SDMMC_CmdWriteSingleBlock>
 800782e:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007832:	2b00      	cmp	r3, #0
 8007834:	d012      	beq.n	800785c <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a38      	ldr	r2, [pc, #224]	@ (800791c <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800783c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007844:	431a      	orrs	r2, r3
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2201      	movs	r2, #1
 800784e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2200      	movs	r2, #0
 8007856:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007858:	2301      	movs	r3, #1
 800785a:	e057      	b.n	800790c <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800785c:	4b30      	ldr	r3, [pc, #192]	@ (8007920 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800785e:	2201      	movs	r2, #1
 8007860:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007866:	2240      	movs	r2, #64	@ 0x40
 8007868:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800787a:	689a      	ldr	r2, [r3, #8]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	430a      	orrs	r2, r1
 8007884:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800788a:	68b9      	ldr	r1, [r7, #8]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	3380      	adds	r3, #128	@ 0x80
 8007892:	461a      	mov	r2, r3
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	025b      	lsls	r3, r3, #9
 8007898:	089b      	lsrs	r3, r3, #2
 800789a:	f7fc f9a3 	bl	8003be4 <HAL_DMA_Start_IT>
 800789e:	4603      	mov	r3, r0
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d01a      	beq.n	80078da <HAL_SD_WriteBlocks_DMA+0x17a>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f022 021a 	bic.w	r2, r2, #26
 80078b2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a18      	ldr	r2, [pc, #96]	@ (800791c <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80078ba:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078c0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2201      	movs	r2, #1
 80078cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2200      	movs	r2, #0
 80078d4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80078d6:	2301      	movs	r3, #1
 80078d8:	e018      	b.n	800790c <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80078da:	f04f 33ff 	mov.w	r3, #4294967295
 80078de:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	025b      	lsls	r3, r3, #9
 80078e4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80078e6:	2390      	movs	r3, #144	@ 0x90
 80078e8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80078ea:	2300      	movs	r3, #0
 80078ec:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80078ee:	2300      	movs	r3, #0
 80078f0:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80078f2:	2301      	movs	r3, #1
 80078f4:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f107 0210 	add.w	r2, r7, #16
 80078fe:	4611      	mov	r1, r2
 8007900:	4618      	mov	r0, r3
 8007902:	f002 fd27 	bl	800a354 <SDIO_ConfigData>

      return HAL_OK;
 8007906:	2300      	movs	r3, #0
 8007908:	e000      	b.n	800790c <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
  }
  else
  {
    return HAL_BUSY;
 800790a:	2302      	movs	r3, #2
  }
}
 800790c:	4618      	mov	r0, r3
 800790e:	3730      	adds	r7, #48	@ 0x30
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}
 8007914:	08007e4d 	.word	0x08007e4d
 8007918:	08007ee9 	.word	0x08007ee9
 800791c:	004005ff 	.word	0x004005ff
 8007920:	4225858c 	.word	0x4225858c

08007924 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007924:	b480      	push	{r7}
 8007926:	b083      	sub	sp, #12
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800792c:	bf00      	nop
 800792e:	370c      	adds	r7, #12
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr

08007938 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007938:	b480      	push	{r7}
 800793a:	b083      	sub	sp, #12
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007946:	0f9b      	lsrs	r3, r3, #30
 8007948:	b2da      	uxtb	r2, r3
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007952:	0e9b      	lsrs	r3, r3, #26
 8007954:	b2db      	uxtb	r3, r3
 8007956:	f003 030f 	and.w	r3, r3, #15
 800795a:	b2da      	uxtb	r2, r3
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007964:	0e1b      	lsrs	r3, r3, #24
 8007966:	b2db      	uxtb	r3, r3
 8007968:	f003 0303 	and.w	r3, r3, #3
 800796c:	b2da      	uxtb	r2, r3
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007976:	0c1b      	lsrs	r3, r3, #16
 8007978:	b2da      	uxtb	r2, r3
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007982:	0a1b      	lsrs	r3, r3, #8
 8007984:	b2da      	uxtb	r2, r3
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800798e:	b2da      	uxtb	r2, r3
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007998:	0d1b      	lsrs	r3, r3, #20
 800799a:	b29a      	uxth	r2, r3
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80079a4:	0c1b      	lsrs	r3, r3, #16
 80079a6:	b2db      	uxtb	r3, r3
 80079a8:	f003 030f 	and.w	r3, r3, #15
 80079ac:	b2da      	uxtb	r2, r3
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80079b6:	0bdb      	lsrs	r3, r3, #15
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	f003 0301 	and.w	r3, r3, #1
 80079be:	b2da      	uxtb	r2, r3
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80079c8:	0b9b      	lsrs	r3, r3, #14
 80079ca:	b2db      	uxtb	r3, r3
 80079cc:	f003 0301 	and.w	r3, r3, #1
 80079d0:	b2da      	uxtb	r2, r3
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80079da:	0b5b      	lsrs	r3, r3, #13
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	f003 0301 	and.w	r3, r3, #1
 80079e2:	b2da      	uxtb	r2, r3
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80079ec:	0b1b      	lsrs	r3, r3, #12
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	f003 0301 	and.w	r3, r3, #1
 80079f4:	b2da      	uxtb	r2, r3
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	2200      	movs	r2, #0
 80079fe:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d163      	bne.n	8007ad0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007a0c:	009a      	lsls	r2, r3, #2
 8007a0e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007a12:	4013      	ands	r3, r2
 8007a14:	687a      	ldr	r2, [r7, #4]
 8007a16:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8007a18:	0f92      	lsrs	r2, r2, #30
 8007a1a:	431a      	orrs	r2, r3
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a24:	0edb      	lsrs	r3, r3, #27
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	f003 0307 	and.w	r3, r3, #7
 8007a2c:	b2da      	uxtb	r2, r3
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a36:	0e1b      	lsrs	r3, r3, #24
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	f003 0307 	and.w	r3, r3, #7
 8007a3e:	b2da      	uxtb	r2, r3
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a48:	0d5b      	lsrs	r3, r3, #21
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	f003 0307 	and.w	r3, r3, #7
 8007a50:	b2da      	uxtb	r2, r3
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a5a:	0c9b      	lsrs	r3, r3, #18
 8007a5c:	b2db      	uxtb	r3, r3
 8007a5e:	f003 0307 	and.w	r3, r3, #7
 8007a62:	b2da      	uxtb	r2, r3
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a6c:	0bdb      	lsrs	r3, r3, #15
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	f003 0307 	and.w	r3, r3, #7
 8007a74:	b2da      	uxtb	r2, r3
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	691b      	ldr	r3, [r3, #16]
 8007a7e:	1c5a      	adds	r2, r3, #1
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	7e1b      	ldrb	r3, [r3, #24]
 8007a88:	b2db      	uxtb	r3, r3
 8007a8a:	f003 0307 	and.w	r3, r3, #7
 8007a8e:	3302      	adds	r3, #2
 8007a90:	2201      	movs	r2, #1
 8007a92:	fa02 f303 	lsl.w	r3, r2, r3
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8007a9a:	fb03 f202 	mul.w	r2, r3, r2
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	7a1b      	ldrb	r3, [r3, #8]
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	f003 030f 	and.w	r3, r3, #15
 8007aac:	2201      	movs	r2, #1
 8007aae:	409a      	lsls	r2, r3
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ab8:	687a      	ldr	r2, [r7, #4]
 8007aba:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8007abc:	0a52      	lsrs	r2, r2, #9
 8007abe:	fb03 f202 	mul.w	r2, r3, r2
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007acc:	661a      	str	r2, [r3, #96]	@ 0x60
 8007ace:	e031      	b.n	8007b34 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d11d      	bne.n	8007b14 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007adc:	041b      	lsls	r3, r3, #16
 8007ade:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ae6:	0c1b      	lsrs	r3, r3, #16
 8007ae8:	431a      	orrs	r2, r3
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	691b      	ldr	r3, [r3, #16]
 8007af2:	3301      	adds	r3, #1
 8007af4:	029a      	lsls	r2, r3, #10
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007b08:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	661a      	str	r2, [r3, #96]	@ 0x60
 8007b12:	e00f      	b.n	8007b34 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a58      	ldr	r2, [pc, #352]	@ (8007c7c <HAL_SD_GetCardCSD+0x344>)
 8007b1a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b20:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007b30:	2301      	movs	r3, #1
 8007b32:	e09d      	b.n	8007c70 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b38:	0b9b      	lsrs	r3, r3, #14
 8007b3a:	b2db      	uxtb	r3, r3
 8007b3c:	f003 0301 	and.w	r3, r3, #1
 8007b40:	b2da      	uxtb	r2, r3
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b4a:	09db      	lsrs	r3, r3, #7
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b52:	b2da      	uxtb	r2, r3
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b62:	b2da      	uxtb	r2, r3
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b6c:	0fdb      	lsrs	r3, r3, #31
 8007b6e:	b2da      	uxtb	r2, r3
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b78:	0f5b      	lsrs	r3, r3, #29
 8007b7a:	b2db      	uxtb	r3, r3
 8007b7c:	f003 0303 	and.w	r3, r3, #3
 8007b80:	b2da      	uxtb	r2, r3
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b8a:	0e9b      	lsrs	r3, r3, #26
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	f003 0307 	and.w	r3, r3, #7
 8007b92:	b2da      	uxtb	r2, r3
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b9c:	0d9b      	lsrs	r3, r3, #22
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	f003 030f 	and.w	r3, r3, #15
 8007ba4:	b2da      	uxtb	r2, r3
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bae:	0d5b      	lsrs	r3, r3, #21
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	f003 0301 	and.w	r3, r3, #1
 8007bb6:	b2da      	uxtb	r2, r3
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bca:	0c1b      	lsrs	r3, r3, #16
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	f003 0301 	and.w	r3, r3, #1
 8007bd2:	b2da      	uxtb	r2, r3
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bde:	0bdb      	lsrs	r3, r3, #15
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	f003 0301 	and.w	r3, r3, #1
 8007be6:	b2da      	uxtb	r2, r3
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bf2:	0b9b      	lsrs	r3, r3, #14
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	f003 0301 	and.w	r3, r3, #1
 8007bfa:	b2da      	uxtb	r2, r3
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c06:	0b5b      	lsrs	r3, r3, #13
 8007c08:	b2db      	uxtb	r3, r3
 8007c0a:	f003 0301 	and.w	r3, r3, #1
 8007c0e:	b2da      	uxtb	r2, r3
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c1a:	0b1b      	lsrs	r3, r3, #12
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	f003 0301 	and.w	r3, r3, #1
 8007c22:	b2da      	uxtb	r2, r3
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c2e:	0a9b      	lsrs	r3, r3, #10
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	f003 0303 	and.w	r3, r3, #3
 8007c36:	b2da      	uxtb	r2, r3
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c42:	0a1b      	lsrs	r3, r3, #8
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	f003 0303 	and.w	r3, r3, #3
 8007c4a:	b2da      	uxtb	r2, r3
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c56:	085b      	lsrs	r3, r3, #1
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c5e:	b2da      	uxtb	r2, r3
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	2201      	movs	r2, #1
 8007c6a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8007c6e:	2300      	movs	r3, #0
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	370c      	adds	r7, #12
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr
 8007c7c:	004005ff 	.word	0x004005ff

08007c80 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b083      	sub	sp, #12
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007cca:	2300      	movs	r3, #0
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	370c      	adds	r7, #12
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007cd8:	b5b0      	push	{r4, r5, r7, lr}
 8007cda:	b08e      	sub	sp, #56	@ 0x38
 8007cdc:	af04      	add	r7, sp, #16
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2203      	movs	r2, #3
 8007cec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cf4:	2b03      	cmp	r3, #3
 8007cf6:	d02e      	beq.n	8007d56 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007cfe:	d106      	bne.n	8007d0e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d04:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	639a      	str	r2, [r3, #56]	@ 0x38
 8007d0c:	e029      	b.n	8007d62 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d14:	d10a      	bne.n	8007d2c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 fabc 	bl	8008294 <SD_WideBus_Enable>
 8007d1c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d22:	6a3b      	ldr	r3, [r7, #32]
 8007d24:	431a      	orrs	r2, r3
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	639a      	str	r2, [r3, #56]	@ 0x38
 8007d2a:	e01a      	b.n	8007d62 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d10a      	bne.n	8007d48 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 faf9 	bl	800832a <SD_WideBus_Disable>
 8007d38:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d3e:	6a3b      	ldr	r3, [r7, #32]
 8007d40:	431a      	orrs	r2, r3
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	639a      	str	r2, [r3, #56]	@ 0x38
 8007d46:	e00c      	b.n	8007d62 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d4c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	639a      	str	r2, [r3, #56]	@ 0x38
 8007d54:	e005      	b.n	8007d62 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d5a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d00b      	beq.n	8007d82 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a26      	ldr	r2, [pc, #152]	@ (8007e08 <HAL_SD_ConfigWideBusOperation+0x130>)
 8007d70:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2201      	movs	r2, #1
 8007d76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007d80:	e01f      	b.n	8007dc2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	68db      	ldr	r3, [r3, #12]
 8007d92:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	695b      	ldr	r3, [r3, #20]
 8007d9c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	699b      	ldr	r3, [r3, #24]
 8007da2:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681d      	ldr	r5, [r3, #0]
 8007da8:	466c      	mov	r4, sp
 8007daa:	f107 0314 	add.w	r3, r7, #20
 8007dae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007db2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007db6:	f107 0308 	add.w	r3, r7, #8
 8007dba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007dbc:	4628      	mov	r0, r5
 8007dbe:	f002 fa2b 	bl	800a218 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f002 faee 	bl	800a3ac <SDMMC_CmdBlockLength>
 8007dd0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007dd2:	6a3b      	ldr	r3, [r7, #32]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d00c      	beq.n	8007df2 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a0a      	ldr	r2, [pc, #40]	@ (8007e08 <HAL_SD_ConfigWideBusOperation+0x130>)
 8007dde:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007de4:	6a3b      	ldr	r3, [r7, #32]
 8007de6:	431a      	orrs	r2, r3
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2201      	movs	r2, #1
 8007df6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8007dfa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3728      	adds	r7, #40	@ 0x28
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bdb0      	pop	{r4, r5, r7, pc}
 8007e06:	bf00      	nop
 8007e08:	004005ff 	.word	0x004005ff

08007e0c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b086      	sub	sp, #24
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007e14:	2300      	movs	r3, #0
 8007e16:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007e18:	f107 030c 	add.w	r3, r7, #12
 8007e1c:	4619      	mov	r1, r3
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 fa10 	bl	8008244 <SD_SendStatus>
 8007e24:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d005      	beq.n	8007e38 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	431a      	orrs	r2, r3
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	0a5b      	lsrs	r3, r3, #9
 8007e3c:	f003 030f 	and.w	r3, r3, #15
 8007e40:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007e42:	693b      	ldr	r3, [r7, #16]
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3718      	adds	r7, #24
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b085      	sub	sp, #20
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e58:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007e68:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8007e6a:	bf00      	nop
 8007e6c:	3714      	adds	r7, #20
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr

08007e76 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007e76:	b580      	push	{r7, lr}
 8007e78:	b084      	sub	sp, #16
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e82:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e88:	2b82      	cmp	r3, #130	@ 0x82
 8007e8a:	d111      	bne.n	8007eb0 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4618      	mov	r0, r3
 8007e92:	f002 fb35 	bl	800a500 <SDMMC_CmdStopTransfer>
 8007e96:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d008      	beq.n	8007eb0 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	431a      	orrs	r2, r3
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8007eaa:	68f8      	ldr	r0, [r7, #12]
 8007eac:	f7ff fd3a 	bl	8007924 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f022 0208 	bic.w	r2, r2, #8
 8007ebe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f240 523a 	movw	r2, #1338	@ 0x53a
 8007ec8:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2201      	movs	r2, #1
 8007ece:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8007ed8:	68f8      	ldr	r0, [r7, #12]
 8007eda:	f002 ff89 	bl	800adf0 <HAL_SD_RxCpltCallback>
#endif
}
 8007ede:	bf00      	nop
 8007ee0:	3710      	adds	r7, #16
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
	...

08007ee8 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b086      	sub	sp, #24
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ef4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f7fc f8e8 	bl	80040cc <HAL_DMA_GetError>
 8007efc:	4603      	mov	r3, r0
 8007efe:	2b02      	cmp	r3, #2
 8007f00:	d03e      	beq.n	8007f80 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f08:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f10:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d002      	beq.n	8007f1e <SD_DMAError+0x36>
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d12d      	bne.n	8007f7a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a19      	ldr	r2, [pc, #100]	@ (8007f88 <SD_DMAError+0xa0>)
 8007f24:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8007f34:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f3a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8007f42:	6978      	ldr	r0, [r7, #20]
 8007f44:	f7ff ff62 	bl	8007e0c <HAL_SD_GetCardState>
 8007f48:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	2b06      	cmp	r3, #6
 8007f4e:	d002      	beq.n	8007f56 <SD_DMAError+0x6e>
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	2b05      	cmp	r3, #5
 8007f54:	d10a      	bne.n	8007f6c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f002 fad0 	bl	800a500 <SDMMC_CmdStopTransfer>
 8007f60:	4602      	mov	r2, r0
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f66:	431a      	orrs	r2, r3
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	2200      	movs	r2, #0
 8007f78:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8007f7a:	6978      	ldr	r0, [r7, #20]
 8007f7c:	f7ff fcd2 	bl	8007924 <HAL_SD_ErrorCallback>
#endif
  }
}
 8007f80:	bf00      	nop
 8007f82:	3718      	adds	r7, #24
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}
 8007f88:	004005ff 	.word	0x004005ff

08007f8c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007f8c:	b5b0      	push	{r4, r5, r7, lr}
 8007f8e:	b094      	sub	sp, #80	@ 0x50
 8007f90:	af04      	add	r7, sp, #16
 8007f92:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007f94:	2301      	movs	r3, #1
 8007f96:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f002 f981 	bl	800a2a4 <SDIO_GetPowerState>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d102      	bne.n	8007fae <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007fa8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8007fac:	e0b8      	b.n	8008120 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fb2:	2b03      	cmp	r3, #3
 8007fb4:	d02f      	beq.n	8008016 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f002 fbaa 	bl	800a714 <SDMMC_CmdSendCID>
 8007fc0:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007fc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d001      	beq.n	8007fcc <SD_InitCard+0x40>
    {
      return errorstate;
 8007fc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fca:	e0a9      	b.n	8008120 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	2100      	movs	r1, #0
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f002 f9ab 	bl	800a32e <SDIO_GetResponse>
 8007fd8:	4602      	mov	r2, r0
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	2104      	movs	r1, #4
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f002 f9a2 	bl	800a32e <SDIO_GetResponse>
 8007fea:	4602      	mov	r2, r0
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	2108      	movs	r1, #8
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f002 f999 	bl	800a32e <SDIO_GetResponse>
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	210c      	movs	r1, #12
 8008008:	4618      	mov	r0, r3
 800800a:	f002 f990 	bl	800a32e <SDIO_GetResponse>
 800800e:	4602      	mov	r2, r0
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800801a:	2b03      	cmp	r3, #3
 800801c:	d00d      	beq.n	800803a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f107 020e 	add.w	r2, r7, #14
 8008026:	4611      	mov	r1, r2
 8008028:	4618      	mov	r0, r3
 800802a:	f002 fbb0 	bl	800a78e <SDMMC_CmdSetRelAdd>
 800802e:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008030:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008032:	2b00      	cmp	r3, #0
 8008034:	d001      	beq.n	800803a <SD_InitCard+0xae>
    {
      return errorstate;
 8008036:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008038:	e072      	b.n	8008120 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800803e:	2b03      	cmp	r3, #3
 8008040:	d036      	beq.n	80080b0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008042:	89fb      	ldrh	r3, [r7, #14]
 8008044:	461a      	mov	r2, r3
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681a      	ldr	r2, [r3, #0]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008052:	041b      	lsls	r3, r3, #16
 8008054:	4619      	mov	r1, r3
 8008056:	4610      	mov	r0, r2
 8008058:	f002 fb7a 	bl	800a750 <SDMMC_CmdSendCSD>
 800805c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800805e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008060:	2b00      	cmp	r3, #0
 8008062:	d001      	beq.n	8008068 <SD_InitCard+0xdc>
    {
      return errorstate;
 8008064:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008066:	e05b      	b.n	8008120 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	2100      	movs	r1, #0
 800806e:	4618      	mov	r0, r3
 8008070:	f002 f95d 	bl	800a32e <SDIO_GetResponse>
 8008074:	4602      	mov	r2, r0
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	2104      	movs	r1, #4
 8008080:	4618      	mov	r0, r3
 8008082:	f002 f954 	bl	800a32e <SDIO_GetResponse>
 8008086:	4602      	mov	r2, r0
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	2108      	movs	r1, #8
 8008092:	4618      	mov	r0, r3
 8008094:	f002 f94b 	bl	800a32e <SDIO_GetResponse>
 8008098:	4602      	mov	r2, r0
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	210c      	movs	r1, #12
 80080a4:	4618      	mov	r0, r3
 80080a6:	f002 f942 	bl	800a32e <SDIO_GetResponse>
 80080aa:	4602      	mov	r2, r0
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	2104      	movs	r1, #4
 80080b6:	4618      	mov	r0, r3
 80080b8:	f002 f939 	bl	800a32e <SDIO_GetResponse>
 80080bc:	4603      	mov	r3, r0
 80080be:	0d1a      	lsrs	r2, r3, #20
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80080c4:	f107 0310 	add.w	r3, r7, #16
 80080c8:	4619      	mov	r1, r3
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f7ff fc34 	bl	8007938 <HAL_SD_GetCardCSD>
 80080d0:	4603      	mov	r3, r0
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d002      	beq.n	80080dc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80080d6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80080da:	e021      	b.n	8008120 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6819      	ldr	r1, [r3, #0]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080e4:	041b      	lsls	r3, r3, #16
 80080e6:	2200      	movs	r2, #0
 80080e8:	461c      	mov	r4, r3
 80080ea:	4615      	mov	r5, r2
 80080ec:	4622      	mov	r2, r4
 80080ee:	462b      	mov	r3, r5
 80080f0:	4608      	mov	r0, r1
 80080f2:	f002 fa27 	bl	800a544 <SDMMC_CmdSelDesel>
 80080f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80080f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d001      	beq.n	8008102 <SD_InitCard+0x176>
  {
    return errorstate;
 80080fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008100:	e00e      	b.n	8008120 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681d      	ldr	r5, [r3, #0]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	466c      	mov	r4, sp
 800810a:	f103 0210 	add.w	r2, r3, #16
 800810e:	ca07      	ldmia	r2, {r0, r1, r2}
 8008110:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008114:	3304      	adds	r3, #4
 8008116:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008118:	4628      	mov	r0, r5
 800811a:	f002 f87d 	bl	800a218 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800811e:	2300      	movs	r3, #0
}
 8008120:	4618      	mov	r0, r3
 8008122:	3740      	adds	r7, #64	@ 0x40
 8008124:	46bd      	mov	sp, r7
 8008126:	bdb0      	pop	{r4, r5, r7, pc}

08008128 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b086      	sub	sp, #24
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008130:	2300      	movs	r3, #0
 8008132:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008134:	2300      	movs	r3, #0
 8008136:	617b      	str	r3, [r7, #20]
 8008138:	2300      	movs	r3, #0
 800813a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4618      	mov	r0, r3
 8008142:	f002 fa22 	bl	800a58a <SDMMC_CmdGoIdleState>
 8008146:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d001      	beq.n	8008152 <SD_PowerON+0x2a>
  {
    return errorstate;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	e072      	b.n	8008238 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4618      	mov	r0, r3
 8008158:	f002 fa35 	bl	800a5c6 <SDMMC_CmdOperCond>
 800815c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d00d      	beq.n	8008180 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2200      	movs	r2, #0
 8008168:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4618      	mov	r0, r3
 8008170:	f002 fa0b 	bl	800a58a <SDMMC_CmdGoIdleState>
 8008174:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d004      	beq.n	8008186 <SD_PowerON+0x5e>
    {
      return errorstate;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	e05b      	b.n	8008238 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2201      	movs	r2, #1
 8008184:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800818a:	2b01      	cmp	r3, #1
 800818c:	d137      	bne.n	80081fe <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	2100      	movs	r1, #0
 8008194:	4618      	mov	r0, r3
 8008196:	f002 fa35 	bl	800a604 <SDMMC_CmdAppCommand>
 800819a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d02d      	beq.n	80081fe <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80081a2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80081a6:	e047      	b.n	8008238 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	2100      	movs	r1, #0
 80081ae:	4618      	mov	r0, r3
 80081b0:	f002 fa28 	bl	800a604 <SDMMC_CmdAppCommand>
 80081b4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d001      	beq.n	80081c0 <SD_PowerON+0x98>
    {
      return errorstate;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	e03b      	b.n	8008238 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	491e      	ldr	r1, [pc, #120]	@ (8008240 <SD_PowerON+0x118>)
 80081c6:	4618      	mov	r0, r3
 80081c8:	f002 fa3e 	bl	800a648 <SDMMC_CmdAppOperCommand>
 80081cc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d002      	beq.n	80081da <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80081d4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80081d8:	e02e      	b.n	8008238 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	2100      	movs	r1, #0
 80081e0:	4618      	mov	r0, r3
 80081e2:	f002 f8a4 	bl	800a32e <SDIO_GetResponse>
 80081e6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	0fdb      	lsrs	r3, r3, #31
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d101      	bne.n	80081f4 <SD_PowerON+0xcc>
 80081f0:	2301      	movs	r3, #1
 80081f2:	e000      	b.n	80081f6 <SD_PowerON+0xce>
 80081f4:	2300      	movs	r3, #0
 80081f6:	613b      	str	r3, [r7, #16]

    count++;
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	3301      	adds	r3, #1
 80081fc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008204:	4293      	cmp	r3, r2
 8008206:	d802      	bhi.n	800820e <SD_PowerON+0xe6>
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d0cc      	beq.n	80081a8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008214:	4293      	cmp	r3, r2
 8008216:	d902      	bls.n	800821e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008218:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800821c:	e00c      	b.n	8008238 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008224:	2b00      	cmp	r3, #0
 8008226:	d003      	beq.n	8008230 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2201      	movs	r2, #1
 800822c:	645a      	str	r2, [r3, #68]	@ 0x44
 800822e:	e002      	b.n	8008236 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008236:	2300      	movs	r3, #0
}
 8008238:	4618      	mov	r0, r3
 800823a:	3718      	adds	r7, #24
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}
 8008240:	c1100000 	.word	0xc1100000

08008244 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d102      	bne.n	800825a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008254:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008258:	e018      	b.n	800828c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681a      	ldr	r2, [r3, #0]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008262:	041b      	lsls	r3, r3, #16
 8008264:	4619      	mov	r1, r3
 8008266:	4610      	mov	r0, r2
 8008268:	f002 fab2 	bl	800a7d0 <SDMMC_CmdSendStatus>
 800826c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d001      	beq.n	8008278 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	e009      	b.n	800828c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	2100      	movs	r1, #0
 800827e:	4618      	mov	r0, r3
 8008280:	f002 f855 	bl	800a32e <SDIO_GetResponse>
 8008284:	4602      	mov	r2, r0
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800828a:	2300      	movs	r3, #0
}
 800828c:	4618      	mov	r0, r3
 800828e:	3710      	adds	r7, #16
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b086      	sub	sp, #24
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800829c:	2300      	movs	r3, #0
 800829e:	60fb      	str	r3, [r7, #12]
 80082a0:	2300      	movs	r3, #0
 80082a2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	2100      	movs	r1, #0
 80082aa:	4618      	mov	r0, r3
 80082ac:	f002 f83f 	bl	800a32e <SDIO_GetResponse>
 80082b0:	4603      	mov	r3, r0
 80082b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80082b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80082ba:	d102      	bne.n	80082c2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80082bc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80082c0:	e02f      	b.n	8008322 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80082c2:	f107 030c 	add.w	r3, r7, #12
 80082c6:	4619      	mov	r1, r3
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 f879 	bl	80083c0 <SD_FindSCR>
 80082ce:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d001      	beq.n	80082da <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	e023      	b.n	8008322 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d01c      	beq.n	800831e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082ec:	041b      	lsls	r3, r3, #16
 80082ee:	4619      	mov	r1, r3
 80082f0:	4610      	mov	r0, r2
 80082f2:	f002 f987 	bl	800a604 <SDMMC_CmdAppCommand>
 80082f6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d001      	beq.n	8008302 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	e00f      	b.n	8008322 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	2102      	movs	r1, #2
 8008308:	4618      	mov	r0, r3
 800830a:	f002 f9c0 	bl	800a68e <SDMMC_CmdBusWidth>
 800830e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d001      	beq.n	800831a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	e003      	b.n	8008322 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800831a:	2300      	movs	r3, #0
 800831c:	e001      	b.n	8008322 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800831e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8008322:	4618      	mov	r0, r3
 8008324:	3718      	adds	r7, #24
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}

0800832a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800832a:	b580      	push	{r7, lr}
 800832c:	b086      	sub	sp, #24
 800832e:	af00      	add	r7, sp, #0
 8008330:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008332:	2300      	movs	r3, #0
 8008334:	60fb      	str	r3, [r7, #12]
 8008336:	2300      	movs	r3, #0
 8008338:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	2100      	movs	r1, #0
 8008340:	4618      	mov	r0, r3
 8008342:	f001 fff4 	bl	800a32e <SDIO_GetResponse>
 8008346:	4603      	mov	r3, r0
 8008348:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800834c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008350:	d102      	bne.n	8008358 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008352:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008356:	e02f      	b.n	80083b8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008358:	f107 030c 	add.w	r3, r7, #12
 800835c:	4619      	mov	r1, r3
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 f82e 	bl	80083c0 <SD_FindSCR>
 8008364:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d001      	beq.n	8008370 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	e023      	b.n	80083b8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008376:	2b00      	cmp	r3, #0
 8008378:	d01c      	beq.n	80083b4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681a      	ldr	r2, [r3, #0]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008382:	041b      	lsls	r3, r3, #16
 8008384:	4619      	mov	r1, r3
 8008386:	4610      	mov	r0, r2
 8008388:	f002 f93c 	bl	800a604 <SDMMC_CmdAppCommand>
 800838c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d001      	beq.n	8008398 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	e00f      	b.n	80083b8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	2100      	movs	r1, #0
 800839e:	4618      	mov	r0, r3
 80083a0:	f002 f975 	bl	800a68e <SDMMC_CmdBusWidth>
 80083a4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d001      	beq.n	80083b0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	e003      	b.n	80083b8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80083b0:	2300      	movs	r3, #0
 80083b2:	e001      	b.n	80083b8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80083b4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3718      	adds	r7, #24
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80083c0:	b590      	push	{r4, r7, lr}
 80083c2:	b08f      	sub	sp, #60	@ 0x3c
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80083ca:	f7fa fd3b 	bl	8002e44 <HAL_GetTick>
 80083ce:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 80083d0:	2300      	movs	r3, #0
 80083d2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80083d4:	2300      	movs	r3, #0
 80083d6:	60bb      	str	r3, [r7, #8]
 80083d8:	2300      	movs	r3, #0
 80083da:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	2108      	movs	r1, #8
 80083e6:	4618      	mov	r0, r3
 80083e8:	f001 ffe0 	bl	800a3ac <SDMMC_CmdBlockLength>
 80083ec:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80083ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d001      	beq.n	80083f8 <SD_FindSCR+0x38>
  {
    return errorstate;
 80083f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083f6:	e0b2      	b.n	800855e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008400:	041b      	lsls	r3, r3, #16
 8008402:	4619      	mov	r1, r3
 8008404:	4610      	mov	r0, r2
 8008406:	f002 f8fd 	bl	800a604 <SDMMC_CmdAppCommand>
 800840a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800840c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800840e:	2b00      	cmp	r3, #0
 8008410:	d001      	beq.n	8008416 <SD_FindSCR+0x56>
  {
    return errorstate;
 8008412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008414:	e0a3      	b.n	800855e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008416:	f04f 33ff 	mov.w	r3, #4294967295
 800841a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800841c:	2308      	movs	r3, #8
 800841e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8008420:	2330      	movs	r3, #48	@ 0x30
 8008422:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008424:	2302      	movs	r3, #2
 8008426:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008428:	2300      	movs	r3, #0
 800842a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800842c:	2301      	movs	r3, #1
 800842e:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f107 0210 	add.w	r2, r7, #16
 8008438:	4611      	mov	r1, r2
 800843a:	4618      	mov	r0, r3
 800843c:	f001 ff8a 	bl	800a354 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4618      	mov	r0, r3
 8008446:	f002 f944 	bl	800a6d2 <SDMMC_CmdSendSCR>
 800844a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800844c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800844e:	2b00      	cmp	r3, #0
 8008450:	d02a      	beq.n	80084a8 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8008452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008454:	e083      	b.n	800855e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800845c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008460:	2b00      	cmp	r3, #0
 8008462:	d00f      	beq.n	8008484 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6819      	ldr	r1, [r3, #0]
 8008468:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	f107 0208 	add.w	r2, r7, #8
 8008470:	18d4      	adds	r4, r2, r3
 8008472:	4608      	mov	r0, r1
 8008474:	f001 fefb 	bl	800a26e <SDIO_ReadFIFO>
 8008478:	4603      	mov	r3, r0
 800847a:	6023      	str	r3, [r4, #0]
      index++;
 800847c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800847e:	3301      	adds	r3, #1
 8008480:	637b      	str	r3, [r7, #52]	@ 0x34
 8008482:	e006      	b.n	8008492 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800848a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800848e:	2b00      	cmp	r3, #0
 8008490:	d012      	beq.n	80084b8 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8008492:	f7fa fcd7 	bl	8002e44 <HAL_GetTick>
 8008496:	4602      	mov	r2, r0
 8008498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800849a:	1ad3      	subs	r3, r2, r3
 800849c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084a0:	d102      	bne.n	80084a8 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80084a2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80084a6:	e05a      	b.n	800855e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084ae:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d0cf      	beq.n	8008456 <SD_FindSCR+0x96>
 80084b6:	e000      	b.n	80084ba <SD_FindSCR+0xfa>
      break;
 80084b8:	bf00      	nop
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084c0:	f003 0308 	and.w	r3, r3, #8
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d005      	beq.n	80084d4 <SD_FindSCR+0x114>
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	2208      	movs	r2, #8
 80084ce:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80084d0:	2308      	movs	r3, #8
 80084d2:	e044      	b.n	800855e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084da:	f003 0302 	and.w	r3, r3, #2
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d005      	beq.n	80084ee <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	2202      	movs	r2, #2
 80084e8:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80084ea:	2302      	movs	r3, #2
 80084ec:	e037      	b.n	800855e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084f4:	f003 0320 	and.w	r3, r3, #32
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d005      	beq.n	8008508 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2220      	movs	r2, #32
 8008502:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008504:	2320      	movs	r3, #32
 8008506:	e02a      	b.n	800855e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008510:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	061a      	lsls	r2, r3, #24
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	021b      	lsls	r3, r3, #8
 800851a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800851e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	0a1b      	lsrs	r3, r3, #8
 8008524:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008528:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	0e1b      	lsrs	r3, r3, #24
 800852e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008532:	601a      	str	r2, [r3, #0]
    scr++;
 8008534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008536:	3304      	adds	r3, #4
 8008538:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	061a      	lsls	r2, r3, #24
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	021b      	lsls	r3, r3, #8
 8008542:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008546:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	0a1b      	lsrs	r3, r3, #8
 800854c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008550:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	0e1b      	lsrs	r3, r3, #24
 8008556:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800855a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800855c:	2300      	movs	r3, #0
}
 800855e:	4618      	mov	r0, r3
 8008560:	373c      	adds	r7, #60	@ 0x3c
 8008562:	46bd      	mov	sp, r7
 8008564:	bd90      	pop	{r4, r7, pc}

08008566 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8008566:	b580      	push	{r7, lr}
 8008568:	b082      	sub	sp, #8
 800856a:	af00      	add	r7, sp, #0
 800856c:	6078      	str	r0, [r7, #4]
 800856e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d101      	bne.n	800857a <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008576:	2301      	movs	r3, #1
 8008578:	e025      	b.n	80085c6 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008580:	b2db      	uxtb	r3, r3
 8008582:	2b00      	cmp	r3, #0
 8008584:	d106      	bne.n	8008594 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2200      	movs	r2, #0
 800858a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f7fa fa8a 	bl	8002aa8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2202      	movs	r2, #2
 8008598:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681a      	ldr	r2, [r3, #0]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	3304      	adds	r3, #4
 80085a4:	4619      	mov	r1, r3
 80085a6:	4610      	mov	r0, r2
 80085a8:	f001 fd70 	bl	800a08c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6818      	ldr	r0, [r3, #0]
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	461a      	mov	r2, r3
 80085b6:	6839      	ldr	r1, [r7, #0]
 80085b8:	f001 fdc5 	bl	800a146 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2201      	movs	r2, #1
 80085c0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80085c4:	2300      	movs	r3, #0
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3708      	adds	r7, #8
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}

080085ce <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80085ce:	b580      	push	{r7, lr}
 80085d0:	b082      	sub	sp, #8
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d101      	bne.n	80085e0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80085dc:	2301      	movs	r3, #1
 80085de:	e041      	b.n	8008664 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80085e6:	b2db      	uxtb	r3, r3
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d106      	bne.n	80085fa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2200      	movs	r2, #0
 80085f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f7fa f8c1 	bl	800277c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2202      	movs	r2, #2
 80085fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681a      	ldr	r2, [r3, #0]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	3304      	adds	r3, #4
 800860a:	4619      	mov	r1, r3
 800860c:	4610      	mov	r0, r2
 800860e:	f000 fae5 	bl	8008bdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2201      	movs	r2, #1
 8008616:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2201      	movs	r2, #1
 800861e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2201      	movs	r2, #1
 8008626:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2201      	movs	r2, #1
 800862e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2201      	movs	r2, #1
 8008636:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2201      	movs	r2, #1
 800863e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2201      	movs	r2, #1
 8008646:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2201      	movs	r2, #1
 800864e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2201      	movs	r2, #1
 8008656:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2201      	movs	r2, #1
 800865e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008662:	2300      	movs	r3, #0
}
 8008664:	4618      	mov	r0, r3
 8008666:	3708      	adds	r7, #8
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800866c:	b480      	push	{r7}
 800866e:	b085      	sub	sp, #20
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800867a:	b2db      	uxtb	r3, r3
 800867c:	2b01      	cmp	r3, #1
 800867e:	d001      	beq.n	8008684 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008680:	2301      	movs	r3, #1
 8008682:	e046      	b.n	8008712 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2202      	movs	r2, #2
 8008688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a23      	ldr	r2, [pc, #140]	@ (8008720 <HAL_TIM_Base_Start+0xb4>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d022      	beq.n	80086dc <HAL_TIM_Base_Start+0x70>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800869e:	d01d      	beq.n	80086dc <HAL_TIM_Base_Start+0x70>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a1f      	ldr	r2, [pc, #124]	@ (8008724 <HAL_TIM_Base_Start+0xb8>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d018      	beq.n	80086dc <HAL_TIM_Base_Start+0x70>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a1e      	ldr	r2, [pc, #120]	@ (8008728 <HAL_TIM_Base_Start+0xbc>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d013      	beq.n	80086dc <HAL_TIM_Base_Start+0x70>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a1c      	ldr	r2, [pc, #112]	@ (800872c <HAL_TIM_Base_Start+0xc0>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d00e      	beq.n	80086dc <HAL_TIM_Base_Start+0x70>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a1b      	ldr	r2, [pc, #108]	@ (8008730 <HAL_TIM_Base_Start+0xc4>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d009      	beq.n	80086dc <HAL_TIM_Base_Start+0x70>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a19      	ldr	r2, [pc, #100]	@ (8008734 <HAL_TIM_Base_Start+0xc8>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d004      	beq.n	80086dc <HAL_TIM_Base_Start+0x70>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a18      	ldr	r2, [pc, #96]	@ (8008738 <HAL_TIM_Base_Start+0xcc>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d111      	bne.n	8008700 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	689b      	ldr	r3, [r3, #8]
 80086e2:	f003 0307 	and.w	r3, r3, #7
 80086e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2b06      	cmp	r3, #6
 80086ec:	d010      	beq.n	8008710 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f042 0201 	orr.w	r2, r2, #1
 80086fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086fe:	e007      	b.n	8008710 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	681a      	ldr	r2, [r3, #0]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f042 0201 	orr.w	r2, r2, #1
 800870e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008710:	2300      	movs	r3, #0
}
 8008712:	4618      	mov	r0, r3
 8008714:	3714      	adds	r7, #20
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr
 800871e:	bf00      	nop
 8008720:	40010000 	.word	0x40010000
 8008724:	40000400 	.word	0x40000400
 8008728:	40000800 	.word	0x40000800
 800872c:	40000c00 	.word	0x40000c00
 8008730:	40010400 	.word	0x40010400
 8008734:	40014000 	.word	0x40014000
 8008738:	40001800 	.word	0x40001800

0800873c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800873c:	b480      	push	{r7}
 800873e:	b085      	sub	sp, #20
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800874a:	b2db      	uxtb	r3, r3
 800874c:	2b01      	cmp	r3, #1
 800874e:	d001      	beq.n	8008754 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008750:	2301      	movs	r3, #1
 8008752:	e04e      	b.n	80087f2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2202      	movs	r2, #2
 8008758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	68da      	ldr	r2, [r3, #12]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f042 0201 	orr.w	r2, r2, #1
 800876a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a23      	ldr	r2, [pc, #140]	@ (8008800 <HAL_TIM_Base_Start_IT+0xc4>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d022      	beq.n	80087bc <HAL_TIM_Base_Start_IT+0x80>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800877e:	d01d      	beq.n	80087bc <HAL_TIM_Base_Start_IT+0x80>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a1f      	ldr	r2, [pc, #124]	@ (8008804 <HAL_TIM_Base_Start_IT+0xc8>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d018      	beq.n	80087bc <HAL_TIM_Base_Start_IT+0x80>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a1e      	ldr	r2, [pc, #120]	@ (8008808 <HAL_TIM_Base_Start_IT+0xcc>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d013      	beq.n	80087bc <HAL_TIM_Base_Start_IT+0x80>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4a1c      	ldr	r2, [pc, #112]	@ (800880c <HAL_TIM_Base_Start_IT+0xd0>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d00e      	beq.n	80087bc <HAL_TIM_Base_Start_IT+0x80>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a1b      	ldr	r2, [pc, #108]	@ (8008810 <HAL_TIM_Base_Start_IT+0xd4>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d009      	beq.n	80087bc <HAL_TIM_Base_Start_IT+0x80>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a19      	ldr	r2, [pc, #100]	@ (8008814 <HAL_TIM_Base_Start_IT+0xd8>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d004      	beq.n	80087bc <HAL_TIM_Base_Start_IT+0x80>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a18      	ldr	r2, [pc, #96]	@ (8008818 <HAL_TIM_Base_Start_IT+0xdc>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d111      	bne.n	80087e0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	689b      	ldr	r3, [r3, #8]
 80087c2:	f003 0307 	and.w	r3, r3, #7
 80087c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	2b06      	cmp	r3, #6
 80087cc:	d010      	beq.n	80087f0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	681a      	ldr	r2, [r3, #0]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f042 0201 	orr.w	r2, r2, #1
 80087dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087de:	e007      	b.n	80087f0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	681a      	ldr	r2, [r3, #0]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f042 0201 	orr.w	r2, r2, #1
 80087ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80087f0:	2300      	movs	r3, #0
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3714      	adds	r7, #20
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr
 80087fe:	bf00      	nop
 8008800:	40010000 	.word	0x40010000
 8008804:	40000400 	.word	0x40000400
 8008808:	40000800 	.word	0x40000800
 800880c:	40000c00 	.word	0x40000c00
 8008810:	40010400 	.word	0x40010400
 8008814:	40014000 	.word	0x40014000
 8008818:	40001800 	.word	0x40001800

0800881c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b084      	sub	sp, #16
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	68db      	ldr	r3, [r3, #12]
 800882a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	691b      	ldr	r3, [r3, #16]
 8008832:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	f003 0302 	and.w	r3, r3, #2
 800883a:	2b00      	cmp	r3, #0
 800883c:	d020      	beq.n	8008880 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	f003 0302 	and.w	r3, r3, #2
 8008844:	2b00      	cmp	r3, #0
 8008846:	d01b      	beq.n	8008880 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f06f 0202 	mvn.w	r2, #2
 8008850:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2201      	movs	r2, #1
 8008856:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	699b      	ldr	r3, [r3, #24]
 800885e:	f003 0303 	and.w	r3, r3, #3
 8008862:	2b00      	cmp	r3, #0
 8008864:	d003      	beq.n	800886e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f000 f999 	bl	8008b9e <HAL_TIM_IC_CaptureCallback>
 800886c:	e005      	b.n	800887a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f000 f98b 	bl	8008b8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f000 f99c 	bl	8008bb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2200      	movs	r2, #0
 800887e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	f003 0304 	and.w	r3, r3, #4
 8008886:	2b00      	cmp	r3, #0
 8008888:	d020      	beq.n	80088cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	f003 0304 	and.w	r3, r3, #4
 8008890:	2b00      	cmp	r3, #0
 8008892:	d01b      	beq.n	80088cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f06f 0204 	mvn.w	r2, #4
 800889c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2202      	movs	r2, #2
 80088a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	699b      	ldr	r3, [r3, #24]
 80088aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d003      	beq.n	80088ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f000 f973 	bl	8008b9e <HAL_TIM_IC_CaptureCallback>
 80088b8:	e005      	b.n	80088c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f000 f965 	bl	8008b8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f000 f976 	bl	8008bb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2200      	movs	r2, #0
 80088ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	f003 0308 	and.w	r3, r3, #8
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d020      	beq.n	8008918 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	f003 0308 	and.w	r3, r3, #8
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d01b      	beq.n	8008918 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f06f 0208 	mvn.w	r2, #8
 80088e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2204      	movs	r2, #4
 80088ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	69db      	ldr	r3, [r3, #28]
 80088f6:	f003 0303 	and.w	r3, r3, #3
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d003      	beq.n	8008906 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f000 f94d 	bl	8008b9e <HAL_TIM_IC_CaptureCallback>
 8008904:	e005      	b.n	8008912 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f000 f93f 	bl	8008b8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f000 f950 	bl	8008bb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2200      	movs	r2, #0
 8008916:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	f003 0310 	and.w	r3, r3, #16
 800891e:	2b00      	cmp	r3, #0
 8008920:	d020      	beq.n	8008964 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	f003 0310 	and.w	r3, r3, #16
 8008928:	2b00      	cmp	r3, #0
 800892a:	d01b      	beq.n	8008964 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f06f 0210 	mvn.w	r2, #16
 8008934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2208      	movs	r2, #8
 800893a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	69db      	ldr	r3, [r3, #28]
 8008942:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008946:	2b00      	cmp	r3, #0
 8008948:	d003      	beq.n	8008952 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f000 f927 	bl	8008b9e <HAL_TIM_IC_CaptureCallback>
 8008950:	e005      	b.n	800895e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f000 f919 	bl	8008b8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f000 f92a 	bl	8008bb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2200      	movs	r2, #0
 8008962:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	f003 0301 	and.w	r3, r3, #1
 800896a:	2b00      	cmp	r3, #0
 800896c:	d00c      	beq.n	8008988 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	f003 0301 	and.w	r3, r3, #1
 8008974:	2b00      	cmp	r3, #0
 8008976:	d007      	beq.n	8008988 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f06f 0201 	mvn.w	r2, #1
 8008980:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f7f9 fb9c 	bl	80020c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800898e:	2b00      	cmp	r3, #0
 8008990:	d00c      	beq.n	80089ac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008998:	2b00      	cmp	r3, #0
 800899a:	d007      	beq.n	80089ac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80089a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 fae4 	bl	8008f74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d00c      	beq.n	80089d0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d007      	beq.n	80089d0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80089c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 f8fb 	bl	8008bc6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	f003 0320 	and.w	r3, r3, #32
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d00c      	beq.n	80089f4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	f003 0320 	and.w	r3, r3, #32
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d007      	beq.n	80089f4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f06f 0220 	mvn.w	r2, #32
 80089ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f000 fab6 	bl	8008f60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80089f4:	bf00      	nop
 80089f6:	3710      	adds	r7, #16
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b084      	sub	sp, #16
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a06:	2300      	movs	r3, #0
 8008a08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d101      	bne.n	8008a18 <HAL_TIM_ConfigClockSource+0x1c>
 8008a14:	2302      	movs	r3, #2
 8008a16:	e0b4      	b.n	8008b82 <HAL_TIM_ConfigClockSource+0x186>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2202      	movs	r2, #2
 8008a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	689b      	ldr	r3, [r3, #8]
 8008a2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008a36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008a3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	68ba      	ldr	r2, [r7, #8]
 8008a46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a50:	d03e      	beq.n	8008ad0 <HAL_TIM_ConfigClockSource+0xd4>
 8008a52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a56:	f200 8087 	bhi.w	8008b68 <HAL_TIM_ConfigClockSource+0x16c>
 8008a5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a5e:	f000 8086 	beq.w	8008b6e <HAL_TIM_ConfigClockSource+0x172>
 8008a62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a66:	d87f      	bhi.n	8008b68 <HAL_TIM_ConfigClockSource+0x16c>
 8008a68:	2b70      	cmp	r3, #112	@ 0x70
 8008a6a:	d01a      	beq.n	8008aa2 <HAL_TIM_ConfigClockSource+0xa6>
 8008a6c:	2b70      	cmp	r3, #112	@ 0x70
 8008a6e:	d87b      	bhi.n	8008b68 <HAL_TIM_ConfigClockSource+0x16c>
 8008a70:	2b60      	cmp	r3, #96	@ 0x60
 8008a72:	d050      	beq.n	8008b16 <HAL_TIM_ConfigClockSource+0x11a>
 8008a74:	2b60      	cmp	r3, #96	@ 0x60
 8008a76:	d877      	bhi.n	8008b68 <HAL_TIM_ConfigClockSource+0x16c>
 8008a78:	2b50      	cmp	r3, #80	@ 0x50
 8008a7a:	d03c      	beq.n	8008af6 <HAL_TIM_ConfigClockSource+0xfa>
 8008a7c:	2b50      	cmp	r3, #80	@ 0x50
 8008a7e:	d873      	bhi.n	8008b68 <HAL_TIM_ConfigClockSource+0x16c>
 8008a80:	2b40      	cmp	r3, #64	@ 0x40
 8008a82:	d058      	beq.n	8008b36 <HAL_TIM_ConfigClockSource+0x13a>
 8008a84:	2b40      	cmp	r3, #64	@ 0x40
 8008a86:	d86f      	bhi.n	8008b68 <HAL_TIM_ConfigClockSource+0x16c>
 8008a88:	2b30      	cmp	r3, #48	@ 0x30
 8008a8a:	d064      	beq.n	8008b56 <HAL_TIM_ConfigClockSource+0x15a>
 8008a8c:	2b30      	cmp	r3, #48	@ 0x30
 8008a8e:	d86b      	bhi.n	8008b68 <HAL_TIM_ConfigClockSource+0x16c>
 8008a90:	2b20      	cmp	r3, #32
 8008a92:	d060      	beq.n	8008b56 <HAL_TIM_ConfigClockSource+0x15a>
 8008a94:	2b20      	cmp	r3, #32
 8008a96:	d867      	bhi.n	8008b68 <HAL_TIM_ConfigClockSource+0x16c>
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d05c      	beq.n	8008b56 <HAL_TIM_ConfigClockSource+0x15a>
 8008a9c:	2b10      	cmp	r3, #16
 8008a9e:	d05a      	beq.n	8008b56 <HAL_TIM_ConfigClockSource+0x15a>
 8008aa0:	e062      	b.n	8008b68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008ab2:	f000 f9b9 	bl	8008e28 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	689b      	ldr	r3, [r3, #8]
 8008abc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008ac4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	68ba      	ldr	r2, [r7, #8]
 8008acc:	609a      	str	r2, [r3, #8]
      break;
 8008ace:	e04f      	b.n	8008b70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008ae0:	f000 f9a2 	bl	8008e28 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	689a      	ldr	r2, [r3, #8]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008af2:	609a      	str	r2, [r3, #8]
      break;
 8008af4:	e03c      	b.n	8008b70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b02:	461a      	mov	r2, r3
 8008b04:	f000 f916 	bl	8008d34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	2150      	movs	r1, #80	@ 0x50
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f000 f96f 	bl	8008df2 <TIM_ITRx_SetConfig>
      break;
 8008b14:	e02c      	b.n	8008b70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b22:	461a      	mov	r2, r3
 8008b24:	f000 f935 	bl	8008d92 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	2160      	movs	r1, #96	@ 0x60
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f000 f95f 	bl	8008df2 <TIM_ITRx_SetConfig>
      break;
 8008b34:	e01c      	b.n	8008b70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b42:	461a      	mov	r2, r3
 8008b44:	f000 f8f6 	bl	8008d34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	2140      	movs	r1, #64	@ 0x40
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f000 f94f 	bl	8008df2 <TIM_ITRx_SetConfig>
      break;
 8008b54:	e00c      	b.n	8008b70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681a      	ldr	r2, [r3, #0]
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	4619      	mov	r1, r3
 8008b60:	4610      	mov	r0, r2
 8008b62:	f000 f946 	bl	8008df2 <TIM_ITRx_SetConfig>
      break;
 8008b66:	e003      	b.n	8008b70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008b68:	2301      	movs	r3, #1
 8008b6a:	73fb      	strb	r3, [r7, #15]
      break;
 8008b6c:	e000      	b.n	8008b70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008b6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2201      	movs	r2, #1
 8008b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3710      	adds	r7, #16
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}

08008b8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b8a:	b480      	push	{r7}
 8008b8c:	b083      	sub	sp, #12
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008b92:	bf00      	nop
 8008b94:	370c      	adds	r7, #12
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr

08008b9e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008b9e:	b480      	push	{r7}
 8008ba0:	b083      	sub	sp, #12
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008ba6:	bf00      	nop
 8008ba8:	370c      	adds	r7, #12
 8008baa:	46bd      	mov	sp, r7
 8008bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb0:	4770      	bx	lr

08008bb2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008bb2:	b480      	push	{r7}
 8008bb4:	b083      	sub	sp, #12
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008bba:	bf00      	nop
 8008bbc:	370c      	adds	r7, #12
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc4:	4770      	bx	lr

08008bc6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008bc6:	b480      	push	{r7}
 8008bc8:	b083      	sub	sp, #12
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008bce:	bf00      	nop
 8008bd0:	370c      	adds	r7, #12
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd8:	4770      	bx	lr
	...

08008bdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b085      	sub	sp, #20
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	4a46      	ldr	r2, [pc, #280]	@ (8008d08 <TIM_Base_SetConfig+0x12c>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d013      	beq.n	8008c1c <TIM_Base_SetConfig+0x40>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bfa:	d00f      	beq.n	8008c1c <TIM_Base_SetConfig+0x40>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	4a43      	ldr	r2, [pc, #268]	@ (8008d0c <TIM_Base_SetConfig+0x130>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d00b      	beq.n	8008c1c <TIM_Base_SetConfig+0x40>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	4a42      	ldr	r2, [pc, #264]	@ (8008d10 <TIM_Base_SetConfig+0x134>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d007      	beq.n	8008c1c <TIM_Base_SetConfig+0x40>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	4a41      	ldr	r2, [pc, #260]	@ (8008d14 <TIM_Base_SetConfig+0x138>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d003      	beq.n	8008c1c <TIM_Base_SetConfig+0x40>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	4a40      	ldr	r2, [pc, #256]	@ (8008d18 <TIM_Base_SetConfig+0x13c>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d108      	bne.n	8008c2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	68fa      	ldr	r2, [r7, #12]
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	4a35      	ldr	r2, [pc, #212]	@ (8008d08 <TIM_Base_SetConfig+0x12c>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d02b      	beq.n	8008c8e <TIM_Base_SetConfig+0xb2>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c3c:	d027      	beq.n	8008c8e <TIM_Base_SetConfig+0xb2>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	4a32      	ldr	r2, [pc, #200]	@ (8008d0c <TIM_Base_SetConfig+0x130>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d023      	beq.n	8008c8e <TIM_Base_SetConfig+0xb2>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	4a31      	ldr	r2, [pc, #196]	@ (8008d10 <TIM_Base_SetConfig+0x134>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d01f      	beq.n	8008c8e <TIM_Base_SetConfig+0xb2>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	4a30      	ldr	r2, [pc, #192]	@ (8008d14 <TIM_Base_SetConfig+0x138>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d01b      	beq.n	8008c8e <TIM_Base_SetConfig+0xb2>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	4a2f      	ldr	r2, [pc, #188]	@ (8008d18 <TIM_Base_SetConfig+0x13c>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d017      	beq.n	8008c8e <TIM_Base_SetConfig+0xb2>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	4a2e      	ldr	r2, [pc, #184]	@ (8008d1c <TIM_Base_SetConfig+0x140>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d013      	beq.n	8008c8e <TIM_Base_SetConfig+0xb2>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	4a2d      	ldr	r2, [pc, #180]	@ (8008d20 <TIM_Base_SetConfig+0x144>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d00f      	beq.n	8008c8e <TIM_Base_SetConfig+0xb2>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	4a2c      	ldr	r2, [pc, #176]	@ (8008d24 <TIM_Base_SetConfig+0x148>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d00b      	beq.n	8008c8e <TIM_Base_SetConfig+0xb2>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	4a2b      	ldr	r2, [pc, #172]	@ (8008d28 <TIM_Base_SetConfig+0x14c>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d007      	beq.n	8008c8e <TIM_Base_SetConfig+0xb2>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	4a2a      	ldr	r2, [pc, #168]	@ (8008d2c <TIM_Base_SetConfig+0x150>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d003      	beq.n	8008c8e <TIM_Base_SetConfig+0xb2>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	4a29      	ldr	r2, [pc, #164]	@ (8008d30 <TIM_Base_SetConfig+0x154>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d108      	bne.n	8008ca0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	68db      	ldr	r3, [r3, #12]
 8008c9a:	68fa      	ldr	r2, [r7, #12]
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	695b      	ldr	r3, [r3, #20]
 8008caa:	4313      	orrs	r3, r2
 8008cac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	68fa      	ldr	r2, [r7, #12]
 8008cb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	689a      	ldr	r2, [r3, #8]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	681a      	ldr	r2, [r3, #0]
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	4a10      	ldr	r2, [pc, #64]	@ (8008d08 <TIM_Base_SetConfig+0x12c>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d003      	beq.n	8008cd4 <TIM_Base_SetConfig+0xf8>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	4a12      	ldr	r2, [pc, #72]	@ (8008d18 <TIM_Base_SetConfig+0x13c>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d103      	bne.n	8008cdc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	691a      	ldr	r2, [r3, #16]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2201      	movs	r2, #1
 8008ce0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	691b      	ldr	r3, [r3, #16]
 8008ce6:	f003 0301 	and.w	r3, r3, #1
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	d105      	bne.n	8008cfa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	691b      	ldr	r3, [r3, #16]
 8008cf2:	f023 0201 	bic.w	r2, r3, #1
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	611a      	str	r2, [r3, #16]
  }
}
 8008cfa:	bf00      	nop
 8008cfc:	3714      	adds	r7, #20
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d04:	4770      	bx	lr
 8008d06:	bf00      	nop
 8008d08:	40010000 	.word	0x40010000
 8008d0c:	40000400 	.word	0x40000400
 8008d10:	40000800 	.word	0x40000800
 8008d14:	40000c00 	.word	0x40000c00
 8008d18:	40010400 	.word	0x40010400
 8008d1c:	40014000 	.word	0x40014000
 8008d20:	40014400 	.word	0x40014400
 8008d24:	40014800 	.word	0x40014800
 8008d28:	40001800 	.word	0x40001800
 8008d2c:	40001c00 	.word	0x40001c00
 8008d30:	40002000 	.word	0x40002000

08008d34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b087      	sub	sp, #28
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	60f8      	str	r0, [r7, #12]
 8008d3c:	60b9      	str	r1, [r7, #8]
 8008d3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	6a1b      	ldr	r3, [r3, #32]
 8008d44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	6a1b      	ldr	r3, [r3, #32]
 8008d4a:	f023 0201 	bic.w	r2, r3, #1
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	699b      	ldr	r3, [r3, #24]
 8008d56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008d5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	011b      	lsls	r3, r3, #4
 8008d64:	693a      	ldr	r2, [r7, #16]
 8008d66:	4313      	orrs	r3, r2
 8008d68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	f023 030a 	bic.w	r3, r3, #10
 8008d70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008d72:	697a      	ldr	r2, [r7, #20]
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	4313      	orrs	r3, r2
 8008d78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	693a      	ldr	r2, [r7, #16]
 8008d7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	697a      	ldr	r2, [r7, #20]
 8008d84:	621a      	str	r2, [r3, #32]
}
 8008d86:	bf00      	nop
 8008d88:	371c      	adds	r7, #28
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d90:	4770      	bx	lr

08008d92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d92:	b480      	push	{r7}
 8008d94:	b087      	sub	sp, #28
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	60f8      	str	r0, [r7, #12]
 8008d9a:	60b9      	str	r1, [r7, #8]
 8008d9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	6a1b      	ldr	r3, [r3, #32]
 8008da2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	6a1b      	ldr	r3, [r3, #32]
 8008da8:	f023 0210 	bic.w	r2, r3, #16
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	699b      	ldr	r3, [r3, #24]
 8008db4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008db6:	693b      	ldr	r3, [r7, #16]
 8008db8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008dbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	031b      	lsls	r3, r3, #12
 8008dc2:	693a      	ldr	r2, [r7, #16]
 8008dc4:	4313      	orrs	r3, r2
 8008dc6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008dce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	011b      	lsls	r3, r3, #4
 8008dd4:	697a      	ldr	r2, [r7, #20]
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	693a      	ldr	r2, [r7, #16]
 8008dde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	697a      	ldr	r2, [r7, #20]
 8008de4:	621a      	str	r2, [r3, #32]
}
 8008de6:	bf00      	nop
 8008de8:	371c      	adds	r7, #28
 8008dea:	46bd      	mov	sp, r7
 8008dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df0:	4770      	bx	lr

08008df2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008df2:	b480      	push	{r7}
 8008df4:	b085      	sub	sp, #20
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	6078      	str	r0, [r7, #4]
 8008dfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	689b      	ldr	r3, [r3, #8]
 8008e00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008e0a:	683a      	ldr	r2, [r7, #0]
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	f043 0307 	orr.w	r3, r3, #7
 8008e14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	68fa      	ldr	r2, [r7, #12]
 8008e1a:	609a      	str	r2, [r3, #8]
}
 8008e1c:	bf00      	nop
 8008e1e:	3714      	adds	r7, #20
 8008e20:	46bd      	mov	sp, r7
 8008e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e26:	4770      	bx	lr

08008e28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b087      	sub	sp, #28
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	60f8      	str	r0, [r7, #12]
 8008e30:	60b9      	str	r1, [r7, #8]
 8008e32:	607a      	str	r2, [r7, #4]
 8008e34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	689b      	ldr	r3, [r3, #8]
 8008e3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008e42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	021a      	lsls	r2, r3, #8
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	431a      	orrs	r2, r3
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	697a      	ldr	r2, [r7, #20]
 8008e52:	4313      	orrs	r3, r2
 8008e54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	697a      	ldr	r2, [r7, #20]
 8008e5a:	609a      	str	r2, [r3, #8]
}
 8008e5c:	bf00      	nop
 8008e5e:	371c      	adds	r7, #28
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr

08008e68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b085      	sub	sp, #20
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008e78:	2b01      	cmp	r3, #1
 8008e7a:	d101      	bne.n	8008e80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e7c:	2302      	movs	r3, #2
 8008e7e:	e05a      	b.n	8008f36 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2201      	movs	r2, #1
 8008e84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2202      	movs	r2, #2
 8008e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	685b      	ldr	r3, [r3, #4]
 8008e96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	689b      	ldr	r3, [r3, #8]
 8008e9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ea6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	68fa      	ldr	r2, [r7, #12]
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	68fa      	ldr	r2, [r7, #12]
 8008eb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4a21      	ldr	r2, [pc, #132]	@ (8008f44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d022      	beq.n	8008f0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ecc:	d01d      	beq.n	8008f0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	4a1d      	ldr	r2, [pc, #116]	@ (8008f48 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d018      	beq.n	8008f0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4a1b      	ldr	r2, [pc, #108]	@ (8008f4c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d013      	beq.n	8008f0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4a1a      	ldr	r2, [pc, #104]	@ (8008f50 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d00e      	beq.n	8008f0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4a18      	ldr	r2, [pc, #96]	@ (8008f54 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d009      	beq.n	8008f0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4a17      	ldr	r2, [pc, #92]	@ (8008f58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d004      	beq.n	8008f0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4a15      	ldr	r2, [pc, #84]	@ (8008f5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d10c      	bne.n	8008f24 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008f10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	685b      	ldr	r3, [r3, #4]
 8008f16:	68ba      	ldr	r2, [r7, #8]
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	68ba      	ldr	r2, [r7, #8]
 8008f22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2201      	movs	r2, #1
 8008f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008f34:	2300      	movs	r3, #0
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3714      	adds	r7, #20
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f40:	4770      	bx	lr
 8008f42:	bf00      	nop
 8008f44:	40010000 	.word	0x40010000
 8008f48:	40000400 	.word	0x40000400
 8008f4c:	40000800 	.word	0x40000800
 8008f50:	40000c00 	.word	0x40000c00
 8008f54:	40010400 	.word	0x40010400
 8008f58:	40014000 	.word	0x40014000
 8008f5c:	40001800 	.word	0x40001800

08008f60 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b083      	sub	sp, #12
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008f68:	bf00      	nop
 8008f6a:	370c      	adds	r7, #12
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f72:	4770      	bx	lr

08008f74 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008f74:	b480      	push	{r7}
 8008f76:	b083      	sub	sp, #12
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008f7c:	bf00      	nop
 8008f7e:	370c      	adds	r7, #12
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr

08008f88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b082      	sub	sp, #8
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d101      	bne.n	8008f9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008f96:	2301      	movs	r3, #1
 8008f98:	e042      	b.n	8009020 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008fa0:	b2db      	uxtb	r3, r3
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d106      	bne.n	8008fb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f7f9 fc1a 	bl	80027e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2224      	movs	r2, #36	@ 0x24
 8008fb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	68da      	ldr	r2, [r3, #12]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008fca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f000 fde9 	bl	8009ba4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	691a      	ldr	r2, [r3, #16]
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008fe0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	695a      	ldr	r2, [r3, #20]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008ff0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	68da      	ldr	r2, [r3, #12]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009000:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2200      	movs	r2, #0
 8009006:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2220      	movs	r2, #32
 800900c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2220      	movs	r2, #32
 8009014:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2200      	movs	r2, #0
 800901c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800901e:	2300      	movs	r3, #0
}
 8009020:	4618      	mov	r0, r3
 8009022:	3708      	adds	r7, #8
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}

08009028 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b08c      	sub	sp, #48	@ 0x30
 800902c:	af00      	add	r7, sp, #0
 800902e:	60f8      	str	r0, [r7, #12]
 8009030:	60b9      	str	r1, [r7, #8]
 8009032:	4613      	mov	r3, r2
 8009034:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800903c:	b2db      	uxtb	r3, r3
 800903e:	2b20      	cmp	r3, #32
 8009040:	d156      	bne.n	80090f0 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d002      	beq.n	800904e <HAL_UART_Transmit_DMA+0x26>
 8009048:	88fb      	ldrh	r3, [r7, #6]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d101      	bne.n	8009052 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800904e:	2301      	movs	r3, #1
 8009050:	e04f      	b.n	80090f2 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8009052:	68ba      	ldr	r2, [r7, #8]
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	88fa      	ldrh	r2, [r7, #6]
 800905c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	88fa      	ldrh	r2, [r7, #6]
 8009062:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2200      	movs	r2, #0
 8009068:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	2221      	movs	r2, #33	@ 0x21
 800906e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009076:	4a21      	ldr	r2, [pc, #132]	@ (80090fc <HAL_UART_Transmit_DMA+0xd4>)
 8009078:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800907e:	4a20      	ldr	r2, [pc, #128]	@ (8009100 <HAL_UART_Transmit_DMA+0xd8>)
 8009080:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009086:	4a1f      	ldr	r2, [pc, #124]	@ (8009104 <HAL_UART_Transmit_DMA+0xdc>)
 8009088:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800908e:	2200      	movs	r2, #0
 8009090:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8009092:	f107 0308 	add.w	r3, r7, #8
 8009096:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800909c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800909e:	6819      	ldr	r1, [r3, #0]
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	3304      	adds	r3, #4
 80090a6:	461a      	mov	r2, r3
 80090a8:	88fb      	ldrh	r3, [r7, #6]
 80090aa:	f7fa fd9b 	bl	8003be4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80090b6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	3314      	adds	r3, #20
 80090be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090c0:	69bb      	ldr	r3, [r7, #24]
 80090c2:	e853 3f00 	ldrex	r3, [r3]
 80090c6:	617b      	str	r3, [r7, #20]
   return(result);
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	3314      	adds	r3, #20
 80090d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80090d8:	627a      	str	r2, [r7, #36]	@ 0x24
 80090da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090dc:	6a39      	ldr	r1, [r7, #32]
 80090de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80090e0:	e841 2300 	strex	r3, r2, [r1]
 80090e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80090e6:	69fb      	ldr	r3, [r7, #28]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d1e5      	bne.n	80090b8 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80090ec:	2300      	movs	r3, #0
 80090ee:	e000      	b.n	80090f2 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80090f0:	2302      	movs	r3, #2
  }
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3730      	adds	r7, #48	@ 0x30
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}
 80090fa:	bf00      	nop
 80090fc:	080096d1 	.word	0x080096d1
 8009100:	0800976b 	.word	0x0800976b
 8009104:	08009787 	.word	0x08009787

08009108 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b0ba      	sub	sp, #232	@ 0xe8
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	68db      	ldr	r3, [r3, #12]
 8009120:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	695b      	ldr	r3, [r3, #20]
 800912a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800912e:	2300      	movs	r3, #0
 8009130:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009134:	2300      	movs	r3, #0
 8009136:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800913a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800913e:	f003 030f 	and.w	r3, r3, #15
 8009142:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8009146:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800914a:	2b00      	cmp	r3, #0
 800914c:	d10f      	bne.n	800916e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800914e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009152:	f003 0320 	and.w	r3, r3, #32
 8009156:	2b00      	cmp	r3, #0
 8009158:	d009      	beq.n	800916e <HAL_UART_IRQHandler+0x66>
 800915a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800915e:	f003 0320 	and.w	r3, r3, #32
 8009162:	2b00      	cmp	r3, #0
 8009164:	d003      	beq.n	800916e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f000 fc5e 	bl	8009a28 <UART_Receive_IT>
      return;
 800916c:	e25b      	b.n	8009626 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800916e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009172:	2b00      	cmp	r3, #0
 8009174:	f000 80de 	beq.w	8009334 <HAL_UART_IRQHandler+0x22c>
 8009178:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800917c:	f003 0301 	and.w	r3, r3, #1
 8009180:	2b00      	cmp	r3, #0
 8009182:	d106      	bne.n	8009192 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009188:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800918c:	2b00      	cmp	r3, #0
 800918e:	f000 80d1 	beq.w	8009334 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009196:	f003 0301 	and.w	r3, r3, #1
 800919a:	2b00      	cmp	r3, #0
 800919c:	d00b      	beq.n	80091b6 <HAL_UART_IRQHandler+0xae>
 800919e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d005      	beq.n	80091b6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091ae:	f043 0201 	orr.w	r2, r3, #1
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80091b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091ba:	f003 0304 	and.w	r3, r3, #4
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d00b      	beq.n	80091da <HAL_UART_IRQHandler+0xd2>
 80091c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80091c6:	f003 0301 	and.w	r3, r3, #1
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d005      	beq.n	80091da <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091d2:	f043 0202 	orr.w	r2, r3, #2
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80091da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091de:	f003 0302 	and.w	r3, r3, #2
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d00b      	beq.n	80091fe <HAL_UART_IRQHandler+0xf6>
 80091e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80091ea:	f003 0301 	and.w	r3, r3, #1
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d005      	beq.n	80091fe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091f6:	f043 0204 	orr.w	r2, r3, #4
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80091fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009202:	f003 0308 	and.w	r3, r3, #8
 8009206:	2b00      	cmp	r3, #0
 8009208:	d011      	beq.n	800922e <HAL_UART_IRQHandler+0x126>
 800920a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800920e:	f003 0320 	and.w	r3, r3, #32
 8009212:	2b00      	cmp	r3, #0
 8009214:	d105      	bne.n	8009222 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009216:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800921a:	f003 0301 	and.w	r3, r3, #1
 800921e:	2b00      	cmp	r3, #0
 8009220:	d005      	beq.n	800922e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009226:	f043 0208 	orr.w	r2, r3, #8
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009232:	2b00      	cmp	r3, #0
 8009234:	f000 81f2 	beq.w	800961c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800923c:	f003 0320 	and.w	r3, r3, #32
 8009240:	2b00      	cmp	r3, #0
 8009242:	d008      	beq.n	8009256 <HAL_UART_IRQHandler+0x14e>
 8009244:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009248:	f003 0320 	and.w	r3, r3, #32
 800924c:	2b00      	cmp	r3, #0
 800924e:	d002      	beq.n	8009256 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f000 fbe9 	bl	8009a28 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	695b      	ldr	r3, [r3, #20]
 800925c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009260:	2b40      	cmp	r3, #64	@ 0x40
 8009262:	bf0c      	ite	eq
 8009264:	2301      	moveq	r3, #1
 8009266:	2300      	movne	r3, #0
 8009268:	b2db      	uxtb	r3, r3
 800926a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009272:	f003 0308 	and.w	r3, r3, #8
 8009276:	2b00      	cmp	r3, #0
 8009278:	d103      	bne.n	8009282 <HAL_UART_IRQHandler+0x17a>
 800927a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800927e:	2b00      	cmp	r3, #0
 8009280:	d04f      	beq.n	8009322 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f000 faf1 	bl	800986a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	695b      	ldr	r3, [r3, #20]
 800928e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009292:	2b40      	cmp	r3, #64	@ 0x40
 8009294:	d141      	bne.n	800931a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	3314      	adds	r3, #20
 800929c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80092a4:	e853 3f00 	ldrex	r3, [r3]
 80092a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80092ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80092b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80092b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	3314      	adds	r3, #20
 80092be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80092c2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80092c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80092ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80092d2:	e841 2300 	strex	r3, r2, [r1]
 80092d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80092da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d1d9      	bne.n	8009296 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d013      	beq.n	8009312 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092ee:	4a7e      	ldr	r2, [pc, #504]	@ (80094e8 <HAL_UART_IRQHandler+0x3e0>)
 80092f0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092f6:	4618      	mov	r0, r3
 80092f8:	f7fa fd3c 	bl	8003d74 <HAL_DMA_Abort_IT>
 80092fc:	4603      	mov	r3, r0
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d016      	beq.n	8009330 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009306:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009308:	687a      	ldr	r2, [r7, #4]
 800930a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800930c:	4610      	mov	r0, r2
 800930e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009310:	e00e      	b.n	8009330 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 f9a8 	bl	8009668 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009318:	e00a      	b.n	8009330 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 f9a4 	bl	8009668 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009320:	e006      	b.n	8009330 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 f9a0 	bl	8009668 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2200      	movs	r2, #0
 800932c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800932e:	e175      	b.n	800961c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009330:	bf00      	nop
    return;
 8009332:	e173      	b.n	800961c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009338:	2b01      	cmp	r3, #1
 800933a:	f040 814f 	bne.w	80095dc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800933e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009342:	f003 0310 	and.w	r3, r3, #16
 8009346:	2b00      	cmp	r3, #0
 8009348:	f000 8148 	beq.w	80095dc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800934c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009350:	f003 0310 	and.w	r3, r3, #16
 8009354:	2b00      	cmp	r3, #0
 8009356:	f000 8141 	beq.w	80095dc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800935a:	2300      	movs	r3, #0
 800935c:	60bb      	str	r3, [r7, #8]
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	60bb      	str	r3, [r7, #8]
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	685b      	ldr	r3, [r3, #4]
 800936c:	60bb      	str	r3, [r7, #8]
 800936e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	695b      	ldr	r3, [r3, #20]
 8009376:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800937a:	2b40      	cmp	r3, #64	@ 0x40
 800937c:	f040 80b6 	bne.w	80094ec <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	685b      	ldr	r3, [r3, #4]
 8009388:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800938c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009390:	2b00      	cmp	r3, #0
 8009392:	f000 8145 	beq.w	8009620 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800939a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800939e:	429a      	cmp	r2, r3
 80093a0:	f080 813e 	bcs.w	8009620 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80093aa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093b0:	69db      	ldr	r3, [r3, #28]
 80093b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093b6:	f000 8088 	beq.w	80094ca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	330c      	adds	r3, #12
 80093c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80093c8:	e853 3f00 	ldrex	r3, [r3]
 80093cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80093d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80093d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80093d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	330c      	adds	r3, #12
 80093e2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80093e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80093ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80093f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80093f6:	e841 2300 	strex	r3, r2, [r1]
 80093fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80093fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009402:	2b00      	cmp	r3, #0
 8009404:	d1d9      	bne.n	80093ba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	3314      	adds	r3, #20
 800940c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800940e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009410:	e853 3f00 	ldrex	r3, [r3]
 8009414:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009416:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009418:	f023 0301 	bic.w	r3, r3, #1
 800941c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	3314      	adds	r3, #20
 8009426:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800942a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800942e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009430:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009432:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009436:	e841 2300 	strex	r3, r2, [r1]
 800943a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800943c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800943e:	2b00      	cmp	r3, #0
 8009440:	d1e1      	bne.n	8009406 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	3314      	adds	r3, #20
 8009448:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800944a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800944c:	e853 3f00 	ldrex	r3, [r3]
 8009450:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009452:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009454:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009458:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	3314      	adds	r3, #20
 8009462:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009466:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009468:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800946a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800946c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800946e:	e841 2300 	strex	r3, r2, [r1]
 8009472:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009474:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009476:	2b00      	cmp	r3, #0
 8009478:	d1e3      	bne.n	8009442 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2220      	movs	r2, #32
 800947e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2200      	movs	r2, #0
 8009486:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	330c      	adds	r3, #12
 800948e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009490:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009492:	e853 3f00 	ldrex	r3, [r3]
 8009496:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009498:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800949a:	f023 0310 	bic.w	r3, r3, #16
 800949e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	330c      	adds	r3, #12
 80094a8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80094ac:	65ba      	str	r2, [r7, #88]	@ 0x58
 80094ae:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094b0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80094b2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80094b4:	e841 2300 	strex	r3, r2, [r1]
 80094b8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80094ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d1e3      	bne.n	8009488 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094c4:	4618      	mov	r0, r3
 80094c6:	f7fa fbe5 	bl	8003c94 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2202      	movs	r2, #2
 80094ce:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80094d8:	b29b      	uxth	r3, r3
 80094da:	1ad3      	subs	r3, r2, r3
 80094dc:	b29b      	uxth	r3, r3
 80094de:	4619      	mov	r1, r3
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f000 f8cb 	bl	800967c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80094e6:	e09b      	b.n	8009620 <HAL_UART_IRQHandler+0x518>
 80094e8:	08009931 	.word	0x08009931
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80094f4:	b29b      	uxth	r3, r3
 80094f6:	1ad3      	subs	r3, r2, r3
 80094f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009500:	b29b      	uxth	r3, r3
 8009502:	2b00      	cmp	r3, #0
 8009504:	f000 808e 	beq.w	8009624 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009508:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800950c:	2b00      	cmp	r3, #0
 800950e:	f000 8089 	beq.w	8009624 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	330c      	adds	r3, #12
 8009518:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800951a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800951c:	e853 3f00 	ldrex	r3, [r3]
 8009520:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009522:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009524:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009528:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	330c      	adds	r3, #12
 8009532:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009536:	647a      	str	r2, [r7, #68]	@ 0x44
 8009538:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800953a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800953c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800953e:	e841 2300 	strex	r3, r2, [r1]
 8009542:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009544:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009546:	2b00      	cmp	r3, #0
 8009548:	d1e3      	bne.n	8009512 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	3314      	adds	r3, #20
 8009550:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009554:	e853 3f00 	ldrex	r3, [r3]
 8009558:	623b      	str	r3, [r7, #32]
   return(result);
 800955a:	6a3b      	ldr	r3, [r7, #32]
 800955c:	f023 0301 	bic.w	r3, r3, #1
 8009560:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	3314      	adds	r3, #20
 800956a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800956e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009570:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009572:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009574:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009576:	e841 2300 	strex	r3, r2, [r1]
 800957a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800957c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800957e:	2b00      	cmp	r3, #0
 8009580:	d1e3      	bne.n	800954a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2220      	movs	r2, #32
 8009586:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2200      	movs	r2, #0
 800958e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	330c      	adds	r3, #12
 8009596:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009598:	693b      	ldr	r3, [r7, #16]
 800959a:	e853 3f00 	ldrex	r3, [r3]
 800959e:	60fb      	str	r3, [r7, #12]
   return(result);
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	f023 0310 	bic.w	r3, r3, #16
 80095a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	330c      	adds	r3, #12
 80095b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80095b4:	61fa      	str	r2, [r7, #28]
 80095b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095b8:	69b9      	ldr	r1, [r7, #24]
 80095ba:	69fa      	ldr	r2, [r7, #28]
 80095bc:	e841 2300 	strex	r3, r2, [r1]
 80095c0:	617b      	str	r3, [r7, #20]
   return(result);
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d1e3      	bne.n	8009590 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2202      	movs	r2, #2
 80095cc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80095ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80095d2:	4619      	mov	r1, r3
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f000 f851 	bl	800967c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80095da:	e023      	b.n	8009624 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80095dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d009      	beq.n	80095fc <HAL_UART_IRQHandler+0x4f4>
 80095e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d003      	beq.n	80095fc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f000 f9af 	bl	8009958 <UART_Transmit_IT>
    return;
 80095fa:	e014      	b.n	8009626 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80095fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009600:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009604:	2b00      	cmp	r3, #0
 8009606:	d00e      	beq.n	8009626 <HAL_UART_IRQHandler+0x51e>
 8009608:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800960c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009610:	2b00      	cmp	r3, #0
 8009612:	d008      	beq.n	8009626 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f000 f9ef 	bl	80099f8 <UART_EndTransmit_IT>
    return;
 800961a:	e004      	b.n	8009626 <HAL_UART_IRQHandler+0x51e>
    return;
 800961c:	bf00      	nop
 800961e:	e002      	b.n	8009626 <HAL_UART_IRQHandler+0x51e>
      return;
 8009620:	bf00      	nop
 8009622:	e000      	b.n	8009626 <HAL_UART_IRQHandler+0x51e>
      return;
 8009624:	bf00      	nop
  }
}
 8009626:	37e8      	adds	r7, #232	@ 0xe8
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}

0800962c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800962c:	b480      	push	{r7}
 800962e:	b083      	sub	sp, #12
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009634:	bf00      	nop
 8009636:	370c      	adds	r7, #12
 8009638:	46bd      	mov	sp, r7
 800963a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963e:	4770      	bx	lr

08009640 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009640:	b480      	push	{r7}
 8009642:	b083      	sub	sp, #12
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009648:	bf00      	nop
 800964a:	370c      	adds	r7, #12
 800964c:	46bd      	mov	sp, r7
 800964e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009652:	4770      	bx	lr

08009654 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009654:	b480      	push	{r7}
 8009656:	b083      	sub	sp, #12
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800965c:	bf00      	nop
 800965e:	370c      	adds	r7, #12
 8009660:	46bd      	mov	sp, r7
 8009662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009666:	4770      	bx	lr

08009668 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009668:	b480      	push	{r7}
 800966a:	b083      	sub	sp, #12
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009670:	bf00      	nop
 8009672:	370c      	adds	r7, #12
 8009674:	46bd      	mov	sp, r7
 8009676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967a:	4770      	bx	lr

0800967c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800967c:	b480      	push	{r7}
 800967e:	b083      	sub	sp, #12
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	460b      	mov	r3, r1
 8009686:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009688:	bf00      	nop
 800968a:	370c      	adds	r7, #12
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr

08009694 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8009694:	b480      	push	{r7}
 8009696:	b085      	sub	sp, #20
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 800969c:	2300      	movs	r3, #0
 800969e:	60fb      	str	r3, [r7, #12]
 80096a0:	2300      	movs	r3, #0
 80096a2:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80096aa:	b2db      	uxtb	r3, r3
 80096ac:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80096b4:	b2db      	uxtb	r3, r3
 80096b6:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	b2da      	uxtb	r2, r3
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	b2db      	uxtb	r3, r3
 80096c0:	4313      	orrs	r3, r2
 80096c2:	b2db      	uxtb	r3, r3
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3714      	adds	r7, #20
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr

080096d0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b090      	sub	sp, #64	@ 0x40
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d137      	bne.n	800975c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80096ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096ee:	2200      	movs	r2, #0
 80096f0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80096f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	3314      	adds	r3, #20
 80096f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096fc:	e853 3f00 	ldrex	r3, [r3]
 8009700:	623b      	str	r3, [r7, #32]
   return(result);
 8009702:	6a3b      	ldr	r3, [r7, #32]
 8009704:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009708:	63bb      	str	r3, [r7, #56]	@ 0x38
 800970a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	3314      	adds	r3, #20
 8009710:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009712:	633a      	str	r2, [r7, #48]	@ 0x30
 8009714:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009716:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009718:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800971a:	e841 2300 	strex	r3, r2, [r1]
 800971e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009722:	2b00      	cmp	r3, #0
 8009724:	d1e5      	bne.n	80096f2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009726:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	330c      	adds	r3, #12
 800972c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800972e:	693b      	ldr	r3, [r7, #16]
 8009730:	e853 3f00 	ldrex	r3, [r3]
 8009734:	60fb      	str	r3, [r7, #12]
   return(result);
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800973c:	637b      	str	r3, [r7, #52]	@ 0x34
 800973e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	330c      	adds	r3, #12
 8009744:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009746:	61fa      	str	r2, [r7, #28]
 8009748:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800974a:	69b9      	ldr	r1, [r7, #24]
 800974c:	69fa      	ldr	r2, [r7, #28]
 800974e:	e841 2300 	strex	r3, r2, [r1]
 8009752:	617b      	str	r3, [r7, #20]
   return(result);
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d1e5      	bne.n	8009726 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800975a:	e002      	b.n	8009762 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800975c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800975e:	f7ff ff65 	bl	800962c <HAL_UART_TxCpltCallback>
}
 8009762:	bf00      	nop
 8009764:	3740      	adds	r7, #64	@ 0x40
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}

0800976a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800976a:	b580      	push	{r7, lr}
 800976c:	b084      	sub	sp, #16
 800976e:	af00      	add	r7, sp, #0
 8009770:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009776:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009778:	68f8      	ldr	r0, [r7, #12]
 800977a:	f7ff ff61 	bl	8009640 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800977e:	bf00      	nop
 8009780:	3710      	adds	r7, #16
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}

08009786 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009786:	b580      	push	{r7, lr}
 8009788:	b084      	sub	sp, #16
 800978a:	af00      	add	r7, sp, #0
 800978c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800978e:	2300      	movs	r3, #0
 8009790:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009796:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	695b      	ldr	r3, [r3, #20]
 800979e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097a2:	2b80      	cmp	r3, #128	@ 0x80
 80097a4:	bf0c      	ite	eq
 80097a6:	2301      	moveq	r3, #1
 80097a8:	2300      	movne	r3, #0
 80097aa:	b2db      	uxtb	r3, r3
 80097ac:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80097b4:	b2db      	uxtb	r3, r3
 80097b6:	2b21      	cmp	r3, #33	@ 0x21
 80097b8:	d108      	bne.n	80097cc <UART_DMAError+0x46>
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d005      	beq.n	80097cc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	2200      	movs	r2, #0
 80097c4:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80097c6:	68b8      	ldr	r0, [r7, #8]
 80097c8:	f000 f827 	bl	800981a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	695b      	ldr	r3, [r3, #20]
 80097d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097d6:	2b40      	cmp	r3, #64	@ 0x40
 80097d8:	bf0c      	ite	eq
 80097da:	2301      	moveq	r3, #1
 80097dc:	2300      	movne	r3, #0
 80097de:	b2db      	uxtb	r3, r3
 80097e0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80097e8:	b2db      	uxtb	r3, r3
 80097ea:	2b22      	cmp	r3, #34	@ 0x22
 80097ec:	d108      	bne.n	8009800 <UART_DMAError+0x7a>
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d005      	beq.n	8009800 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	2200      	movs	r2, #0
 80097f8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80097fa:	68b8      	ldr	r0, [r7, #8]
 80097fc:	f000 f835 	bl	800986a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009804:	f043 0210 	orr.w	r2, r3, #16
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800980c:	68b8      	ldr	r0, [r7, #8]
 800980e:	f7ff ff2b 	bl	8009668 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009812:	bf00      	nop
 8009814:	3710      	adds	r7, #16
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}

0800981a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800981a:	b480      	push	{r7}
 800981c:	b089      	sub	sp, #36	@ 0x24
 800981e:	af00      	add	r7, sp, #0
 8009820:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	330c      	adds	r3, #12
 8009828:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	e853 3f00 	ldrex	r3, [r3]
 8009830:	60bb      	str	r3, [r7, #8]
   return(result);
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009838:	61fb      	str	r3, [r7, #28]
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	330c      	adds	r3, #12
 8009840:	69fa      	ldr	r2, [r7, #28]
 8009842:	61ba      	str	r2, [r7, #24]
 8009844:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009846:	6979      	ldr	r1, [r7, #20]
 8009848:	69ba      	ldr	r2, [r7, #24]
 800984a:	e841 2300 	strex	r3, r2, [r1]
 800984e:	613b      	str	r3, [r7, #16]
   return(result);
 8009850:	693b      	ldr	r3, [r7, #16]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d1e5      	bne.n	8009822 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2220      	movs	r2, #32
 800985a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800985e:	bf00      	nop
 8009860:	3724      	adds	r7, #36	@ 0x24
 8009862:	46bd      	mov	sp, r7
 8009864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009868:	4770      	bx	lr

0800986a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800986a:	b480      	push	{r7}
 800986c:	b095      	sub	sp, #84	@ 0x54
 800986e:	af00      	add	r7, sp, #0
 8009870:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	330c      	adds	r3, #12
 8009878:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800987a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800987c:	e853 3f00 	ldrex	r3, [r3]
 8009880:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009884:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009888:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	330c      	adds	r3, #12
 8009890:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009892:	643a      	str	r2, [r7, #64]	@ 0x40
 8009894:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009896:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009898:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800989a:	e841 2300 	strex	r3, r2, [r1]
 800989e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80098a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d1e5      	bne.n	8009872 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	3314      	adds	r3, #20
 80098ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ae:	6a3b      	ldr	r3, [r7, #32]
 80098b0:	e853 3f00 	ldrex	r3, [r3]
 80098b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80098b6:	69fb      	ldr	r3, [r7, #28]
 80098b8:	f023 0301 	bic.w	r3, r3, #1
 80098bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	3314      	adds	r3, #20
 80098c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80098c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80098c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80098cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098ce:	e841 2300 	strex	r3, r2, [r1]
 80098d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80098d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d1e5      	bne.n	80098a6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098de:	2b01      	cmp	r3, #1
 80098e0:	d119      	bne.n	8009916 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	330c      	adds	r3, #12
 80098e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	e853 3f00 	ldrex	r3, [r3]
 80098f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	f023 0310 	bic.w	r3, r3, #16
 80098f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	330c      	adds	r3, #12
 8009900:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009902:	61ba      	str	r2, [r7, #24]
 8009904:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009906:	6979      	ldr	r1, [r7, #20]
 8009908:	69ba      	ldr	r2, [r7, #24]
 800990a:	e841 2300 	strex	r3, r2, [r1]
 800990e:	613b      	str	r3, [r7, #16]
   return(result);
 8009910:	693b      	ldr	r3, [r7, #16]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d1e5      	bne.n	80098e2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2220      	movs	r2, #32
 800991a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2200      	movs	r2, #0
 8009922:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009924:	bf00      	nop
 8009926:	3754      	adds	r7, #84	@ 0x54
 8009928:	46bd      	mov	sp, r7
 800992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992e:	4770      	bx	lr

08009930 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b084      	sub	sp, #16
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800993c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	2200      	movs	r2, #0
 8009942:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	2200      	movs	r2, #0
 8009948:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800994a:	68f8      	ldr	r0, [r7, #12]
 800994c:	f7ff fe8c 	bl	8009668 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009950:	bf00      	nop
 8009952:	3710      	adds	r7, #16
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}

08009958 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009958:	b480      	push	{r7}
 800995a:	b085      	sub	sp, #20
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009966:	b2db      	uxtb	r3, r3
 8009968:	2b21      	cmp	r3, #33	@ 0x21
 800996a:	d13e      	bne.n	80099ea <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	689b      	ldr	r3, [r3, #8]
 8009970:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009974:	d114      	bne.n	80099a0 <UART_Transmit_IT+0x48>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	691b      	ldr	r3, [r3, #16]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d110      	bne.n	80099a0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6a1b      	ldr	r3, [r3, #32]
 8009982:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	881b      	ldrh	r3, [r3, #0]
 8009988:	461a      	mov	r2, r3
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009992:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6a1b      	ldr	r3, [r3, #32]
 8009998:	1c9a      	adds	r2, r3, #2
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	621a      	str	r2, [r3, #32]
 800999e:	e008      	b.n	80099b2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6a1b      	ldr	r3, [r3, #32]
 80099a4:	1c59      	adds	r1, r3, #1
 80099a6:	687a      	ldr	r2, [r7, #4]
 80099a8:	6211      	str	r1, [r2, #32]
 80099aa:	781a      	ldrb	r2, [r3, #0]
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80099b6:	b29b      	uxth	r3, r3
 80099b8:	3b01      	subs	r3, #1
 80099ba:	b29b      	uxth	r3, r3
 80099bc:	687a      	ldr	r2, [r7, #4]
 80099be:	4619      	mov	r1, r3
 80099c0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d10f      	bne.n	80099e6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	68da      	ldr	r2, [r3, #12]
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80099d4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	68da      	ldr	r2, [r3, #12]
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80099e4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80099e6:	2300      	movs	r3, #0
 80099e8:	e000      	b.n	80099ec <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80099ea:	2302      	movs	r3, #2
  }
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3714      	adds	r7, #20
 80099f0:	46bd      	mov	sp, r7
 80099f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f6:	4770      	bx	lr

080099f8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	68da      	ldr	r2, [r3, #12]
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009a0e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2220      	movs	r2, #32
 8009a14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f7ff fe07 	bl	800962c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009a1e:	2300      	movs	r3, #0
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	3708      	adds	r7, #8
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}

08009a28 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b08c      	sub	sp, #48	@ 0x30
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009a36:	b2db      	uxtb	r3, r3
 8009a38:	2b22      	cmp	r3, #34	@ 0x22
 8009a3a:	f040 80ae 	bne.w	8009b9a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	689b      	ldr	r3, [r3, #8]
 8009a42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a46:	d117      	bne.n	8009a78 <UART_Receive_IT+0x50>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	691b      	ldr	r3, [r3, #16]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d113      	bne.n	8009a78 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009a50:	2300      	movs	r3, #0
 8009a52:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a58:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	b29b      	uxth	r3, r3
 8009a62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a66:	b29a      	uxth	r2, r3
 8009a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a6a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a70:	1c9a      	adds	r2, r3, #2
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	629a      	str	r2, [r3, #40]	@ 0x28
 8009a76:	e026      	b.n	8009ac6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	689b      	ldr	r3, [r3, #8]
 8009a86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a8a:	d007      	beq.n	8009a9c <UART_Receive_IT+0x74>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	689b      	ldr	r3, [r3, #8]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d10a      	bne.n	8009aaa <UART_Receive_IT+0x82>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	691b      	ldr	r3, [r3, #16]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d106      	bne.n	8009aaa <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	685b      	ldr	r3, [r3, #4]
 8009aa2:	b2da      	uxtb	r2, r3
 8009aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009aa6:	701a      	strb	r2, [r3, #0]
 8009aa8:	e008      	b.n	8009abc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	685b      	ldr	r3, [r3, #4]
 8009ab0:	b2db      	uxtb	r3, r3
 8009ab2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ab6:	b2da      	uxtb	r2, r3
 8009ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009aba:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ac0:	1c5a      	adds	r2, r3, #1
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009aca:	b29b      	uxth	r3, r3
 8009acc:	3b01      	subs	r3, #1
 8009ace:	b29b      	uxth	r3, r3
 8009ad0:	687a      	ldr	r2, [r7, #4]
 8009ad2:	4619      	mov	r1, r3
 8009ad4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d15d      	bne.n	8009b96 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	68da      	ldr	r2, [r3, #12]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f022 0220 	bic.w	r2, r2, #32
 8009ae8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	68da      	ldr	r2, [r3, #12]
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009af8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	695a      	ldr	r2, [r3, #20]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f022 0201 	bic.w	r2, r2, #1
 8009b08:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2220      	movs	r2, #32
 8009b0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2200      	movs	r2, #0
 8009b16:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b1c:	2b01      	cmp	r3, #1
 8009b1e:	d135      	bne.n	8009b8c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2200      	movs	r2, #0
 8009b24:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	330c      	adds	r3, #12
 8009b2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	e853 3f00 	ldrex	r3, [r3]
 8009b34:	613b      	str	r3, [r7, #16]
   return(result);
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	f023 0310 	bic.w	r3, r3, #16
 8009b3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	330c      	adds	r3, #12
 8009b44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b46:	623a      	str	r2, [r7, #32]
 8009b48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b4a:	69f9      	ldr	r1, [r7, #28]
 8009b4c:	6a3a      	ldr	r2, [r7, #32]
 8009b4e:	e841 2300 	strex	r3, r2, [r1]
 8009b52:	61bb      	str	r3, [r7, #24]
   return(result);
 8009b54:	69bb      	ldr	r3, [r7, #24]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d1e5      	bne.n	8009b26 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f003 0310 	and.w	r3, r3, #16
 8009b64:	2b10      	cmp	r3, #16
 8009b66:	d10a      	bne.n	8009b7e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009b68:	2300      	movs	r3, #0
 8009b6a:	60fb      	str	r3, [r7, #12]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	60fb      	str	r3, [r7, #12]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	685b      	ldr	r3, [r3, #4]
 8009b7a:	60fb      	str	r3, [r7, #12]
 8009b7c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009b82:	4619      	mov	r1, r3
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f7ff fd79 	bl	800967c <HAL_UARTEx_RxEventCallback>
 8009b8a:	e002      	b.n	8009b92 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f7ff fd61 	bl	8009654 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009b92:	2300      	movs	r3, #0
 8009b94:	e002      	b.n	8009b9c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009b96:	2300      	movs	r3, #0
 8009b98:	e000      	b.n	8009b9c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009b9a:	2302      	movs	r3, #2
  }
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3730      	adds	r7, #48	@ 0x30
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}

08009ba4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009ba4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009ba8:	b0c0      	sub	sp, #256	@ 0x100
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	691b      	ldr	r3, [r3, #16]
 8009bb8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bc0:	68d9      	ldr	r1, [r3, #12]
 8009bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bc6:	681a      	ldr	r2, [r3, #0]
 8009bc8:	ea40 0301 	orr.w	r3, r0, r1
 8009bcc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bd2:	689a      	ldr	r2, [r3, #8]
 8009bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bd8:	691b      	ldr	r3, [r3, #16]
 8009bda:	431a      	orrs	r2, r3
 8009bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009be0:	695b      	ldr	r3, [r3, #20]
 8009be2:	431a      	orrs	r2, r3
 8009be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009be8:	69db      	ldr	r3, [r3, #28]
 8009bea:	4313      	orrs	r3, r2
 8009bec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	68db      	ldr	r3, [r3, #12]
 8009bf8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009bfc:	f021 010c 	bic.w	r1, r1, #12
 8009c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c04:	681a      	ldr	r2, [r3, #0]
 8009c06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009c0a:	430b      	orrs	r3, r1
 8009c0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	695b      	ldr	r3, [r3, #20]
 8009c16:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c1e:	6999      	ldr	r1, [r3, #24]
 8009c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c24:	681a      	ldr	r2, [r3, #0]
 8009c26:	ea40 0301 	orr.w	r3, r0, r1
 8009c2a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c30:	681a      	ldr	r2, [r3, #0]
 8009c32:	4b8f      	ldr	r3, [pc, #572]	@ (8009e70 <UART_SetConfig+0x2cc>)
 8009c34:	429a      	cmp	r2, r3
 8009c36:	d005      	beq.n	8009c44 <UART_SetConfig+0xa0>
 8009c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c3c:	681a      	ldr	r2, [r3, #0]
 8009c3e:	4b8d      	ldr	r3, [pc, #564]	@ (8009e74 <UART_SetConfig+0x2d0>)
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d104      	bne.n	8009c4e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009c44:	f7fc fcca 	bl	80065dc <HAL_RCC_GetPCLK2Freq>
 8009c48:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009c4c:	e003      	b.n	8009c56 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009c4e:	f7fc fcb1 	bl	80065b4 <HAL_RCC_GetPCLK1Freq>
 8009c52:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c5a:	69db      	ldr	r3, [r3, #28]
 8009c5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c60:	f040 810c 	bne.w	8009e7c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009c64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009c68:	2200      	movs	r2, #0
 8009c6a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009c6e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009c72:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009c76:	4622      	mov	r2, r4
 8009c78:	462b      	mov	r3, r5
 8009c7a:	1891      	adds	r1, r2, r2
 8009c7c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009c7e:	415b      	adcs	r3, r3
 8009c80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009c82:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009c86:	4621      	mov	r1, r4
 8009c88:	eb12 0801 	adds.w	r8, r2, r1
 8009c8c:	4629      	mov	r1, r5
 8009c8e:	eb43 0901 	adc.w	r9, r3, r1
 8009c92:	f04f 0200 	mov.w	r2, #0
 8009c96:	f04f 0300 	mov.w	r3, #0
 8009c9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009c9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009ca2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009ca6:	4690      	mov	r8, r2
 8009ca8:	4699      	mov	r9, r3
 8009caa:	4623      	mov	r3, r4
 8009cac:	eb18 0303 	adds.w	r3, r8, r3
 8009cb0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009cb4:	462b      	mov	r3, r5
 8009cb6:	eb49 0303 	adc.w	r3, r9, r3
 8009cba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009cca:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009cce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009cd2:	460b      	mov	r3, r1
 8009cd4:	18db      	adds	r3, r3, r3
 8009cd6:	653b      	str	r3, [r7, #80]	@ 0x50
 8009cd8:	4613      	mov	r3, r2
 8009cda:	eb42 0303 	adc.w	r3, r2, r3
 8009cde:	657b      	str	r3, [r7, #84]	@ 0x54
 8009ce0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009ce4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009ce8:	f7f6 fdc0 	bl	800086c <__aeabi_uldivmod>
 8009cec:	4602      	mov	r2, r0
 8009cee:	460b      	mov	r3, r1
 8009cf0:	4b61      	ldr	r3, [pc, #388]	@ (8009e78 <UART_SetConfig+0x2d4>)
 8009cf2:	fba3 2302 	umull	r2, r3, r3, r2
 8009cf6:	095b      	lsrs	r3, r3, #5
 8009cf8:	011c      	lsls	r4, r3, #4
 8009cfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009cfe:	2200      	movs	r2, #0
 8009d00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009d04:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009d08:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009d0c:	4642      	mov	r2, r8
 8009d0e:	464b      	mov	r3, r9
 8009d10:	1891      	adds	r1, r2, r2
 8009d12:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009d14:	415b      	adcs	r3, r3
 8009d16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009d1c:	4641      	mov	r1, r8
 8009d1e:	eb12 0a01 	adds.w	sl, r2, r1
 8009d22:	4649      	mov	r1, r9
 8009d24:	eb43 0b01 	adc.w	fp, r3, r1
 8009d28:	f04f 0200 	mov.w	r2, #0
 8009d2c:	f04f 0300 	mov.w	r3, #0
 8009d30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009d34:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009d38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009d3c:	4692      	mov	sl, r2
 8009d3e:	469b      	mov	fp, r3
 8009d40:	4643      	mov	r3, r8
 8009d42:	eb1a 0303 	adds.w	r3, sl, r3
 8009d46:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009d4a:	464b      	mov	r3, r9
 8009d4c:	eb4b 0303 	adc.w	r3, fp, r3
 8009d50:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d58:	685b      	ldr	r3, [r3, #4]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009d60:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009d64:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009d68:	460b      	mov	r3, r1
 8009d6a:	18db      	adds	r3, r3, r3
 8009d6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8009d6e:	4613      	mov	r3, r2
 8009d70:	eb42 0303 	adc.w	r3, r2, r3
 8009d74:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009d7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009d7e:	f7f6 fd75 	bl	800086c <__aeabi_uldivmod>
 8009d82:	4602      	mov	r2, r0
 8009d84:	460b      	mov	r3, r1
 8009d86:	4611      	mov	r1, r2
 8009d88:	4b3b      	ldr	r3, [pc, #236]	@ (8009e78 <UART_SetConfig+0x2d4>)
 8009d8a:	fba3 2301 	umull	r2, r3, r3, r1
 8009d8e:	095b      	lsrs	r3, r3, #5
 8009d90:	2264      	movs	r2, #100	@ 0x64
 8009d92:	fb02 f303 	mul.w	r3, r2, r3
 8009d96:	1acb      	subs	r3, r1, r3
 8009d98:	00db      	lsls	r3, r3, #3
 8009d9a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009d9e:	4b36      	ldr	r3, [pc, #216]	@ (8009e78 <UART_SetConfig+0x2d4>)
 8009da0:	fba3 2302 	umull	r2, r3, r3, r2
 8009da4:	095b      	lsrs	r3, r3, #5
 8009da6:	005b      	lsls	r3, r3, #1
 8009da8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009dac:	441c      	add	r4, r3
 8009dae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009db2:	2200      	movs	r2, #0
 8009db4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009db8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009dbc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009dc0:	4642      	mov	r2, r8
 8009dc2:	464b      	mov	r3, r9
 8009dc4:	1891      	adds	r1, r2, r2
 8009dc6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009dc8:	415b      	adcs	r3, r3
 8009dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009dcc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009dd0:	4641      	mov	r1, r8
 8009dd2:	1851      	adds	r1, r2, r1
 8009dd4:	6339      	str	r1, [r7, #48]	@ 0x30
 8009dd6:	4649      	mov	r1, r9
 8009dd8:	414b      	adcs	r3, r1
 8009dda:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ddc:	f04f 0200 	mov.w	r2, #0
 8009de0:	f04f 0300 	mov.w	r3, #0
 8009de4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009de8:	4659      	mov	r1, fp
 8009dea:	00cb      	lsls	r3, r1, #3
 8009dec:	4651      	mov	r1, sl
 8009dee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009df2:	4651      	mov	r1, sl
 8009df4:	00ca      	lsls	r2, r1, #3
 8009df6:	4610      	mov	r0, r2
 8009df8:	4619      	mov	r1, r3
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	4642      	mov	r2, r8
 8009dfe:	189b      	adds	r3, r3, r2
 8009e00:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009e04:	464b      	mov	r3, r9
 8009e06:	460a      	mov	r2, r1
 8009e08:	eb42 0303 	adc.w	r3, r2, r3
 8009e0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e14:	685b      	ldr	r3, [r3, #4]
 8009e16:	2200      	movs	r2, #0
 8009e18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009e1c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009e20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009e24:	460b      	mov	r3, r1
 8009e26:	18db      	adds	r3, r3, r3
 8009e28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009e2a:	4613      	mov	r3, r2
 8009e2c:	eb42 0303 	adc.w	r3, r2, r3
 8009e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009e32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009e36:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009e3a:	f7f6 fd17 	bl	800086c <__aeabi_uldivmod>
 8009e3e:	4602      	mov	r2, r0
 8009e40:	460b      	mov	r3, r1
 8009e42:	4b0d      	ldr	r3, [pc, #52]	@ (8009e78 <UART_SetConfig+0x2d4>)
 8009e44:	fba3 1302 	umull	r1, r3, r3, r2
 8009e48:	095b      	lsrs	r3, r3, #5
 8009e4a:	2164      	movs	r1, #100	@ 0x64
 8009e4c:	fb01 f303 	mul.w	r3, r1, r3
 8009e50:	1ad3      	subs	r3, r2, r3
 8009e52:	00db      	lsls	r3, r3, #3
 8009e54:	3332      	adds	r3, #50	@ 0x32
 8009e56:	4a08      	ldr	r2, [pc, #32]	@ (8009e78 <UART_SetConfig+0x2d4>)
 8009e58:	fba2 2303 	umull	r2, r3, r2, r3
 8009e5c:	095b      	lsrs	r3, r3, #5
 8009e5e:	f003 0207 	and.w	r2, r3, #7
 8009e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	4422      	add	r2, r4
 8009e6a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009e6c:	e106      	b.n	800a07c <UART_SetConfig+0x4d8>
 8009e6e:	bf00      	nop
 8009e70:	40011000 	.word	0x40011000
 8009e74:	40011400 	.word	0x40011400
 8009e78:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009e7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009e80:	2200      	movs	r2, #0
 8009e82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009e86:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009e8a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009e8e:	4642      	mov	r2, r8
 8009e90:	464b      	mov	r3, r9
 8009e92:	1891      	adds	r1, r2, r2
 8009e94:	6239      	str	r1, [r7, #32]
 8009e96:	415b      	adcs	r3, r3
 8009e98:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009e9e:	4641      	mov	r1, r8
 8009ea0:	1854      	adds	r4, r2, r1
 8009ea2:	4649      	mov	r1, r9
 8009ea4:	eb43 0501 	adc.w	r5, r3, r1
 8009ea8:	f04f 0200 	mov.w	r2, #0
 8009eac:	f04f 0300 	mov.w	r3, #0
 8009eb0:	00eb      	lsls	r3, r5, #3
 8009eb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009eb6:	00e2      	lsls	r2, r4, #3
 8009eb8:	4614      	mov	r4, r2
 8009eba:	461d      	mov	r5, r3
 8009ebc:	4643      	mov	r3, r8
 8009ebe:	18e3      	adds	r3, r4, r3
 8009ec0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009ec4:	464b      	mov	r3, r9
 8009ec6:	eb45 0303 	adc.w	r3, r5, r3
 8009eca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ed2:	685b      	ldr	r3, [r3, #4]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009eda:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009ede:	f04f 0200 	mov.w	r2, #0
 8009ee2:	f04f 0300 	mov.w	r3, #0
 8009ee6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009eea:	4629      	mov	r1, r5
 8009eec:	008b      	lsls	r3, r1, #2
 8009eee:	4621      	mov	r1, r4
 8009ef0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009ef4:	4621      	mov	r1, r4
 8009ef6:	008a      	lsls	r2, r1, #2
 8009ef8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009efc:	f7f6 fcb6 	bl	800086c <__aeabi_uldivmod>
 8009f00:	4602      	mov	r2, r0
 8009f02:	460b      	mov	r3, r1
 8009f04:	4b60      	ldr	r3, [pc, #384]	@ (800a088 <UART_SetConfig+0x4e4>)
 8009f06:	fba3 2302 	umull	r2, r3, r3, r2
 8009f0a:	095b      	lsrs	r3, r3, #5
 8009f0c:	011c      	lsls	r4, r3, #4
 8009f0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009f12:	2200      	movs	r2, #0
 8009f14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009f18:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009f1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009f20:	4642      	mov	r2, r8
 8009f22:	464b      	mov	r3, r9
 8009f24:	1891      	adds	r1, r2, r2
 8009f26:	61b9      	str	r1, [r7, #24]
 8009f28:	415b      	adcs	r3, r3
 8009f2a:	61fb      	str	r3, [r7, #28]
 8009f2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009f30:	4641      	mov	r1, r8
 8009f32:	1851      	adds	r1, r2, r1
 8009f34:	6139      	str	r1, [r7, #16]
 8009f36:	4649      	mov	r1, r9
 8009f38:	414b      	adcs	r3, r1
 8009f3a:	617b      	str	r3, [r7, #20]
 8009f3c:	f04f 0200 	mov.w	r2, #0
 8009f40:	f04f 0300 	mov.w	r3, #0
 8009f44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009f48:	4659      	mov	r1, fp
 8009f4a:	00cb      	lsls	r3, r1, #3
 8009f4c:	4651      	mov	r1, sl
 8009f4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009f52:	4651      	mov	r1, sl
 8009f54:	00ca      	lsls	r2, r1, #3
 8009f56:	4610      	mov	r0, r2
 8009f58:	4619      	mov	r1, r3
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	4642      	mov	r2, r8
 8009f5e:	189b      	adds	r3, r3, r2
 8009f60:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009f64:	464b      	mov	r3, r9
 8009f66:	460a      	mov	r2, r1
 8009f68:	eb42 0303 	adc.w	r3, r2, r3
 8009f6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f74:	685b      	ldr	r3, [r3, #4]
 8009f76:	2200      	movs	r2, #0
 8009f78:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009f7a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009f7c:	f04f 0200 	mov.w	r2, #0
 8009f80:	f04f 0300 	mov.w	r3, #0
 8009f84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009f88:	4649      	mov	r1, r9
 8009f8a:	008b      	lsls	r3, r1, #2
 8009f8c:	4641      	mov	r1, r8
 8009f8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009f92:	4641      	mov	r1, r8
 8009f94:	008a      	lsls	r2, r1, #2
 8009f96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009f9a:	f7f6 fc67 	bl	800086c <__aeabi_uldivmod>
 8009f9e:	4602      	mov	r2, r0
 8009fa0:	460b      	mov	r3, r1
 8009fa2:	4611      	mov	r1, r2
 8009fa4:	4b38      	ldr	r3, [pc, #224]	@ (800a088 <UART_SetConfig+0x4e4>)
 8009fa6:	fba3 2301 	umull	r2, r3, r3, r1
 8009faa:	095b      	lsrs	r3, r3, #5
 8009fac:	2264      	movs	r2, #100	@ 0x64
 8009fae:	fb02 f303 	mul.w	r3, r2, r3
 8009fb2:	1acb      	subs	r3, r1, r3
 8009fb4:	011b      	lsls	r3, r3, #4
 8009fb6:	3332      	adds	r3, #50	@ 0x32
 8009fb8:	4a33      	ldr	r2, [pc, #204]	@ (800a088 <UART_SetConfig+0x4e4>)
 8009fba:	fba2 2303 	umull	r2, r3, r2, r3
 8009fbe:	095b      	lsrs	r3, r3, #5
 8009fc0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009fc4:	441c      	add	r4, r3
 8009fc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009fca:	2200      	movs	r2, #0
 8009fcc:	673b      	str	r3, [r7, #112]	@ 0x70
 8009fce:	677a      	str	r2, [r7, #116]	@ 0x74
 8009fd0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009fd4:	4642      	mov	r2, r8
 8009fd6:	464b      	mov	r3, r9
 8009fd8:	1891      	adds	r1, r2, r2
 8009fda:	60b9      	str	r1, [r7, #8]
 8009fdc:	415b      	adcs	r3, r3
 8009fde:	60fb      	str	r3, [r7, #12]
 8009fe0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009fe4:	4641      	mov	r1, r8
 8009fe6:	1851      	adds	r1, r2, r1
 8009fe8:	6039      	str	r1, [r7, #0]
 8009fea:	4649      	mov	r1, r9
 8009fec:	414b      	adcs	r3, r1
 8009fee:	607b      	str	r3, [r7, #4]
 8009ff0:	f04f 0200 	mov.w	r2, #0
 8009ff4:	f04f 0300 	mov.w	r3, #0
 8009ff8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009ffc:	4659      	mov	r1, fp
 8009ffe:	00cb      	lsls	r3, r1, #3
 800a000:	4651      	mov	r1, sl
 800a002:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a006:	4651      	mov	r1, sl
 800a008:	00ca      	lsls	r2, r1, #3
 800a00a:	4610      	mov	r0, r2
 800a00c:	4619      	mov	r1, r3
 800a00e:	4603      	mov	r3, r0
 800a010:	4642      	mov	r2, r8
 800a012:	189b      	adds	r3, r3, r2
 800a014:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a016:	464b      	mov	r3, r9
 800a018:	460a      	mov	r2, r1
 800a01a:	eb42 0303 	adc.w	r3, r2, r3
 800a01e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a024:	685b      	ldr	r3, [r3, #4]
 800a026:	2200      	movs	r2, #0
 800a028:	663b      	str	r3, [r7, #96]	@ 0x60
 800a02a:	667a      	str	r2, [r7, #100]	@ 0x64
 800a02c:	f04f 0200 	mov.w	r2, #0
 800a030:	f04f 0300 	mov.w	r3, #0
 800a034:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a038:	4649      	mov	r1, r9
 800a03a:	008b      	lsls	r3, r1, #2
 800a03c:	4641      	mov	r1, r8
 800a03e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a042:	4641      	mov	r1, r8
 800a044:	008a      	lsls	r2, r1, #2
 800a046:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a04a:	f7f6 fc0f 	bl	800086c <__aeabi_uldivmod>
 800a04e:	4602      	mov	r2, r0
 800a050:	460b      	mov	r3, r1
 800a052:	4b0d      	ldr	r3, [pc, #52]	@ (800a088 <UART_SetConfig+0x4e4>)
 800a054:	fba3 1302 	umull	r1, r3, r3, r2
 800a058:	095b      	lsrs	r3, r3, #5
 800a05a:	2164      	movs	r1, #100	@ 0x64
 800a05c:	fb01 f303 	mul.w	r3, r1, r3
 800a060:	1ad3      	subs	r3, r2, r3
 800a062:	011b      	lsls	r3, r3, #4
 800a064:	3332      	adds	r3, #50	@ 0x32
 800a066:	4a08      	ldr	r2, [pc, #32]	@ (800a088 <UART_SetConfig+0x4e4>)
 800a068:	fba2 2303 	umull	r2, r3, r2, r3
 800a06c:	095b      	lsrs	r3, r3, #5
 800a06e:	f003 020f 	and.w	r2, r3, #15
 800a072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	4422      	add	r2, r4
 800a07a:	609a      	str	r2, [r3, #8]
}
 800a07c:	bf00      	nop
 800a07e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a082:	46bd      	mov	sp, r7
 800a084:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a088:	51eb851f 	.word	0x51eb851f

0800a08c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a08c:	b480      	push	{r7}
 800a08e:	b083      	sub	sp, #12
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
 800a094:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d123      	bne.n	800a0e6 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800a0a6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a0aa:	683a      	ldr	r2, [r7, #0]
 800a0ac:	6851      	ldr	r1, [r2, #4]
 800a0ae:	683a      	ldr	r2, [r7, #0]
 800a0b0:	6892      	ldr	r2, [r2, #8]
 800a0b2:	4311      	orrs	r1, r2
 800a0b4:	683a      	ldr	r2, [r7, #0]
 800a0b6:	68d2      	ldr	r2, [r2, #12]
 800a0b8:	4311      	orrs	r1, r2
 800a0ba:	683a      	ldr	r2, [r7, #0]
 800a0bc:	6912      	ldr	r2, [r2, #16]
 800a0be:	4311      	orrs	r1, r2
 800a0c0:	683a      	ldr	r2, [r7, #0]
 800a0c2:	6952      	ldr	r2, [r2, #20]
 800a0c4:	4311      	orrs	r1, r2
 800a0c6:	683a      	ldr	r2, [r7, #0]
 800a0c8:	6992      	ldr	r2, [r2, #24]
 800a0ca:	4311      	orrs	r1, r2
 800a0cc:	683a      	ldr	r2, [r7, #0]
 800a0ce:	69d2      	ldr	r2, [r2, #28]
 800a0d0:	4311      	orrs	r1, r2
 800a0d2:	683a      	ldr	r2, [r7, #0]
 800a0d4:	6a12      	ldr	r2, [r2, #32]
 800a0d6:	4311      	orrs	r1, r2
 800a0d8:	683a      	ldr	r2, [r7, #0]
 800a0da:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a0dc:	430a      	orrs	r2, r1
 800a0de:	431a      	orrs	r2, r3
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	601a      	str	r2, [r3, #0]
 800a0e4:	e028      	b.n	800a138 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	69d9      	ldr	r1, [r3, #28]
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	6a1b      	ldr	r3, [r3, #32]
 800a0f6:	4319      	orrs	r1, r3
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0fc:	430b      	orrs	r3, r1
 800a0fe:	431a      	orrs	r2, r3
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	685b      	ldr	r3, [r3, #4]
 800a108:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800a10c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a110:	683a      	ldr	r2, [r7, #0]
 800a112:	6851      	ldr	r1, [r2, #4]
 800a114:	683a      	ldr	r2, [r7, #0]
 800a116:	6892      	ldr	r2, [r2, #8]
 800a118:	4311      	orrs	r1, r2
 800a11a:	683a      	ldr	r2, [r7, #0]
 800a11c:	68d2      	ldr	r2, [r2, #12]
 800a11e:	4311      	orrs	r1, r2
 800a120:	683a      	ldr	r2, [r7, #0]
 800a122:	6912      	ldr	r2, [r2, #16]
 800a124:	4311      	orrs	r1, r2
 800a126:	683a      	ldr	r2, [r7, #0]
 800a128:	6952      	ldr	r2, [r2, #20]
 800a12a:	4311      	orrs	r1, r2
 800a12c:	683a      	ldr	r2, [r7, #0]
 800a12e:	6992      	ldr	r2, [r2, #24]
 800a130:	430a      	orrs	r2, r1
 800a132:	431a      	orrs	r2, r3
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800a138:	2300      	movs	r3, #0
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	370c      	adds	r7, #12
 800a13e:	46bd      	mov	sp, r7
 800a140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a144:	4770      	bx	lr

0800a146 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a146:	b480      	push	{r7}
 800a148:	b085      	sub	sp, #20
 800a14a:	af00      	add	r7, sp, #0
 800a14c:	60f8      	str	r0, [r7, #12]
 800a14e:	60b9      	str	r1, [r7, #8]
 800a150:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d128      	bne.n	800a1aa <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	689b      	ldr	r3, [r3, #8]
 800a15c:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	1e59      	subs	r1, r3, #1
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	685b      	ldr	r3, [r3, #4]
 800a16a:	3b01      	subs	r3, #1
 800a16c:	011b      	lsls	r3, r3, #4
 800a16e:	4319      	orrs	r1, r3
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	689b      	ldr	r3, [r3, #8]
 800a174:	3b01      	subs	r3, #1
 800a176:	021b      	lsls	r3, r3, #8
 800a178:	4319      	orrs	r1, r3
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	68db      	ldr	r3, [r3, #12]
 800a17e:	3b01      	subs	r3, #1
 800a180:	031b      	lsls	r3, r3, #12
 800a182:	4319      	orrs	r1, r3
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	691b      	ldr	r3, [r3, #16]
 800a188:	3b01      	subs	r3, #1
 800a18a:	041b      	lsls	r3, r3, #16
 800a18c:	4319      	orrs	r1, r3
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	695b      	ldr	r3, [r3, #20]
 800a192:	3b01      	subs	r3, #1
 800a194:	051b      	lsls	r3, r3, #20
 800a196:	4319      	orrs	r1, r3
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	699b      	ldr	r3, [r3, #24]
 800a19c:	3b01      	subs	r3, #1
 800a19e:	061b      	lsls	r3, r3, #24
 800a1a0:	430b      	orrs	r3, r1
 800a1a2:	431a      	orrs	r2, r3
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	609a      	str	r2, [r3, #8]
 800a1a8:	e02f      	b.n	800a20a <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	689b      	ldr	r3, [r3, #8]
 800a1ae:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a1b2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a1b6:	68ba      	ldr	r2, [r7, #8]
 800a1b8:	68d2      	ldr	r2, [r2, #12]
 800a1ba:	3a01      	subs	r2, #1
 800a1bc:	0311      	lsls	r1, r2, #12
 800a1be:	68ba      	ldr	r2, [r7, #8]
 800a1c0:	6952      	ldr	r2, [r2, #20]
 800a1c2:	3a01      	subs	r2, #1
 800a1c4:	0512      	lsls	r2, r2, #20
 800a1c6:	430a      	orrs	r2, r1
 800a1c8:	431a      	orrs	r2, r3
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	68db      	ldr	r3, [r3, #12]
 800a1d2:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	1e59      	subs	r1, r3, #1
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	685b      	ldr	r3, [r3, #4]
 800a1e0:	3b01      	subs	r3, #1
 800a1e2:	011b      	lsls	r3, r3, #4
 800a1e4:	4319      	orrs	r1, r3
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	689b      	ldr	r3, [r3, #8]
 800a1ea:	3b01      	subs	r3, #1
 800a1ec:	021b      	lsls	r3, r3, #8
 800a1ee:	4319      	orrs	r1, r3
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	691b      	ldr	r3, [r3, #16]
 800a1f4:	3b01      	subs	r3, #1
 800a1f6:	041b      	lsls	r3, r3, #16
 800a1f8:	4319      	orrs	r1, r3
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	699b      	ldr	r3, [r3, #24]
 800a1fe:	3b01      	subs	r3, #1
 800a200:	061b      	lsls	r3, r3, #24
 800a202:	430b      	orrs	r3, r1
 800a204:	431a      	orrs	r2, r3
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800a20a:	2300      	movs	r3, #0
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3714      	adds	r7, #20
 800a210:	46bd      	mov	sp, r7
 800a212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a216:	4770      	bx	lr

0800a218 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800a218:	b084      	sub	sp, #16
 800a21a:	b480      	push	{r7}
 800a21c:	b085      	sub	sp, #20
 800a21e:	af00      	add	r7, sp, #0
 800a220:	6078      	str	r0, [r7, #4]
 800a222:	f107 001c 	add.w	r0, r7, #28
 800a226:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a22a:	2300      	movs	r3, #0
 800a22c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a22e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a230:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a232:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800a236:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800a23a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a23c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800a23e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800a242:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a244:	68fa      	ldr	r2, [r7, #12]
 800a246:	4313      	orrs	r3, r2
 800a248:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	685b      	ldr	r3, [r3, #4]
 800a24e:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800a252:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a256:	68fa      	ldr	r2, [r7, #12]
 800a258:	431a      	orrs	r2, r3
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a25e:	2300      	movs	r3, #0
}
 800a260:	4618      	mov	r0, r3
 800a262:	3714      	adds	r7, #20
 800a264:	46bd      	mov	sp, r7
 800a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26a:	b004      	add	sp, #16
 800a26c:	4770      	bx	lr

0800a26e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800a26e:	b480      	push	{r7}
 800a270:	b083      	sub	sp, #12
 800a272:	af00      	add	r7, sp, #0
 800a274:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	370c      	adds	r7, #12
 800a280:	46bd      	mov	sp, r7
 800a282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a286:	4770      	bx	lr

0800a288 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800a288:	b480      	push	{r7}
 800a28a:	b083      	sub	sp, #12
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2203      	movs	r2, #3
 800a294:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a296:	2300      	movs	r3, #0
}
 800a298:	4618      	mov	r0, r3
 800a29a:	370c      	adds	r7, #12
 800a29c:	46bd      	mov	sp, r7
 800a29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a2:	4770      	bx	lr

0800a2a4 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b083      	sub	sp, #12
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f003 0303 	and.w	r3, r3, #3
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	370c      	adds	r7, #12
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr

0800a2c0 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b085      	sub	sp, #20
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
 800a2c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	681a      	ldr	r2, [r3, #0]
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a2de:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a2e4:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a2ea:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a2ec:	68fa      	ldr	r2, [r7, #12]
 800a2ee:	4313      	orrs	r3, r2
 800a2f0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	68db      	ldr	r3, [r3, #12]
 800a2f6:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800a2fa:	f023 030f 	bic.w	r3, r3, #15
 800a2fe:	68fa      	ldr	r2, [r7, #12]
 800a300:	431a      	orrs	r2, r3
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a306:	2300      	movs	r3, #0
}
 800a308:	4618      	mov	r0, r3
 800a30a:	3714      	adds	r7, #20
 800a30c:	46bd      	mov	sp, r7
 800a30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a312:	4770      	bx	lr

0800a314 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800a314:	b480      	push	{r7}
 800a316:	b083      	sub	sp, #12
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	691b      	ldr	r3, [r3, #16]
 800a320:	b2db      	uxtb	r3, r3
}
 800a322:	4618      	mov	r0, r3
 800a324:	370c      	adds	r7, #12
 800a326:	46bd      	mov	sp, r7
 800a328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32c:	4770      	bx	lr

0800a32e <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800a32e:	b480      	push	{r7}
 800a330:	b085      	sub	sp, #20
 800a332:	af00      	add	r7, sp, #0
 800a334:	6078      	str	r0, [r7, #4]
 800a336:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	3314      	adds	r3, #20
 800a33c:	461a      	mov	r2, r3
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	4413      	add	r3, r2
 800a342:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681b      	ldr	r3, [r3, #0]
}  
 800a348:	4618      	mov	r0, r3
 800a34a:	3714      	adds	r7, #20
 800a34c:	46bd      	mov	sp, r7
 800a34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a352:	4770      	bx	lr

0800a354 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800a354:	b480      	push	{r7}
 800a356:	b085      	sub	sp, #20
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
 800a35c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a35e:	2300      	movs	r3, #0
 800a360:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	681a      	ldr	r2, [r3, #0]
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	685a      	ldr	r2, [r3, #4]
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a37a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a380:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a386:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a388:	68fa      	ldr	r2, [r7, #12]
 800a38a:	4313      	orrs	r3, r2
 800a38c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a392:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	431a      	orrs	r2, r3
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800a39e:	2300      	movs	r3, #0

}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3714      	adds	r7, #20
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3aa:	4770      	bx	lr

0800a3ac <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b088      	sub	sp, #32
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
 800a3b4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a3ba:	2310      	movs	r3, #16
 800a3bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a3be:	2340      	movs	r3, #64	@ 0x40
 800a3c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a3c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a3ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a3cc:	f107 0308 	add.w	r3, r7, #8
 800a3d0:	4619      	mov	r1, r3
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f7ff ff74 	bl	800a2c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800a3d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a3dc:	2110      	movs	r1, #16
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	f000 fa18 	bl	800a814 <SDMMC_GetCmdResp1>
 800a3e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a3e6:	69fb      	ldr	r3, [r7, #28]
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	3720      	adds	r7, #32
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}

0800a3f0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b088      	sub	sp, #32
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a3fe:	2311      	movs	r3, #17
 800a400:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a402:	2340      	movs	r3, #64	@ 0x40
 800a404:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a406:	2300      	movs	r3, #0
 800a408:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a40a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a40e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a410:	f107 0308 	add.w	r3, r7, #8
 800a414:	4619      	mov	r1, r3
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	f7ff ff52 	bl	800a2c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a41c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a420:	2111      	movs	r1, #17
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f000 f9f6 	bl	800a814 <SDMMC_GetCmdResp1>
 800a428:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a42a:	69fb      	ldr	r3, [r7, #28]
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3720      	adds	r7, #32
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}

0800a434 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b088      	sub	sp, #32
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a442:	2312      	movs	r3, #18
 800a444:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a446:	2340      	movs	r3, #64	@ 0x40
 800a448:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a44a:	2300      	movs	r3, #0
 800a44c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a44e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a452:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a454:	f107 0308 	add.w	r3, r7, #8
 800a458:	4619      	mov	r1, r3
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f7ff ff30 	bl	800a2c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a460:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a464:	2112      	movs	r1, #18
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f000 f9d4 	bl	800a814 <SDMMC_GetCmdResp1>
 800a46c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a46e:	69fb      	ldr	r3, [r7, #28]
}
 800a470:	4618      	mov	r0, r3
 800a472:	3720      	adds	r7, #32
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}

0800a478 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b088      	sub	sp, #32
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
 800a480:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a486:	2318      	movs	r3, #24
 800a488:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a48a:	2340      	movs	r3, #64	@ 0x40
 800a48c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a48e:	2300      	movs	r3, #0
 800a490:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a492:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a496:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a498:	f107 0308 	add.w	r3, r7, #8
 800a49c:	4619      	mov	r1, r3
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f7ff ff0e 	bl	800a2c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a4a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a4a8:	2118      	movs	r1, #24
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f000 f9b2 	bl	800a814 <SDMMC_GetCmdResp1>
 800a4b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a4b2:	69fb      	ldr	r3, [r7, #28]
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	3720      	adds	r7, #32
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}

0800a4bc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b088      	sub	sp, #32
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
 800a4c4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a4ca:	2319      	movs	r3, #25
 800a4cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a4ce:	2340      	movs	r3, #64	@ 0x40
 800a4d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a4d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a4da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a4dc:	f107 0308 	add.w	r3, r7, #8
 800a4e0:	4619      	mov	r1, r3
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f7ff feec 	bl	800a2c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a4e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a4ec:	2119      	movs	r1, #25
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f000 f990 	bl	800a814 <SDMMC_GetCmdResp1>
 800a4f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a4f6:	69fb      	ldr	r3, [r7, #28]
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3720      	adds	r7, #32
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}

0800a500 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b088      	sub	sp, #32
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a508:	2300      	movs	r3, #0
 800a50a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a50c:	230c      	movs	r3, #12
 800a50e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a510:	2340      	movs	r3, #64	@ 0x40
 800a512:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a514:	2300      	movs	r3, #0
 800a516:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a518:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a51c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a51e:	f107 0308 	add.w	r3, r7, #8
 800a522:	4619      	mov	r1, r3
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f7ff fecb 	bl	800a2c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800a52a:	4a05      	ldr	r2, [pc, #20]	@ (800a540 <SDMMC_CmdStopTransfer+0x40>)
 800a52c:	210c      	movs	r1, #12
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f000 f970 	bl	800a814 <SDMMC_GetCmdResp1>
 800a534:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a536:	69fb      	ldr	r3, [r7, #28]
}
 800a538:	4618      	mov	r0, r3
 800a53a:	3720      	adds	r7, #32
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}
 800a540:	05f5e100 	.word	0x05f5e100

0800a544 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b08a      	sub	sp, #40	@ 0x28
 800a548:	af00      	add	r7, sp, #0
 800a54a:	60f8      	str	r0, [r7, #12]
 800a54c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a554:	2307      	movs	r3, #7
 800a556:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a558:	2340      	movs	r3, #64	@ 0x40
 800a55a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a55c:	2300      	movs	r3, #0
 800a55e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a560:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a564:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a566:	f107 0310 	add.w	r3, r7, #16
 800a56a:	4619      	mov	r1, r3
 800a56c:	68f8      	ldr	r0, [r7, #12]
 800a56e:	f7ff fea7 	bl	800a2c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800a572:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a576:	2107      	movs	r1, #7
 800a578:	68f8      	ldr	r0, [r7, #12]
 800a57a:	f000 f94b 	bl	800a814 <SDMMC_GetCmdResp1>
 800a57e:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800a580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a582:	4618      	mov	r0, r3
 800a584:	3728      	adds	r7, #40	@ 0x28
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}

0800a58a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800a58a:	b580      	push	{r7, lr}
 800a58c:	b088      	sub	sp, #32
 800a58e:	af00      	add	r7, sp, #0
 800a590:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a592:	2300      	movs	r3, #0
 800a594:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a596:	2300      	movs	r3, #0
 800a598:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800a59a:	2300      	movs	r3, #0
 800a59c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a5a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a5a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a5a8:	f107 0308 	add.w	r3, r7, #8
 800a5ac:	4619      	mov	r1, r3
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	f7ff fe86 	bl	800a2c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	f000 fb65 	bl	800ac84 <SDMMC_GetCmdError>
 800a5ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a5bc:	69fb      	ldr	r3, [r7, #28]
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	3720      	adds	r7, #32
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}

0800a5c6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800a5c6:	b580      	push	{r7, lr}
 800a5c8:	b088      	sub	sp, #32
 800a5ca:	af00      	add	r7, sp, #0
 800a5cc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a5ce:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800a5d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a5d4:	2308      	movs	r3, #8
 800a5d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a5d8:	2340      	movs	r3, #64	@ 0x40
 800a5da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a5e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a5e4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a5e6:	f107 0308 	add.w	r3, r7, #8
 800a5ea:	4619      	mov	r1, r3
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f7ff fe67 	bl	800a2c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f000 faf8 	bl	800abe8 <SDMMC_GetCmdResp7>
 800a5f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a5fa:	69fb      	ldr	r3, [r7, #28]
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	3720      	adds	r7, #32
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}

0800a604 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b088      	sub	sp, #32
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
 800a60c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a612:	2337      	movs	r3, #55	@ 0x37
 800a614:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a616:	2340      	movs	r3, #64	@ 0x40
 800a618:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a61a:	2300      	movs	r3, #0
 800a61c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a61e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a622:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a624:	f107 0308 	add.w	r3, r7, #8
 800a628:	4619      	mov	r1, r3
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f7ff fe48 	bl	800a2c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800a630:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a634:	2137      	movs	r1, #55	@ 0x37
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	f000 f8ec 	bl	800a814 <SDMMC_GetCmdResp1>
 800a63c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a63e:	69fb      	ldr	r3, [r7, #28]
}
 800a640:	4618      	mov	r0, r3
 800a642:	3720      	adds	r7, #32
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}

0800a648 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b088      	sub	sp, #32
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
 800a650:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a658:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a65c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a65e:	2329      	movs	r3, #41	@ 0x29
 800a660:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a662:	2340      	movs	r3, #64	@ 0x40
 800a664:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a666:	2300      	movs	r3, #0
 800a668:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a66a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a66e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a670:	f107 0308 	add.w	r3, r7, #8
 800a674:	4619      	mov	r1, r3
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f7ff fe22 	bl	800a2c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f000 f9ff 	bl	800aa80 <SDMMC_GetCmdResp3>
 800a682:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a684:	69fb      	ldr	r3, [r7, #28]
}
 800a686:	4618      	mov	r0, r3
 800a688:	3720      	adds	r7, #32
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd80      	pop	{r7, pc}

0800a68e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800a68e:	b580      	push	{r7, lr}
 800a690:	b088      	sub	sp, #32
 800a692:	af00      	add	r7, sp, #0
 800a694:	6078      	str	r0, [r7, #4]
 800a696:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a69c:	2306      	movs	r3, #6
 800a69e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a6a0:	2340      	movs	r3, #64	@ 0x40
 800a6a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a6a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a6ac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a6ae:	f107 0308 	add.w	r3, r7, #8
 800a6b2:	4619      	mov	r1, r3
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f7ff fe03 	bl	800a2c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800a6ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a6be:	2106      	movs	r1, #6
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	f000 f8a7 	bl	800a814 <SDMMC_GetCmdResp1>
 800a6c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a6c8:	69fb      	ldr	r3, [r7, #28]
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3720      	adds	r7, #32
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}

0800a6d2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800a6d2:	b580      	push	{r7, lr}
 800a6d4:	b088      	sub	sp, #32
 800a6d6:	af00      	add	r7, sp, #0
 800a6d8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a6de:	2333      	movs	r3, #51	@ 0x33
 800a6e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a6e2:	2340      	movs	r3, #64	@ 0x40
 800a6e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a6ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a6ee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a6f0:	f107 0308 	add.w	r3, r7, #8
 800a6f4:	4619      	mov	r1, r3
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f7ff fde2 	bl	800a2c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800a6fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a700:	2133      	movs	r1, #51	@ 0x33
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f000 f886 	bl	800a814 <SDMMC_GetCmdResp1>
 800a708:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a70a:	69fb      	ldr	r3, [r7, #28]
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	3720      	adds	r7, #32
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}

0800a714 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b088      	sub	sp, #32
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a71c:	2300      	movs	r3, #0
 800a71e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a720:	2302      	movs	r3, #2
 800a722:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a724:	23c0      	movs	r3, #192	@ 0xc0
 800a726:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a728:	2300      	movs	r3, #0
 800a72a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a72c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a730:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a732:	f107 0308 	add.w	r3, r7, #8
 800a736:	4619      	mov	r1, r3
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f7ff fdc1 	bl	800a2c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f000 f956 	bl	800a9f0 <SDMMC_GetCmdResp2>
 800a744:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a746:	69fb      	ldr	r3, [r7, #28]
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3720      	adds	r7, #32
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}

0800a750 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b088      	sub	sp, #32
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
 800a758:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a75e:	2309      	movs	r3, #9
 800a760:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a762:	23c0      	movs	r3, #192	@ 0xc0
 800a764:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a766:	2300      	movs	r3, #0
 800a768:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a76a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a76e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a770:	f107 0308 	add.w	r3, r7, #8
 800a774:	4619      	mov	r1, r3
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f7ff fda2 	bl	800a2c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f000 f937 	bl	800a9f0 <SDMMC_GetCmdResp2>
 800a782:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a784:	69fb      	ldr	r3, [r7, #28]
}
 800a786:	4618      	mov	r0, r3
 800a788:	3720      	adds	r7, #32
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}

0800a78e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800a78e:	b580      	push	{r7, lr}
 800a790:	b088      	sub	sp, #32
 800a792:	af00      	add	r7, sp, #0
 800a794:	6078      	str	r0, [r7, #4]
 800a796:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a798:	2300      	movs	r3, #0
 800a79a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a79c:	2303      	movs	r3, #3
 800a79e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a7a0:	2340      	movs	r3, #64	@ 0x40
 800a7a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a7a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a7ac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a7ae:	f107 0308 	add.w	r3, r7, #8
 800a7b2:	4619      	mov	r1, r3
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f7ff fd83 	bl	800a2c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a7ba:	683a      	ldr	r2, [r7, #0]
 800a7bc:	2103      	movs	r1, #3
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f000 f99c 	bl	800aafc <SDMMC_GetCmdResp6>
 800a7c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a7c6:	69fb      	ldr	r3, [r7, #28]
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3720      	adds	r7, #32
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}

0800a7d0 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b088      	sub	sp, #32
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
 800a7d8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a7de:	230d      	movs	r3, #13
 800a7e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a7e2:	2340      	movs	r3, #64	@ 0x40
 800a7e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a7ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a7ee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a7f0:	f107 0308 	add.w	r3, r7, #8
 800a7f4:	4619      	mov	r1, r3
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f7ff fd62 	bl	800a2c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800a7fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a800:	210d      	movs	r1, #13
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f000 f806 	bl	800a814 <SDMMC_GetCmdResp1>
 800a808:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a80a:	69fb      	ldr	r3, [r7, #28]
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3720      	adds	r7, #32
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}

0800a814 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b088      	sub	sp, #32
 800a818:	af00      	add	r7, sp, #0
 800a81a:	60f8      	str	r0, [r7, #12]
 800a81c:	460b      	mov	r3, r1
 800a81e:	607a      	str	r2, [r7, #4]
 800a820:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a822:	4b70      	ldr	r3, [pc, #448]	@ (800a9e4 <SDMMC_GetCmdResp1+0x1d0>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	4a70      	ldr	r2, [pc, #448]	@ (800a9e8 <SDMMC_GetCmdResp1+0x1d4>)
 800a828:	fba2 2303 	umull	r2, r3, r2, r3
 800a82c:	0a5a      	lsrs	r2, r3, #9
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	fb02 f303 	mul.w	r3, r2, r3
 800a834:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a836:	69fb      	ldr	r3, [r7, #28]
 800a838:	1e5a      	subs	r2, r3, #1
 800a83a:	61fa      	str	r2, [r7, #28]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d102      	bne.n	800a846 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a840:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a844:	e0c9      	b.n	800a9da <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a84a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a84c:	69bb      	ldr	r3, [r7, #24]
 800a84e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a852:	2b00      	cmp	r3, #0
 800a854:	d0ef      	beq.n	800a836 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a856:	69bb      	ldr	r3, [r7, #24]
 800a858:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d1ea      	bne.n	800a836 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a864:	f003 0304 	and.w	r3, r3, #4
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d004      	beq.n	800a876 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	2204      	movs	r2, #4
 800a870:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a872:	2304      	movs	r3, #4
 800a874:	e0b1      	b.n	800a9da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a87a:	f003 0301 	and.w	r3, r3, #1
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d004      	beq.n	800a88c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	2201      	movs	r2, #1
 800a886:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a888:	2301      	movs	r3, #1
 800a88a:	e0a6      	b.n	800a9da <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	22c5      	movs	r2, #197	@ 0xc5
 800a890:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a892:	68f8      	ldr	r0, [r7, #12]
 800a894:	f7ff fd3e 	bl	800a314 <SDIO_GetCommandResponse>
 800a898:	4603      	mov	r3, r0
 800a89a:	461a      	mov	r2, r3
 800a89c:	7afb      	ldrb	r3, [r7, #11]
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	d001      	beq.n	800a8a6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	e099      	b.n	800a9da <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a8a6:	2100      	movs	r1, #0
 800a8a8:	68f8      	ldr	r0, [r7, #12]
 800a8aa:	f7ff fd40 	bl	800a32e <SDIO_GetResponse>
 800a8ae:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a8b0:	697a      	ldr	r2, [r7, #20]
 800a8b2:	4b4e      	ldr	r3, [pc, #312]	@ (800a9ec <SDMMC_GetCmdResp1+0x1d8>)
 800a8b4:	4013      	ands	r3, r2
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d101      	bne.n	800a8be <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	e08d      	b.n	800a9da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a8be:	697b      	ldr	r3, [r7, #20]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	da02      	bge.n	800a8ca <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a8c4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a8c8:	e087      	b.n	800a9da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a8ca:	697b      	ldr	r3, [r7, #20]
 800a8cc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d001      	beq.n	800a8d8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a8d4:	2340      	movs	r3, #64	@ 0x40
 800a8d6:	e080      	b.n	800a9da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a8d8:	697b      	ldr	r3, [r7, #20]
 800a8da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d001      	beq.n	800a8e6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a8e2:	2380      	movs	r3, #128	@ 0x80
 800a8e4:	e079      	b.n	800a9da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d002      	beq.n	800a8f6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a8f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a8f4:	e071      	b.n	800a9da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d002      	beq.n	800a906 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a900:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a904:	e069      	b.n	800a9da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a906:	697b      	ldr	r3, [r7, #20]
 800a908:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d002      	beq.n	800a916 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a910:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a914:	e061      	b.n	800a9da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a916:	697b      	ldr	r3, [r7, #20]
 800a918:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d002      	beq.n	800a926 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a920:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a924:	e059      	b.n	800a9da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a926:	697b      	ldr	r3, [r7, #20]
 800a928:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d002      	beq.n	800a936 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a930:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a934:	e051      	b.n	800a9da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d002      	beq.n	800a946 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a940:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a944:	e049      	b.n	800a9da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a946:	697b      	ldr	r3, [r7, #20]
 800a948:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d002      	beq.n	800a956 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a950:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a954:	e041      	b.n	800a9da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d002      	beq.n	800a966 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a960:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a964:	e039      	b.n	800a9da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a966:	697b      	ldr	r3, [r7, #20]
 800a968:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d002      	beq.n	800a976 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a970:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800a974:	e031      	b.n	800a9da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d002      	beq.n	800a986 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a980:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800a984:	e029      	b.n	800a9da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a986:	697b      	ldr	r3, [r7, #20]
 800a988:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d002      	beq.n	800a996 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a990:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a994:	e021      	b.n	800a9da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d002      	beq.n	800a9a6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a9a0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a9a4:	e019      	b.n	800a9da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a9a6:	697b      	ldr	r3, [r7, #20]
 800a9a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d002      	beq.n	800a9b6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a9b0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800a9b4:	e011      	b.n	800a9da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a9b6:	697b      	ldr	r3, [r7, #20]
 800a9b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d002      	beq.n	800a9c6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a9c0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800a9c4:	e009      	b.n	800a9da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	f003 0308 	and.w	r3, r3, #8
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d002      	beq.n	800a9d6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a9d0:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800a9d4:	e001      	b.n	800a9da <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a9d6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	3720      	adds	r7, #32
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd80      	pop	{r7, pc}
 800a9e2:	bf00      	nop
 800a9e4:	20000000 	.word	0x20000000
 800a9e8:	10624dd3 	.word	0x10624dd3
 800a9ec:	fdffe008 	.word	0xfdffe008

0800a9f0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b085      	sub	sp, #20
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a9f8:	4b1f      	ldr	r3, [pc, #124]	@ (800aa78 <SDMMC_GetCmdResp2+0x88>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	4a1f      	ldr	r2, [pc, #124]	@ (800aa7c <SDMMC_GetCmdResp2+0x8c>)
 800a9fe:	fba2 2303 	umull	r2, r3, r2, r3
 800aa02:	0a5b      	lsrs	r3, r3, #9
 800aa04:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aa08:	fb02 f303 	mul.w	r3, r2, r3
 800aa0c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	1e5a      	subs	r2, r3, #1
 800aa12:	60fa      	str	r2, [r7, #12]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d102      	bne.n	800aa1e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aa18:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800aa1c:	e026      	b.n	800aa6c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa22:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d0ef      	beq.n	800aa0e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800aa2e:	68bb      	ldr	r3, [r7, #8]
 800aa30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d1ea      	bne.n	800aa0e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa3c:	f003 0304 	and.w	r3, r3, #4
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d004      	beq.n	800aa4e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2204      	movs	r2, #4
 800aa48:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aa4a:	2304      	movs	r3, #4
 800aa4c:	e00e      	b.n	800aa6c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa52:	f003 0301 	and.w	r3, r3, #1
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d004      	beq.n	800aa64 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2201      	movs	r2, #1
 800aa5e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aa60:	2301      	movs	r3, #1
 800aa62:	e003      	b.n	800aa6c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	22c5      	movs	r2, #197	@ 0xc5
 800aa68:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800aa6a:	2300      	movs	r3, #0
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	3714      	adds	r7, #20
 800aa70:	46bd      	mov	sp, r7
 800aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa76:	4770      	bx	lr
 800aa78:	20000000 	.word	0x20000000
 800aa7c:	10624dd3 	.word	0x10624dd3

0800aa80 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800aa80:	b480      	push	{r7}
 800aa82:	b085      	sub	sp, #20
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800aa88:	4b1a      	ldr	r3, [pc, #104]	@ (800aaf4 <SDMMC_GetCmdResp3+0x74>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	4a1a      	ldr	r2, [pc, #104]	@ (800aaf8 <SDMMC_GetCmdResp3+0x78>)
 800aa8e:	fba2 2303 	umull	r2, r3, r2, r3
 800aa92:	0a5b      	lsrs	r3, r3, #9
 800aa94:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aa98:	fb02 f303 	mul.w	r3, r2, r3
 800aa9c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	1e5a      	subs	r2, r3, #1
 800aaa2:	60fa      	str	r2, [r7, #12]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d102      	bne.n	800aaae <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aaa8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800aaac:	e01b      	b.n	800aae6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aab2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d0ef      	beq.n	800aa9e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d1ea      	bne.n	800aa9e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aacc:	f003 0304 	and.w	r3, r3, #4
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d004      	beq.n	800aade <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2204      	movs	r2, #4
 800aad8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aada:	2304      	movs	r3, #4
 800aadc:	e003      	b.n	800aae6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	22c5      	movs	r2, #197	@ 0xc5
 800aae2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800aae4:	2300      	movs	r3, #0
}
 800aae6:	4618      	mov	r0, r3
 800aae8:	3714      	adds	r7, #20
 800aaea:	46bd      	mov	sp, r7
 800aaec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf0:	4770      	bx	lr
 800aaf2:	bf00      	nop
 800aaf4:	20000000 	.word	0x20000000
 800aaf8:	10624dd3 	.word	0x10624dd3

0800aafc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b088      	sub	sp, #32
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	60f8      	str	r0, [r7, #12]
 800ab04:	460b      	mov	r3, r1
 800ab06:	607a      	str	r2, [r7, #4]
 800ab08:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ab0a:	4b35      	ldr	r3, [pc, #212]	@ (800abe0 <SDMMC_GetCmdResp6+0xe4>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	4a35      	ldr	r2, [pc, #212]	@ (800abe4 <SDMMC_GetCmdResp6+0xe8>)
 800ab10:	fba2 2303 	umull	r2, r3, r2, r3
 800ab14:	0a5b      	lsrs	r3, r3, #9
 800ab16:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ab1a:	fb02 f303 	mul.w	r3, r2, r3
 800ab1e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800ab20:	69fb      	ldr	r3, [r7, #28]
 800ab22:	1e5a      	subs	r2, r3, #1
 800ab24:	61fa      	str	r2, [r7, #28]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d102      	bne.n	800ab30 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ab2a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ab2e:	e052      	b.n	800abd6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab34:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ab36:	69bb      	ldr	r3, [r7, #24]
 800ab38:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d0ef      	beq.n	800ab20 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ab40:	69bb      	ldr	r3, [r7, #24]
 800ab42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d1ea      	bne.n	800ab20 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab4e:	f003 0304 	and.w	r3, r3, #4
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d004      	beq.n	800ab60 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	2204      	movs	r2, #4
 800ab5a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ab5c:	2304      	movs	r3, #4
 800ab5e:	e03a      	b.n	800abd6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab64:	f003 0301 	and.w	r3, r3, #1
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d004      	beq.n	800ab76 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	2201      	movs	r2, #1
 800ab70:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ab72:	2301      	movs	r3, #1
 800ab74:	e02f      	b.n	800abd6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ab76:	68f8      	ldr	r0, [r7, #12]
 800ab78:	f7ff fbcc 	bl	800a314 <SDIO_GetCommandResponse>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	461a      	mov	r2, r3
 800ab80:	7afb      	ldrb	r3, [r7, #11]
 800ab82:	4293      	cmp	r3, r2
 800ab84:	d001      	beq.n	800ab8a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ab86:	2301      	movs	r3, #1
 800ab88:	e025      	b.n	800abd6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	22c5      	movs	r2, #197	@ 0xc5
 800ab8e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ab90:	2100      	movs	r1, #0
 800ab92:	68f8      	ldr	r0, [r7, #12]
 800ab94:	f7ff fbcb 	bl	800a32e <SDIO_GetResponse>
 800ab98:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d106      	bne.n	800abb2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800aba4:	697b      	ldr	r3, [r7, #20]
 800aba6:	0c1b      	lsrs	r3, r3, #16
 800aba8:	b29a      	uxth	r2, r3
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800abae:	2300      	movs	r3, #0
 800abb0:	e011      	b.n	800abd6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d002      	beq.n	800abc2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800abbc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800abc0:	e009      	b.n	800abd6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800abc2:	697b      	ldr	r3, [r7, #20]
 800abc4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d002      	beq.n	800abd2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800abcc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800abd0:	e001      	b.n	800abd6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800abd2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800abd6:	4618      	mov	r0, r3
 800abd8:	3720      	adds	r7, #32
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}
 800abde:	bf00      	nop
 800abe0:	20000000 	.word	0x20000000
 800abe4:	10624dd3 	.word	0x10624dd3

0800abe8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800abe8:	b480      	push	{r7}
 800abea:	b085      	sub	sp, #20
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800abf0:	4b22      	ldr	r3, [pc, #136]	@ (800ac7c <SDMMC_GetCmdResp7+0x94>)
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	4a22      	ldr	r2, [pc, #136]	@ (800ac80 <SDMMC_GetCmdResp7+0x98>)
 800abf6:	fba2 2303 	umull	r2, r3, r2, r3
 800abfa:	0a5b      	lsrs	r3, r3, #9
 800abfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac00:	fb02 f303 	mul.w	r3, r2, r3
 800ac04:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	1e5a      	subs	r2, r3, #1
 800ac0a:	60fa      	str	r2, [r7, #12]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d102      	bne.n	800ac16 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ac10:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ac14:	e02c      	b.n	800ac70 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac1a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d0ef      	beq.n	800ac06 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d1ea      	bne.n	800ac06 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac34:	f003 0304 	and.w	r3, r3, #4
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d004      	beq.n	800ac46 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2204      	movs	r2, #4
 800ac40:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ac42:	2304      	movs	r3, #4
 800ac44:	e014      	b.n	800ac70 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac4a:	f003 0301 	and.w	r3, r3, #1
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d004      	beq.n	800ac5c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	2201      	movs	r2, #1
 800ac56:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ac58:	2301      	movs	r3, #1
 800ac5a:	e009      	b.n	800ac70 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d002      	beq.n	800ac6e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2240      	movs	r2, #64	@ 0x40
 800ac6c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ac6e:	2300      	movs	r3, #0
  
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	3714      	adds	r7, #20
 800ac74:	46bd      	mov	sp, r7
 800ac76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7a:	4770      	bx	lr
 800ac7c:	20000000 	.word	0x20000000
 800ac80:	10624dd3 	.word	0x10624dd3

0800ac84 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800ac84:	b480      	push	{r7}
 800ac86:	b085      	sub	sp, #20
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ac8c:	4b11      	ldr	r3, [pc, #68]	@ (800acd4 <SDMMC_GetCmdError+0x50>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	4a11      	ldr	r2, [pc, #68]	@ (800acd8 <SDMMC_GetCmdError+0x54>)
 800ac92:	fba2 2303 	umull	r2, r3, r2, r3
 800ac96:	0a5b      	lsrs	r3, r3, #9
 800ac98:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac9c:	fb02 f303 	mul.w	r3, r2, r3
 800aca0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	1e5a      	subs	r2, r3, #1
 800aca6:	60fa      	str	r2, [r7, #12]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d102      	bne.n	800acb2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800acac:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800acb0:	e009      	b.n	800acc6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800acb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d0f1      	beq.n	800aca2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	22c5      	movs	r2, #197	@ 0xc5
 800acc2:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800acc4:	2300      	movs	r3, #0
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	3714      	adds	r7, #20
 800acca:	46bd      	mov	sp, r7
 800accc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd0:	4770      	bx	lr
 800acd2:	bf00      	nop
 800acd4:	20000000 	.word	0x20000000
 800acd8:	10624dd3 	.word	0x10624dd3

0800acdc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ace0:	4904      	ldr	r1, [pc, #16]	@ (800acf4 <MX_FATFS_Init+0x18>)
 800ace2:	4805      	ldr	r0, [pc, #20]	@ (800acf8 <MX_FATFS_Init+0x1c>)
 800ace4:	f000 fa8a 	bl	800b1fc <FATFS_LinkDriver>
 800ace8:	4603      	mov	r3, r0
 800acea:	461a      	mov	r2, r3
 800acec:	4b03      	ldr	r3, [pc, #12]	@ (800acfc <MX_FATFS_Init+0x20>)
 800acee:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800acf0:	bf00      	nop
 800acf2:	bd80      	pop	{r7, pc}
 800acf4:	200016e0 	.word	0x200016e0
 800acf8:	080109f8 	.word	0x080109f8
 800acfc:	200016dc 	.word	0x200016dc

0800ad00 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b082      	sub	sp, #8
 800ad04:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ad06:	2300      	movs	r3, #0
 800ad08:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ad0a:	f000 f87b 	bl	800ae04 <BSP_SD_IsDetected>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	2b01      	cmp	r3, #1
 800ad12:	d001      	beq.n	800ad18 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800ad14:	2301      	movs	r3, #1
 800ad16:	e012      	b.n	800ad3e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800ad18:	480b      	ldr	r0, [pc, #44]	@ (800ad48 <BSP_SD_Init+0x48>)
 800ad1a:	f7fc fb91 	bl	8007440 <HAL_SD_Init>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800ad22:	79fb      	ldrb	r3, [r7, #7]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d109      	bne.n	800ad3c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800ad28:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800ad2c:	4806      	ldr	r0, [pc, #24]	@ (800ad48 <BSP_SD_Init+0x48>)
 800ad2e:	f7fc ffd3 	bl	8007cd8 <HAL_SD_ConfigWideBusOperation>
 800ad32:	4603      	mov	r3, r0
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d001      	beq.n	800ad3c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800ad38:	2301      	movs	r3, #1
 800ad3a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800ad3c:	79fb      	ldrb	r3, [r7, #7]
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3708      	adds	r7, #8
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}
 800ad46:	bf00      	nop
 800ad48:	20000420 	.word	0x20000420

0800ad4c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b086      	sub	sp, #24
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	60f8      	str	r0, [r7, #12]
 800ad54:	60b9      	str	r1, [r7, #8]
 800ad56:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ad58:	2300      	movs	r3, #0
 800ad5a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	68ba      	ldr	r2, [r7, #8]
 800ad60:	68f9      	ldr	r1, [r7, #12]
 800ad62:	4806      	ldr	r0, [pc, #24]	@ (800ad7c <BSP_SD_ReadBlocks_DMA+0x30>)
 800ad64:	f7fc fc1c 	bl	80075a0 <HAL_SD_ReadBlocks_DMA>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d001      	beq.n	800ad72 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ad6e:	2301      	movs	r3, #1
 800ad70:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ad72:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad74:	4618      	mov	r0, r3
 800ad76:	3718      	adds	r7, #24
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd80      	pop	{r7, pc}
 800ad7c:	20000420 	.word	0x20000420

0800ad80 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b086      	sub	sp, #24
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	60f8      	str	r0, [r7, #12]
 800ad88:	60b9      	str	r1, [r7, #8]
 800ad8a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	68ba      	ldr	r2, [r7, #8]
 800ad94:	68f9      	ldr	r1, [r7, #12]
 800ad96:	4806      	ldr	r0, [pc, #24]	@ (800adb0 <BSP_SD_WriteBlocks_DMA+0x30>)
 800ad98:	f7fc fce2 	bl	8007760 <HAL_SD_WriteBlocks_DMA>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d001      	beq.n	800ada6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ada2:	2301      	movs	r3, #1
 800ada4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ada6:	7dfb      	ldrb	r3, [r7, #23]
}
 800ada8:	4618      	mov	r0, r3
 800adaa:	3718      	adds	r7, #24
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}
 800adb0:	20000420 	.word	0x20000420

0800adb4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800adb8:	4805      	ldr	r0, [pc, #20]	@ (800add0 <BSP_SD_GetCardState+0x1c>)
 800adba:	f7fd f827 	bl	8007e0c <HAL_SD_GetCardState>
 800adbe:	4603      	mov	r3, r0
 800adc0:	2b04      	cmp	r3, #4
 800adc2:	bf14      	ite	ne
 800adc4:	2301      	movne	r3, #1
 800adc6:	2300      	moveq	r3, #0
 800adc8:	b2db      	uxtb	r3, r3
}
 800adca:	4618      	mov	r0, r3
 800adcc:	bd80      	pop	{r7, pc}
 800adce:	bf00      	nop
 800add0:	20000420 	.word	0x20000420

0800add4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b082      	sub	sp, #8
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800addc:	6879      	ldr	r1, [r7, #4]
 800adde:	4803      	ldr	r0, [pc, #12]	@ (800adec <BSP_SD_GetCardInfo+0x18>)
 800ade0:	f7fc ff4e 	bl	8007c80 <HAL_SD_GetCardInfo>
}
 800ade4:	bf00      	nop
 800ade6:	3708      	adds	r7, #8
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}
 800adec:	20000420 	.word	0x20000420

0800adf0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b082      	sub	sp, #8
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800adf8:	f000 f9a2 	bl	800b140 <BSP_SD_ReadCpltCallback>
}
 800adfc:	bf00      	nop
 800adfe:	3708      	adds	r7, #8
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bd80      	pop	{r7, pc}

0800ae04 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b082      	sub	sp, #8
 800ae08:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800ae0e:	f000 f80b 	bl	800ae28 <BSP_PlatformIsDetected>
 800ae12:	4603      	mov	r3, r0
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d101      	bne.n	800ae1c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800ae18:	2300      	movs	r3, #0
 800ae1a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800ae1c:	79fb      	ldrb	r3, [r7, #7]
 800ae1e:	b2db      	uxtb	r3, r3
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	3708      	adds	r7, #8
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}

0800ae28 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b082      	sub	sp, #8
 800ae2c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800ae2e:	2301      	movs	r3, #1
 800ae30:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800ae32:	2104      	movs	r1, #4
 800ae34:	4806      	ldr	r0, [pc, #24]	@ (800ae50 <BSP_PlatformIsDetected+0x28>)
 800ae36:	f7fa fbd5 	bl	80055e4 <HAL_GPIO_ReadPin>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d001      	beq.n	800ae44 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800ae40:	2300      	movs	r3, #0
 800ae42:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800ae44:	79fb      	ldrb	r3, [r7, #7]
}
 800ae46:	4618      	mov	r0, r3
 800ae48:	3708      	adds	r7, #8
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}
 800ae4e:	bf00      	nop
 800ae50:	40021800 	.word	0x40021800

0800ae54 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b084      	sub	sp, #16
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800ae5c:	f000 fa8e 	bl	800b37c <osKernelGetTickCount>
 800ae60:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800ae62:	e006      	b.n	800ae72 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ae64:	f7ff ffa6 	bl	800adb4 <BSP_SD_GetCardState>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d101      	bne.n	800ae72 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	e009      	b.n	800ae86 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800ae72:	f000 fa83 	bl	800b37c <osKernelGetTickCount>
 800ae76:	4602      	mov	r2, r0
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	1ad3      	subs	r3, r2, r3
 800ae7c:	687a      	ldr	r2, [r7, #4]
 800ae7e:	429a      	cmp	r2, r3
 800ae80:	d8f0      	bhi.n	800ae64 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800ae82:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ae86:	4618      	mov	r0, r3
 800ae88:	3710      	adds	r7, #16
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	bd80      	pop	{r7, pc}
	...

0800ae90 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b082      	sub	sp, #8
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	4603      	mov	r3, r0
 800ae98:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ae9a:	4b0b      	ldr	r3, [pc, #44]	@ (800aec8 <SD_CheckStatus+0x38>)
 800ae9c:	2201      	movs	r2, #1
 800ae9e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800aea0:	f7ff ff88 	bl	800adb4 <BSP_SD_GetCardState>
 800aea4:	4603      	mov	r3, r0
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d107      	bne.n	800aeba <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800aeaa:	4b07      	ldr	r3, [pc, #28]	@ (800aec8 <SD_CheckStatus+0x38>)
 800aeac:	781b      	ldrb	r3, [r3, #0]
 800aeae:	b2db      	uxtb	r3, r3
 800aeb0:	f023 0301 	bic.w	r3, r3, #1
 800aeb4:	b2da      	uxtb	r2, r3
 800aeb6:	4b04      	ldr	r3, [pc, #16]	@ (800aec8 <SD_CheckStatus+0x38>)
 800aeb8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800aeba:	4b03      	ldr	r3, [pc, #12]	@ (800aec8 <SD_CheckStatus+0x38>)
 800aebc:	781b      	ldrb	r3, [r3, #0]
 800aebe:	b2db      	uxtb	r3, r3
}
 800aec0:	4618      	mov	r0, r3
 800aec2:	3708      	adds	r7, #8
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd80      	pop	{r7, pc}
 800aec8:	20000009 	.word	0x20000009

0800aecc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b082      	sub	sp, #8
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	4603      	mov	r3, r0
 800aed4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800aed6:	4b1c      	ldr	r3, [pc, #112]	@ (800af48 <SD_initialize+0x7c>)
 800aed8:	2201      	movs	r2, #1
 800aeda:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800aedc:	f000 fa06 	bl	800b2ec <osKernelGetState>
 800aee0:	4603      	mov	r3, r0
 800aee2:	2b02      	cmp	r3, #2
 800aee4:	d129      	bne.n	800af3a <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800aee6:	f7ff ff0b 	bl	800ad00 <BSP_SD_Init>
 800aeea:	4603      	mov	r3, r0
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d107      	bne.n	800af00 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800aef0:	79fb      	ldrb	r3, [r7, #7]
 800aef2:	4618      	mov	r0, r3
 800aef4:	f7ff ffcc 	bl	800ae90 <SD_CheckStatus>
 800aef8:	4603      	mov	r3, r0
 800aefa:	461a      	mov	r2, r3
 800aefc:	4b12      	ldr	r3, [pc, #72]	@ (800af48 <SD_initialize+0x7c>)
 800aefe:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800af00:	4b11      	ldr	r3, [pc, #68]	@ (800af48 <SD_initialize+0x7c>)
 800af02:	781b      	ldrb	r3, [r3, #0]
 800af04:	b2db      	uxtb	r3, r3
 800af06:	2b01      	cmp	r3, #1
 800af08:	d017      	beq.n	800af3a <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800af0a:	4b10      	ldr	r3, [pc, #64]	@ (800af4c <SD_initialize+0x80>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d107      	bne.n	800af22 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800af12:	2200      	movs	r2, #0
 800af14:	2102      	movs	r1, #2
 800af16:	200a      	movs	r0, #10
 800af18:	f000 fbf6 	bl	800b708 <osMessageQueueNew>
 800af1c:	4603      	mov	r3, r0
 800af1e:	4a0b      	ldr	r2, [pc, #44]	@ (800af4c <SD_initialize+0x80>)
 800af20:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 800af22:	4b0a      	ldr	r3, [pc, #40]	@ (800af4c <SD_initialize+0x80>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d107      	bne.n	800af3a <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800af2a:	4b07      	ldr	r3, [pc, #28]	@ (800af48 <SD_initialize+0x7c>)
 800af2c:	781b      	ldrb	r3, [r3, #0]
 800af2e:	b2db      	uxtb	r3, r3
 800af30:	f043 0301 	orr.w	r3, r3, #1
 800af34:	b2da      	uxtb	r2, r3
 800af36:	4b04      	ldr	r3, [pc, #16]	@ (800af48 <SD_initialize+0x7c>)
 800af38:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800af3a:	4b03      	ldr	r3, [pc, #12]	@ (800af48 <SD_initialize+0x7c>)
 800af3c:	781b      	ldrb	r3, [r3, #0]
 800af3e:	b2db      	uxtb	r3, r3
}
 800af40:	4618      	mov	r0, r3
 800af42:	3708      	adds	r7, #8
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}
 800af48:	20000009 	.word	0x20000009
 800af4c:	200016e4 	.word	0x200016e4

0800af50 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b082      	sub	sp, #8
 800af54:	af00      	add	r7, sp, #0
 800af56:	4603      	mov	r3, r0
 800af58:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800af5a:	79fb      	ldrb	r3, [r7, #7]
 800af5c:	4618      	mov	r0, r3
 800af5e:	f7ff ff97 	bl	800ae90 <SD_CheckStatus>
 800af62:	4603      	mov	r3, r0
}
 800af64:	4618      	mov	r0, r3
 800af66:	3708      	adds	r7, #8
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}

0800af6c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b088      	sub	sp, #32
 800af70:	af00      	add	r7, sp, #0
 800af72:	60b9      	str	r1, [r7, #8]
 800af74:	607a      	str	r2, [r7, #4]
 800af76:	603b      	str	r3, [r7, #0]
 800af78:	4603      	mov	r3, r0
 800af7a:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800af7c:	2301      	movs	r3, #1
 800af7e:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800af80:	f247 5030 	movw	r0, #30000	@ 0x7530
 800af84:	f7ff ff66 	bl	800ae54 <SD_CheckStatusWithTimeout>
 800af88:	4603      	mov	r3, r0
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	da01      	bge.n	800af92 <SD_read+0x26>
  {
    return res;
 800af8e:	7ffb      	ldrb	r3, [r7, #31]
 800af90:	e02f      	b.n	800aff2 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800af92:	683a      	ldr	r2, [r7, #0]
 800af94:	6879      	ldr	r1, [r7, #4]
 800af96:	68b8      	ldr	r0, [r7, #8]
 800af98:	f7ff fed8 	bl	800ad4c <BSP_SD_ReadBlocks_DMA>
 800af9c:	4603      	mov	r3, r0
 800af9e:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800afa0:	7fbb      	ldrb	r3, [r7, #30]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d124      	bne.n	800aff0 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800afa6:	4b15      	ldr	r3, [pc, #84]	@ (800affc <SD_read+0x90>)
 800afa8:	6818      	ldr	r0, [r3, #0]
 800afaa:	f107 0112 	add.w	r1, r7, #18
 800afae:	f247 5330 	movw	r3, #30000	@ 0x7530
 800afb2:	2200      	movs	r2, #0
 800afb4:	f000 fc7c 	bl	800b8b0 <osMessageQueueGet>
 800afb8:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800afba:	69bb      	ldr	r3, [r7, #24]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d117      	bne.n	800aff0 <SD_read+0x84>
 800afc0:	8a7b      	ldrh	r3, [r7, #18]
 800afc2:	2b01      	cmp	r3, #1
 800afc4:	d114      	bne.n	800aff0 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800afc6:	f000 f9d9 	bl	800b37c <osKernelGetTickCount>
 800afca:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800afcc:	e007      	b.n	800afde <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800afce:	f7ff fef1 	bl	800adb4 <BSP_SD_GetCardState>
 800afd2:	4603      	mov	r3, r0
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d102      	bne.n	800afde <SD_read+0x72>
              {
                res = RES_OK;
 800afd8:	2300      	movs	r3, #0
 800afda:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800afdc:	e008      	b.n	800aff0 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800afde:	f000 f9cd 	bl	800b37c <osKernelGetTickCount>
 800afe2:	4602      	mov	r2, r0
 800afe4:	697b      	ldr	r3, [r7, #20]
 800afe6:	1ad3      	subs	r3, r2, r3
 800afe8:	f247 522f 	movw	r2, #29999	@ 0x752f
 800afec:	4293      	cmp	r3, r2
 800afee:	d9ee      	bls.n	800afce <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800aff0:	7ffb      	ldrb	r3, [r7, #31]
}
 800aff2:	4618      	mov	r0, r3
 800aff4:	3720      	adds	r7, #32
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bd80      	pop	{r7, pc}
 800affa:	bf00      	nop
 800affc:	200016e4 	.word	0x200016e4

0800b000 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b088      	sub	sp, #32
 800b004:	af00      	add	r7, sp, #0
 800b006:	60b9      	str	r1, [r7, #8]
 800b008:	607a      	str	r2, [r7, #4]
 800b00a:	603b      	str	r3, [r7, #0]
 800b00c:	4603      	mov	r3, r0
 800b00e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b010:	2301      	movs	r3, #1
 800b012:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b014:	f247 5030 	movw	r0, #30000	@ 0x7530
 800b018:	f7ff ff1c 	bl	800ae54 <SD_CheckStatusWithTimeout>
 800b01c:	4603      	mov	r3, r0
 800b01e:	2b00      	cmp	r3, #0
 800b020:	da01      	bge.n	800b026 <SD_write+0x26>
  {
    return res;
 800b022:	7ffb      	ldrb	r3, [r7, #31]
 800b024:	e02d      	b.n	800b082 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800b026:	683a      	ldr	r2, [r7, #0]
 800b028:	6879      	ldr	r1, [r7, #4]
 800b02a:	68b8      	ldr	r0, [r7, #8]
 800b02c:	f7ff fea8 	bl	800ad80 <BSP_SD_WriteBlocks_DMA>
 800b030:	4603      	mov	r3, r0
 800b032:	2b00      	cmp	r3, #0
 800b034:	d124      	bne.n	800b080 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800b036:	4b15      	ldr	r3, [pc, #84]	@ (800b08c <SD_write+0x8c>)
 800b038:	6818      	ldr	r0, [r3, #0]
 800b03a:	f107 0112 	add.w	r1, r7, #18
 800b03e:	f247 5330 	movw	r3, #30000	@ 0x7530
 800b042:	2200      	movs	r2, #0
 800b044:	f000 fc34 	bl	800b8b0 <osMessageQueueGet>
 800b048:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800b04a:	69bb      	ldr	r3, [r7, #24]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d117      	bne.n	800b080 <SD_write+0x80>
 800b050:	8a7b      	ldrh	r3, [r7, #18]
 800b052:	2b02      	cmp	r3, #2
 800b054:	d114      	bne.n	800b080 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800b056:	f000 f991 	bl	800b37c <osKernelGetTickCount>
 800b05a:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800b05c:	e007      	b.n	800b06e <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b05e:	f7ff fea9 	bl	800adb4 <BSP_SD_GetCardState>
 800b062:	4603      	mov	r3, r0
 800b064:	2b00      	cmp	r3, #0
 800b066:	d102      	bne.n	800b06e <SD_write+0x6e>
          {
            res = RES_OK;
 800b068:	2300      	movs	r3, #0
 800b06a:	77fb      	strb	r3, [r7, #31]
            break;
 800b06c:	e008      	b.n	800b080 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800b06e:	f000 f985 	bl	800b37c <osKernelGetTickCount>
 800b072:	4602      	mov	r2, r0
 800b074:	697b      	ldr	r3, [r7, #20]
 800b076:	1ad3      	subs	r3, r2, r3
 800b078:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b07c:	4293      	cmp	r3, r2
 800b07e:	d9ee      	bls.n	800b05e <SD_write+0x5e>
    }

  }
#endif

  return res;
 800b080:	7ffb      	ldrb	r3, [r7, #31]
}
 800b082:	4618      	mov	r0, r3
 800b084:	3720      	adds	r7, #32
 800b086:	46bd      	mov	sp, r7
 800b088:	bd80      	pop	{r7, pc}
 800b08a:	bf00      	nop
 800b08c:	200016e4 	.word	0x200016e4

0800b090 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b08c      	sub	sp, #48	@ 0x30
 800b094:	af00      	add	r7, sp, #0
 800b096:	4603      	mov	r3, r0
 800b098:	603a      	str	r2, [r7, #0]
 800b09a:	71fb      	strb	r3, [r7, #7]
 800b09c:	460b      	mov	r3, r1
 800b09e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b0a0:	2301      	movs	r3, #1
 800b0a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b0a6:	4b25      	ldr	r3, [pc, #148]	@ (800b13c <SD_ioctl+0xac>)
 800b0a8:	781b      	ldrb	r3, [r3, #0]
 800b0aa:	b2db      	uxtb	r3, r3
 800b0ac:	f003 0301 	and.w	r3, r3, #1
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d001      	beq.n	800b0b8 <SD_ioctl+0x28>
 800b0b4:	2303      	movs	r3, #3
 800b0b6:	e03c      	b.n	800b132 <SD_ioctl+0xa2>

  switch (cmd)
 800b0b8:	79bb      	ldrb	r3, [r7, #6]
 800b0ba:	2b03      	cmp	r3, #3
 800b0bc:	d834      	bhi.n	800b128 <SD_ioctl+0x98>
 800b0be:	a201      	add	r2, pc, #4	@ (adr r2, 800b0c4 <SD_ioctl+0x34>)
 800b0c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0c4:	0800b0d5 	.word	0x0800b0d5
 800b0c8:	0800b0dd 	.word	0x0800b0dd
 800b0cc:	0800b0f5 	.word	0x0800b0f5
 800b0d0:	0800b10f 	.word	0x0800b10f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b0da:	e028      	b.n	800b12e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b0dc:	f107 030c 	add.w	r3, r7, #12
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f7ff fe77 	bl	800add4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b0e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b0f2:	e01c      	b.n	800b12e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b0f4:	f107 030c 	add.w	r3, r7, #12
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	f7ff fe6b 	bl	800add4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b0fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b100:	b29a      	uxth	r2, r3
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b106:	2300      	movs	r3, #0
 800b108:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b10c:	e00f      	b.n	800b12e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b10e:	f107 030c 	add.w	r3, r7, #12
 800b112:	4618      	mov	r0, r3
 800b114:	f7ff fe5e 	bl	800add4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b11a:	0a5a      	lsrs	r2, r3, #9
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b120:	2300      	movs	r3, #0
 800b122:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b126:	e002      	b.n	800b12e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b128:	2304      	movs	r3, #4
 800b12a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800b12e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b132:	4618      	mov	r0, r3
 800b134:	3730      	adds	r7, #48	@ 0x30
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}
 800b13a:	bf00      	nop
 800b13c:	20000009 	.word	0x20000009

0800b140 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b082      	sub	sp, #8
 800b144:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800b146:	2301      	movs	r3, #1
 800b148:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
 800b14a:	4b05      	ldr	r3, [pc, #20]	@ (800b160 <BSP_SD_ReadCpltCallback+0x20>)
 800b14c:	6818      	ldr	r0, [r3, #0]
 800b14e:	1db9      	adds	r1, r7, #6
 800b150:	2300      	movs	r3, #0
 800b152:	2200      	movs	r2, #0
 800b154:	f000 fb4c 	bl	800b7f0 <osMessageQueuePut>
#endif
}
 800b158:	bf00      	nop
 800b15a:	3708      	adds	r7, #8
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}
 800b160:	200016e4 	.word	0x200016e4

0800b164 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b164:	b480      	push	{r7}
 800b166:	b087      	sub	sp, #28
 800b168:	af00      	add	r7, sp, #0
 800b16a:	60f8      	str	r0, [r7, #12]
 800b16c:	60b9      	str	r1, [r7, #8]
 800b16e:	4613      	mov	r3, r2
 800b170:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b172:	2301      	movs	r3, #1
 800b174:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b176:	2300      	movs	r3, #0
 800b178:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b17a:	4b1f      	ldr	r3, [pc, #124]	@ (800b1f8 <FATFS_LinkDriverEx+0x94>)
 800b17c:	7a5b      	ldrb	r3, [r3, #9]
 800b17e:	b2db      	uxtb	r3, r3
 800b180:	2b00      	cmp	r3, #0
 800b182:	d131      	bne.n	800b1e8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b184:	4b1c      	ldr	r3, [pc, #112]	@ (800b1f8 <FATFS_LinkDriverEx+0x94>)
 800b186:	7a5b      	ldrb	r3, [r3, #9]
 800b188:	b2db      	uxtb	r3, r3
 800b18a:	461a      	mov	r2, r3
 800b18c:	4b1a      	ldr	r3, [pc, #104]	@ (800b1f8 <FATFS_LinkDriverEx+0x94>)
 800b18e:	2100      	movs	r1, #0
 800b190:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b192:	4b19      	ldr	r3, [pc, #100]	@ (800b1f8 <FATFS_LinkDriverEx+0x94>)
 800b194:	7a5b      	ldrb	r3, [r3, #9]
 800b196:	b2db      	uxtb	r3, r3
 800b198:	4a17      	ldr	r2, [pc, #92]	@ (800b1f8 <FATFS_LinkDriverEx+0x94>)
 800b19a:	009b      	lsls	r3, r3, #2
 800b19c:	4413      	add	r3, r2
 800b19e:	68fa      	ldr	r2, [r7, #12]
 800b1a0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b1a2:	4b15      	ldr	r3, [pc, #84]	@ (800b1f8 <FATFS_LinkDriverEx+0x94>)
 800b1a4:	7a5b      	ldrb	r3, [r3, #9]
 800b1a6:	b2db      	uxtb	r3, r3
 800b1a8:	461a      	mov	r2, r3
 800b1aa:	4b13      	ldr	r3, [pc, #76]	@ (800b1f8 <FATFS_LinkDriverEx+0x94>)
 800b1ac:	4413      	add	r3, r2
 800b1ae:	79fa      	ldrb	r2, [r7, #7]
 800b1b0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b1b2:	4b11      	ldr	r3, [pc, #68]	@ (800b1f8 <FATFS_LinkDriverEx+0x94>)
 800b1b4:	7a5b      	ldrb	r3, [r3, #9]
 800b1b6:	b2db      	uxtb	r3, r3
 800b1b8:	1c5a      	adds	r2, r3, #1
 800b1ba:	b2d1      	uxtb	r1, r2
 800b1bc:	4a0e      	ldr	r2, [pc, #56]	@ (800b1f8 <FATFS_LinkDriverEx+0x94>)
 800b1be:	7251      	strb	r1, [r2, #9]
 800b1c0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b1c2:	7dbb      	ldrb	r3, [r7, #22]
 800b1c4:	3330      	adds	r3, #48	@ 0x30
 800b1c6:	b2da      	uxtb	r2, r3
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	3301      	adds	r3, #1
 800b1d0:	223a      	movs	r2, #58	@ 0x3a
 800b1d2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	3302      	adds	r3, #2
 800b1d8:	222f      	movs	r2, #47	@ 0x2f
 800b1da:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b1dc:	68bb      	ldr	r3, [r7, #8]
 800b1de:	3303      	adds	r3, #3
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b1e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	371c      	adds	r7, #28
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f4:	4770      	bx	lr
 800b1f6:	bf00      	nop
 800b1f8:	200016e8 	.word	0x200016e8

0800b1fc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b082      	sub	sp, #8
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
 800b204:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b206:	2200      	movs	r2, #0
 800b208:	6839      	ldr	r1, [r7, #0]
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	f7ff ffaa 	bl	800b164 <FATFS_LinkDriverEx>
 800b210:	4603      	mov	r3, r0
}
 800b212:	4618      	mov	r0, r3
 800b214:	3708      	adds	r7, #8
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}
	...

0800b21c <__NVIC_SetPriority>:
{
 800b21c:	b480      	push	{r7}
 800b21e:	b083      	sub	sp, #12
 800b220:	af00      	add	r7, sp, #0
 800b222:	4603      	mov	r3, r0
 800b224:	6039      	str	r1, [r7, #0]
 800b226:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	db0a      	blt.n	800b246 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	b2da      	uxtb	r2, r3
 800b234:	490c      	ldr	r1, [pc, #48]	@ (800b268 <__NVIC_SetPriority+0x4c>)
 800b236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b23a:	0112      	lsls	r2, r2, #4
 800b23c:	b2d2      	uxtb	r2, r2
 800b23e:	440b      	add	r3, r1
 800b240:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b244:	e00a      	b.n	800b25c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	b2da      	uxtb	r2, r3
 800b24a:	4908      	ldr	r1, [pc, #32]	@ (800b26c <__NVIC_SetPriority+0x50>)
 800b24c:	79fb      	ldrb	r3, [r7, #7]
 800b24e:	f003 030f 	and.w	r3, r3, #15
 800b252:	3b04      	subs	r3, #4
 800b254:	0112      	lsls	r2, r2, #4
 800b256:	b2d2      	uxtb	r2, r2
 800b258:	440b      	add	r3, r1
 800b25a:	761a      	strb	r2, [r3, #24]
}
 800b25c:	bf00      	nop
 800b25e:	370c      	adds	r7, #12
 800b260:	46bd      	mov	sp, r7
 800b262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b266:	4770      	bx	lr
 800b268:	e000e100 	.word	0xe000e100
 800b26c:	e000ed00 	.word	0xe000ed00

0800b270 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b270:	b580      	push	{r7, lr}
 800b272:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b274:	4b05      	ldr	r3, [pc, #20]	@ (800b28c <SysTick_Handler+0x1c>)
 800b276:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b278:	f002 fae8 	bl	800d84c <xTaskGetSchedulerState>
 800b27c:	4603      	mov	r3, r0
 800b27e:	2b01      	cmp	r3, #1
 800b280:	d001      	beq.n	800b286 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b282:	f003 f9e1 	bl	800e648 <xPortSysTickHandler>
  }
}
 800b286:	bf00      	nop
 800b288:	bd80      	pop	{r7, pc}
 800b28a:	bf00      	nop
 800b28c:	e000e010 	.word	0xe000e010

0800b290 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b290:	b580      	push	{r7, lr}
 800b292:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b294:	2100      	movs	r1, #0
 800b296:	f06f 0004 	mvn.w	r0, #4
 800b29a:	f7ff ffbf 	bl	800b21c <__NVIC_SetPriority>
#endif
}
 800b29e:	bf00      	nop
 800b2a0:	bd80      	pop	{r7, pc}
	...

0800b2a4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b2a4:	b480      	push	{r7}
 800b2a6:	b083      	sub	sp, #12
 800b2a8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b2aa:	f3ef 8305 	mrs	r3, IPSR
 800b2ae:	603b      	str	r3, [r7, #0]
  return(result);
 800b2b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d003      	beq.n	800b2be <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b2b6:	f06f 0305 	mvn.w	r3, #5
 800b2ba:	607b      	str	r3, [r7, #4]
 800b2bc:	e00c      	b.n	800b2d8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b2be:	4b0a      	ldr	r3, [pc, #40]	@ (800b2e8 <osKernelInitialize+0x44>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d105      	bne.n	800b2d2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b2c6:	4b08      	ldr	r3, [pc, #32]	@ (800b2e8 <osKernelInitialize+0x44>)
 800b2c8:	2201      	movs	r2, #1
 800b2ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	607b      	str	r3, [r7, #4]
 800b2d0:	e002      	b.n	800b2d8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b2d2:	f04f 33ff 	mov.w	r3, #4294967295
 800b2d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b2d8:	687b      	ldr	r3, [r7, #4]
}
 800b2da:	4618      	mov	r0, r3
 800b2dc:	370c      	adds	r7, #12
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e4:	4770      	bx	lr
 800b2e6:	bf00      	nop
 800b2e8:	200016f4 	.word	0x200016f4

0800b2ec <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b082      	sub	sp, #8
 800b2f0:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800b2f2:	f002 faab 	bl	800d84c <xTaskGetSchedulerState>
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d004      	beq.n	800b306 <osKernelGetState+0x1a>
 800b2fc:	2b02      	cmp	r3, #2
 800b2fe:	d105      	bne.n	800b30c <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800b300:	2302      	movs	r3, #2
 800b302:	607b      	str	r3, [r7, #4]
      break;
 800b304:	e00c      	b.n	800b320 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800b306:	2303      	movs	r3, #3
 800b308:	607b      	str	r3, [r7, #4]
      break;
 800b30a:	e009      	b.n	800b320 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800b30c:	4b07      	ldr	r3, [pc, #28]	@ (800b32c <osKernelGetState+0x40>)
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	2b01      	cmp	r3, #1
 800b312:	d102      	bne.n	800b31a <osKernelGetState+0x2e>
        state = osKernelReady;
 800b314:	2301      	movs	r3, #1
 800b316:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800b318:	e001      	b.n	800b31e <osKernelGetState+0x32>
        state = osKernelInactive;
 800b31a:	2300      	movs	r3, #0
 800b31c:	607b      	str	r3, [r7, #4]
      break;
 800b31e:	bf00      	nop
  }

  return (state);
 800b320:	687b      	ldr	r3, [r7, #4]
}
 800b322:	4618      	mov	r0, r3
 800b324:	3708      	adds	r7, #8
 800b326:	46bd      	mov	sp, r7
 800b328:	bd80      	pop	{r7, pc}
 800b32a:	bf00      	nop
 800b32c:	200016f4 	.word	0x200016f4

0800b330 <osKernelStart>:

osStatus_t osKernelStart (void) {
 800b330:	b580      	push	{r7, lr}
 800b332:	b082      	sub	sp, #8
 800b334:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b336:	f3ef 8305 	mrs	r3, IPSR
 800b33a:	603b      	str	r3, [r7, #0]
  return(result);
 800b33c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d003      	beq.n	800b34a <osKernelStart+0x1a>
    stat = osErrorISR;
 800b342:	f06f 0305 	mvn.w	r3, #5
 800b346:	607b      	str	r3, [r7, #4]
 800b348:	e010      	b.n	800b36c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b34a:	4b0b      	ldr	r3, [pc, #44]	@ (800b378 <osKernelStart+0x48>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	2b01      	cmp	r3, #1
 800b350:	d109      	bne.n	800b366 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b352:	f7ff ff9d 	bl	800b290 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b356:	4b08      	ldr	r3, [pc, #32]	@ (800b378 <osKernelStart+0x48>)
 800b358:	2202      	movs	r2, #2
 800b35a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b35c:	f001 fdda 	bl	800cf14 <vTaskStartScheduler>
      stat = osOK;
 800b360:	2300      	movs	r3, #0
 800b362:	607b      	str	r3, [r7, #4]
 800b364:	e002      	b.n	800b36c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b366:	f04f 33ff 	mov.w	r3, #4294967295
 800b36a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b36c:	687b      	ldr	r3, [r7, #4]
}
 800b36e:	4618      	mov	r0, r3
 800b370:	3708      	adds	r7, #8
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}
 800b376:	bf00      	nop
 800b378:	200016f4 	.word	0x200016f4

0800b37c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b082      	sub	sp, #8
 800b380:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b382:	f3ef 8305 	mrs	r3, IPSR
 800b386:	603b      	str	r3, [r7, #0]
  return(result);
 800b388:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d003      	beq.n	800b396 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800b38e:	f001 feed 	bl	800d16c <xTaskGetTickCountFromISR>
 800b392:	6078      	str	r0, [r7, #4]
 800b394:	e002      	b.n	800b39c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800b396:	f001 fed9 	bl	800d14c <xTaskGetTickCount>
 800b39a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800b39c:	687b      	ldr	r3, [r7, #4]
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	3708      	adds	r7, #8
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}

0800b3a6 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b3a6:	b580      	push	{r7, lr}
 800b3a8:	b08e      	sub	sp, #56	@ 0x38
 800b3aa:	af04      	add	r7, sp, #16
 800b3ac:	60f8      	str	r0, [r7, #12]
 800b3ae:	60b9      	str	r1, [r7, #8]
 800b3b0:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b3b6:	f3ef 8305 	mrs	r3, IPSR
 800b3ba:	617b      	str	r3, [r7, #20]
  return(result);
 800b3bc:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d17e      	bne.n	800b4c0 <osThreadNew+0x11a>
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d07b      	beq.n	800b4c0 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b3c8:	2380      	movs	r3, #128	@ 0x80
 800b3ca:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b3cc:	2318      	movs	r3, #24
 800b3ce:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800b3d4:	f04f 33ff 	mov.w	r3, #4294967295
 800b3d8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d045      	beq.n	800b46c <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d002      	beq.n	800b3ee <osThreadNew+0x48>
        name = attr->name;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	699b      	ldr	r3, [r3, #24]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d002      	beq.n	800b3fc <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	699b      	ldr	r3, [r3, #24]
 800b3fa:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b3fc:	69fb      	ldr	r3, [r7, #28]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d008      	beq.n	800b414 <osThreadNew+0x6e>
 800b402:	69fb      	ldr	r3, [r7, #28]
 800b404:	2b38      	cmp	r3, #56	@ 0x38
 800b406:	d805      	bhi.n	800b414 <osThreadNew+0x6e>
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	685b      	ldr	r3, [r3, #4]
 800b40c:	f003 0301 	and.w	r3, r3, #1
 800b410:	2b00      	cmp	r3, #0
 800b412:	d001      	beq.n	800b418 <osThreadNew+0x72>
        return (NULL);
 800b414:	2300      	movs	r3, #0
 800b416:	e054      	b.n	800b4c2 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	695b      	ldr	r3, [r3, #20]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d003      	beq.n	800b428 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	695b      	ldr	r3, [r3, #20]
 800b424:	089b      	lsrs	r3, r3, #2
 800b426:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	689b      	ldr	r3, [r3, #8]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d00e      	beq.n	800b44e <osThreadNew+0xa8>
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	68db      	ldr	r3, [r3, #12]
 800b434:	2bab      	cmp	r3, #171	@ 0xab
 800b436:	d90a      	bls.n	800b44e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d006      	beq.n	800b44e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	695b      	ldr	r3, [r3, #20]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d002      	beq.n	800b44e <osThreadNew+0xa8>
        mem = 1;
 800b448:	2301      	movs	r3, #1
 800b44a:	61bb      	str	r3, [r7, #24]
 800b44c:	e010      	b.n	800b470 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	689b      	ldr	r3, [r3, #8]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d10c      	bne.n	800b470 <osThreadNew+0xca>
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	68db      	ldr	r3, [r3, #12]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d108      	bne.n	800b470 <osThreadNew+0xca>
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	691b      	ldr	r3, [r3, #16]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d104      	bne.n	800b470 <osThreadNew+0xca>
          mem = 0;
 800b466:	2300      	movs	r3, #0
 800b468:	61bb      	str	r3, [r7, #24]
 800b46a:	e001      	b.n	800b470 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b46c:	2300      	movs	r3, #0
 800b46e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b470:	69bb      	ldr	r3, [r7, #24]
 800b472:	2b01      	cmp	r3, #1
 800b474:	d110      	bne.n	800b498 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b47a:	687a      	ldr	r2, [r7, #4]
 800b47c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b47e:	9202      	str	r2, [sp, #8]
 800b480:	9301      	str	r3, [sp, #4]
 800b482:	69fb      	ldr	r3, [r7, #28]
 800b484:	9300      	str	r3, [sp, #0]
 800b486:	68bb      	ldr	r3, [r7, #8]
 800b488:	6a3a      	ldr	r2, [r7, #32]
 800b48a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b48c:	68f8      	ldr	r0, [r7, #12]
 800b48e:	f001 fb81 	bl	800cb94 <xTaskCreateStatic>
 800b492:	4603      	mov	r3, r0
 800b494:	613b      	str	r3, [r7, #16]
 800b496:	e013      	b.n	800b4c0 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b498:	69bb      	ldr	r3, [r7, #24]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d110      	bne.n	800b4c0 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b49e:	6a3b      	ldr	r3, [r7, #32]
 800b4a0:	b29a      	uxth	r2, r3
 800b4a2:	f107 0310 	add.w	r3, r7, #16
 800b4a6:	9301      	str	r3, [sp, #4]
 800b4a8:	69fb      	ldr	r3, [r7, #28]
 800b4aa:	9300      	str	r3, [sp, #0]
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b4b0:	68f8      	ldr	r0, [r7, #12]
 800b4b2:	f001 fbcf 	bl	800cc54 <xTaskCreate>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	2b01      	cmp	r3, #1
 800b4ba:	d001      	beq.n	800b4c0 <osThreadNew+0x11a>
            hTask = NULL;
 800b4bc:	2300      	movs	r3, #0
 800b4be:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b4c0:	693b      	ldr	r3, [r7, #16]
}
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	3728      	adds	r7, #40	@ 0x28
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bd80      	pop	{r7, pc}

0800b4ca <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800b4ca:	b580      	push	{r7, lr}
 800b4cc:	b08a      	sub	sp, #40	@ 0x28
 800b4ce:	af02      	add	r7, sp, #8
 800b4d0:	60f8      	str	r0, [r7, #12]
 800b4d2:	60b9      	str	r1, [r7, #8]
 800b4d4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b4da:	f3ef 8305 	mrs	r3, IPSR
 800b4de:	613b      	str	r3, [r7, #16]
  return(result);
 800b4e0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d175      	bne.n	800b5d2 <osSemaphoreNew+0x108>
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d072      	beq.n	800b5d2 <osSemaphoreNew+0x108>
 800b4ec:	68ba      	ldr	r2, [r7, #8]
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	429a      	cmp	r2, r3
 800b4f2:	d86e      	bhi.n	800b5d2 <osSemaphoreNew+0x108>
    mem = -1;
 800b4f4:	f04f 33ff 	mov.w	r3, #4294967295
 800b4f8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d015      	beq.n	800b52c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	689b      	ldr	r3, [r3, #8]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d006      	beq.n	800b516 <osSemaphoreNew+0x4c>
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	68db      	ldr	r3, [r3, #12]
 800b50c:	2b4f      	cmp	r3, #79	@ 0x4f
 800b50e:	d902      	bls.n	800b516 <osSemaphoreNew+0x4c>
        mem = 1;
 800b510:	2301      	movs	r3, #1
 800b512:	61bb      	str	r3, [r7, #24]
 800b514:	e00c      	b.n	800b530 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	689b      	ldr	r3, [r3, #8]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d108      	bne.n	800b530 <osSemaphoreNew+0x66>
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	68db      	ldr	r3, [r3, #12]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d104      	bne.n	800b530 <osSemaphoreNew+0x66>
          mem = 0;
 800b526:	2300      	movs	r3, #0
 800b528:	61bb      	str	r3, [r7, #24]
 800b52a:	e001      	b.n	800b530 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800b52c:	2300      	movs	r3, #0
 800b52e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800b530:	69bb      	ldr	r3, [r7, #24]
 800b532:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b536:	d04c      	beq.n	800b5d2 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	2b01      	cmp	r3, #1
 800b53c:	d128      	bne.n	800b590 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800b53e:	69bb      	ldr	r3, [r7, #24]
 800b540:	2b01      	cmp	r3, #1
 800b542:	d10a      	bne.n	800b55a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	689b      	ldr	r3, [r3, #8]
 800b548:	2203      	movs	r2, #3
 800b54a:	9200      	str	r2, [sp, #0]
 800b54c:	2200      	movs	r2, #0
 800b54e:	2100      	movs	r1, #0
 800b550:	2001      	movs	r0, #1
 800b552:	f000 fb5d 	bl	800bc10 <xQueueGenericCreateStatic>
 800b556:	61f8      	str	r0, [r7, #28]
 800b558:	e005      	b.n	800b566 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800b55a:	2203      	movs	r2, #3
 800b55c:	2100      	movs	r1, #0
 800b55e:	2001      	movs	r0, #1
 800b560:	f000 fbd3 	bl	800bd0a <xQueueGenericCreate>
 800b564:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800b566:	69fb      	ldr	r3, [r7, #28]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d022      	beq.n	800b5b2 <osSemaphoreNew+0xe8>
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d01f      	beq.n	800b5b2 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b572:	2300      	movs	r3, #0
 800b574:	2200      	movs	r2, #0
 800b576:	2100      	movs	r1, #0
 800b578:	69f8      	ldr	r0, [r7, #28]
 800b57a:	f000 fc93 	bl	800bea4 <xQueueGenericSend>
 800b57e:	4603      	mov	r3, r0
 800b580:	2b01      	cmp	r3, #1
 800b582:	d016      	beq.n	800b5b2 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800b584:	69f8      	ldr	r0, [r7, #28]
 800b586:	f001 f931 	bl	800c7ec <vQueueDelete>
            hSemaphore = NULL;
 800b58a:	2300      	movs	r3, #0
 800b58c:	61fb      	str	r3, [r7, #28]
 800b58e:	e010      	b.n	800b5b2 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800b590:	69bb      	ldr	r3, [r7, #24]
 800b592:	2b01      	cmp	r3, #1
 800b594:	d108      	bne.n	800b5a8 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	689b      	ldr	r3, [r3, #8]
 800b59a:	461a      	mov	r2, r3
 800b59c:	68b9      	ldr	r1, [r7, #8]
 800b59e:	68f8      	ldr	r0, [r7, #12]
 800b5a0:	f000 fc11 	bl	800bdc6 <xQueueCreateCountingSemaphoreStatic>
 800b5a4:	61f8      	str	r0, [r7, #28]
 800b5a6:	e004      	b.n	800b5b2 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800b5a8:	68b9      	ldr	r1, [r7, #8]
 800b5aa:	68f8      	ldr	r0, [r7, #12]
 800b5ac:	f000 fc44 	bl	800be38 <xQueueCreateCountingSemaphore>
 800b5b0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800b5b2:	69fb      	ldr	r3, [r7, #28]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d00c      	beq.n	800b5d2 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d003      	beq.n	800b5c6 <osSemaphoreNew+0xfc>
          name = attr->name;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	617b      	str	r3, [r7, #20]
 800b5c4:	e001      	b.n	800b5ca <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800b5ca:	6979      	ldr	r1, [r7, #20]
 800b5cc:	69f8      	ldr	r0, [r7, #28]
 800b5ce:	f001 fa59 	bl	800ca84 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800b5d2:	69fb      	ldr	r3, [r7, #28]
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	3720      	adds	r7, #32
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}

0800b5dc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b086      	sub	sp, #24
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
 800b5e4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b5ee:	693b      	ldr	r3, [r7, #16]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d103      	bne.n	800b5fc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800b5f4:	f06f 0303 	mvn.w	r3, #3
 800b5f8:	617b      	str	r3, [r7, #20]
 800b5fa:	e039      	b.n	800b670 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b5fc:	f3ef 8305 	mrs	r3, IPSR
 800b600:	60fb      	str	r3, [r7, #12]
  return(result);
 800b602:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b604:	2b00      	cmp	r3, #0
 800b606:	d022      	beq.n	800b64e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d003      	beq.n	800b616 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800b60e:	f06f 0303 	mvn.w	r3, #3
 800b612:	617b      	str	r3, [r7, #20]
 800b614:	e02c      	b.n	800b670 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800b616:	2300      	movs	r3, #0
 800b618:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b61a:	f107 0308 	add.w	r3, r7, #8
 800b61e:	461a      	mov	r2, r3
 800b620:	2100      	movs	r1, #0
 800b622:	6938      	ldr	r0, [r7, #16]
 800b624:	f001 f860 	bl	800c6e8 <xQueueReceiveFromISR>
 800b628:	4603      	mov	r3, r0
 800b62a:	2b01      	cmp	r3, #1
 800b62c:	d003      	beq.n	800b636 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800b62e:	f06f 0302 	mvn.w	r3, #2
 800b632:	617b      	str	r3, [r7, #20]
 800b634:	e01c      	b.n	800b670 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800b636:	68bb      	ldr	r3, [r7, #8]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d019      	beq.n	800b670 <osSemaphoreAcquire+0x94>
 800b63c:	4b0f      	ldr	r3, [pc, #60]	@ (800b67c <osSemaphoreAcquire+0xa0>)
 800b63e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b642:	601a      	str	r2, [r3, #0]
 800b644:	f3bf 8f4f 	dsb	sy
 800b648:	f3bf 8f6f 	isb	sy
 800b64c:	e010      	b.n	800b670 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800b64e:	6839      	ldr	r1, [r7, #0]
 800b650:	6938      	ldr	r0, [r7, #16]
 800b652:	f000 ff39 	bl	800c4c8 <xQueueSemaphoreTake>
 800b656:	4603      	mov	r3, r0
 800b658:	2b01      	cmp	r3, #1
 800b65a:	d009      	beq.n	800b670 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d003      	beq.n	800b66a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800b662:	f06f 0301 	mvn.w	r3, #1
 800b666:	617b      	str	r3, [r7, #20]
 800b668:	e002      	b.n	800b670 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800b66a:	f06f 0302 	mvn.w	r3, #2
 800b66e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b670:	697b      	ldr	r3, [r7, #20]
}
 800b672:	4618      	mov	r0, r3
 800b674:	3718      	adds	r7, #24
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}
 800b67a:	bf00      	nop
 800b67c:	e000ed04 	.word	0xe000ed04

0800b680 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800b680:	b580      	push	{r7, lr}
 800b682:	b086      	sub	sp, #24
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b68c:	2300      	movs	r3, #0
 800b68e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b690:	693b      	ldr	r3, [r7, #16]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d103      	bne.n	800b69e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800b696:	f06f 0303 	mvn.w	r3, #3
 800b69a:	617b      	str	r3, [r7, #20]
 800b69c:	e02c      	b.n	800b6f8 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b69e:	f3ef 8305 	mrs	r3, IPSR
 800b6a2:	60fb      	str	r3, [r7, #12]
  return(result);
 800b6a4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d01a      	beq.n	800b6e0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b6ae:	f107 0308 	add.w	r3, r7, #8
 800b6b2:	4619      	mov	r1, r3
 800b6b4:	6938      	ldr	r0, [r7, #16]
 800b6b6:	f000 fd95 	bl	800c1e4 <xQueueGiveFromISR>
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	2b01      	cmp	r3, #1
 800b6be:	d003      	beq.n	800b6c8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800b6c0:	f06f 0302 	mvn.w	r3, #2
 800b6c4:	617b      	str	r3, [r7, #20]
 800b6c6:	e017      	b.n	800b6f8 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d014      	beq.n	800b6f8 <osSemaphoreRelease+0x78>
 800b6ce:	4b0d      	ldr	r3, [pc, #52]	@ (800b704 <osSemaphoreRelease+0x84>)
 800b6d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b6d4:	601a      	str	r2, [r3, #0]
 800b6d6:	f3bf 8f4f 	dsb	sy
 800b6da:	f3bf 8f6f 	isb	sy
 800b6de:	e00b      	b.n	800b6f8 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	2100      	movs	r1, #0
 800b6e6:	6938      	ldr	r0, [r7, #16]
 800b6e8:	f000 fbdc 	bl	800bea4 <xQueueGenericSend>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	2b01      	cmp	r3, #1
 800b6f0:	d002      	beq.n	800b6f8 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800b6f2:	f06f 0302 	mvn.w	r3, #2
 800b6f6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800b6f8:	697b      	ldr	r3, [r7, #20]
}
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	3718      	adds	r7, #24
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd80      	pop	{r7, pc}
 800b702:	bf00      	nop
 800b704:	e000ed04 	.word	0xe000ed04

0800b708 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b708:	b580      	push	{r7, lr}
 800b70a:	b08a      	sub	sp, #40	@ 0x28
 800b70c:	af02      	add	r7, sp, #8
 800b70e:	60f8      	str	r0, [r7, #12]
 800b710:	60b9      	str	r1, [r7, #8]
 800b712:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b714:	2300      	movs	r3, #0
 800b716:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b718:	f3ef 8305 	mrs	r3, IPSR
 800b71c:	613b      	str	r3, [r7, #16]
  return(result);
 800b71e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b720:	2b00      	cmp	r3, #0
 800b722:	d15f      	bne.n	800b7e4 <osMessageQueueNew+0xdc>
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d05c      	beq.n	800b7e4 <osMessageQueueNew+0xdc>
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d059      	beq.n	800b7e4 <osMessageQueueNew+0xdc>
    mem = -1;
 800b730:	f04f 33ff 	mov.w	r3, #4294967295
 800b734:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d029      	beq.n	800b790 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	689b      	ldr	r3, [r3, #8]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d012      	beq.n	800b76a <osMessageQueueNew+0x62>
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	68db      	ldr	r3, [r3, #12]
 800b748:	2b4f      	cmp	r3, #79	@ 0x4f
 800b74a:	d90e      	bls.n	800b76a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b750:	2b00      	cmp	r3, #0
 800b752:	d00a      	beq.n	800b76a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	695a      	ldr	r2, [r3, #20]
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	68b9      	ldr	r1, [r7, #8]
 800b75c:	fb01 f303 	mul.w	r3, r1, r3
 800b760:	429a      	cmp	r2, r3
 800b762:	d302      	bcc.n	800b76a <osMessageQueueNew+0x62>
        mem = 1;
 800b764:	2301      	movs	r3, #1
 800b766:	61bb      	str	r3, [r7, #24]
 800b768:	e014      	b.n	800b794 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	689b      	ldr	r3, [r3, #8]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d110      	bne.n	800b794 <osMessageQueueNew+0x8c>
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	68db      	ldr	r3, [r3, #12]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d10c      	bne.n	800b794 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d108      	bne.n	800b794 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	695b      	ldr	r3, [r3, #20]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d104      	bne.n	800b794 <osMessageQueueNew+0x8c>
          mem = 0;
 800b78a:	2300      	movs	r3, #0
 800b78c:	61bb      	str	r3, [r7, #24]
 800b78e:	e001      	b.n	800b794 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800b790:	2300      	movs	r3, #0
 800b792:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b794:	69bb      	ldr	r3, [r7, #24]
 800b796:	2b01      	cmp	r3, #1
 800b798:	d10b      	bne.n	800b7b2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	691a      	ldr	r2, [r3, #16]
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	689b      	ldr	r3, [r3, #8]
 800b7a2:	2100      	movs	r1, #0
 800b7a4:	9100      	str	r1, [sp, #0]
 800b7a6:	68b9      	ldr	r1, [r7, #8]
 800b7a8:	68f8      	ldr	r0, [r7, #12]
 800b7aa:	f000 fa31 	bl	800bc10 <xQueueGenericCreateStatic>
 800b7ae:	61f8      	str	r0, [r7, #28]
 800b7b0:	e008      	b.n	800b7c4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800b7b2:	69bb      	ldr	r3, [r7, #24]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d105      	bne.n	800b7c4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	68b9      	ldr	r1, [r7, #8]
 800b7bc:	68f8      	ldr	r0, [r7, #12]
 800b7be:	f000 faa4 	bl	800bd0a <xQueueGenericCreate>
 800b7c2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b7c4:	69fb      	ldr	r3, [r7, #28]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d00c      	beq.n	800b7e4 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d003      	beq.n	800b7d8 <osMessageQueueNew+0xd0>
        name = attr->name;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	617b      	str	r3, [r7, #20]
 800b7d6:	e001      	b.n	800b7dc <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800b7dc:	6979      	ldr	r1, [r7, #20]
 800b7de:	69f8      	ldr	r0, [r7, #28]
 800b7e0:	f001 f950 	bl	800ca84 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b7e4:	69fb      	ldr	r3, [r7, #28]
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	3720      	adds	r7, #32
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}
	...

0800b7f0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b088      	sub	sp, #32
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	60f8      	str	r0, [r7, #12]
 800b7f8:	60b9      	str	r1, [r7, #8]
 800b7fa:	603b      	str	r3, [r7, #0]
 800b7fc:	4613      	mov	r3, r2
 800b7fe:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b804:	2300      	movs	r3, #0
 800b806:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b808:	f3ef 8305 	mrs	r3, IPSR
 800b80c:	617b      	str	r3, [r7, #20]
  return(result);
 800b80e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b810:	2b00      	cmp	r3, #0
 800b812:	d028      	beq.n	800b866 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b814:	69bb      	ldr	r3, [r7, #24]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d005      	beq.n	800b826 <osMessageQueuePut+0x36>
 800b81a:	68bb      	ldr	r3, [r7, #8]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d002      	beq.n	800b826 <osMessageQueuePut+0x36>
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d003      	beq.n	800b82e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800b826:	f06f 0303 	mvn.w	r3, #3
 800b82a:	61fb      	str	r3, [r7, #28]
 800b82c:	e038      	b.n	800b8a0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800b82e:	2300      	movs	r3, #0
 800b830:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b832:	f107 0210 	add.w	r2, r7, #16
 800b836:	2300      	movs	r3, #0
 800b838:	68b9      	ldr	r1, [r7, #8]
 800b83a:	69b8      	ldr	r0, [r7, #24]
 800b83c:	f000 fc34 	bl	800c0a8 <xQueueGenericSendFromISR>
 800b840:	4603      	mov	r3, r0
 800b842:	2b01      	cmp	r3, #1
 800b844:	d003      	beq.n	800b84e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800b846:	f06f 0302 	mvn.w	r3, #2
 800b84a:	61fb      	str	r3, [r7, #28]
 800b84c:	e028      	b.n	800b8a0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800b84e:	693b      	ldr	r3, [r7, #16]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d025      	beq.n	800b8a0 <osMessageQueuePut+0xb0>
 800b854:	4b15      	ldr	r3, [pc, #84]	@ (800b8ac <osMessageQueuePut+0xbc>)
 800b856:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b85a:	601a      	str	r2, [r3, #0]
 800b85c:	f3bf 8f4f 	dsb	sy
 800b860:	f3bf 8f6f 	isb	sy
 800b864:	e01c      	b.n	800b8a0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b866:	69bb      	ldr	r3, [r7, #24]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d002      	beq.n	800b872 <osMessageQueuePut+0x82>
 800b86c:	68bb      	ldr	r3, [r7, #8]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d103      	bne.n	800b87a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800b872:	f06f 0303 	mvn.w	r3, #3
 800b876:	61fb      	str	r3, [r7, #28]
 800b878:	e012      	b.n	800b8a0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b87a:	2300      	movs	r3, #0
 800b87c:	683a      	ldr	r2, [r7, #0]
 800b87e:	68b9      	ldr	r1, [r7, #8]
 800b880:	69b8      	ldr	r0, [r7, #24]
 800b882:	f000 fb0f 	bl	800bea4 <xQueueGenericSend>
 800b886:	4603      	mov	r3, r0
 800b888:	2b01      	cmp	r3, #1
 800b88a:	d009      	beq.n	800b8a0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d003      	beq.n	800b89a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800b892:	f06f 0301 	mvn.w	r3, #1
 800b896:	61fb      	str	r3, [r7, #28]
 800b898:	e002      	b.n	800b8a0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800b89a:	f06f 0302 	mvn.w	r3, #2
 800b89e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b8a0:	69fb      	ldr	r3, [r7, #28]
}
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	3720      	adds	r7, #32
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bd80      	pop	{r7, pc}
 800b8aa:	bf00      	nop
 800b8ac:	e000ed04 	.word	0xe000ed04

0800b8b0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b088      	sub	sp, #32
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	60f8      	str	r0, [r7, #12]
 800b8b8:	60b9      	str	r1, [r7, #8]
 800b8ba:	607a      	str	r2, [r7, #4]
 800b8bc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b8c6:	f3ef 8305 	mrs	r3, IPSR
 800b8ca:	617b      	str	r3, [r7, #20]
  return(result);
 800b8cc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d028      	beq.n	800b924 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b8d2:	69bb      	ldr	r3, [r7, #24]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d005      	beq.n	800b8e4 <osMessageQueueGet+0x34>
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d002      	beq.n	800b8e4 <osMessageQueueGet+0x34>
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d003      	beq.n	800b8ec <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800b8e4:	f06f 0303 	mvn.w	r3, #3
 800b8e8:	61fb      	str	r3, [r7, #28]
 800b8ea:	e037      	b.n	800b95c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b8f0:	f107 0310 	add.w	r3, r7, #16
 800b8f4:	461a      	mov	r2, r3
 800b8f6:	68b9      	ldr	r1, [r7, #8]
 800b8f8:	69b8      	ldr	r0, [r7, #24]
 800b8fa:	f000 fef5 	bl	800c6e8 <xQueueReceiveFromISR>
 800b8fe:	4603      	mov	r3, r0
 800b900:	2b01      	cmp	r3, #1
 800b902:	d003      	beq.n	800b90c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800b904:	f06f 0302 	mvn.w	r3, #2
 800b908:	61fb      	str	r3, [r7, #28]
 800b90a:	e027      	b.n	800b95c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800b90c:	693b      	ldr	r3, [r7, #16]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d024      	beq.n	800b95c <osMessageQueueGet+0xac>
 800b912:	4b15      	ldr	r3, [pc, #84]	@ (800b968 <osMessageQueueGet+0xb8>)
 800b914:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b918:	601a      	str	r2, [r3, #0]
 800b91a:	f3bf 8f4f 	dsb	sy
 800b91e:	f3bf 8f6f 	isb	sy
 800b922:	e01b      	b.n	800b95c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b924:	69bb      	ldr	r3, [r7, #24]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d002      	beq.n	800b930 <osMessageQueueGet+0x80>
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d103      	bne.n	800b938 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800b930:	f06f 0303 	mvn.w	r3, #3
 800b934:	61fb      	str	r3, [r7, #28]
 800b936:	e011      	b.n	800b95c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b938:	683a      	ldr	r2, [r7, #0]
 800b93a:	68b9      	ldr	r1, [r7, #8]
 800b93c:	69b8      	ldr	r0, [r7, #24]
 800b93e:	f000 fce1 	bl	800c304 <xQueueReceive>
 800b942:	4603      	mov	r3, r0
 800b944:	2b01      	cmp	r3, #1
 800b946:	d009      	beq.n	800b95c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d003      	beq.n	800b956 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800b94e:	f06f 0301 	mvn.w	r3, #1
 800b952:	61fb      	str	r3, [r7, #28]
 800b954:	e002      	b.n	800b95c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800b956:	f06f 0302 	mvn.w	r3, #2
 800b95a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b95c:	69fb      	ldr	r3, [r7, #28]
}
 800b95e:	4618      	mov	r0, r3
 800b960:	3720      	adds	r7, #32
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}
 800b966:	bf00      	nop
 800b968:	e000ed04 	.word	0xe000ed04

0800b96c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b96c:	b480      	push	{r7}
 800b96e:	b085      	sub	sp, #20
 800b970:	af00      	add	r7, sp, #0
 800b972:	60f8      	str	r0, [r7, #12]
 800b974:	60b9      	str	r1, [r7, #8]
 800b976:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	4a07      	ldr	r2, [pc, #28]	@ (800b998 <vApplicationGetIdleTaskMemory+0x2c>)
 800b97c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	4a06      	ldr	r2, [pc, #24]	@ (800b99c <vApplicationGetIdleTaskMemory+0x30>)
 800b982:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2280      	movs	r2, #128	@ 0x80
 800b988:	601a      	str	r2, [r3, #0]
}
 800b98a:	bf00      	nop
 800b98c:	3714      	adds	r7, #20
 800b98e:	46bd      	mov	sp, r7
 800b990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b994:	4770      	bx	lr
 800b996:	bf00      	nop
 800b998:	200016f8 	.word	0x200016f8
 800b99c:	200017a4 	.word	0x200017a4

0800b9a0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b9a0:	b480      	push	{r7}
 800b9a2:	b085      	sub	sp, #20
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	60f8      	str	r0, [r7, #12]
 800b9a8:	60b9      	str	r1, [r7, #8]
 800b9aa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	4a07      	ldr	r2, [pc, #28]	@ (800b9cc <vApplicationGetTimerTaskMemory+0x2c>)
 800b9b0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b9b2:	68bb      	ldr	r3, [r7, #8]
 800b9b4:	4a06      	ldr	r2, [pc, #24]	@ (800b9d0 <vApplicationGetTimerTaskMemory+0x30>)
 800b9b6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b9be:	601a      	str	r2, [r3, #0]
}
 800b9c0:	bf00      	nop
 800b9c2:	3714      	adds	r7, #20
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ca:	4770      	bx	lr
 800b9cc:	200019a4 	.word	0x200019a4
 800b9d0:	20001a50 	.word	0x20001a50

0800b9d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b9d4:	b480      	push	{r7}
 800b9d6:	b083      	sub	sp, #12
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	f103 0208 	add.w	r2, r3, #8
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	f04f 32ff 	mov.w	r2, #4294967295
 800b9ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	f103 0208 	add.w	r2, r3, #8
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f103 0208 	add.w	r2, r3, #8
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	2200      	movs	r2, #0
 800ba06:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ba08:	bf00      	nop
 800ba0a:	370c      	adds	r7, #12
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba12:	4770      	bx	lr

0800ba14 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ba14:	b480      	push	{r7}
 800ba16:	b083      	sub	sp, #12
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ba22:	bf00      	nop
 800ba24:	370c      	adds	r7, #12
 800ba26:	46bd      	mov	sp, r7
 800ba28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2c:	4770      	bx	lr

0800ba2e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ba2e:	b480      	push	{r7}
 800ba30:	b085      	sub	sp, #20
 800ba32:	af00      	add	r7, sp, #0
 800ba34:	6078      	str	r0, [r7, #4]
 800ba36:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	685b      	ldr	r3, [r3, #4]
 800ba3c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	68fa      	ldr	r2, [r7, #12]
 800ba42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	689a      	ldr	r2, [r3, #8]
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	689b      	ldr	r3, [r3, #8]
 800ba50:	683a      	ldr	r2, [r7, #0]
 800ba52:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	683a      	ldr	r2, [r7, #0]
 800ba58:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	687a      	ldr	r2, [r7, #4]
 800ba5e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	1c5a      	adds	r2, r3, #1
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	601a      	str	r2, [r3, #0]
}
 800ba6a:	bf00      	nop
 800ba6c:	3714      	adds	r7, #20
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba74:	4770      	bx	lr

0800ba76 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ba76:	b480      	push	{r7}
 800ba78:	b085      	sub	sp, #20
 800ba7a:	af00      	add	r7, sp, #0
 800ba7c:	6078      	str	r0, [r7, #4]
 800ba7e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ba86:	68bb      	ldr	r3, [r7, #8]
 800ba88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba8c:	d103      	bne.n	800ba96 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	691b      	ldr	r3, [r3, #16]
 800ba92:	60fb      	str	r3, [r7, #12]
 800ba94:	e00c      	b.n	800bab0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	3308      	adds	r3, #8
 800ba9a:	60fb      	str	r3, [r7, #12]
 800ba9c:	e002      	b.n	800baa4 <vListInsert+0x2e>
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	685b      	ldr	r3, [r3, #4]
 800baa2:	60fb      	str	r3, [r7, #12]
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	685b      	ldr	r3, [r3, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	68ba      	ldr	r2, [r7, #8]
 800baac:	429a      	cmp	r2, r3
 800baae:	d2f6      	bcs.n	800ba9e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	685a      	ldr	r2, [r3, #4]
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bab8:	683b      	ldr	r3, [r7, #0]
 800baba:	685b      	ldr	r3, [r3, #4]
 800babc:	683a      	ldr	r2, [r7, #0]
 800babe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	68fa      	ldr	r2, [r7, #12]
 800bac4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	683a      	ldr	r2, [r7, #0]
 800baca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	687a      	ldr	r2, [r7, #4]
 800bad0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	1c5a      	adds	r2, r3, #1
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	601a      	str	r2, [r3, #0]
}
 800badc:	bf00      	nop
 800bade:	3714      	adds	r7, #20
 800bae0:	46bd      	mov	sp, r7
 800bae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae6:	4770      	bx	lr

0800bae8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bae8:	b480      	push	{r7}
 800baea:	b085      	sub	sp, #20
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	691b      	ldr	r3, [r3, #16]
 800baf4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	685b      	ldr	r3, [r3, #4]
 800bafa:	687a      	ldr	r2, [r7, #4]
 800bafc:	6892      	ldr	r2, [r2, #8]
 800bafe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	689b      	ldr	r3, [r3, #8]
 800bb04:	687a      	ldr	r2, [r7, #4]
 800bb06:	6852      	ldr	r2, [r2, #4]
 800bb08:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	685b      	ldr	r3, [r3, #4]
 800bb0e:	687a      	ldr	r2, [r7, #4]
 800bb10:	429a      	cmp	r2, r3
 800bb12:	d103      	bne.n	800bb1c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	689a      	ldr	r2, [r3, #8]
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2200      	movs	r2, #0
 800bb20:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	1e5a      	subs	r2, r3, #1
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	681b      	ldr	r3, [r3, #0]
}
 800bb30:	4618      	mov	r0, r3
 800bb32:	3714      	adds	r7, #20
 800bb34:	46bd      	mov	sp, r7
 800bb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3a:	4770      	bx	lr

0800bb3c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b084      	sub	sp, #16
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
 800bb44:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d10b      	bne.n	800bb68 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bb50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb54:	f383 8811 	msr	BASEPRI, r3
 800bb58:	f3bf 8f6f 	isb	sy
 800bb5c:	f3bf 8f4f 	dsb	sy
 800bb60:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bb62:	bf00      	nop
 800bb64:	bf00      	nop
 800bb66:	e7fd      	b.n	800bb64 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bb68:	f002 fcde 	bl	800e528 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	681a      	ldr	r2, [r3, #0]
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb74:	68f9      	ldr	r1, [r7, #12]
 800bb76:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800bb78:	fb01 f303 	mul.w	r3, r1, r3
 800bb7c:	441a      	add	r2, r3
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	2200      	movs	r2, #0
 800bb86:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	681a      	ldr	r2, [r3, #0]
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	681a      	ldr	r2, [r3, #0]
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb98:	3b01      	subs	r3, #1
 800bb9a:	68f9      	ldr	r1, [r7, #12]
 800bb9c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800bb9e:	fb01 f303 	mul.w	r3, r1, r3
 800bba2:	441a      	add	r2, r3
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	22ff      	movs	r2, #255	@ 0xff
 800bbac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	22ff      	movs	r2, #255	@ 0xff
 800bbb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d114      	bne.n	800bbe8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	691b      	ldr	r3, [r3, #16]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d01a      	beq.n	800bbfc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	3310      	adds	r3, #16
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f001 fc76 	bl	800d4bc <xTaskRemoveFromEventList>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d012      	beq.n	800bbfc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bbd6:	4b0d      	ldr	r3, [pc, #52]	@ (800bc0c <xQueueGenericReset+0xd0>)
 800bbd8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bbdc:	601a      	str	r2, [r3, #0]
 800bbde:	f3bf 8f4f 	dsb	sy
 800bbe2:	f3bf 8f6f 	isb	sy
 800bbe6:	e009      	b.n	800bbfc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	3310      	adds	r3, #16
 800bbec:	4618      	mov	r0, r3
 800bbee:	f7ff fef1 	bl	800b9d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	3324      	adds	r3, #36	@ 0x24
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	f7ff feec 	bl	800b9d4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bbfc:	f002 fcc6 	bl	800e58c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bc00:	2301      	movs	r3, #1
}
 800bc02:	4618      	mov	r0, r3
 800bc04:	3710      	adds	r7, #16
 800bc06:	46bd      	mov	sp, r7
 800bc08:	bd80      	pop	{r7, pc}
 800bc0a:	bf00      	nop
 800bc0c:	e000ed04 	.word	0xe000ed04

0800bc10 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b08e      	sub	sp, #56	@ 0x38
 800bc14:	af02      	add	r7, sp, #8
 800bc16:	60f8      	str	r0, [r7, #12]
 800bc18:	60b9      	str	r1, [r7, #8]
 800bc1a:	607a      	str	r2, [r7, #4]
 800bc1c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d10b      	bne.n	800bc3c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800bc24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc28:	f383 8811 	msr	BASEPRI, r3
 800bc2c:	f3bf 8f6f 	isb	sy
 800bc30:	f3bf 8f4f 	dsb	sy
 800bc34:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800bc36:	bf00      	nop
 800bc38:	bf00      	nop
 800bc3a:	e7fd      	b.n	800bc38 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d10b      	bne.n	800bc5a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800bc42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc46:	f383 8811 	msr	BASEPRI, r3
 800bc4a:	f3bf 8f6f 	isb	sy
 800bc4e:	f3bf 8f4f 	dsb	sy
 800bc52:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bc54:	bf00      	nop
 800bc56:	bf00      	nop
 800bc58:	e7fd      	b.n	800bc56 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d002      	beq.n	800bc66 <xQueueGenericCreateStatic+0x56>
 800bc60:	68bb      	ldr	r3, [r7, #8]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d001      	beq.n	800bc6a <xQueueGenericCreateStatic+0x5a>
 800bc66:	2301      	movs	r3, #1
 800bc68:	e000      	b.n	800bc6c <xQueueGenericCreateStatic+0x5c>
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d10b      	bne.n	800bc88 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800bc70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc74:	f383 8811 	msr	BASEPRI, r3
 800bc78:	f3bf 8f6f 	isb	sy
 800bc7c:	f3bf 8f4f 	dsb	sy
 800bc80:	623b      	str	r3, [r7, #32]
}
 800bc82:	bf00      	nop
 800bc84:	bf00      	nop
 800bc86:	e7fd      	b.n	800bc84 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d102      	bne.n	800bc94 <xQueueGenericCreateStatic+0x84>
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d101      	bne.n	800bc98 <xQueueGenericCreateStatic+0x88>
 800bc94:	2301      	movs	r3, #1
 800bc96:	e000      	b.n	800bc9a <xQueueGenericCreateStatic+0x8a>
 800bc98:	2300      	movs	r3, #0
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d10b      	bne.n	800bcb6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800bc9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bca2:	f383 8811 	msr	BASEPRI, r3
 800bca6:	f3bf 8f6f 	isb	sy
 800bcaa:	f3bf 8f4f 	dsb	sy
 800bcae:	61fb      	str	r3, [r7, #28]
}
 800bcb0:	bf00      	nop
 800bcb2:	bf00      	nop
 800bcb4:	e7fd      	b.n	800bcb2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bcb6:	2350      	movs	r3, #80	@ 0x50
 800bcb8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bcba:	697b      	ldr	r3, [r7, #20]
 800bcbc:	2b50      	cmp	r3, #80	@ 0x50
 800bcbe:	d00b      	beq.n	800bcd8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800bcc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcc4:	f383 8811 	msr	BASEPRI, r3
 800bcc8:	f3bf 8f6f 	isb	sy
 800bccc:	f3bf 8f4f 	dsb	sy
 800bcd0:	61bb      	str	r3, [r7, #24]
}
 800bcd2:	bf00      	nop
 800bcd4:	bf00      	nop
 800bcd6:	e7fd      	b.n	800bcd4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bcd8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800bcde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d00d      	beq.n	800bd00 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bce6:	2201      	movs	r2, #1
 800bce8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bcec:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800bcf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcf2:	9300      	str	r3, [sp, #0]
 800bcf4:	4613      	mov	r3, r2
 800bcf6:	687a      	ldr	r2, [r7, #4]
 800bcf8:	68b9      	ldr	r1, [r7, #8]
 800bcfa:	68f8      	ldr	r0, [r7, #12]
 800bcfc:	f000 f840 	bl	800bd80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bd00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800bd02:	4618      	mov	r0, r3
 800bd04:	3730      	adds	r7, #48	@ 0x30
 800bd06:	46bd      	mov	sp, r7
 800bd08:	bd80      	pop	{r7, pc}

0800bd0a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bd0a:	b580      	push	{r7, lr}
 800bd0c:	b08a      	sub	sp, #40	@ 0x28
 800bd0e:	af02      	add	r7, sp, #8
 800bd10:	60f8      	str	r0, [r7, #12]
 800bd12:	60b9      	str	r1, [r7, #8]
 800bd14:	4613      	mov	r3, r2
 800bd16:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d10b      	bne.n	800bd36 <xQueueGenericCreate+0x2c>
	__asm volatile
 800bd1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd22:	f383 8811 	msr	BASEPRI, r3
 800bd26:	f3bf 8f6f 	isb	sy
 800bd2a:	f3bf 8f4f 	dsb	sy
 800bd2e:	613b      	str	r3, [r7, #16]
}
 800bd30:	bf00      	nop
 800bd32:	bf00      	nop
 800bd34:	e7fd      	b.n	800bd32 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	68ba      	ldr	r2, [r7, #8]
 800bd3a:	fb02 f303 	mul.w	r3, r2, r3
 800bd3e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bd40:	69fb      	ldr	r3, [r7, #28]
 800bd42:	3350      	adds	r3, #80	@ 0x50
 800bd44:	4618      	mov	r0, r3
 800bd46:	f002 fd11 	bl	800e76c <pvPortMalloc>
 800bd4a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bd4c:	69bb      	ldr	r3, [r7, #24]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d011      	beq.n	800bd76 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bd52:	69bb      	ldr	r3, [r7, #24]
 800bd54:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bd56:	697b      	ldr	r3, [r7, #20]
 800bd58:	3350      	adds	r3, #80	@ 0x50
 800bd5a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bd5c:	69bb      	ldr	r3, [r7, #24]
 800bd5e:	2200      	movs	r2, #0
 800bd60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bd64:	79fa      	ldrb	r2, [r7, #7]
 800bd66:	69bb      	ldr	r3, [r7, #24]
 800bd68:	9300      	str	r3, [sp, #0]
 800bd6a:	4613      	mov	r3, r2
 800bd6c:	697a      	ldr	r2, [r7, #20]
 800bd6e:	68b9      	ldr	r1, [r7, #8]
 800bd70:	68f8      	ldr	r0, [r7, #12]
 800bd72:	f000 f805 	bl	800bd80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bd76:	69bb      	ldr	r3, [r7, #24]
	}
 800bd78:	4618      	mov	r0, r3
 800bd7a:	3720      	adds	r7, #32
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bd80      	pop	{r7, pc}

0800bd80 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b084      	sub	sp, #16
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	60f8      	str	r0, [r7, #12]
 800bd88:	60b9      	str	r1, [r7, #8]
 800bd8a:	607a      	str	r2, [r7, #4]
 800bd8c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bd8e:	68bb      	ldr	r3, [r7, #8]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d103      	bne.n	800bd9c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bd94:	69bb      	ldr	r3, [r7, #24]
 800bd96:	69ba      	ldr	r2, [r7, #24]
 800bd98:	601a      	str	r2, [r3, #0]
 800bd9a:	e002      	b.n	800bda2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bd9c:	69bb      	ldr	r3, [r7, #24]
 800bd9e:	687a      	ldr	r2, [r7, #4]
 800bda0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bda2:	69bb      	ldr	r3, [r7, #24]
 800bda4:	68fa      	ldr	r2, [r7, #12]
 800bda6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bda8:	69bb      	ldr	r3, [r7, #24]
 800bdaa:	68ba      	ldr	r2, [r7, #8]
 800bdac:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bdae:	2101      	movs	r1, #1
 800bdb0:	69b8      	ldr	r0, [r7, #24]
 800bdb2:	f7ff fec3 	bl	800bb3c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800bdb6:	69bb      	ldr	r3, [r7, #24]
 800bdb8:	78fa      	ldrb	r2, [r7, #3]
 800bdba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bdbe:	bf00      	nop
 800bdc0:	3710      	adds	r7, #16
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bd80      	pop	{r7, pc}

0800bdc6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800bdc6:	b580      	push	{r7, lr}
 800bdc8:	b08a      	sub	sp, #40	@ 0x28
 800bdca:	af02      	add	r7, sp, #8
 800bdcc:	60f8      	str	r0, [r7, #12]
 800bdce:	60b9      	str	r1, [r7, #8]
 800bdd0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d10b      	bne.n	800bdf0 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800bdd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bddc:	f383 8811 	msr	BASEPRI, r3
 800bde0:	f3bf 8f6f 	isb	sy
 800bde4:	f3bf 8f4f 	dsb	sy
 800bde8:	61bb      	str	r3, [r7, #24]
}
 800bdea:	bf00      	nop
 800bdec:	bf00      	nop
 800bdee:	e7fd      	b.n	800bdec <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800bdf0:	68ba      	ldr	r2, [r7, #8]
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	429a      	cmp	r2, r3
 800bdf6:	d90b      	bls.n	800be10 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800bdf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdfc:	f383 8811 	msr	BASEPRI, r3
 800be00:	f3bf 8f6f 	isb	sy
 800be04:	f3bf 8f4f 	dsb	sy
 800be08:	617b      	str	r3, [r7, #20]
}
 800be0a:	bf00      	nop
 800be0c:	bf00      	nop
 800be0e:	e7fd      	b.n	800be0c <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800be10:	2302      	movs	r3, #2
 800be12:	9300      	str	r3, [sp, #0]
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2200      	movs	r2, #0
 800be18:	2100      	movs	r1, #0
 800be1a:	68f8      	ldr	r0, [r7, #12]
 800be1c:	f7ff fef8 	bl	800bc10 <xQueueGenericCreateStatic>
 800be20:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800be22:	69fb      	ldr	r3, [r7, #28]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d002      	beq.n	800be2e <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800be28:	69fb      	ldr	r3, [r7, #28]
 800be2a:	68ba      	ldr	r2, [r7, #8]
 800be2c:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800be2e:	69fb      	ldr	r3, [r7, #28]
	}
 800be30:	4618      	mov	r0, r3
 800be32:	3720      	adds	r7, #32
 800be34:	46bd      	mov	sp, r7
 800be36:	bd80      	pop	{r7, pc}

0800be38 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b086      	sub	sp, #24
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
 800be40:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d10b      	bne.n	800be60 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800be48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be4c:	f383 8811 	msr	BASEPRI, r3
 800be50:	f3bf 8f6f 	isb	sy
 800be54:	f3bf 8f4f 	dsb	sy
 800be58:	613b      	str	r3, [r7, #16]
}
 800be5a:	bf00      	nop
 800be5c:	bf00      	nop
 800be5e:	e7fd      	b.n	800be5c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800be60:	683a      	ldr	r2, [r7, #0]
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	429a      	cmp	r2, r3
 800be66:	d90b      	bls.n	800be80 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800be68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be6c:	f383 8811 	msr	BASEPRI, r3
 800be70:	f3bf 8f6f 	isb	sy
 800be74:	f3bf 8f4f 	dsb	sy
 800be78:	60fb      	str	r3, [r7, #12]
}
 800be7a:	bf00      	nop
 800be7c:	bf00      	nop
 800be7e:	e7fd      	b.n	800be7c <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800be80:	2202      	movs	r2, #2
 800be82:	2100      	movs	r1, #0
 800be84:	6878      	ldr	r0, [r7, #4]
 800be86:	f7ff ff40 	bl	800bd0a <xQueueGenericCreate>
 800be8a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800be8c:	697b      	ldr	r3, [r7, #20]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d002      	beq.n	800be98 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800be92:	697b      	ldr	r3, [r7, #20]
 800be94:	683a      	ldr	r2, [r7, #0]
 800be96:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800be98:	697b      	ldr	r3, [r7, #20]
	}
 800be9a:	4618      	mov	r0, r3
 800be9c:	3718      	adds	r7, #24
 800be9e:	46bd      	mov	sp, r7
 800bea0:	bd80      	pop	{r7, pc}
	...

0800bea4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b08e      	sub	sp, #56	@ 0x38
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	60f8      	str	r0, [r7, #12]
 800beac:	60b9      	str	r1, [r7, #8]
 800beae:	607a      	str	r2, [r7, #4]
 800beb0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800beb2:	2300      	movs	r3, #0
 800beb4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800beba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d10b      	bne.n	800bed8 <xQueueGenericSend+0x34>
	__asm volatile
 800bec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bec4:	f383 8811 	msr	BASEPRI, r3
 800bec8:	f3bf 8f6f 	isb	sy
 800becc:	f3bf 8f4f 	dsb	sy
 800bed0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800bed2:	bf00      	nop
 800bed4:	bf00      	nop
 800bed6:	e7fd      	b.n	800bed4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bed8:	68bb      	ldr	r3, [r7, #8]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d103      	bne.n	800bee6 <xQueueGenericSend+0x42>
 800bede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d101      	bne.n	800beea <xQueueGenericSend+0x46>
 800bee6:	2301      	movs	r3, #1
 800bee8:	e000      	b.n	800beec <xQueueGenericSend+0x48>
 800beea:	2300      	movs	r3, #0
 800beec:	2b00      	cmp	r3, #0
 800beee:	d10b      	bne.n	800bf08 <xQueueGenericSend+0x64>
	__asm volatile
 800bef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bef4:	f383 8811 	msr	BASEPRI, r3
 800bef8:	f3bf 8f6f 	isb	sy
 800befc:	f3bf 8f4f 	dsb	sy
 800bf00:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bf02:	bf00      	nop
 800bf04:	bf00      	nop
 800bf06:	e7fd      	b.n	800bf04 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	2b02      	cmp	r3, #2
 800bf0c:	d103      	bne.n	800bf16 <xQueueGenericSend+0x72>
 800bf0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf12:	2b01      	cmp	r3, #1
 800bf14:	d101      	bne.n	800bf1a <xQueueGenericSend+0x76>
 800bf16:	2301      	movs	r3, #1
 800bf18:	e000      	b.n	800bf1c <xQueueGenericSend+0x78>
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d10b      	bne.n	800bf38 <xQueueGenericSend+0x94>
	__asm volatile
 800bf20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf24:	f383 8811 	msr	BASEPRI, r3
 800bf28:	f3bf 8f6f 	isb	sy
 800bf2c:	f3bf 8f4f 	dsb	sy
 800bf30:	623b      	str	r3, [r7, #32]
}
 800bf32:	bf00      	nop
 800bf34:	bf00      	nop
 800bf36:	e7fd      	b.n	800bf34 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bf38:	f001 fc88 	bl	800d84c <xTaskGetSchedulerState>
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d102      	bne.n	800bf48 <xQueueGenericSend+0xa4>
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d101      	bne.n	800bf4c <xQueueGenericSend+0xa8>
 800bf48:	2301      	movs	r3, #1
 800bf4a:	e000      	b.n	800bf4e <xQueueGenericSend+0xaa>
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d10b      	bne.n	800bf6a <xQueueGenericSend+0xc6>
	__asm volatile
 800bf52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf56:	f383 8811 	msr	BASEPRI, r3
 800bf5a:	f3bf 8f6f 	isb	sy
 800bf5e:	f3bf 8f4f 	dsb	sy
 800bf62:	61fb      	str	r3, [r7, #28]
}
 800bf64:	bf00      	nop
 800bf66:	bf00      	nop
 800bf68:	e7fd      	b.n	800bf66 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bf6a:	f002 fadd 	bl	800e528 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bf6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bf72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf76:	429a      	cmp	r2, r3
 800bf78:	d302      	bcc.n	800bf80 <xQueueGenericSend+0xdc>
 800bf7a:	683b      	ldr	r3, [r7, #0]
 800bf7c:	2b02      	cmp	r3, #2
 800bf7e:	d129      	bne.n	800bfd4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bf80:	683a      	ldr	r2, [r7, #0]
 800bf82:	68b9      	ldr	r1, [r7, #8]
 800bf84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bf86:	f000 fc6d 	bl	800c864 <prvCopyDataToQueue>
 800bf8a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bf8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d010      	beq.n	800bfb6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bf94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf96:	3324      	adds	r3, #36	@ 0x24
 800bf98:	4618      	mov	r0, r3
 800bf9a:	f001 fa8f 	bl	800d4bc <xTaskRemoveFromEventList>
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d013      	beq.n	800bfcc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bfa4:	4b3f      	ldr	r3, [pc, #252]	@ (800c0a4 <xQueueGenericSend+0x200>)
 800bfa6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bfaa:	601a      	str	r2, [r3, #0]
 800bfac:	f3bf 8f4f 	dsb	sy
 800bfb0:	f3bf 8f6f 	isb	sy
 800bfb4:	e00a      	b.n	800bfcc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bfb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d007      	beq.n	800bfcc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bfbc:	4b39      	ldr	r3, [pc, #228]	@ (800c0a4 <xQueueGenericSend+0x200>)
 800bfbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bfc2:	601a      	str	r2, [r3, #0]
 800bfc4:	f3bf 8f4f 	dsb	sy
 800bfc8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bfcc:	f002 fade 	bl	800e58c <vPortExitCritical>
				return pdPASS;
 800bfd0:	2301      	movs	r3, #1
 800bfd2:	e063      	b.n	800c09c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d103      	bne.n	800bfe2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bfda:	f002 fad7 	bl	800e58c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bfde:	2300      	movs	r3, #0
 800bfe0:	e05c      	b.n	800c09c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bfe2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d106      	bne.n	800bff6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bfe8:	f107 0314 	add.w	r3, r7, #20
 800bfec:	4618      	mov	r0, r3
 800bfee:	f001 fac9 	bl	800d584 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bff2:	2301      	movs	r3, #1
 800bff4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bff6:	f002 fac9 	bl	800e58c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bffa:	f000 fffb 	bl	800cff4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bffe:	f002 fa93 	bl	800e528 <vPortEnterCritical>
 800c002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c004:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c008:	b25b      	sxtb	r3, r3
 800c00a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c00e:	d103      	bne.n	800c018 <xQueueGenericSend+0x174>
 800c010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c012:	2200      	movs	r2, #0
 800c014:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c01a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c01e:	b25b      	sxtb	r3, r3
 800c020:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c024:	d103      	bne.n	800c02e <xQueueGenericSend+0x18a>
 800c026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c028:	2200      	movs	r2, #0
 800c02a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c02e:	f002 faad 	bl	800e58c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c032:	1d3a      	adds	r2, r7, #4
 800c034:	f107 0314 	add.w	r3, r7, #20
 800c038:	4611      	mov	r1, r2
 800c03a:	4618      	mov	r0, r3
 800c03c:	f001 fab8 	bl	800d5b0 <xTaskCheckForTimeOut>
 800c040:	4603      	mov	r3, r0
 800c042:	2b00      	cmp	r3, #0
 800c044:	d124      	bne.n	800c090 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c046:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c048:	f000 fd04 	bl	800ca54 <prvIsQueueFull>
 800c04c:	4603      	mov	r3, r0
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d018      	beq.n	800c084 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c054:	3310      	adds	r3, #16
 800c056:	687a      	ldr	r2, [r7, #4]
 800c058:	4611      	mov	r1, r2
 800c05a:	4618      	mov	r0, r3
 800c05c:	f001 f9dc 	bl	800d418 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c060:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c062:	f000 fc8f 	bl	800c984 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c066:	f000 ffd3 	bl	800d010 <xTaskResumeAll>
 800c06a:	4603      	mov	r3, r0
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	f47f af7c 	bne.w	800bf6a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c072:	4b0c      	ldr	r3, [pc, #48]	@ (800c0a4 <xQueueGenericSend+0x200>)
 800c074:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c078:	601a      	str	r2, [r3, #0]
 800c07a:	f3bf 8f4f 	dsb	sy
 800c07e:	f3bf 8f6f 	isb	sy
 800c082:	e772      	b.n	800bf6a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c084:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c086:	f000 fc7d 	bl	800c984 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c08a:	f000 ffc1 	bl	800d010 <xTaskResumeAll>
 800c08e:	e76c      	b.n	800bf6a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c090:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c092:	f000 fc77 	bl	800c984 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c096:	f000 ffbb 	bl	800d010 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c09a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c09c:	4618      	mov	r0, r3
 800c09e:	3738      	adds	r7, #56	@ 0x38
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}
 800c0a4:	e000ed04 	.word	0xe000ed04

0800c0a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b090      	sub	sp, #64	@ 0x40
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	60f8      	str	r0, [r7, #12]
 800c0b0:	60b9      	str	r1, [r7, #8]
 800c0b2:	607a      	str	r2, [r7, #4]
 800c0b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800c0ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d10b      	bne.n	800c0d8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800c0c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0c4:	f383 8811 	msr	BASEPRI, r3
 800c0c8:	f3bf 8f6f 	isb	sy
 800c0cc:	f3bf 8f4f 	dsb	sy
 800c0d0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c0d2:	bf00      	nop
 800c0d4:	bf00      	nop
 800c0d6:	e7fd      	b.n	800c0d4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d103      	bne.n	800c0e6 <xQueueGenericSendFromISR+0x3e>
 800c0de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d101      	bne.n	800c0ea <xQueueGenericSendFromISR+0x42>
 800c0e6:	2301      	movs	r3, #1
 800c0e8:	e000      	b.n	800c0ec <xQueueGenericSendFromISR+0x44>
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d10b      	bne.n	800c108 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800c0f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0f4:	f383 8811 	msr	BASEPRI, r3
 800c0f8:	f3bf 8f6f 	isb	sy
 800c0fc:	f3bf 8f4f 	dsb	sy
 800c100:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c102:	bf00      	nop
 800c104:	bf00      	nop
 800c106:	e7fd      	b.n	800c104 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	2b02      	cmp	r3, #2
 800c10c:	d103      	bne.n	800c116 <xQueueGenericSendFromISR+0x6e>
 800c10e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c110:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c112:	2b01      	cmp	r3, #1
 800c114:	d101      	bne.n	800c11a <xQueueGenericSendFromISR+0x72>
 800c116:	2301      	movs	r3, #1
 800c118:	e000      	b.n	800c11c <xQueueGenericSendFromISR+0x74>
 800c11a:	2300      	movs	r3, #0
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d10b      	bne.n	800c138 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800c120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c124:	f383 8811 	msr	BASEPRI, r3
 800c128:	f3bf 8f6f 	isb	sy
 800c12c:	f3bf 8f4f 	dsb	sy
 800c130:	623b      	str	r3, [r7, #32]
}
 800c132:	bf00      	nop
 800c134:	bf00      	nop
 800c136:	e7fd      	b.n	800c134 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c138:	f002 fad6 	bl	800e6e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c13c:	f3ef 8211 	mrs	r2, BASEPRI
 800c140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c144:	f383 8811 	msr	BASEPRI, r3
 800c148:	f3bf 8f6f 	isb	sy
 800c14c:	f3bf 8f4f 	dsb	sy
 800c150:	61fa      	str	r2, [r7, #28]
 800c152:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c154:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c156:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c15a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c15c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c15e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c160:	429a      	cmp	r2, r3
 800c162:	d302      	bcc.n	800c16a <xQueueGenericSendFromISR+0xc2>
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	2b02      	cmp	r3, #2
 800c168:	d12f      	bne.n	800c1ca <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c16a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c16c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c170:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c178:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c17a:	683a      	ldr	r2, [r7, #0]
 800c17c:	68b9      	ldr	r1, [r7, #8]
 800c17e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c180:	f000 fb70 	bl	800c864 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c184:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800c188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c18c:	d112      	bne.n	800c1b4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c18e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c192:	2b00      	cmp	r3, #0
 800c194:	d016      	beq.n	800c1c4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c198:	3324      	adds	r3, #36	@ 0x24
 800c19a:	4618      	mov	r0, r3
 800c19c:	f001 f98e 	bl	800d4bc <xTaskRemoveFromEventList>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d00e      	beq.n	800c1c4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d00b      	beq.n	800c1c4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2201      	movs	r2, #1
 800c1b0:	601a      	str	r2, [r3, #0]
 800c1b2:	e007      	b.n	800c1c4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c1b4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c1b8:	3301      	adds	r3, #1
 800c1ba:	b2db      	uxtb	r3, r3
 800c1bc:	b25a      	sxtb	r2, r3
 800c1be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c1c4:	2301      	movs	r3, #1
 800c1c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800c1c8:	e001      	b.n	800c1ce <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c1ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1d0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c1d2:	697b      	ldr	r3, [r7, #20]
 800c1d4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c1d8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c1da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	3740      	adds	r7, #64	@ 0x40
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	bd80      	pop	{r7, pc}

0800c1e4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b08e      	sub	sp, #56	@ 0x38
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
 800c1ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c1f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d10b      	bne.n	800c210 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800c1f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1fc:	f383 8811 	msr	BASEPRI, r3
 800c200:	f3bf 8f6f 	isb	sy
 800c204:	f3bf 8f4f 	dsb	sy
 800c208:	623b      	str	r3, [r7, #32]
}
 800c20a:	bf00      	nop
 800c20c:	bf00      	nop
 800c20e:	e7fd      	b.n	800c20c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c214:	2b00      	cmp	r3, #0
 800c216:	d00b      	beq.n	800c230 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800c218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c21c:	f383 8811 	msr	BASEPRI, r3
 800c220:	f3bf 8f6f 	isb	sy
 800c224:	f3bf 8f4f 	dsb	sy
 800c228:	61fb      	str	r3, [r7, #28]
}
 800c22a:	bf00      	nop
 800c22c:	bf00      	nop
 800c22e:	e7fd      	b.n	800c22c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d103      	bne.n	800c240 <xQueueGiveFromISR+0x5c>
 800c238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c23a:	689b      	ldr	r3, [r3, #8]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d101      	bne.n	800c244 <xQueueGiveFromISR+0x60>
 800c240:	2301      	movs	r3, #1
 800c242:	e000      	b.n	800c246 <xQueueGiveFromISR+0x62>
 800c244:	2300      	movs	r3, #0
 800c246:	2b00      	cmp	r3, #0
 800c248:	d10b      	bne.n	800c262 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800c24a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c24e:	f383 8811 	msr	BASEPRI, r3
 800c252:	f3bf 8f6f 	isb	sy
 800c256:	f3bf 8f4f 	dsb	sy
 800c25a:	61bb      	str	r3, [r7, #24]
}
 800c25c:	bf00      	nop
 800c25e:	bf00      	nop
 800c260:	e7fd      	b.n	800c25e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c262:	f002 fa41 	bl	800e6e8 <vPortValidateInterruptPriority>
	__asm volatile
 800c266:	f3ef 8211 	mrs	r2, BASEPRI
 800c26a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c26e:	f383 8811 	msr	BASEPRI, r3
 800c272:	f3bf 8f6f 	isb	sy
 800c276:	f3bf 8f4f 	dsb	sy
 800c27a:	617a      	str	r2, [r7, #20]
 800c27c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c27e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c280:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c286:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c28a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c28c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c28e:	429a      	cmp	r2, r3
 800c290:	d22b      	bcs.n	800c2ea <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c294:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c298:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c29c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c29e:	1c5a      	adds	r2, r3, #1
 800c2a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2a2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c2a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c2a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2ac:	d112      	bne.n	800c2d4 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c2ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d016      	beq.n	800c2e4 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c2b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2b8:	3324      	adds	r3, #36	@ 0x24
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	f001 f8fe 	bl	800d4bc <xTaskRemoveFromEventList>
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d00e      	beq.n	800c2e4 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d00b      	beq.n	800c2e4 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c2cc:	683b      	ldr	r3, [r7, #0]
 800c2ce:	2201      	movs	r2, #1
 800c2d0:	601a      	str	r2, [r3, #0]
 800c2d2:	e007      	b.n	800c2e4 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c2d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c2d8:	3301      	adds	r3, #1
 800c2da:	b2db      	uxtb	r3, r3
 800c2dc:	b25a      	sxtb	r2, r3
 800c2de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c2e4:	2301      	movs	r3, #1
 800c2e6:	637b      	str	r3, [r7, #52]	@ 0x34
 800c2e8:	e001      	b.n	800c2ee <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	637b      	str	r3, [r7, #52]	@ 0x34
 800c2ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2f0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	f383 8811 	msr	BASEPRI, r3
}
 800c2f8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c2fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	3738      	adds	r7, #56	@ 0x38
 800c300:	46bd      	mov	sp, r7
 800c302:	bd80      	pop	{r7, pc}

0800c304 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b08c      	sub	sp, #48	@ 0x30
 800c308:	af00      	add	r7, sp, #0
 800c30a:	60f8      	str	r0, [r7, #12]
 800c30c:	60b9      	str	r1, [r7, #8]
 800c30e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c310:	2300      	movs	r3, #0
 800c312:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d10b      	bne.n	800c336 <xQueueReceive+0x32>
	__asm volatile
 800c31e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c322:	f383 8811 	msr	BASEPRI, r3
 800c326:	f3bf 8f6f 	isb	sy
 800c32a:	f3bf 8f4f 	dsb	sy
 800c32e:	623b      	str	r3, [r7, #32]
}
 800c330:	bf00      	nop
 800c332:	bf00      	nop
 800c334:	e7fd      	b.n	800c332 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c336:	68bb      	ldr	r3, [r7, #8]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d103      	bne.n	800c344 <xQueueReceive+0x40>
 800c33c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c33e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c340:	2b00      	cmp	r3, #0
 800c342:	d101      	bne.n	800c348 <xQueueReceive+0x44>
 800c344:	2301      	movs	r3, #1
 800c346:	e000      	b.n	800c34a <xQueueReceive+0x46>
 800c348:	2300      	movs	r3, #0
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d10b      	bne.n	800c366 <xQueueReceive+0x62>
	__asm volatile
 800c34e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c352:	f383 8811 	msr	BASEPRI, r3
 800c356:	f3bf 8f6f 	isb	sy
 800c35a:	f3bf 8f4f 	dsb	sy
 800c35e:	61fb      	str	r3, [r7, #28]
}
 800c360:	bf00      	nop
 800c362:	bf00      	nop
 800c364:	e7fd      	b.n	800c362 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c366:	f001 fa71 	bl	800d84c <xTaskGetSchedulerState>
 800c36a:	4603      	mov	r3, r0
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d102      	bne.n	800c376 <xQueueReceive+0x72>
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d101      	bne.n	800c37a <xQueueReceive+0x76>
 800c376:	2301      	movs	r3, #1
 800c378:	e000      	b.n	800c37c <xQueueReceive+0x78>
 800c37a:	2300      	movs	r3, #0
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d10b      	bne.n	800c398 <xQueueReceive+0x94>
	__asm volatile
 800c380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c384:	f383 8811 	msr	BASEPRI, r3
 800c388:	f3bf 8f6f 	isb	sy
 800c38c:	f3bf 8f4f 	dsb	sy
 800c390:	61bb      	str	r3, [r7, #24]
}
 800c392:	bf00      	nop
 800c394:	bf00      	nop
 800c396:	e7fd      	b.n	800c394 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c398:	f002 f8c6 	bl	800e528 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c39c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c39e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c3a0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c3a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d01f      	beq.n	800c3e8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c3a8:	68b9      	ldr	r1, [r7, #8]
 800c3aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c3ac:	f000 fac4 	bl	800c938 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c3b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3b2:	1e5a      	subs	r2, r3, #1
 800c3b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3b6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c3b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3ba:	691b      	ldr	r3, [r3, #16]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d00f      	beq.n	800c3e0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c3c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3c2:	3310      	adds	r3, #16
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	f001 f879 	bl	800d4bc <xTaskRemoveFromEventList>
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d007      	beq.n	800c3e0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c3d0:	4b3c      	ldr	r3, [pc, #240]	@ (800c4c4 <xQueueReceive+0x1c0>)
 800c3d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c3d6:	601a      	str	r2, [r3, #0]
 800c3d8:	f3bf 8f4f 	dsb	sy
 800c3dc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c3e0:	f002 f8d4 	bl	800e58c <vPortExitCritical>
				return pdPASS;
 800c3e4:	2301      	movs	r3, #1
 800c3e6:	e069      	b.n	800c4bc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d103      	bne.n	800c3f6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c3ee:	f002 f8cd 	bl	800e58c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	e062      	b.n	800c4bc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c3f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d106      	bne.n	800c40a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c3fc:	f107 0310 	add.w	r3, r7, #16
 800c400:	4618      	mov	r0, r3
 800c402:	f001 f8bf 	bl	800d584 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c406:	2301      	movs	r3, #1
 800c408:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c40a:	f002 f8bf 	bl	800e58c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c40e:	f000 fdf1 	bl	800cff4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c412:	f002 f889 	bl	800e528 <vPortEnterCritical>
 800c416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c418:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c41c:	b25b      	sxtb	r3, r3
 800c41e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c422:	d103      	bne.n	800c42c <xQueueReceive+0x128>
 800c424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c426:	2200      	movs	r2, #0
 800c428:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c42c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c42e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c432:	b25b      	sxtb	r3, r3
 800c434:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c438:	d103      	bne.n	800c442 <xQueueReceive+0x13e>
 800c43a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c43c:	2200      	movs	r2, #0
 800c43e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c442:	f002 f8a3 	bl	800e58c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c446:	1d3a      	adds	r2, r7, #4
 800c448:	f107 0310 	add.w	r3, r7, #16
 800c44c:	4611      	mov	r1, r2
 800c44e:	4618      	mov	r0, r3
 800c450:	f001 f8ae 	bl	800d5b0 <xTaskCheckForTimeOut>
 800c454:	4603      	mov	r3, r0
 800c456:	2b00      	cmp	r3, #0
 800c458:	d123      	bne.n	800c4a2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c45a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c45c:	f000 fae4 	bl	800ca28 <prvIsQueueEmpty>
 800c460:	4603      	mov	r3, r0
 800c462:	2b00      	cmp	r3, #0
 800c464:	d017      	beq.n	800c496 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c468:	3324      	adds	r3, #36	@ 0x24
 800c46a:	687a      	ldr	r2, [r7, #4]
 800c46c:	4611      	mov	r1, r2
 800c46e:	4618      	mov	r0, r3
 800c470:	f000 ffd2 	bl	800d418 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c474:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c476:	f000 fa85 	bl	800c984 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c47a:	f000 fdc9 	bl	800d010 <xTaskResumeAll>
 800c47e:	4603      	mov	r3, r0
 800c480:	2b00      	cmp	r3, #0
 800c482:	d189      	bne.n	800c398 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800c484:	4b0f      	ldr	r3, [pc, #60]	@ (800c4c4 <xQueueReceive+0x1c0>)
 800c486:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c48a:	601a      	str	r2, [r3, #0]
 800c48c:	f3bf 8f4f 	dsb	sy
 800c490:	f3bf 8f6f 	isb	sy
 800c494:	e780      	b.n	800c398 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c496:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c498:	f000 fa74 	bl	800c984 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c49c:	f000 fdb8 	bl	800d010 <xTaskResumeAll>
 800c4a0:	e77a      	b.n	800c398 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c4a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c4a4:	f000 fa6e 	bl	800c984 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c4a8:	f000 fdb2 	bl	800d010 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c4ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c4ae:	f000 fabb 	bl	800ca28 <prvIsQueueEmpty>
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	f43f af6f 	beq.w	800c398 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c4ba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c4bc:	4618      	mov	r0, r3
 800c4be:	3730      	adds	r7, #48	@ 0x30
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	bd80      	pop	{r7, pc}
 800c4c4:	e000ed04 	.word	0xe000ed04

0800c4c8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b08e      	sub	sp, #56	@ 0x38
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
 800c4d0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c4da:	2300      	movs	r3, #0
 800c4dc:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c4de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d10b      	bne.n	800c4fc <xQueueSemaphoreTake+0x34>
	__asm volatile
 800c4e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4e8:	f383 8811 	msr	BASEPRI, r3
 800c4ec:	f3bf 8f6f 	isb	sy
 800c4f0:	f3bf 8f4f 	dsb	sy
 800c4f4:	623b      	str	r3, [r7, #32]
}
 800c4f6:	bf00      	nop
 800c4f8:	bf00      	nop
 800c4fa:	e7fd      	b.n	800c4f8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c4fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c500:	2b00      	cmp	r3, #0
 800c502:	d00b      	beq.n	800c51c <xQueueSemaphoreTake+0x54>
	__asm volatile
 800c504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c508:	f383 8811 	msr	BASEPRI, r3
 800c50c:	f3bf 8f6f 	isb	sy
 800c510:	f3bf 8f4f 	dsb	sy
 800c514:	61fb      	str	r3, [r7, #28]
}
 800c516:	bf00      	nop
 800c518:	bf00      	nop
 800c51a:	e7fd      	b.n	800c518 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c51c:	f001 f996 	bl	800d84c <xTaskGetSchedulerState>
 800c520:	4603      	mov	r3, r0
 800c522:	2b00      	cmp	r3, #0
 800c524:	d102      	bne.n	800c52c <xQueueSemaphoreTake+0x64>
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d101      	bne.n	800c530 <xQueueSemaphoreTake+0x68>
 800c52c:	2301      	movs	r3, #1
 800c52e:	e000      	b.n	800c532 <xQueueSemaphoreTake+0x6a>
 800c530:	2300      	movs	r3, #0
 800c532:	2b00      	cmp	r3, #0
 800c534:	d10b      	bne.n	800c54e <xQueueSemaphoreTake+0x86>
	__asm volatile
 800c536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c53a:	f383 8811 	msr	BASEPRI, r3
 800c53e:	f3bf 8f6f 	isb	sy
 800c542:	f3bf 8f4f 	dsb	sy
 800c546:	61bb      	str	r3, [r7, #24]
}
 800c548:	bf00      	nop
 800c54a:	bf00      	nop
 800c54c:	e7fd      	b.n	800c54a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c54e:	f001 ffeb 	bl	800e528 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c556:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d024      	beq.n	800c5a8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c55e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c560:	1e5a      	subs	r2, r3, #1
 800c562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c564:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d104      	bne.n	800c578 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c56e:	f001 fae7 	bl	800db40 <pvTaskIncrementMutexHeldCount>
 800c572:	4602      	mov	r2, r0
 800c574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c576:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c57a:	691b      	ldr	r3, [r3, #16]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d00f      	beq.n	800c5a0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c582:	3310      	adds	r3, #16
 800c584:	4618      	mov	r0, r3
 800c586:	f000 ff99 	bl	800d4bc <xTaskRemoveFromEventList>
 800c58a:	4603      	mov	r3, r0
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d007      	beq.n	800c5a0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c590:	4b54      	ldr	r3, [pc, #336]	@ (800c6e4 <xQueueSemaphoreTake+0x21c>)
 800c592:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c596:	601a      	str	r2, [r3, #0]
 800c598:	f3bf 8f4f 	dsb	sy
 800c59c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c5a0:	f001 fff4 	bl	800e58c <vPortExitCritical>
				return pdPASS;
 800c5a4:	2301      	movs	r3, #1
 800c5a6:	e098      	b.n	800c6da <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c5a8:	683b      	ldr	r3, [r7, #0]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d112      	bne.n	800c5d4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c5ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d00b      	beq.n	800c5cc <xQueueSemaphoreTake+0x104>
	__asm volatile
 800c5b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5b8:	f383 8811 	msr	BASEPRI, r3
 800c5bc:	f3bf 8f6f 	isb	sy
 800c5c0:	f3bf 8f4f 	dsb	sy
 800c5c4:	617b      	str	r3, [r7, #20]
}
 800c5c6:	bf00      	nop
 800c5c8:	bf00      	nop
 800c5ca:	e7fd      	b.n	800c5c8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c5cc:	f001 ffde 	bl	800e58c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	e082      	b.n	800c6da <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c5d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d106      	bne.n	800c5e8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c5da:	f107 030c 	add.w	r3, r7, #12
 800c5de:	4618      	mov	r0, r3
 800c5e0:	f000 ffd0 	bl	800d584 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c5e4:	2301      	movs	r3, #1
 800c5e6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c5e8:	f001 ffd0 	bl	800e58c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c5ec:	f000 fd02 	bl	800cff4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c5f0:	f001 ff9a 	bl	800e528 <vPortEnterCritical>
 800c5f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5f6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c5fa:	b25b      	sxtb	r3, r3
 800c5fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c600:	d103      	bne.n	800c60a <xQueueSemaphoreTake+0x142>
 800c602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c604:	2200      	movs	r2, #0
 800c606:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c60a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c60c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c610:	b25b      	sxtb	r3, r3
 800c612:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c616:	d103      	bne.n	800c620 <xQueueSemaphoreTake+0x158>
 800c618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c61a:	2200      	movs	r2, #0
 800c61c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c620:	f001 ffb4 	bl	800e58c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c624:	463a      	mov	r2, r7
 800c626:	f107 030c 	add.w	r3, r7, #12
 800c62a:	4611      	mov	r1, r2
 800c62c:	4618      	mov	r0, r3
 800c62e:	f000 ffbf 	bl	800d5b0 <xTaskCheckForTimeOut>
 800c632:	4603      	mov	r3, r0
 800c634:	2b00      	cmp	r3, #0
 800c636:	d132      	bne.n	800c69e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c638:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c63a:	f000 f9f5 	bl	800ca28 <prvIsQueueEmpty>
 800c63e:	4603      	mov	r3, r0
 800c640:	2b00      	cmp	r3, #0
 800c642:	d026      	beq.n	800c692 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d109      	bne.n	800c660 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800c64c:	f001 ff6c 	bl	800e528 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c652:	689b      	ldr	r3, [r3, #8]
 800c654:	4618      	mov	r0, r3
 800c656:	f001 f917 	bl	800d888 <xTaskPriorityInherit>
 800c65a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800c65c:	f001 ff96 	bl	800e58c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c662:	3324      	adds	r3, #36	@ 0x24
 800c664:	683a      	ldr	r2, [r7, #0]
 800c666:	4611      	mov	r1, r2
 800c668:	4618      	mov	r0, r3
 800c66a:	f000 fed5 	bl	800d418 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c66e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c670:	f000 f988 	bl	800c984 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c674:	f000 fccc 	bl	800d010 <xTaskResumeAll>
 800c678:	4603      	mov	r3, r0
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	f47f af67 	bne.w	800c54e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800c680:	4b18      	ldr	r3, [pc, #96]	@ (800c6e4 <xQueueSemaphoreTake+0x21c>)
 800c682:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c686:	601a      	str	r2, [r3, #0]
 800c688:	f3bf 8f4f 	dsb	sy
 800c68c:	f3bf 8f6f 	isb	sy
 800c690:	e75d      	b.n	800c54e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c692:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c694:	f000 f976 	bl	800c984 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c698:	f000 fcba 	bl	800d010 <xTaskResumeAll>
 800c69c:	e757      	b.n	800c54e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c69e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c6a0:	f000 f970 	bl	800c984 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c6a4:	f000 fcb4 	bl	800d010 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c6a8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c6aa:	f000 f9bd 	bl	800ca28 <prvIsQueueEmpty>
 800c6ae:	4603      	mov	r3, r0
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	f43f af4c 	beq.w	800c54e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c6b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d00d      	beq.n	800c6d8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800c6bc:	f001 ff34 	bl	800e528 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c6c0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c6c2:	f000 f8b7 	bl	800c834 <prvGetDisinheritPriorityAfterTimeout>
 800c6c6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c6c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6ca:	689b      	ldr	r3, [r3, #8]
 800c6cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	f001 f9b2 	bl	800da38 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c6d4:	f001 ff5a 	bl	800e58c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c6d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c6da:	4618      	mov	r0, r3
 800c6dc:	3738      	adds	r7, #56	@ 0x38
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	bd80      	pop	{r7, pc}
 800c6e2:	bf00      	nop
 800c6e4:	e000ed04 	.word	0xe000ed04

0800c6e8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b08e      	sub	sp, #56	@ 0x38
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	60f8      	str	r0, [r7, #12]
 800c6f0:	60b9      	str	r1, [r7, #8]
 800c6f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c6f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d10b      	bne.n	800c716 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800c6fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c702:	f383 8811 	msr	BASEPRI, r3
 800c706:	f3bf 8f6f 	isb	sy
 800c70a:	f3bf 8f4f 	dsb	sy
 800c70e:	623b      	str	r3, [r7, #32]
}
 800c710:	bf00      	nop
 800c712:	bf00      	nop
 800c714:	e7fd      	b.n	800c712 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c716:	68bb      	ldr	r3, [r7, #8]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d103      	bne.n	800c724 <xQueueReceiveFromISR+0x3c>
 800c71c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c71e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c720:	2b00      	cmp	r3, #0
 800c722:	d101      	bne.n	800c728 <xQueueReceiveFromISR+0x40>
 800c724:	2301      	movs	r3, #1
 800c726:	e000      	b.n	800c72a <xQueueReceiveFromISR+0x42>
 800c728:	2300      	movs	r3, #0
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d10b      	bne.n	800c746 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800c72e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c732:	f383 8811 	msr	BASEPRI, r3
 800c736:	f3bf 8f6f 	isb	sy
 800c73a:	f3bf 8f4f 	dsb	sy
 800c73e:	61fb      	str	r3, [r7, #28]
}
 800c740:	bf00      	nop
 800c742:	bf00      	nop
 800c744:	e7fd      	b.n	800c742 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c746:	f001 ffcf 	bl	800e6e8 <vPortValidateInterruptPriority>
	__asm volatile
 800c74a:	f3ef 8211 	mrs	r2, BASEPRI
 800c74e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c752:	f383 8811 	msr	BASEPRI, r3
 800c756:	f3bf 8f6f 	isb	sy
 800c75a:	f3bf 8f4f 	dsb	sy
 800c75e:	61ba      	str	r2, [r7, #24]
 800c760:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c762:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c764:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c76a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c76c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d02f      	beq.n	800c7d2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c774:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c778:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c77c:	68b9      	ldr	r1, [r7, #8]
 800c77e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c780:	f000 f8da 	bl	800c938 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c786:	1e5a      	subs	r2, r3, #1
 800c788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c78a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c78c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c790:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c794:	d112      	bne.n	800c7bc <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c798:	691b      	ldr	r3, [r3, #16]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d016      	beq.n	800c7cc <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c79e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7a0:	3310      	adds	r3, #16
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	f000 fe8a 	bl	800d4bc <xTaskRemoveFromEventList>
 800c7a8:	4603      	mov	r3, r0
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d00e      	beq.n	800c7cc <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d00b      	beq.n	800c7cc <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	2201      	movs	r2, #1
 800c7b8:	601a      	str	r2, [r3, #0]
 800c7ba:	e007      	b.n	800c7cc <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c7bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c7c0:	3301      	adds	r3, #1
 800c7c2:	b2db      	uxtb	r3, r3
 800c7c4:	b25a      	sxtb	r2, r3
 800c7c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800c7cc:	2301      	movs	r3, #1
 800c7ce:	637b      	str	r3, [r7, #52]	@ 0x34
 800c7d0:	e001      	b.n	800c7d6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	637b      	str	r3, [r7, #52]	@ 0x34
 800c7d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7d8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c7da:	693b      	ldr	r3, [r7, #16]
 800c7dc:	f383 8811 	msr	BASEPRI, r3
}
 800c7e0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c7e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	3738      	adds	r7, #56	@ 0x38
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bd80      	pop	{r7, pc}

0800c7ec <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b084      	sub	sp, #16
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d10b      	bne.n	800c816 <vQueueDelete+0x2a>
	__asm volatile
 800c7fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c802:	f383 8811 	msr	BASEPRI, r3
 800c806:	f3bf 8f6f 	isb	sy
 800c80a:	f3bf 8f4f 	dsb	sy
 800c80e:	60bb      	str	r3, [r7, #8]
}
 800c810:	bf00      	nop
 800c812:	bf00      	nop
 800c814:	e7fd      	b.n	800c812 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c816:	68f8      	ldr	r0, [r7, #12]
 800c818:	f000 f95e 	bl	800cad8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800c822:	2b00      	cmp	r3, #0
 800c824:	d102      	bne.n	800c82c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800c826:	68f8      	ldr	r0, [r7, #12]
 800c828:	f002 f874 	bl	800e914 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c82c:	bf00      	nop
 800c82e:	3710      	adds	r7, #16
 800c830:	46bd      	mov	sp, r7
 800c832:	bd80      	pop	{r7, pc}

0800c834 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c834:	b480      	push	{r7}
 800c836:	b085      	sub	sp, #20
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c840:	2b00      	cmp	r3, #0
 800c842:	d006      	beq.n	800c852 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800c84e:	60fb      	str	r3, [r7, #12]
 800c850:	e001      	b.n	800c856 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c852:	2300      	movs	r3, #0
 800c854:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c856:	68fb      	ldr	r3, [r7, #12]
	}
 800c858:	4618      	mov	r0, r3
 800c85a:	3714      	adds	r7, #20
 800c85c:	46bd      	mov	sp, r7
 800c85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c862:	4770      	bx	lr

0800c864 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b086      	sub	sp, #24
 800c868:	af00      	add	r7, sp, #0
 800c86a:	60f8      	str	r0, [r7, #12]
 800c86c:	60b9      	str	r1, [r7, #8]
 800c86e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c870:	2300      	movs	r3, #0
 800c872:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c878:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d10d      	bne.n	800c89e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d14d      	bne.n	800c926 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	689b      	ldr	r3, [r3, #8]
 800c88e:	4618      	mov	r0, r3
 800c890:	f001 f862 	bl	800d958 <xTaskPriorityDisinherit>
 800c894:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	2200      	movs	r2, #0
 800c89a:	609a      	str	r2, [r3, #8]
 800c89c:	e043      	b.n	800c926 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d119      	bne.n	800c8d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	6858      	ldr	r0, [r3, #4]
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8ac:	461a      	mov	r2, r3
 800c8ae:	68b9      	ldr	r1, [r7, #8]
 800c8b0:	f003 fa56 	bl	800fd60 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	685a      	ldr	r2, [r3, #4]
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8bc:	441a      	add	r2, r3
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	685a      	ldr	r2, [r3, #4]
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	689b      	ldr	r3, [r3, #8]
 800c8ca:	429a      	cmp	r2, r3
 800c8cc:	d32b      	bcc.n	800c926 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	681a      	ldr	r2, [r3, #0]
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	605a      	str	r2, [r3, #4]
 800c8d6:	e026      	b.n	800c926 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	68d8      	ldr	r0, [r3, #12]
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8e0:	461a      	mov	r2, r3
 800c8e2:	68b9      	ldr	r1, [r7, #8]
 800c8e4:	f003 fa3c 	bl	800fd60 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	68da      	ldr	r2, [r3, #12]
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8f0:	425b      	negs	r3, r3
 800c8f2:	441a      	add	r2, r3
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	68da      	ldr	r2, [r3, #12]
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	429a      	cmp	r2, r3
 800c902:	d207      	bcs.n	800c914 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	689a      	ldr	r2, [r3, #8]
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c90c:	425b      	negs	r3, r3
 800c90e:	441a      	add	r2, r3
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2b02      	cmp	r3, #2
 800c918:	d105      	bne.n	800c926 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c91a:	693b      	ldr	r3, [r7, #16]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d002      	beq.n	800c926 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c920:	693b      	ldr	r3, [r7, #16]
 800c922:	3b01      	subs	r3, #1
 800c924:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c926:	693b      	ldr	r3, [r7, #16]
 800c928:	1c5a      	adds	r2, r3, #1
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800c92e:	697b      	ldr	r3, [r7, #20]
}
 800c930:	4618      	mov	r0, r3
 800c932:	3718      	adds	r7, #24
 800c934:	46bd      	mov	sp, r7
 800c936:	bd80      	pop	{r7, pc}

0800c938 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b082      	sub	sp, #8
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
 800c940:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c946:	2b00      	cmp	r3, #0
 800c948:	d018      	beq.n	800c97c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	68da      	ldr	r2, [r3, #12]
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c952:	441a      	add	r2, r3
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	68da      	ldr	r2, [r3, #12]
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	689b      	ldr	r3, [r3, #8]
 800c960:	429a      	cmp	r2, r3
 800c962:	d303      	bcc.n	800c96c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681a      	ldr	r2, [r3, #0]
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	68d9      	ldr	r1, [r3, #12]
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c974:	461a      	mov	r2, r3
 800c976:	6838      	ldr	r0, [r7, #0]
 800c978:	f003 f9f2 	bl	800fd60 <memcpy>
	}
}
 800c97c:	bf00      	nop
 800c97e:	3708      	adds	r7, #8
 800c980:	46bd      	mov	sp, r7
 800c982:	bd80      	pop	{r7, pc}

0800c984 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b084      	sub	sp, #16
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c98c:	f001 fdcc 	bl	800e528 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c996:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c998:	e011      	b.n	800c9be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d012      	beq.n	800c9c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	3324      	adds	r3, #36	@ 0x24
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	f000 fd88 	bl	800d4bc <xTaskRemoveFromEventList>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d001      	beq.n	800c9b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c9b2:	f000 fe61 	bl	800d678 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c9b6:	7bfb      	ldrb	r3, [r7, #15]
 800c9b8:	3b01      	subs	r3, #1
 800c9ba:	b2db      	uxtb	r3, r3
 800c9bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c9be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	dce9      	bgt.n	800c99a <prvUnlockQueue+0x16>
 800c9c6:	e000      	b.n	800c9ca <prvUnlockQueue+0x46>
					break;
 800c9c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	22ff      	movs	r2, #255	@ 0xff
 800c9ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800c9d2:	f001 fddb 	bl	800e58c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c9d6:	f001 fda7 	bl	800e528 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c9e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c9e2:	e011      	b.n	800ca08 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	691b      	ldr	r3, [r3, #16]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d012      	beq.n	800ca12 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	3310      	adds	r3, #16
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	f000 fd63 	bl	800d4bc <xTaskRemoveFromEventList>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d001      	beq.n	800ca00 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c9fc:	f000 fe3c 	bl	800d678 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ca00:	7bbb      	ldrb	r3, [r7, #14]
 800ca02:	3b01      	subs	r3, #1
 800ca04:	b2db      	uxtb	r3, r3
 800ca06:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ca08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	dce9      	bgt.n	800c9e4 <prvUnlockQueue+0x60>
 800ca10:	e000      	b.n	800ca14 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ca12:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	22ff      	movs	r2, #255	@ 0xff
 800ca18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ca1c:	f001 fdb6 	bl	800e58c <vPortExitCritical>
}
 800ca20:	bf00      	nop
 800ca22:	3710      	adds	r7, #16
 800ca24:	46bd      	mov	sp, r7
 800ca26:	bd80      	pop	{r7, pc}

0800ca28 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b084      	sub	sp, #16
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ca30:	f001 fd7a 	bl	800e528 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d102      	bne.n	800ca42 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ca3c:	2301      	movs	r3, #1
 800ca3e:	60fb      	str	r3, [r7, #12]
 800ca40:	e001      	b.n	800ca46 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ca42:	2300      	movs	r3, #0
 800ca44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ca46:	f001 fda1 	bl	800e58c <vPortExitCritical>

	return xReturn;
 800ca4a:	68fb      	ldr	r3, [r7, #12]
}
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	3710      	adds	r7, #16
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bd80      	pop	{r7, pc}

0800ca54 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b084      	sub	sp, #16
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ca5c:	f001 fd64 	bl	800e528 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca68:	429a      	cmp	r2, r3
 800ca6a:	d102      	bne.n	800ca72 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ca6c:	2301      	movs	r3, #1
 800ca6e:	60fb      	str	r3, [r7, #12]
 800ca70:	e001      	b.n	800ca76 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ca72:	2300      	movs	r3, #0
 800ca74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ca76:	f001 fd89 	bl	800e58c <vPortExitCritical>

	return xReturn;
 800ca7a:	68fb      	ldr	r3, [r7, #12]
}
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	3710      	adds	r7, #16
 800ca80:	46bd      	mov	sp, r7
 800ca82:	bd80      	pop	{r7, pc}

0800ca84 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ca84:	b480      	push	{r7}
 800ca86:	b085      	sub	sp, #20
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
 800ca8c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ca8e:	2300      	movs	r3, #0
 800ca90:	60fb      	str	r3, [r7, #12]
 800ca92:	e014      	b.n	800cabe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ca94:	4a0f      	ldr	r2, [pc, #60]	@ (800cad4 <vQueueAddToRegistry+0x50>)
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d10b      	bne.n	800cab8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800caa0:	490c      	ldr	r1, [pc, #48]	@ (800cad4 <vQueueAddToRegistry+0x50>)
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	683a      	ldr	r2, [r7, #0]
 800caa6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800caaa:	4a0a      	ldr	r2, [pc, #40]	@ (800cad4 <vQueueAddToRegistry+0x50>)
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	00db      	lsls	r3, r3, #3
 800cab0:	4413      	add	r3, r2
 800cab2:	687a      	ldr	r2, [r7, #4]
 800cab4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cab6:	e006      	b.n	800cac6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	3301      	adds	r3, #1
 800cabc:	60fb      	str	r3, [r7, #12]
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	2b07      	cmp	r3, #7
 800cac2:	d9e7      	bls.n	800ca94 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cac4:	bf00      	nop
 800cac6:	bf00      	nop
 800cac8:	3714      	adds	r7, #20
 800caca:	46bd      	mov	sp, r7
 800cacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad0:	4770      	bx	lr
 800cad2:	bf00      	nop
 800cad4:	20001e50 	.word	0x20001e50

0800cad8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800cad8:	b480      	push	{r7}
 800cada:	b085      	sub	sp, #20
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cae0:	2300      	movs	r3, #0
 800cae2:	60fb      	str	r3, [r7, #12]
 800cae4:	e016      	b.n	800cb14 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800cae6:	4a10      	ldr	r2, [pc, #64]	@ (800cb28 <vQueueUnregisterQueue+0x50>)
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	00db      	lsls	r3, r3, #3
 800caec:	4413      	add	r3, r2
 800caee:	685b      	ldr	r3, [r3, #4]
 800caf0:	687a      	ldr	r2, [r7, #4]
 800caf2:	429a      	cmp	r2, r3
 800caf4:	d10b      	bne.n	800cb0e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800caf6:	4a0c      	ldr	r2, [pc, #48]	@ (800cb28 <vQueueUnregisterQueue+0x50>)
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	2100      	movs	r1, #0
 800cafc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800cb00:	4a09      	ldr	r2, [pc, #36]	@ (800cb28 <vQueueUnregisterQueue+0x50>)
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	00db      	lsls	r3, r3, #3
 800cb06:	4413      	add	r3, r2
 800cb08:	2200      	movs	r2, #0
 800cb0a:	605a      	str	r2, [r3, #4]
				break;
 800cb0c:	e006      	b.n	800cb1c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	3301      	adds	r3, #1
 800cb12:	60fb      	str	r3, [r7, #12]
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	2b07      	cmp	r3, #7
 800cb18:	d9e5      	bls.n	800cae6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800cb1a:	bf00      	nop
 800cb1c:	bf00      	nop
 800cb1e:	3714      	adds	r7, #20
 800cb20:	46bd      	mov	sp, r7
 800cb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb26:	4770      	bx	lr
 800cb28:	20001e50 	.word	0x20001e50

0800cb2c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b086      	sub	sp, #24
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	60f8      	str	r0, [r7, #12]
 800cb34:	60b9      	str	r1, [r7, #8]
 800cb36:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800cb3c:	f001 fcf4 	bl	800e528 <vPortEnterCritical>
 800cb40:	697b      	ldr	r3, [r7, #20]
 800cb42:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cb46:	b25b      	sxtb	r3, r3
 800cb48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb4c:	d103      	bne.n	800cb56 <vQueueWaitForMessageRestricted+0x2a>
 800cb4e:	697b      	ldr	r3, [r7, #20]
 800cb50:	2200      	movs	r2, #0
 800cb52:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cb56:	697b      	ldr	r3, [r7, #20]
 800cb58:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cb5c:	b25b      	sxtb	r3, r3
 800cb5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb62:	d103      	bne.n	800cb6c <vQueueWaitForMessageRestricted+0x40>
 800cb64:	697b      	ldr	r3, [r7, #20]
 800cb66:	2200      	movs	r2, #0
 800cb68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cb6c:	f001 fd0e 	bl	800e58c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800cb70:	697b      	ldr	r3, [r7, #20]
 800cb72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d106      	bne.n	800cb86 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800cb78:	697b      	ldr	r3, [r7, #20]
 800cb7a:	3324      	adds	r3, #36	@ 0x24
 800cb7c:	687a      	ldr	r2, [r7, #4]
 800cb7e:	68b9      	ldr	r1, [r7, #8]
 800cb80:	4618      	mov	r0, r3
 800cb82:	f000 fc6f 	bl	800d464 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800cb86:	6978      	ldr	r0, [r7, #20]
 800cb88:	f7ff fefc 	bl	800c984 <prvUnlockQueue>
	}
 800cb8c:	bf00      	nop
 800cb8e:	3718      	adds	r7, #24
 800cb90:	46bd      	mov	sp, r7
 800cb92:	bd80      	pop	{r7, pc}

0800cb94 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b08e      	sub	sp, #56	@ 0x38
 800cb98:	af04      	add	r7, sp, #16
 800cb9a:	60f8      	str	r0, [r7, #12]
 800cb9c:	60b9      	str	r1, [r7, #8]
 800cb9e:	607a      	str	r2, [r7, #4]
 800cba0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cba2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d10b      	bne.n	800cbc0 <xTaskCreateStatic+0x2c>
	__asm volatile
 800cba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbac:	f383 8811 	msr	BASEPRI, r3
 800cbb0:	f3bf 8f6f 	isb	sy
 800cbb4:	f3bf 8f4f 	dsb	sy
 800cbb8:	623b      	str	r3, [r7, #32]
}
 800cbba:	bf00      	nop
 800cbbc:	bf00      	nop
 800cbbe:	e7fd      	b.n	800cbbc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cbc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d10b      	bne.n	800cbde <xTaskCreateStatic+0x4a>
	__asm volatile
 800cbc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbca:	f383 8811 	msr	BASEPRI, r3
 800cbce:	f3bf 8f6f 	isb	sy
 800cbd2:	f3bf 8f4f 	dsb	sy
 800cbd6:	61fb      	str	r3, [r7, #28]
}
 800cbd8:	bf00      	nop
 800cbda:	bf00      	nop
 800cbdc:	e7fd      	b.n	800cbda <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cbde:	23ac      	movs	r3, #172	@ 0xac
 800cbe0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cbe2:	693b      	ldr	r3, [r7, #16]
 800cbe4:	2bac      	cmp	r3, #172	@ 0xac
 800cbe6:	d00b      	beq.n	800cc00 <xTaskCreateStatic+0x6c>
	__asm volatile
 800cbe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbec:	f383 8811 	msr	BASEPRI, r3
 800cbf0:	f3bf 8f6f 	isb	sy
 800cbf4:	f3bf 8f4f 	dsb	sy
 800cbf8:	61bb      	str	r3, [r7, #24]
}
 800cbfa:	bf00      	nop
 800cbfc:	bf00      	nop
 800cbfe:	e7fd      	b.n	800cbfc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cc00:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cc02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d01e      	beq.n	800cc46 <xTaskCreateStatic+0xb2>
 800cc08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d01b      	beq.n	800cc46 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cc0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc10:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cc12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc14:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cc16:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cc18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc1a:	2202      	movs	r2, #2
 800cc1c:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cc20:	2300      	movs	r3, #0
 800cc22:	9303      	str	r3, [sp, #12]
 800cc24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc26:	9302      	str	r3, [sp, #8]
 800cc28:	f107 0314 	add.w	r3, r7, #20
 800cc2c:	9301      	str	r3, [sp, #4]
 800cc2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc30:	9300      	str	r3, [sp, #0]
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	687a      	ldr	r2, [r7, #4]
 800cc36:	68b9      	ldr	r1, [r7, #8]
 800cc38:	68f8      	ldr	r0, [r7, #12]
 800cc3a:	f000 f851 	bl	800cce0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cc3e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cc40:	f000 f8f8 	bl	800ce34 <prvAddNewTaskToReadyList>
 800cc44:	e001      	b.n	800cc4a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800cc46:	2300      	movs	r3, #0
 800cc48:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cc4a:	697b      	ldr	r3, [r7, #20]
	}
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	3728      	adds	r7, #40	@ 0x28
 800cc50:	46bd      	mov	sp, r7
 800cc52:	bd80      	pop	{r7, pc}

0800cc54 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b08c      	sub	sp, #48	@ 0x30
 800cc58:	af04      	add	r7, sp, #16
 800cc5a:	60f8      	str	r0, [r7, #12]
 800cc5c:	60b9      	str	r1, [r7, #8]
 800cc5e:	603b      	str	r3, [r7, #0]
 800cc60:	4613      	mov	r3, r2
 800cc62:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cc64:	88fb      	ldrh	r3, [r7, #6]
 800cc66:	009b      	lsls	r3, r3, #2
 800cc68:	4618      	mov	r0, r3
 800cc6a:	f001 fd7f 	bl	800e76c <pvPortMalloc>
 800cc6e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cc70:	697b      	ldr	r3, [r7, #20]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d00e      	beq.n	800cc94 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cc76:	20ac      	movs	r0, #172	@ 0xac
 800cc78:	f001 fd78 	bl	800e76c <pvPortMalloc>
 800cc7c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cc7e:	69fb      	ldr	r3, [r7, #28]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d003      	beq.n	800cc8c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cc84:	69fb      	ldr	r3, [r7, #28]
 800cc86:	697a      	ldr	r2, [r7, #20]
 800cc88:	631a      	str	r2, [r3, #48]	@ 0x30
 800cc8a:	e005      	b.n	800cc98 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cc8c:	6978      	ldr	r0, [r7, #20]
 800cc8e:	f001 fe41 	bl	800e914 <vPortFree>
 800cc92:	e001      	b.n	800cc98 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cc94:	2300      	movs	r3, #0
 800cc96:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cc98:	69fb      	ldr	r3, [r7, #28]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d017      	beq.n	800ccce <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cc9e:	69fb      	ldr	r3, [r7, #28]
 800cca0:	2200      	movs	r2, #0
 800cca2:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cca6:	88fa      	ldrh	r2, [r7, #6]
 800cca8:	2300      	movs	r3, #0
 800ccaa:	9303      	str	r3, [sp, #12]
 800ccac:	69fb      	ldr	r3, [r7, #28]
 800ccae:	9302      	str	r3, [sp, #8]
 800ccb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccb2:	9301      	str	r3, [sp, #4]
 800ccb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccb6:	9300      	str	r3, [sp, #0]
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	68b9      	ldr	r1, [r7, #8]
 800ccbc:	68f8      	ldr	r0, [r7, #12]
 800ccbe:	f000 f80f 	bl	800cce0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ccc2:	69f8      	ldr	r0, [r7, #28]
 800ccc4:	f000 f8b6 	bl	800ce34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ccc8:	2301      	movs	r3, #1
 800ccca:	61bb      	str	r3, [r7, #24]
 800cccc:	e002      	b.n	800ccd4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ccce:	f04f 33ff 	mov.w	r3, #4294967295
 800ccd2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ccd4:	69bb      	ldr	r3, [r7, #24]
	}
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	3720      	adds	r7, #32
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bd80      	pop	{r7, pc}
	...

0800cce0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b088      	sub	sp, #32
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	60f8      	str	r0, [r7, #12]
 800cce8:	60b9      	str	r1, [r7, #8]
 800ccea:	607a      	str	r2, [r7, #4]
 800ccec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ccee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccf0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	009b      	lsls	r3, r3, #2
 800ccf6:	461a      	mov	r2, r3
 800ccf8:	21a5      	movs	r1, #165	@ 0xa5
 800ccfa:	f002 ffa7 	bl	800fc4c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ccfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd08:	3b01      	subs	r3, #1
 800cd0a:	009b      	lsls	r3, r3, #2
 800cd0c:	4413      	add	r3, r2
 800cd0e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cd10:	69bb      	ldr	r3, [r7, #24]
 800cd12:	f023 0307 	bic.w	r3, r3, #7
 800cd16:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cd18:	69bb      	ldr	r3, [r7, #24]
 800cd1a:	f003 0307 	and.w	r3, r3, #7
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d00b      	beq.n	800cd3a <prvInitialiseNewTask+0x5a>
	__asm volatile
 800cd22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd26:	f383 8811 	msr	BASEPRI, r3
 800cd2a:	f3bf 8f6f 	isb	sy
 800cd2e:	f3bf 8f4f 	dsb	sy
 800cd32:	617b      	str	r3, [r7, #20]
}
 800cd34:	bf00      	nop
 800cd36:	bf00      	nop
 800cd38:	e7fd      	b.n	800cd36 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cd3a:	68bb      	ldr	r3, [r7, #8]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d01f      	beq.n	800cd80 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cd40:	2300      	movs	r3, #0
 800cd42:	61fb      	str	r3, [r7, #28]
 800cd44:	e012      	b.n	800cd6c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cd46:	68ba      	ldr	r2, [r7, #8]
 800cd48:	69fb      	ldr	r3, [r7, #28]
 800cd4a:	4413      	add	r3, r2
 800cd4c:	7819      	ldrb	r1, [r3, #0]
 800cd4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd50:	69fb      	ldr	r3, [r7, #28]
 800cd52:	4413      	add	r3, r2
 800cd54:	3334      	adds	r3, #52	@ 0x34
 800cd56:	460a      	mov	r2, r1
 800cd58:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cd5a:	68ba      	ldr	r2, [r7, #8]
 800cd5c:	69fb      	ldr	r3, [r7, #28]
 800cd5e:	4413      	add	r3, r2
 800cd60:	781b      	ldrb	r3, [r3, #0]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d006      	beq.n	800cd74 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cd66:	69fb      	ldr	r3, [r7, #28]
 800cd68:	3301      	adds	r3, #1
 800cd6a:	61fb      	str	r3, [r7, #28]
 800cd6c:	69fb      	ldr	r3, [r7, #28]
 800cd6e:	2b0f      	cmp	r3, #15
 800cd70:	d9e9      	bls.n	800cd46 <prvInitialiseNewTask+0x66>
 800cd72:	e000      	b.n	800cd76 <prvInitialiseNewTask+0x96>
			{
				break;
 800cd74:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cd76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd78:	2200      	movs	r2, #0
 800cd7a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800cd7e:	e003      	b.n	800cd88 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cd80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd82:	2200      	movs	r2, #0
 800cd84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cd88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd8a:	2b37      	cmp	r3, #55	@ 0x37
 800cd8c:	d901      	bls.n	800cd92 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cd8e:	2337      	movs	r3, #55	@ 0x37
 800cd90:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cd92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cd96:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cd98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cd9c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800cd9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cda0:	2200      	movs	r2, #0
 800cda2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cda4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cda6:	3304      	adds	r3, #4
 800cda8:	4618      	mov	r0, r3
 800cdaa:	f7fe fe33 	bl	800ba14 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cdae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdb0:	3318      	adds	r3, #24
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	f7fe fe2e 	bl	800ba14 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cdb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cdbc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cdbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdc0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800cdc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdc6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cdc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cdcc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800cdce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cdd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdde:	2200      	movs	r2, #0
 800cde0:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cde4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cde6:	3358      	adds	r3, #88	@ 0x58
 800cde8:	224c      	movs	r2, #76	@ 0x4c
 800cdea:	2100      	movs	r1, #0
 800cdec:	4618      	mov	r0, r3
 800cdee:	f002 ff2d 	bl	800fc4c <memset>
 800cdf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdf4:	4a0c      	ldr	r2, [pc, #48]	@ (800ce28 <prvInitialiseNewTask+0x148>)
 800cdf6:	65da      	str	r2, [r3, #92]	@ 0x5c
 800cdf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdfa:	4a0c      	ldr	r2, [pc, #48]	@ (800ce2c <prvInitialiseNewTask+0x14c>)
 800cdfc:	661a      	str	r2, [r3, #96]	@ 0x60
 800cdfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce00:	4a0b      	ldr	r2, [pc, #44]	@ (800ce30 <prvInitialiseNewTask+0x150>)
 800ce02:	665a      	str	r2, [r3, #100]	@ 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ce04:	683a      	ldr	r2, [r7, #0]
 800ce06:	68f9      	ldr	r1, [r7, #12]
 800ce08:	69b8      	ldr	r0, [r7, #24]
 800ce0a:	f001 fa5b 	bl	800e2c4 <pxPortInitialiseStack>
 800ce0e:	4602      	mov	r2, r0
 800ce10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce12:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ce14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d002      	beq.n	800ce20 <prvInitialiseNewTask+0x140>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ce1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ce1e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ce20:	bf00      	nop
 800ce22:	3720      	adds	r7, #32
 800ce24:	46bd      	mov	sp, r7
 800ce26:	bd80      	pop	{r7, pc}
 800ce28:	2000a4e4 	.word	0x2000a4e4
 800ce2c:	2000a54c 	.word	0x2000a54c
 800ce30:	2000a5b4 	.word	0x2000a5b4

0800ce34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b082      	sub	sp, #8
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ce3c:	f001 fb74 	bl	800e528 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ce40:	4b2d      	ldr	r3, [pc, #180]	@ (800cef8 <prvAddNewTaskToReadyList+0xc4>)
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	3301      	adds	r3, #1
 800ce46:	4a2c      	ldr	r2, [pc, #176]	@ (800cef8 <prvAddNewTaskToReadyList+0xc4>)
 800ce48:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ce4a:	4b2c      	ldr	r3, [pc, #176]	@ (800cefc <prvAddNewTaskToReadyList+0xc8>)
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d109      	bne.n	800ce66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ce52:	4a2a      	ldr	r2, [pc, #168]	@ (800cefc <prvAddNewTaskToReadyList+0xc8>)
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ce58:	4b27      	ldr	r3, [pc, #156]	@ (800cef8 <prvAddNewTaskToReadyList+0xc4>)
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	2b01      	cmp	r3, #1
 800ce5e:	d110      	bne.n	800ce82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ce60:	f000 fc30 	bl	800d6c4 <prvInitialiseTaskLists>
 800ce64:	e00d      	b.n	800ce82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ce66:	4b26      	ldr	r3, [pc, #152]	@ (800cf00 <prvAddNewTaskToReadyList+0xcc>)
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d109      	bne.n	800ce82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ce6e:	4b23      	ldr	r3, [pc, #140]	@ (800cefc <prvAddNewTaskToReadyList+0xc8>)
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce78:	429a      	cmp	r2, r3
 800ce7a:	d802      	bhi.n	800ce82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ce7c:	4a1f      	ldr	r2, [pc, #124]	@ (800cefc <prvAddNewTaskToReadyList+0xc8>)
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ce82:	4b20      	ldr	r3, [pc, #128]	@ (800cf04 <prvAddNewTaskToReadyList+0xd0>)
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	3301      	adds	r3, #1
 800ce88:	4a1e      	ldr	r2, [pc, #120]	@ (800cf04 <prvAddNewTaskToReadyList+0xd0>)
 800ce8a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ce8c:	4b1d      	ldr	r3, [pc, #116]	@ (800cf04 <prvAddNewTaskToReadyList+0xd0>)
 800ce8e:	681a      	ldr	r2, [r3, #0]
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce98:	4b1b      	ldr	r3, [pc, #108]	@ (800cf08 <prvAddNewTaskToReadyList+0xd4>)
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	429a      	cmp	r2, r3
 800ce9e:	d903      	bls.n	800cea8 <prvAddNewTaskToReadyList+0x74>
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cea4:	4a18      	ldr	r2, [pc, #96]	@ (800cf08 <prvAddNewTaskToReadyList+0xd4>)
 800cea6:	6013      	str	r3, [r2, #0]
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ceac:	4613      	mov	r3, r2
 800ceae:	009b      	lsls	r3, r3, #2
 800ceb0:	4413      	add	r3, r2
 800ceb2:	009b      	lsls	r3, r3, #2
 800ceb4:	4a15      	ldr	r2, [pc, #84]	@ (800cf0c <prvAddNewTaskToReadyList+0xd8>)
 800ceb6:	441a      	add	r2, r3
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	3304      	adds	r3, #4
 800cebc:	4619      	mov	r1, r3
 800cebe:	4610      	mov	r0, r2
 800cec0:	f7fe fdb5 	bl	800ba2e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cec4:	f001 fb62 	bl	800e58c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cec8:	4b0d      	ldr	r3, [pc, #52]	@ (800cf00 <prvAddNewTaskToReadyList+0xcc>)
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d00e      	beq.n	800ceee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ced0:	4b0a      	ldr	r3, [pc, #40]	@ (800cefc <prvAddNewTaskToReadyList+0xc8>)
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ceda:	429a      	cmp	r2, r3
 800cedc:	d207      	bcs.n	800ceee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cede:	4b0c      	ldr	r3, [pc, #48]	@ (800cf10 <prvAddNewTaskToReadyList+0xdc>)
 800cee0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cee4:	601a      	str	r2, [r3, #0]
 800cee6:	f3bf 8f4f 	dsb	sy
 800ceea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ceee:	bf00      	nop
 800cef0:	3708      	adds	r7, #8
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}
 800cef6:	bf00      	nop
 800cef8:	20002364 	.word	0x20002364
 800cefc:	20001e90 	.word	0x20001e90
 800cf00:	20002370 	.word	0x20002370
 800cf04:	20002380 	.word	0x20002380
 800cf08:	2000236c 	.word	0x2000236c
 800cf0c:	20001e94 	.word	0x20001e94
 800cf10:	e000ed04 	.word	0xe000ed04

0800cf14 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b08a      	sub	sp, #40	@ 0x28
 800cf18:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cf1e:	2300      	movs	r3, #0
 800cf20:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cf22:	463a      	mov	r2, r7
 800cf24:	1d39      	adds	r1, r7, #4
 800cf26:	f107 0308 	add.w	r3, r7, #8
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	f7fe fd1e 	bl	800b96c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cf30:	6839      	ldr	r1, [r7, #0]
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	68ba      	ldr	r2, [r7, #8]
 800cf36:	9202      	str	r2, [sp, #8]
 800cf38:	9301      	str	r3, [sp, #4]
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	9300      	str	r3, [sp, #0]
 800cf3e:	2300      	movs	r3, #0
 800cf40:	460a      	mov	r2, r1
 800cf42:	4924      	ldr	r1, [pc, #144]	@ (800cfd4 <vTaskStartScheduler+0xc0>)
 800cf44:	4824      	ldr	r0, [pc, #144]	@ (800cfd8 <vTaskStartScheduler+0xc4>)
 800cf46:	f7ff fe25 	bl	800cb94 <xTaskCreateStatic>
 800cf4a:	4603      	mov	r3, r0
 800cf4c:	4a23      	ldr	r2, [pc, #140]	@ (800cfdc <vTaskStartScheduler+0xc8>)
 800cf4e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cf50:	4b22      	ldr	r3, [pc, #136]	@ (800cfdc <vTaskStartScheduler+0xc8>)
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d002      	beq.n	800cf5e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cf58:	2301      	movs	r3, #1
 800cf5a:	617b      	str	r3, [r7, #20]
 800cf5c:	e001      	b.n	800cf62 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cf5e:	2300      	movs	r3, #0
 800cf60:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cf62:	697b      	ldr	r3, [r7, #20]
 800cf64:	2b01      	cmp	r3, #1
 800cf66:	d102      	bne.n	800cf6e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800cf68:	f000 fe52 	bl	800dc10 <xTimerCreateTimerTask>
 800cf6c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cf6e:	697b      	ldr	r3, [r7, #20]
 800cf70:	2b01      	cmp	r3, #1
 800cf72:	d11b      	bne.n	800cfac <vTaskStartScheduler+0x98>
	__asm volatile
 800cf74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf78:	f383 8811 	msr	BASEPRI, r3
 800cf7c:	f3bf 8f6f 	isb	sy
 800cf80:	f3bf 8f4f 	dsb	sy
 800cf84:	613b      	str	r3, [r7, #16]
}
 800cf86:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cf88:	4b15      	ldr	r3, [pc, #84]	@ (800cfe0 <vTaskStartScheduler+0xcc>)
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	3358      	adds	r3, #88	@ 0x58
 800cf8e:	4a15      	ldr	r2, [pc, #84]	@ (800cfe4 <vTaskStartScheduler+0xd0>)
 800cf90:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cf92:	4b15      	ldr	r3, [pc, #84]	@ (800cfe8 <vTaskStartScheduler+0xd4>)
 800cf94:	f04f 32ff 	mov.w	r2, #4294967295
 800cf98:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cf9a:	4b14      	ldr	r3, [pc, #80]	@ (800cfec <vTaskStartScheduler+0xd8>)
 800cf9c:	2201      	movs	r2, #1
 800cf9e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cfa0:	4b13      	ldr	r3, [pc, #76]	@ (800cff0 <vTaskStartScheduler+0xdc>)
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cfa6:	f001 fa1b 	bl	800e3e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cfaa:	e00f      	b.n	800cfcc <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cfac:	697b      	ldr	r3, [r7, #20]
 800cfae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfb2:	d10b      	bne.n	800cfcc <vTaskStartScheduler+0xb8>
	__asm volatile
 800cfb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfb8:	f383 8811 	msr	BASEPRI, r3
 800cfbc:	f3bf 8f6f 	isb	sy
 800cfc0:	f3bf 8f4f 	dsb	sy
 800cfc4:	60fb      	str	r3, [r7, #12]
}
 800cfc6:	bf00      	nop
 800cfc8:	bf00      	nop
 800cfca:	e7fd      	b.n	800cfc8 <vTaskStartScheduler+0xb4>
}
 800cfcc:	bf00      	nop
 800cfce:	3718      	adds	r7, #24
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	bd80      	pop	{r7, pc}
 800cfd4:	08010938 	.word	0x08010938
 800cfd8:	0800d691 	.word	0x0800d691
 800cfdc:	20002388 	.word	0x20002388
 800cfe0:	20001e90 	.word	0x20001e90
 800cfe4:	20000010 	.word	0x20000010
 800cfe8:	20002384 	.word	0x20002384
 800cfec:	20002370 	.word	0x20002370
 800cff0:	20002368 	.word	0x20002368

0800cff4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cff4:	b480      	push	{r7}
 800cff6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cff8:	4b04      	ldr	r3, [pc, #16]	@ (800d00c <vTaskSuspendAll+0x18>)
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	3301      	adds	r3, #1
 800cffe:	4a03      	ldr	r2, [pc, #12]	@ (800d00c <vTaskSuspendAll+0x18>)
 800d000:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d002:	bf00      	nop
 800d004:	46bd      	mov	sp, r7
 800d006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00a:	4770      	bx	lr
 800d00c:	2000238c 	.word	0x2000238c

0800d010 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b084      	sub	sp, #16
 800d014:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d016:	2300      	movs	r3, #0
 800d018:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d01a:	2300      	movs	r3, #0
 800d01c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d01e:	4b42      	ldr	r3, [pc, #264]	@ (800d128 <xTaskResumeAll+0x118>)
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d10b      	bne.n	800d03e <xTaskResumeAll+0x2e>
	__asm volatile
 800d026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d02a:	f383 8811 	msr	BASEPRI, r3
 800d02e:	f3bf 8f6f 	isb	sy
 800d032:	f3bf 8f4f 	dsb	sy
 800d036:	603b      	str	r3, [r7, #0]
}
 800d038:	bf00      	nop
 800d03a:	bf00      	nop
 800d03c:	e7fd      	b.n	800d03a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d03e:	f001 fa73 	bl	800e528 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d042:	4b39      	ldr	r3, [pc, #228]	@ (800d128 <xTaskResumeAll+0x118>)
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	3b01      	subs	r3, #1
 800d048:	4a37      	ldr	r2, [pc, #220]	@ (800d128 <xTaskResumeAll+0x118>)
 800d04a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d04c:	4b36      	ldr	r3, [pc, #216]	@ (800d128 <xTaskResumeAll+0x118>)
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d162      	bne.n	800d11a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d054:	4b35      	ldr	r3, [pc, #212]	@ (800d12c <xTaskResumeAll+0x11c>)
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d05e      	beq.n	800d11a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d05c:	e02f      	b.n	800d0be <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d05e:	4b34      	ldr	r3, [pc, #208]	@ (800d130 <xTaskResumeAll+0x120>)
 800d060:	68db      	ldr	r3, [r3, #12]
 800d062:	68db      	ldr	r3, [r3, #12]
 800d064:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	3318      	adds	r3, #24
 800d06a:	4618      	mov	r0, r3
 800d06c:	f7fe fd3c 	bl	800bae8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	3304      	adds	r3, #4
 800d074:	4618      	mov	r0, r3
 800d076:	f7fe fd37 	bl	800bae8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d07e:	4b2d      	ldr	r3, [pc, #180]	@ (800d134 <xTaskResumeAll+0x124>)
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	429a      	cmp	r2, r3
 800d084:	d903      	bls.n	800d08e <xTaskResumeAll+0x7e>
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d08a:	4a2a      	ldr	r2, [pc, #168]	@ (800d134 <xTaskResumeAll+0x124>)
 800d08c:	6013      	str	r3, [r2, #0]
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d092:	4613      	mov	r3, r2
 800d094:	009b      	lsls	r3, r3, #2
 800d096:	4413      	add	r3, r2
 800d098:	009b      	lsls	r3, r3, #2
 800d09a:	4a27      	ldr	r2, [pc, #156]	@ (800d138 <xTaskResumeAll+0x128>)
 800d09c:	441a      	add	r2, r3
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	3304      	adds	r3, #4
 800d0a2:	4619      	mov	r1, r3
 800d0a4:	4610      	mov	r0, r2
 800d0a6:	f7fe fcc2 	bl	800ba2e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0ae:	4b23      	ldr	r3, [pc, #140]	@ (800d13c <xTaskResumeAll+0x12c>)
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0b4:	429a      	cmp	r2, r3
 800d0b6:	d302      	bcc.n	800d0be <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800d0b8:	4b21      	ldr	r3, [pc, #132]	@ (800d140 <xTaskResumeAll+0x130>)
 800d0ba:	2201      	movs	r2, #1
 800d0bc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d0be:	4b1c      	ldr	r3, [pc, #112]	@ (800d130 <xTaskResumeAll+0x120>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d1cb      	bne.n	800d05e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d001      	beq.n	800d0d0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d0cc:	f000 fb9e 	bl	800d80c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d0d0:	4b1c      	ldr	r3, [pc, #112]	@ (800d144 <xTaskResumeAll+0x134>)
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d010      	beq.n	800d0fe <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d0dc:	f000 f858 	bl	800d190 <xTaskIncrementTick>
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d002      	beq.n	800d0ec <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800d0e6:	4b16      	ldr	r3, [pc, #88]	@ (800d140 <xTaskResumeAll+0x130>)
 800d0e8:	2201      	movs	r2, #1
 800d0ea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	3b01      	subs	r3, #1
 800d0f0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d1f1      	bne.n	800d0dc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800d0f8:	4b12      	ldr	r3, [pc, #72]	@ (800d144 <xTaskResumeAll+0x134>)
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d0fe:	4b10      	ldr	r3, [pc, #64]	@ (800d140 <xTaskResumeAll+0x130>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d009      	beq.n	800d11a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d106:	2301      	movs	r3, #1
 800d108:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d10a:	4b0f      	ldr	r3, [pc, #60]	@ (800d148 <xTaskResumeAll+0x138>)
 800d10c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d110:	601a      	str	r2, [r3, #0]
 800d112:	f3bf 8f4f 	dsb	sy
 800d116:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d11a:	f001 fa37 	bl	800e58c <vPortExitCritical>

	return xAlreadyYielded;
 800d11e:	68bb      	ldr	r3, [r7, #8]
}
 800d120:	4618      	mov	r0, r3
 800d122:	3710      	adds	r7, #16
 800d124:	46bd      	mov	sp, r7
 800d126:	bd80      	pop	{r7, pc}
 800d128:	2000238c 	.word	0x2000238c
 800d12c:	20002364 	.word	0x20002364
 800d130:	20002324 	.word	0x20002324
 800d134:	2000236c 	.word	0x2000236c
 800d138:	20001e94 	.word	0x20001e94
 800d13c:	20001e90 	.word	0x20001e90
 800d140:	20002378 	.word	0x20002378
 800d144:	20002374 	.word	0x20002374
 800d148:	e000ed04 	.word	0xe000ed04

0800d14c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d14c:	b480      	push	{r7}
 800d14e:	b083      	sub	sp, #12
 800d150:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d152:	4b05      	ldr	r3, [pc, #20]	@ (800d168 <xTaskGetTickCount+0x1c>)
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d158:	687b      	ldr	r3, [r7, #4]
}
 800d15a:	4618      	mov	r0, r3
 800d15c:	370c      	adds	r7, #12
 800d15e:	46bd      	mov	sp, r7
 800d160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d164:	4770      	bx	lr
 800d166:	bf00      	nop
 800d168:	20002368 	.word	0x20002368

0800d16c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b082      	sub	sp, #8
 800d170:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d172:	f001 fab9 	bl	800e6e8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800d176:	2300      	movs	r3, #0
 800d178:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800d17a:	4b04      	ldr	r3, [pc, #16]	@ (800d18c <xTaskGetTickCountFromISR+0x20>)
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d180:	683b      	ldr	r3, [r7, #0]
}
 800d182:	4618      	mov	r0, r3
 800d184:	3708      	adds	r7, #8
 800d186:	46bd      	mov	sp, r7
 800d188:	bd80      	pop	{r7, pc}
 800d18a:	bf00      	nop
 800d18c:	20002368 	.word	0x20002368

0800d190 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d190:	b580      	push	{r7, lr}
 800d192:	b086      	sub	sp, #24
 800d194:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d196:	2300      	movs	r3, #0
 800d198:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d19a:	4b4f      	ldr	r3, [pc, #316]	@ (800d2d8 <xTaskIncrementTick+0x148>)
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	f040 8090 	bne.w	800d2c4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d1a4:	4b4d      	ldr	r3, [pc, #308]	@ (800d2dc <xTaskIncrementTick+0x14c>)
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	3301      	adds	r3, #1
 800d1aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d1ac:	4a4b      	ldr	r2, [pc, #300]	@ (800d2dc <xTaskIncrementTick+0x14c>)
 800d1ae:	693b      	ldr	r3, [r7, #16]
 800d1b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d1b2:	693b      	ldr	r3, [r7, #16]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d121      	bne.n	800d1fc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800d1b8:	4b49      	ldr	r3, [pc, #292]	@ (800d2e0 <xTaskIncrementTick+0x150>)
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d00b      	beq.n	800d1da <xTaskIncrementTick+0x4a>
	__asm volatile
 800d1c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1c6:	f383 8811 	msr	BASEPRI, r3
 800d1ca:	f3bf 8f6f 	isb	sy
 800d1ce:	f3bf 8f4f 	dsb	sy
 800d1d2:	603b      	str	r3, [r7, #0]
}
 800d1d4:	bf00      	nop
 800d1d6:	bf00      	nop
 800d1d8:	e7fd      	b.n	800d1d6 <xTaskIncrementTick+0x46>
 800d1da:	4b41      	ldr	r3, [pc, #260]	@ (800d2e0 <xTaskIncrementTick+0x150>)
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	60fb      	str	r3, [r7, #12]
 800d1e0:	4b40      	ldr	r3, [pc, #256]	@ (800d2e4 <xTaskIncrementTick+0x154>)
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	4a3e      	ldr	r2, [pc, #248]	@ (800d2e0 <xTaskIncrementTick+0x150>)
 800d1e6:	6013      	str	r3, [r2, #0]
 800d1e8:	4a3e      	ldr	r2, [pc, #248]	@ (800d2e4 <xTaskIncrementTick+0x154>)
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	6013      	str	r3, [r2, #0]
 800d1ee:	4b3e      	ldr	r3, [pc, #248]	@ (800d2e8 <xTaskIncrementTick+0x158>)
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	3301      	adds	r3, #1
 800d1f4:	4a3c      	ldr	r2, [pc, #240]	@ (800d2e8 <xTaskIncrementTick+0x158>)
 800d1f6:	6013      	str	r3, [r2, #0]
 800d1f8:	f000 fb08 	bl	800d80c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d1fc:	4b3b      	ldr	r3, [pc, #236]	@ (800d2ec <xTaskIncrementTick+0x15c>)
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	693a      	ldr	r2, [r7, #16]
 800d202:	429a      	cmp	r2, r3
 800d204:	d349      	bcc.n	800d29a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d206:	4b36      	ldr	r3, [pc, #216]	@ (800d2e0 <xTaskIncrementTick+0x150>)
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d104      	bne.n	800d21a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d210:	4b36      	ldr	r3, [pc, #216]	@ (800d2ec <xTaskIncrementTick+0x15c>)
 800d212:	f04f 32ff 	mov.w	r2, #4294967295
 800d216:	601a      	str	r2, [r3, #0]
					break;
 800d218:	e03f      	b.n	800d29a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d21a:	4b31      	ldr	r3, [pc, #196]	@ (800d2e0 <xTaskIncrementTick+0x150>)
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	68db      	ldr	r3, [r3, #12]
 800d220:	68db      	ldr	r3, [r3, #12]
 800d222:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d224:	68bb      	ldr	r3, [r7, #8]
 800d226:	685b      	ldr	r3, [r3, #4]
 800d228:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d22a:	693a      	ldr	r2, [r7, #16]
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	429a      	cmp	r2, r3
 800d230:	d203      	bcs.n	800d23a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d232:	4a2e      	ldr	r2, [pc, #184]	@ (800d2ec <xTaskIncrementTick+0x15c>)
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d238:	e02f      	b.n	800d29a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d23a:	68bb      	ldr	r3, [r7, #8]
 800d23c:	3304      	adds	r3, #4
 800d23e:	4618      	mov	r0, r3
 800d240:	f7fe fc52 	bl	800bae8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d244:	68bb      	ldr	r3, [r7, #8]
 800d246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d004      	beq.n	800d256 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d24c:	68bb      	ldr	r3, [r7, #8]
 800d24e:	3318      	adds	r3, #24
 800d250:	4618      	mov	r0, r3
 800d252:	f7fe fc49 	bl	800bae8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d256:	68bb      	ldr	r3, [r7, #8]
 800d258:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d25a:	4b25      	ldr	r3, [pc, #148]	@ (800d2f0 <xTaskIncrementTick+0x160>)
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	429a      	cmp	r2, r3
 800d260:	d903      	bls.n	800d26a <xTaskIncrementTick+0xda>
 800d262:	68bb      	ldr	r3, [r7, #8]
 800d264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d266:	4a22      	ldr	r2, [pc, #136]	@ (800d2f0 <xTaskIncrementTick+0x160>)
 800d268:	6013      	str	r3, [r2, #0]
 800d26a:	68bb      	ldr	r3, [r7, #8]
 800d26c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d26e:	4613      	mov	r3, r2
 800d270:	009b      	lsls	r3, r3, #2
 800d272:	4413      	add	r3, r2
 800d274:	009b      	lsls	r3, r3, #2
 800d276:	4a1f      	ldr	r2, [pc, #124]	@ (800d2f4 <xTaskIncrementTick+0x164>)
 800d278:	441a      	add	r2, r3
 800d27a:	68bb      	ldr	r3, [r7, #8]
 800d27c:	3304      	adds	r3, #4
 800d27e:	4619      	mov	r1, r3
 800d280:	4610      	mov	r0, r2
 800d282:	f7fe fbd4 	bl	800ba2e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d286:	68bb      	ldr	r3, [r7, #8]
 800d288:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d28a:	4b1b      	ldr	r3, [pc, #108]	@ (800d2f8 <xTaskIncrementTick+0x168>)
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d290:	429a      	cmp	r2, r3
 800d292:	d3b8      	bcc.n	800d206 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800d294:	2301      	movs	r3, #1
 800d296:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d298:	e7b5      	b.n	800d206 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d29a:	4b17      	ldr	r3, [pc, #92]	@ (800d2f8 <xTaskIncrementTick+0x168>)
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d2a0:	4914      	ldr	r1, [pc, #80]	@ (800d2f4 <xTaskIncrementTick+0x164>)
 800d2a2:	4613      	mov	r3, r2
 800d2a4:	009b      	lsls	r3, r3, #2
 800d2a6:	4413      	add	r3, r2
 800d2a8:	009b      	lsls	r3, r3, #2
 800d2aa:	440b      	add	r3, r1
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	2b01      	cmp	r3, #1
 800d2b0:	d901      	bls.n	800d2b6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800d2b2:	2301      	movs	r3, #1
 800d2b4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d2b6:	4b11      	ldr	r3, [pc, #68]	@ (800d2fc <xTaskIncrementTick+0x16c>)
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d007      	beq.n	800d2ce <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800d2be:	2301      	movs	r3, #1
 800d2c0:	617b      	str	r3, [r7, #20]
 800d2c2:	e004      	b.n	800d2ce <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d2c4:	4b0e      	ldr	r3, [pc, #56]	@ (800d300 <xTaskIncrementTick+0x170>)
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	3301      	adds	r3, #1
 800d2ca:	4a0d      	ldr	r2, [pc, #52]	@ (800d300 <xTaskIncrementTick+0x170>)
 800d2cc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d2ce:	697b      	ldr	r3, [r7, #20]
}
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	3718      	adds	r7, #24
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	bd80      	pop	{r7, pc}
 800d2d8:	2000238c 	.word	0x2000238c
 800d2dc:	20002368 	.word	0x20002368
 800d2e0:	2000231c 	.word	0x2000231c
 800d2e4:	20002320 	.word	0x20002320
 800d2e8:	2000237c 	.word	0x2000237c
 800d2ec:	20002384 	.word	0x20002384
 800d2f0:	2000236c 	.word	0x2000236c
 800d2f4:	20001e94 	.word	0x20001e94
 800d2f8:	20001e90 	.word	0x20001e90
 800d2fc:	20002378 	.word	0x20002378
 800d300:	20002374 	.word	0x20002374

0800d304 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b086      	sub	sp, #24
 800d308:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d30a:	4b3d      	ldr	r3, [pc, #244]	@ (800d400 <vTaskSwitchContext+0xfc>)
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d003      	beq.n	800d31a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d312:	4b3c      	ldr	r3, [pc, #240]	@ (800d404 <vTaskSwitchContext+0x100>)
 800d314:	2201      	movs	r2, #1
 800d316:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d318:	e06e      	b.n	800d3f8 <vTaskSwitchContext+0xf4>
		xYieldPending = pdFALSE;
 800d31a:	4b3a      	ldr	r3, [pc, #232]	@ (800d404 <vTaskSwitchContext+0x100>)
 800d31c:	2200      	movs	r2, #0
 800d31e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800d320:	4b39      	ldr	r3, [pc, #228]	@ (800d408 <vTaskSwitchContext+0x104>)
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d326:	613b      	str	r3, [r7, #16]
 800d328:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 800d32c:	60fb      	str	r3, [r7, #12]
 800d32e:	693b      	ldr	r3, [r7, #16]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	68fa      	ldr	r2, [r7, #12]
 800d334:	429a      	cmp	r2, r3
 800d336:	d111      	bne.n	800d35c <vTaskSwitchContext+0x58>
 800d338:	693b      	ldr	r3, [r7, #16]
 800d33a:	3304      	adds	r3, #4
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	68fa      	ldr	r2, [r7, #12]
 800d340:	429a      	cmp	r2, r3
 800d342:	d10b      	bne.n	800d35c <vTaskSwitchContext+0x58>
 800d344:	693b      	ldr	r3, [r7, #16]
 800d346:	3308      	adds	r3, #8
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	68fa      	ldr	r2, [r7, #12]
 800d34c:	429a      	cmp	r2, r3
 800d34e:	d105      	bne.n	800d35c <vTaskSwitchContext+0x58>
 800d350:	693b      	ldr	r3, [r7, #16]
 800d352:	330c      	adds	r3, #12
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	68fa      	ldr	r2, [r7, #12]
 800d358:	429a      	cmp	r2, r3
 800d35a:	d008      	beq.n	800d36e <vTaskSwitchContext+0x6a>
 800d35c:	4b2a      	ldr	r3, [pc, #168]	@ (800d408 <vTaskSwitchContext+0x104>)
 800d35e:	681a      	ldr	r2, [r3, #0]
 800d360:	4b29      	ldr	r3, [pc, #164]	@ (800d408 <vTaskSwitchContext+0x104>)
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	3334      	adds	r3, #52	@ 0x34
 800d366:	4619      	mov	r1, r3
 800d368:	4610      	mov	r0, r2
 800d36a:	f7f3 fbfe 	bl	8000b6a <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d36e:	4b27      	ldr	r3, [pc, #156]	@ (800d40c <vTaskSwitchContext+0x108>)
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	617b      	str	r3, [r7, #20]
 800d374:	e011      	b.n	800d39a <vTaskSwitchContext+0x96>
 800d376:	697b      	ldr	r3, [r7, #20]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d10b      	bne.n	800d394 <vTaskSwitchContext+0x90>
	__asm volatile
 800d37c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d380:	f383 8811 	msr	BASEPRI, r3
 800d384:	f3bf 8f6f 	isb	sy
 800d388:	f3bf 8f4f 	dsb	sy
 800d38c:	607b      	str	r3, [r7, #4]
}
 800d38e:	bf00      	nop
 800d390:	bf00      	nop
 800d392:	e7fd      	b.n	800d390 <vTaskSwitchContext+0x8c>
 800d394:	697b      	ldr	r3, [r7, #20]
 800d396:	3b01      	subs	r3, #1
 800d398:	617b      	str	r3, [r7, #20]
 800d39a:	491d      	ldr	r1, [pc, #116]	@ (800d410 <vTaskSwitchContext+0x10c>)
 800d39c:	697a      	ldr	r2, [r7, #20]
 800d39e:	4613      	mov	r3, r2
 800d3a0:	009b      	lsls	r3, r3, #2
 800d3a2:	4413      	add	r3, r2
 800d3a4:	009b      	lsls	r3, r3, #2
 800d3a6:	440b      	add	r3, r1
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d0e3      	beq.n	800d376 <vTaskSwitchContext+0x72>
 800d3ae:	697a      	ldr	r2, [r7, #20]
 800d3b0:	4613      	mov	r3, r2
 800d3b2:	009b      	lsls	r3, r3, #2
 800d3b4:	4413      	add	r3, r2
 800d3b6:	009b      	lsls	r3, r3, #2
 800d3b8:	4a15      	ldr	r2, [pc, #84]	@ (800d410 <vTaskSwitchContext+0x10c>)
 800d3ba:	4413      	add	r3, r2
 800d3bc:	60bb      	str	r3, [r7, #8]
 800d3be:	68bb      	ldr	r3, [r7, #8]
 800d3c0:	685b      	ldr	r3, [r3, #4]
 800d3c2:	685a      	ldr	r2, [r3, #4]
 800d3c4:	68bb      	ldr	r3, [r7, #8]
 800d3c6:	605a      	str	r2, [r3, #4]
 800d3c8:	68bb      	ldr	r3, [r7, #8]
 800d3ca:	685a      	ldr	r2, [r3, #4]
 800d3cc:	68bb      	ldr	r3, [r7, #8]
 800d3ce:	3308      	adds	r3, #8
 800d3d0:	429a      	cmp	r2, r3
 800d3d2:	d104      	bne.n	800d3de <vTaskSwitchContext+0xda>
 800d3d4:	68bb      	ldr	r3, [r7, #8]
 800d3d6:	685b      	ldr	r3, [r3, #4]
 800d3d8:	685a      	ldr	r2, [r3, #4]
 800d3da:	68bb      	ldr	r3, [r7, #8]
 800d3dc:	605a      	str	r2, [r3, #4]
 800d3de:	68bb      	ldr	r3, [r7, #8]
 800d3e0:	685b      	ldr	r3, [r3, #4]
 800d3e2:	68db      	ldr	r3, [r3, #12]
 800d3e4:	4a08      	ldr	r2, [pc, #32]	@ (800d408 <vTaskSwitchContext+0x104>)
 800d3e6:	6013      	str	r3, [r2, #0]
 800d3e8:	4a08      	ldr	r2, [pc, #32]	@ (800d40c <vTaskSwitchContext+0x108>)
 800d3ea:	697b      	ldr	r3, [r7, #20]
 800d3ec:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d3ee:	4b06      	ldr	r3, [pc, #24]	@ (800d408 <vTaskSwitchContext+0x104>)
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	3358      	adds	r3, #88	@ 0x58
 800d3f4:	4a07      	ldr	r2, [pc, #28]	@ (800d414 <vTaskSwitchContext+0x110>)
 800d3f6:	6013      	str	r3, [r2, #0]
}
 800d3f8:	bf00      	nop
 800d3fa:	3718      	adds	r7, #24
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	bd80      	pop	{r7, pc}
 800d400:	2000238c 	.word	0x2000238c
 800d404:	20002378 	.word	0x20002378
 800d408:	20001e90 	.word	0x20001e90
 800d40c:	2000236c 	.word	0x2000236c
 800d410:	20001e94 	.word	0x20001e94
 800d414:	20000010 	.word	0x20000010

0800d418 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b084      	sub	sp, #16
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
 800d420:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d10b      	bne.n	800d440 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800d428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d42c:	f383 8811 	msr	BASEPRI, r3
 800d430:	f3bf 8f6f 	isb	sy
 800d434:	f3bf 8f4f 	dsb	sy
 800d438:	60fb      	str	r3, [r7, #12]
}
 800d43a:	bf00      	nop
 800d43c:	bf00      	nop
 800d43e:	e7fd      	b.n	800d43c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d440:	4b07      	ldr	r3, [pc, #28]	@ (800d460 <vTaskPlaceOnEventList+0x48>)
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	3318      	adds	r3, #24
 800d446:	4619      	mov	r1, r3
 800d448:	6878      	ldr	r0, [r7, #4]
 800d44a:	f7fe fb14 	bl	800ba76 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d44e:	2101      	movs	r1, #1
 800d450:	6838      	ldr	r0, [r7, #0]
 800d452:	f000 fb89 	bl	800db68 <prvAddCurrentTaskToDelayedList>
}
 800d456:	bf00      	nop
 800d458:	3710      	adds	r7, #16
 800d45a:	46bd      	mov	sp, r7
 800d45c:	bd80      	pop	{r7, pc}
 800d45e:	bf00      	nop
 800d460:	20001e90 	.word	0x20001e90

0800d464 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d464:	b580      	push	{r7, lr}
 800d466:	b086      	sub	sp, #24
 800d468:	af00      	add	r7, sp, #0
 800d46a:	60f8      	str	r0, [r7, #12]
 800d46c:	60b9      	str	r1, [r7, #8]
 800d46e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d10b      	bne.n	800d48e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800d476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d47a:	f383 8811 	msr	BASEPRI, r3
 800d47e:	f3bf 8f6f 	isb	sy
 800d482:	f3bf 8f4f 	dsb	sy
 800d486:	617b      	str	r3, [r7, #20]
}
 800d488:	bf00      	nop
 800d48a:	bf00      	nop
 800d48c:	e7fd      	b.n	800d48a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d48e:	4b0a      	ldr	r3, [pc, #40]	@ (800d4b8 <vTaskPlaceOnEventListRestricted+0x54>)
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	3318      	adds	r3, #24
 800d494:	4619      	mov	r1, r3
 800d496:	68f8      	ldr	r0, [r7, #12]
 800d498:	f7fe fac9 	bl	800ba2e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d002      	beq.n	800d4a8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800d4a2:	f04f 33ff 	mov.w	r3, #4294967295
 800d4a6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d4a8:	6879      	ldr	r1, [r7, #4]
 800d4aa:	68b8      	ldr	r0, [r7, #8]
 800d4ac:	f000 fb5c 	bl	800db68 <prvAddCurrentTaskToDelayedList>
	}
 800d4b0:	bf00      	nop
 800d4b2:	3718      	adds	r7, #24
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	bd80      	pop	{r7, pc}
 800d4b8:	20001e90 	.word	0x20001e90

0800d4bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b086      	sub	sp, #24
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	68db      	ldr	r3, [r3, #12]
 800d4c8:	68db      	ldr	r3, [r3, #12]
 800d4ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d4cc:	693b      	ldr	r3, [r7, #16]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d10b      	bne.n	800d4ea <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800d4d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4d6:	f383 8811 	msr	BASEPRI, r3
 800d4da:	f3bf 8f6f 	isb	sy
 800d4de:	f3bf 8f4f 	dsb	sy
 800d4e2:	60fb      	str	r3, [r7, #12]
}
 800d4e4:	bf00      	nop
 800d4e6:	bf00      	nop
 800d4e8:	e7fd      	b.n	800d4e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d4ea:	693b      	ldr	r3, [r7, #16]
 800d4ec:	3318      	adds	r3, #24
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	f7fe fafa 	bl	800bae8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d4f4:	4b1d      	ldr	r3, [pc, #116]	@ (800d56c <xTaskRemoveFromEventList+0xb0>)
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d11d      	bne.n	800d538 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d4fc:	693b      	ldr	r3, [r7, #16]
 800d4fe:	3304      	adds	r3, #4
 800d500:	4618      	mov	r0, r3
 800d502:	f7fe faf1 	bl	800bae8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d506:	693b      	ldr	r3, [r7, #16]
 800d508:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d50a:	4b19      	ldr	r3, [pc, #100]	@ (800d570 <xTaskRemoveFromEventList+0xb4>)
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	429a      	cmp	r2, r3
 800d510:	d903      	bls.n	800d51a <xTaskRemoveFromEventList+0x5e>
 800d512:	693b      	ldr	r3, [r7, #16]
 800d514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d516:	4a16      	ldr	r2, [pc, #88]	@ (800d570 <xTaskRemoveFromEventList+0xb4>)
 800d518:	6013      	str	r3, [r2, #0]
 800d51a:	693b      	ldr	r3, [r7, #16]
 800d51c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d51e:	4613      	mov	r3, r2
 800d520:	009b      	lsls	r3, r3, #2
 800d522:	4413      	add	r3, r2
 800d524:	009b      	lsls	r3, r3, #2
 800d526:	4a13      	ldr	r2, [pc, #76]	@ (800d574 <xTaskRemoveFromEventList+0xb8>)
 800d528:	441a      	add	r2, r3
 800d52a:	693b      	ldr	r3, [r7, #16]
 800d52c:	3304      	adds	r3, #4
 800d52e:	4619      	mov	r1, r3
 800d530:	4610      	mov	r0, r2
 800d532:	f7fe fa7c 	bl	800ba2e <vListInsertEnd>
 800d536:	e005      	b.n	800d544 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d538:	693b      	ldr	r3, [r7, #16]
 800d53a:	3318      	adds	r3, #24
 800d53c:	4619      	mov	r1, r3
 800d53e:	480e      	ldr	r0, [pc, #56]	@ (800d578 <xTaskRemoveFromEventList+0xbc>)
 800d540:	f7fe fa75 	bl	800ba2e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d544:	693b      	ldr	r3, [r7, #16]
 800d546:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d548:	4b0c      	ldr	r3, [pc, #48]	@ (800d57c <xTaskRemoveFromEventList+0xc0>)
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d54e:	429a      	cmp	r2, r3
 800d550:	d905      	bls.n	800d55e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d552:	2301      	movs	r3, #1
 800d554:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d556:	4b0a      	ldr	r3, [pc, #40]	@ (800d580 <xTaskRemoveFromEventList+0xc4>)
 800d558:	2201      	movs	r2, #1
 800d55a:	601a      	str	r2, [r3, #0]
 800d55c:	e001      	b.n	800d562 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800d55e:	2300      	movs	r3, #0
 800d560:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d562:	697b      	ldr	r3, [r7, #20]
}
 800d564:	4618      	mov	r0, r3
 800d566:	3718      	adds	r7, #24
 800d568:	46bd      	mov	sp, r7
 800d56a:	bd80      	pop	{r7, pc}
 800d56c:	2000238c 	.word	0x2000238c
 800d570:	2000236c 	.word	0x2000236c
 800d574:	20001e94 	.word	0x20001e94
 800d578:	20002324 	.word	0x20002324
 800d57c:	20001e90 	.word	0x20001e90
 800d580:	20002378 	.word	0x20002378

0800d584 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d584:	b480      	push	{r7}
 800d586:	b083      	sub	sp, #12
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d58c:	4b06      	ldr	r3, [pc, #24]	@ (800d5a8 <vTaskInternalSetTimeOutState+0x24>)
 800d58e:	681a      	ldr	r2, [r3, #0]
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d594:	4b05      	ldr	r3, [pc, #20]	@ (800d5ac <vTaskInternalSetTimeOutState+0x28>)
 800d596:	681a      	ldr	r2, [r3, #0]
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	605a      	str	r2, [r3, #4]
}
 800d59c:	bf00      	nop
 800d59e:	370c      	adds	r7, #12
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a6:	4770      	bx	lr
 800d5a8:	2000237c 	.word	0x2000237c
 800d5ac:	20002368 	.word	0x20002368

0800d5b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b088      	sub	sp, #32
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
 800d5b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d10b      	bne.n	800d5d8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800d5c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5c4:	f383 8811 	msr	BASEPRI, r3
 800d5c8:	f3bf 8f6f 	isb	sy
 800d5cc:	f3bf 8f4f 	dsb	sy
 800d5d0:	613b      	str	r3, [r7, #16]
}
 800d5d2:	bf00      	nop
 800d5d4:	bf00      	nop
 800d5d6:	e7fd      	b.n	800d5d4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d5d8:	683b      	ldr	r3, [r7, #0]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d10b      	bne.n	800d5f6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800d5de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5e2:	f383 8811 	msr	BASEPRI, r3
 800d5e6:	f3bf 8f6f 	isb	sy
 800d5ea:	f3bf 8f4f 	dsb	sy
 800d5ee:	60fb      	str	r3, [r7, #12]
}
 800d5f0:	bf00      	nop
 800d5f2:	bf00      	nop
 800d5f4:	e7fd      	b.n	800d5f2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800d5f6:	f000 ff97 	bl	800e528 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d5fa:	4b1d      	ldr	r3, [pc, #116]	@ (800d670 <xTaskCheckForTimeOut+0xc0>)
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	685b      	ldr	r3, [r3, #4]
 800d604:	69ba      	ldr	r2, [r7, #24]
 800d606:	1ad3      	subs	r3, r2, r3
 800d608:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d60a:	683b      	ldr	r3, [r7, #0]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d612:	d102      	bne.n	800d61a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d614:	2300      	movs	r3, #0
 800d616:	61fb      	str	r3, [r7, #28]
 800d618:	e023      	b.n	800d662 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681a      	ldr	r2, [r3, #0]
 800d61e:	4b15      	ldr	r3, [pc, #84]	@ (800d674 <xTaskCheckForTimeOut+0xc4>)
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	429a      	cmp	r2, r3
 800d624:	d007      	beq.n	800d636 <xTaskCheckForTimeOut+0x86>
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	685b      	ldr	r3, [r3, #4]
 800d62a:	69ba      	ldr	r2, [r7, #24]
 800d62c:	429a      	cmp	r2, r3
 800d62e:	d302      	bcc.n	800d636 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d630:	2301      	movs	r3, #1
 800d632:	61fb      	str	r3, [r7, #28]
 800d634:	e015      	b.n	800d662 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d636:	683b      	ldr	r3, [r7, #0]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	697a      	ldr	r2, [r7, #20]
 800d63c:	429a      	cmp	r2, r3
 800d63e:	d20b      	bcs.n	800d658 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d640:	683b      	ldr	r3, [r7, #0]
 800d642:	681a      	ldr	r2, [r3, #0]
 800d644:	697b      	ldr	r3, [r7, #20]
 800d646:	1ad2      	subs	r2, r2, r3
 800d648:	683b      	ldr	r3, [r7, #0]
 800d64a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d64c:	6878      	ldr	r0, [r7, #4]
 800d64e:	f7ff ff99 	bl	800d584 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d652:	2300      	movs	r3, #0
 800d654:	61fb      	str	r3, [r7, #28]
 800d656:	e004      	b.n	800d662 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800d658:	683b      	ldr	r3, [r7, #0]
 800d65a:	2200      	movs	r2, #0
 800d65c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d65e:	2301      	movs	r3, #1
 800d660:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d662:	f000 ff93 	bl	800e58c <vPortExitCritical>

	return xReturn;
 800d666:	69fb      	ldr	r3, [r7, #28]
}
 800d668:	4618      	mov	r0, r3
 800d66a:	3720      	adds	r7, #32
 800d66c:	46bd      	mov	sp, r7
 800d66e:	bd80      	pop	{r7, pc}
 800d670:	20002368 	.word	0x20002368
 800d674:	2000237c 	.word	0x2000237c

0800d678 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d678:	b480      	push	{r7}
 800d67a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d67c:	4b03      	ldr	r3, [pc, #12]	@ (800d68c <vTaskMissedYield+0x14>)
 800d67e:	2201      	movs	r2, #1
 800d680:	601a      	str	r2, [r3, #0]
}
 800d682:	bf00      	nop
 800d684:	46bd      	mov	sp, r7
 800d686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68a:	4770      	bx	lr
 800d68c:	20002378 	.word	0x20002378

0800d690 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b082      	sub	sp, #8
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d698:	f000 f854 	bl	800d744 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d69c:	4b07      	ldr	r3, [pc, #28]	@ (800d6bc <prvIdleTask+0x2c>)
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	2b01      	cmp	r3, #1
 800d6a2:	d907      	bls.n	800d6b4 <prvIdleTask+0x24>
			{
				taskYIELD();
 800d6a4:	4b06      	ldr	r3, [pc, #24]	@ (800d6c0 <prvIdleTask+0x30>)
 800d6a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d6aa:	601a      	str	r2, [r3, #0]
 800d6ac:	f3bf 8f4f 	dsb	sy
 800d6b0:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800d6b4:	f7f3 fa52 	bl	8000b5c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800d6b8:	e7ee      	b.n	800d698 <prvIdleTask+0x8>
 800d6ba:	bf00      	nop
 800d6bc:	20001e94 	.word	0x20001e94
 800d6c0:	e000ed04 	.word	0xe000ed04

0800d6c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b082      	sub	sp, #8
 800d6c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	607b      	str	r3, [r7, #4]
 800d6ce:	e00c      	b.n	800d6ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d6d0:	687a      	ldr	r2, [r7, #4]
 800d6d2:	4613      	mov	r3, r2
 800d6d4:	009b      	lsls	r3, r3, #2
 800d6d6:	4413      	add	r3, r2
 800d6d8:	009b      	lsls	r3, r3, #2
 800d6da:	4a12      	ldr	r2, [pc, #72]	@ (800d724 <prvInitialiseTaskLists+0x60>)
 800d6dc:	4413      	add	r3, r2
 800d6de:	4618      	mov	r0, r3
 800d6e0:	f7fe f978 	bl	800b9d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	3301      	adds	r3, #1
 800d6e8:	607b      	str	r3, [r7, #4]
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	2b37      	cmp	r3, #55	@ 0x37
 800d6ee:	d9ef      	bls.n	800d6d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d6f0:	480d      	ldr	r0, [pc, #52]	@ (800d728 <prvInitialiseTaskLists+0x64>)
 800d6f2:	f7fe f96f 	bl	800b9d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d6f6:	480d      	ldr	r0, [pc, #52]	@ (800d72c <prvInitialiseTaskLists+0x68>)
 800d6f8:	f7fe f96c 	bl	800b9d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d6fc:	480c      	ldr	r0, [pc, #48]	@ (800d730 <prvInitialiseTaskLists+0x6c>)
 800d6fe:	f7fe f969 	bl	800b9d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d702:	480c      	ldr	r0, [pc, #48]	@ (800d734 <prvInitialiseTaskLists+0x70>)
 800d704:	f7fe f966 	bl	800b9d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d708:	480b      	ldr	r0, [pc, #44]	@ (800d738 <prvInitialiseTaskLists+0x74>)
 800d70a:	f7fe f963 	bl	800b9d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d70e:	4b0b      	ldr	r3, [pc, #44]	@ (800d73c <prvInitialiseTaskLists+0x78>)
 800d710:	4a05      	ldr	r2, [pc, #20]	@ (800d728 <prvInitialiseTaskLists+0x64>)
 800d712:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d714:	4b0a      	ldr	r3, [pc, #40]	@ (800d740 <prvInitialiseTaskLists+0x7c>)
 800d716:	4a05      	ldr	r2, [pc, #20]	@ (800d72c <prvInitialiseTaskLists+0x68>)
 800d718:	601a      	str	r2, [r3, #0]
}
 800d71a:	bf00      	nop
 800d71c:	3708      	adds	r7, #8
 800d71e:	46bd      	mov	sp, r7
 800d720:	bd80      	pop	{r7, pc}
 800d722:	bf00      	nop
 800d724:	20001e94 	.word	0x20001e94
 800d728:	200022f4 	.word	0x200022f4
 800d72c:	20002308 	.word	0x20002308
 800d730:	20002324 	.word	0x20002324
 800d734:	20002338 	.word	0x20002338
 800d738:	20002350 	.word	0x20002350
 800d73c:	2000231c 	.word	0x2000231c
 800d740:	20002320 	.word	0x20002320

0800d744 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b082      	sub	sp, #8
 800d748:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d74a:	e019      	b.n	800d780 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d74c:	f000 feec 	bl	800e528 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d750:	4b10      	ldr	r3, [pc, #64]	@ (800d794 <prvCheckTasksWaitingTermination+0x50>)
 800d752:	68db      	ldr	r3, [r3, #12]
 800d754:	68db      	ldr	r3, [r3, #12]
 800d756:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	3304      	adds	r3, #4
 800d75c:	4618      	mov	r0, r3
 800d75e:	f7fe f9c3 	bl	800bae8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d762:	4b0d      	ldr	r3, [pc, #52]	@ (800d798 <prvCheckTasksWaitingTermination+0x54>)
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	3b01      	subs	r3, #1
 800d768:	4a0b      	ldr	r2, [pc, #44]	@ (800d798 <prvCheckTasksWaitingTermination+0x54>)
 800d76a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d76c:	4b0b      	ldr	r3, [pc, #44]	@ (800d79c <prvCheckTasksWaitingTermination+0x58>)
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	3b01      	subs	r3, #1
 800d772:	4a0a      	ldr	r2, [pc, #40]	@ (800d79c <prvCheckTasksWaitingTermination+0x58>)
 800d774:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d776:	f000 ff09 	bl	800e58c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d77a:	6878      	ldr	r0, [r7, #4]
 800d77c:	f000 f810 	bl	800d7a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d780:	4b06      	ldr	r3, [pc, #24]	@ (800d79c <prvCheckTasksWaitingTermination+0x58>)
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d1e1      	bne.n	800d74c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d788:	bf00      	nop
 800d78a:	bf00      	nop
 800d78c:	3708      	adds	r7, #8
 800d78e:	46bd      	mov	sp, r7
 800d790:	bd80      	pop	{r7, pc}
 800d792:	bf00      	nop
 800d794:	20002338 	.word	0x20002338
 800d798:	20002364 	.word	0x20002364
 800d79c:	2000234c 	.word	0x2000234c

0800d7a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b084      	sub	sp, #16
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	3358      	adds	r3, #88	@ 0x58
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	f002 fa55 	bl	800fc5c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d108      	bne.n	800d7ce <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	f001 f8a7 	bl	800e914 <vPortFree>
				vPortFree( pxTCB );
 800d7c6:	6878      	ldr	r0, [r7, #4]
 800d7c8:	f001 f8a4 	bl	800e914 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d7cc:	e019      	b.n	800d802 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800d7d4:	2b01      	cmp	r3, #1
 800d7d6:	d103      	bne.n	800d7e0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d7d8:	6878      	ldr	r0, [r7, #4]
 800d7da:	f001 f89b 	bl	800e914 <vPortFree>
	}
 800d7de:	e010      	b.n	800d802 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800d7e6:	2b02      	cmp	r3, #2
 800d7e8:	d00b      	beq.n	800d802 <prvDeleteTCB+0x62>
	__asm volatile
 800d7ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7ee:	f383 8811 	msr	BASEPRI, r3
 800d7f2:	f3bf 8f6f 	isb	sy
 800d7f6:	f3bf 8f4f 	dsb	sy
 800d7fa:	60fb      	str	r3, [r7, #12]
}
 800d7fc:	bf00      	nop
 800d7fe:	bf00      	nop
 800d800:	e7fd      	b.n	800d7fe <prvDeleteTCB+0x5e>
	}
 800d802:	bf00      	nop
 800d804:	3710      	adds	r7, #16
 800d806:	46bd      	mov	sp, r7
 800d808:	bd80      	pop	{r7, pc}
	...

0800d80c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d80c:	b480      	push	{r7}
 800d80e:	b083      	sub	sp, #12
 800d810:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d812:	4b0c      	ldr	r3, [pc, #48]	@ (800d844 <prvResetNextTaskUnblockTime+0x38>)
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d104      	bne.n	800d826 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d81c:	4b0a      	ldr	r3, [pc, #40]	@ (800d848 <prvResetNextTaskUnblockTime+0x3c>)
 800d81e:	f04f 32ff 	mov.w	r2, #4294967295
 800d822:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d824:	e008      	b.n	800d838 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d826:	4b07      	ldr	r3, [pc, #28]	@ (800d844 <prvResetNextTaskUnblockTime+0x38>)
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	68db      	ldr	r3, [r3, #12]
 800d82c:	68db      	ldr	r3, [r3, #12]
 800d82e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	685b      	ldr	r3, [r3, #4]
 800d834:	4a04      	ldr	r2, [pc, #16]	@ (800d848 <prvResetNextTaskUnblockTime+0x3c>)
 800d836:	6013      	str	r3, [r2, #0]
}
 800d838:	bf00      	nop
 800d83a:	370c      	adds	r7, #12
 800d83c:	46bd      	mov	sp, r7
 800d83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d842:	4770      	bx	lr
 800d844:	2000231c 	.word	0x2000231c
 800d848:	20002384 	.word	0x20002384

0800d84c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d84c:	b480      	push	{r7}
 800d84e:	b083      	sub	sp, #12
 800d850:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d852:	4b0b      	ldr	r3, [pc, #44]	@ (800d880 <xTaskGetSchedulerState+0x34>)
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d102      	bne.n	800d860 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d85a:	2301      	movs	r3, #1
 800d85c:	607b      	str	r3, [r7, #4]
 800d85e:	e008      	b.n	800d872 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d860:	4b08      	ldr	r3, [pc, #32]	@ (800d884 <xTaskGetSchedulerState+0x38>)
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d102      	bne.n	800d86e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d868:	2302      	movs	r3, #2
 800d86a:	607b      	str	r3, [r7, #4]
 800d86c:	e001      	b.n	800d872 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d86e:	2300      	movs	r3, #0
 800d870:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d872:	687b      	ldr	r3, [r7, #4]
	}
 800d874:	4618      	mov	r0, r3
 800d876:	370c      	adds	r7, #12
 800d878:	46bd      	mov	sp, r7
 800d87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87e:	4770      	bx	lr
 800d880:	20002370 	.word	0x20002370
 800d884:	2000238c 	.word	0x2000238c

0800d888 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d888:	b580      	push	{r7, lr}
 800d88a:	b084      	sub	sp, #16
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d894:	2300      	movs	r3, #0
 800d896:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d051      	beq.n	800d942 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d89e:	68bb      	ldr	r3, [r7, #8]
 800d8a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8a2:	4b2a      	ldr	r3, [pc, #168]	@ (800d94c <xTaskPriorityInherit+0xc4>)
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8a8:	429a      	cmp	r2, r3
 800d8aa:	d241      	bcs.n	800d930 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d8ac:	68bb      	ldr	r3, [r7, #8]
 800d8ae:	699b      	ldr	r3, [r3, #24]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	db06      	blt.n	800d8c2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d8b4:	4b25      	ldr	r3, [pc, #148]	@ (800d94c <xTaskPriorityInherit+0xc4>)
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8ba:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d8be:	68bb      	ldr	r3, [r7, #8]
 800d8c0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d8c2:	68bb      	ldr	r3, [r7, #8]
 800d8c4:	6959      	ldr	r1, [r3, #20]
 800d8c6:	68bb      	ldr	r3, [r7, #8]
 800d8c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8ca:	4613      	mov	r3, r2
 800d8cc:	009b      	lsls	r3, r3, #2
 800d8ce:	4413      	add	r3, r2
 800d8d0:	009b      	lsls	r3, r3, #2
 800d8d2:	4a1f      	ldr	r2, [pc, #124]	@ (800d950 <xTaskPriorityInherit+0xc8>)
 800d8d4:	4413      	add	r3, r2
 800d8d6:	4299      	cmp	r1, r3
 800d8d8:	d122      	bne.n	800d920 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d8da:	68bb      	ldr	r3, [r7, #8]
 800d8dc:	3304      	adds	r3, #4
 800d8de:	4618      	mov	r0, r3
 800d8e0:	f7fe f902 	bl	800bae8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d8e4:	4b19      	ldr	r3, [pc, #100]	@ (800d94c <xTaskPriorityInherit+0xc4>)
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8ea:	68bb      	ldr	r3, [r7, #8]
 800d8ec:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d8ee:	68bb      	ldr	r3, [r7, #8]
 800d8f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8f2:	4b18      	ldr	r3, [pc, #96]	@ (800d954 <xTaskPriorityInherit+0xcc>)
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	429a      	cmp	r2, r3
 800d8f8:	d903      	bls.n	800d902 <xTaskPriorityInherit+0x7a>
 800d8fa:	68bb      	ldr	r3, [r7, #8]
 800d8fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8fe:	4a15      	ldr	r2, [pc, #84]	@ (800d954 <xTaskPriorityInherit+0xcc>)
 800d900:	6013      	str	r3, [r2, #0]
 800d902:	68bb      	ldr	r3, [r7, #8]
 800d904:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d906:	4613      	mov	r3, r2
 800d908:	009b      	lsls	r3, r3, #2
 800d90a:	4413      	add	r3, r2
 800d90c:	009b      	lsls	r3, r3, #2
 800d90e:	4a10      	ldr	r2, [pc, #64]	@ (800d950 <xTaskPriorityInherit+0xc8>)
 800d910:	441a      	add	r2, r3
 800d912:	68bb      	ldr	r3, [r7, #8]
 800d914:	3304      	adds	r3, #4
 800d916:	4619      	mov	r1, r3
 800d918:	4610      	mov	r0, r2
 800d91a:	f7fe f888 	bl	800ba2e <vListInsertEnd>
 800d91e:	e004      	b.n	800d92a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d920:	4b0a      	ldr	r3, [pc, #40]	@ (800d94c <xTaskPriorityInherit+0xc4>)
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d926:	68bb      	ldr	r3, [r7, #8]
 800d928:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d92a:	2301      	movs	r3, #1
 800d92c:	60fb      	str	r3, [r7, #12]
 800d92e:	e008      	b.n	800d942 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d930:	68bb      	ldr	r3, [r7, #8]
 800d932:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d934:	4b05      	ldr	r3, [pc, #20]	@ (800d94c <xTaskPriorityInherit+0xc4>)
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d93a:	429a      	cmp	r2, r3
 800d93c:	d201      	bcs.n	800d942 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d93e:	2301      	movs	r3, #1
 800d940:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d942:	68fb      	ldr	r3, [r7, #12]
	}
 800d944:	4618      	mov	r0, r3
 800d946:	3710      	adds	r7, #16
 800d948:	46bd      	mov	sp, r7
 800d94a:	bd80      	pop	{r7, pc}
 800d94c:	20001e90 	.word	0x20001e90
 800d950:	20001e94 	.word	0x20001e94
 800d954:	2000236c 	.word	0x2000236c

0800d958 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b086      	sub	sp, #24
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d964:	2300      	movs	r3, #0
 800d966:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d058      	beq.n	800da20 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d96e:	4b2f      	ldr	r3, [pc, #188]	@ (800da2c <xTaskPriorityDisinherit+0xd4>)
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	693a      	ldr	r2, [r7, #16]
 800d974:	429a      	cmp	r2, r3
 800d976:	d00b      	beq.n	800d990 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800d978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d97c:	f383 8811 	msr	BASEPRI, r3
 800d980:	f3bf 8f6f 	isb	sy
 800d984:	f3bf 8f4f 	dsb	sy
 800d988:	60fb      	str	r3, [r7, #12]
}
 800d98a:	bf00      	nop
 800d98c:	bf00      	nop
 800d98e:	e7fd      	b.n	800d98c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d990:	693b      	ldr	r3, [r7, #16]
 800d992:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d994:	2b00      	cmp	r3, #0
 800d996:	d10b      	bne.n	800d9b0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800d998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d99c:	f383 8811 	msr	BASEPRI, r3
 800d9a0:	f3bf 8f6f 	isb	sy
 800d9a4:	f3bf 8f4f 	dsb	sy
 800d9a8:	60bb      	str	r3, [r7, #8]
}
 800d9aa:	bf00      	nop
 800d9ac:	bf00      	nop
 800d9ae:	e7fd      	b.n	800d9ac <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800d9b0:	693b      	ldr	r3, [r7, #16]
 800d9b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d9b4:	1e5a      	subs	r2, r3, #1
 800d9b6:	693b      	ldr	r3, [r7, #16]
 800d9b8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d9ba:	693b      	ldr	r3, [r7, #16]
 800d9bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d9be:	693b      	ldr	r3, [r7, #16]
 800d9c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d9c2:	429a      	cmp	r2, r3
 800d9c4:	d02c      	beq.n	800da20 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d9c6:	693b      	ldr	r3, [r7, #16]
 800d9c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d128      	bne.n	800da20 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d9ce:	693b      	ldr	r3, [r7, #16]
 800d9d0:	3304      	adds	r3, #4
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	f7fe f888 	bl	800bae8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d9d8:	693b      	ldr	r3, [r7, #16]
 800d9da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d9dc:	693b      	ldr	r3, [r7, #16]
 800d9de:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d9e0:	693b      	ldr	r3, [r7, #16]
 800d9e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9e4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d9e8:	693b      	ldr	r3, [r7, #16]
 800d9ea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d9ec:	693b      	ldr	r3, [r7, #16]
 800d9ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d9f0:	4b0f      	ldr	r3, [pc, #60]	@ (800da30 <xTaskPriorityDisinherit+0xd8>)
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	429a      	cmp	r2, r3
 800d9f6:	d903      	bls.n	800da00 <xTaskPriorityDisinherit+0xa8>
 800d9f8:	693b      	ldr	r3, [r7, #16]
 800d9fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9fc:	4a0c      	ldr	r2, [pc, #48]	@ (800da30 <xTaskPriorityDisinherit+0xd8>)
 800d9fe:	6013      	str	r3, [r2, #0]
 800da00:	693b      	ldr	r3, [r7, #16]
 800da02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da04:	4613      	mov	r3, r2
 800da06:	009b      	lsls	r3, r3, #2
 800da08:	4413      	add	r3, r2
 800da0a:	009b      	lsls	r3, r3, #2
 800da0c:	4a09      	ldr	r2, [pc, #36]	@ (800da34 <xTaskPriorityDisinherit+0xdc>)
 800da0e:	441a      	add	r2, r3
 800da10:	693b      	ldr	r3, [r7, #16]
 800da12:	3304      	adds	r3, #4
 800da14:	4619      	mov	r1, r3
 800da16:	4610      	mov	r0, r2
 800da18:	f7fe f809 	bl	800ba2e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800da1c:	2301      	movs	r3, #1
 800da1e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800da20:	697b      	ldr	r3, [r7, #20]
	}
 800da22:	4618      	mov	r0, r3
 800da24:	3718      	adds	r7, #24
 800da26:	46bd      	mov	sp, r7
 800da28:	bd80      	pop	{r7, pc}
 800da2a:	bf00      	nop
 800da2c:	20001e90 	.word	0x20001e90
 800da30:	2000236c 	.word	0x2000236c
 800da34:	20001e94 	.word	0x20001e94

0800da38 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800da38:	b580      	push	{r7, lr}
 800da3a:	b088      	sub	sp, #32
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	6078      	str	r0, [r7, #4]
 800da40:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800da46:	2301      	movs	r3, #1
 800da48:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d06c      	beq.n	800db2a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800da50:	69bb      	ldr	r3, [r7, #24]
 800da52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800da54:	2b00      	cmp	r3, #0
 800da56:	d10b      	bne.n	800da70 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800da58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da5c:	f383 8811 	msr	BASEPRI, r3
 800da60:	f3bf 8f6f 	isb	sy
 800da64:	f3bf 8f4f 	dsb	sy
 800da68:	60fb      	str	r3, [r7, #12]
}
 800da6a:	bf00      	nop
 800da6c:	bf00      	nop
 800da6e:	e7fd      	b.n	800da6c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800da70:	69bb      	ldr	r3, [r7, #24]
 800da72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800da74:	683a      	ldr	r2, [r7, #0]
 800da76:	429a      	cmp	r2, r3
 800da78:	d902      	bls.n	800da80 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	61fb      	str	r3, [r7, #28]
 800da7e:	e002      	b.n	800da86 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800da80:	69bb      	ldr	r3, [r7, #24]
 800da82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800da84:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800da86:	69bb      	ldr	r3, [r7, #24]
 800da88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da8a:	69fa      	ldr	r2, [r7, #28]
 800da8c:	429a      	cmp	r2, r3
 800da8e:	d04c      	beq.n	800db2a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800da90:	69bb      	ldr	r3, [r7, #24]
 800da92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800da94:	697a      	ldr	r2, [r7, #20]
 800da96:	429a      	cmp	r2, r3
 800da98:	d147      	bne.n	800db2a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800da9a:	4b26      	ldr	r3, [pc, #152]	@ (800db34 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	69ba      	ldr	r2, [r7, #24]
 800daa0:	429a      	cmp	r2, r3
 800daa2:	d10b      	bne.n	800dabc <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800daa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800daa8:	f383 8811 	msr	BASEPRI, r3
 800daac:	f3bf 8f6f 	isb	sy
 800dab0:	f3bf 8f4f 	dsb	sy
 800dab4:	60bb      	str	r3, [r7, #8]
}
 800dab6:	bf00      	nop
 800dab8:	bf00      	nop
 800daba:	e7fd      	b.n	800dab8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800dabc:	69bb      	ldr	r3, [r7, #24]
 800dabe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dac0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800dac2:	69bb      	ldr	r3, [r7, #24]
 800dac4:	69fa      	ldr	r2, [r7, #28]
 800dac6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dac8:	69bb      	ldr	r3, [r7, #24]
 800daca:	699b      	ldr	r3, [r3, #24]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	db04      	blt.n	800dada <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dad0:	69fb      	ldr	r3, [r7, #28]
 800dad2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800dad6:	69bb      	ldr	r3, [r7, #24]
 800dad8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800dada:	69bb      	ldr	r3, [r7, #24]
 800dadc:	6959      	ldr	r1, [r3, #20]
 800dade:	693a      	ldr	r2, [r7, #16]
 800dae0:	4613      	mov	r3, r2
 800dae2:	009b      	lsls	r3, r3, #2
 800dae4:	4413      	add	r3, r2
 800dae6:	009b      	lsls	r3, r3, #2
 800dae8:	4a13      	ldr	r2, [pc, #76]	@ (800db38 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800daea:	4413      	add	r3, r2
 800daec:	4299      	cmp	r1, r3
 800daee:	d11c      	bne.n	800db2a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800daf0:	69bb      	ldr	r3, [r7, #24]
 800daf2:	3304      	adds	r3, #4
 800daf4:	4618      	mov	r0, r3
 800daf6:	f7fd fff7 	bl	800bae8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800dafa:	69bb      	ldr	r3, [r7, #24]
 800dafc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dafe:	4b0f      	ldr	r3, [pc, #60]	@ (800db3c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	429a      	cmp	r2, r3
 800db04:	d903      	bls.n	800db0e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800db06:	69bb      	ldr	r3, [r7, #24]
 800db08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db0a:	4a0c      	ldr	r2, [pc, #48]	@ (800db3c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800db0c:	6013      	str	r3, [r2, #0]
 800db0e:	69bb      	ldr	r3, [r7, #24]
 800db10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db12:	4613      	mov	r3, r2
 800db14:	009b      	lsls	r3, r3, #2
 800db16:	4413      	add	r3, r2
 800db18:	009b      	lsls	r3, r3, #2
 800db1a:	4a07      	ldr	r2, [pc, #28]	@ (800db38 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800db1c:	441a      	add	r2, r3
 800db1e:	69bb      	ldr	r3, [r7, #24]
 800db20:	3304      	adds	r3, #4
 800db22:	4619      	mov	r1, r3
 800db24:	4610      	mov	r0, r2
 800db26:	f7fd ff82 	bl	800ba2e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800db2a:	bf00      	nop
 800db2c:	3720      	adds	r7, #32
 800db2e:	46bd      	mov	sp, r7
 800db30:	bd80      	pop	{r7, pc}
 800db32:	bf00      	nop
 800db34:	20001e90 	.word	0x20001e90
 800db38:	20001e94 	.word	0x20001e94
 800db3c:	2000236c 	.word	0x2000236c

0800db40 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800db40:	b480      	push	{r7}
 800db42:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800db44:	4b07      	ldr	r3, [pc, #28]	@ (800db64 <pvTaskIncrementMutexHeldCount+0x24>)
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d004      	beq.n	800db56 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800db4c:	4b05      	ldr	r3, [pc, #20]	@ (800db64 <pvTaskIncrementMutexHeldCount+0x24>)
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800db52:	3201      	adds	r2, #1
 800db54:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800db56:	4b03      	ldr	r3, [pc, #12]	@ (800db64 <pvTaskIncrementMutexHeldCount+0x24>)
 800db58:	681b      	ldr	r3, [r3, #0]
	}
 800db5a:	4618      	mov	r0, r3
 800db5c:	46bd      	mov	sp, r7
 800db5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db62:	4770      	bx	lr
 800db64:	20001e90 	.word	0x20001e90

0800db68 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b084      	sub	sp, #16
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
 800db70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800db72:	4b21      	ldr	r3, [pc, #132]	@ (800dbf8 <prvAddCurrentTaskToDelayedList+0x90>)
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800db78:	4b20      	ldr	r3, [pc, #128]	@ (800dbfc <prvAddCurrentTaskToDelayedList+0x94>)
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	3304      	adds	r3, #4
 800db7e:	4618      	mov	r0, r3
 800db80:	f7fd ffb2 	bl	800bae8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db8a:	d10a      	bne.n	800dba2 <prvAddCurrentTaskToDelayedList+0x3a>
 800db8c:	683b      	ldr	r3, [r7, #0]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d007      	beq.n	800dba2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800db92:	4b1a      	ldr	r3, [pc, #104]	@ (800dbfc <prvAddCurrentTaskToDelayedList+0x94>)
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	3304      	adds	r3, #4
 800db98:	4619      	mov	r1, r3
 800db9a:	4819      	ldr	r0, [pc, #100]	@ (800dc00 <prvAddCurrentTaskToDelayedList+0x98>)
 800db9c:	f7fd ff47 	bl	800ba2e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dba0:	e026      	b.n	800dbf0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dba2:	68fa      	ldr	r2, [r7, #12]
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	4413      	add	r3, r2
 800dba8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dbaa:	4b14      	ldr	r3, [pc, #80]	@ (800dbfc <prvAddCurrentTaskToDelayedList+0x94>)
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	68ba      	ldr	r2, [r7, #8]
 800dbb0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dbb2:	68ba      	ldr	r2, [r7, #8]
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	429a      	cmp	r2, r3
 800dbb8:	d209      	bcs.n	800dbce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dbba:	4b12      	ldr	r3, [pc, #72]	@ (800dc04 <prvAddCurrentTaskToDelayedList+0x9c>)
 800dbbc:	681a      	ldr	r2, [r3, #0]
 800dbbe:	4b0f      	ldr	r3, [pc, #60]	@ (800dbfc <prvAddCurrentTaskToDelayedList+0x94>)
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	3304      	adds	r3, #4
 800dbc4:	4619      	mov	r1, r3
 800dbc6:	4610      	mov	r0, r2
 800dbc8:	f7fd ff55 	bl	800ba76 <vListInsert>
}
 800dbcc:	e010      	b.n	800dbf0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dbce:	4b0e      	ldr	r3, [pc, #56]	@ (800dc08 <prvAddCurrentTaskToDelayedList+0xa0>)
 800dbd0:	681a      	ldr	r2, [r3, #0]
 800dbd2:	4b0a      	ldr	r3, [pc, #40]	@ (800dbfc <prvAddCurrentTaskToDelayedList+0x94>)
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	3304      	adds	r3, #4
 800dbd8:	4619      	mov	r1, r3
 800dbda:	4610      	mov	r0, r2
 800dbdc:	f7fd ff4b 	bl	800ba76 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dbe0:	4b0a      	ldr	r3, [pc, #40]	@ (800dc0c <prvAddCurrentTaskToDelayedList+0xa4>)
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	68ba      	ldr	r2, [r7, #8]
 800dbe6:	429a      	cmp	r2, r3
 800dbe8:	d202      	bcs.n	800dbf0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800dbea:	4a08      	ldr	r2, [pc, #32]	@ (800dc0c <prvAddCurrentTaskToDelayedList+0xa4>)
 800dbec:	68bb      	ldr	r3, [r7, #8]
 800dbee:	6013      	str	r3, [r2, #0]
}
 800dbf0:	bf00      	nop
 800dbf2:	3710      	adds	r7, #16
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	bd80      	pop	{r7, pc}
 800dbf8:	20002368 	.word	0x20002368
 800dbfc:	20001e90 	.word	0x20001e90
 800dc00:	20002350 	.word	0x20002350
 800dc04:	20002320 	.word	0x20002320
 800dc08:	2000231c 	.word	0x2000231c
 800dc0c:	20002384 	.word	0x20002384

0800dc10 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b08a      	sub	sp, #40	@ 0x28
 800dc14:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800dc16:	2300      	movs	r3, #0
 800dc18:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800dc1a:	f000 fb13 	bl	800e244 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800dc1e:	4b1d      	ldr	r3, [pc, #116]	@ (800dc94 <xTimerCreateTimerTask+0x84>)
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d021      	beq.n	800dc6a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800dc26:	2300      	movs	r3, #0
 800dc28:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800dc2e:	1d3a      	adds	r2, r7, #4
 800dc30:	f107 0108 	add.w	r1, r7, #8
 800dc34:	f107 030c 	add.w	r3, r7, #12
 800dc38:	4618      	mov	r0, r3
 800dc3a:	f7fd feb1 	bl	800b9a0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800dc3e:	6879      	ldr	r1, [r7, #4]
 800dc40:	68bb      	ldr	r3, [r7, #8]
 800dc42:	68fa      	ldr	r2, [r7, #12]
 800dc44:	9202      	str	r2, [sp, #8]
 800dc46:	9301      	str	r3, [sp, #4]
 800dc48:	2302      	movs	r3, #2
 800dc4a:	9300      	str	r3, [sp, #0]
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	460a      	mov	r2, r1
 800dc50:	4911      	ldr	r1, [pc, #68]	@ (800dc98 <xTimerCreateTimerTask+0x88>)
 800dc52:	4812      	ldr	r0, [pc, #72]	@ (800dc9c <xTimerCreateTimerTask+0x8c>)
 800dc54:	f7fe ff9e 	bl	800cb94 <xTaskCreateStatic>
 800dc58:	4603      	mov	r3, r0
 800dc5a:	4a11      	ldr	r2, [pc, #68]	@ (800dca0 <xTimerCreateTimerTask+0x90>)
 800dc5c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800dc5e:	4b10      	ldr	r3, [pc, #64]	@ (800dca0 <xTimerCreateTimerTask+0x90>)
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d001      	beq.n	800dc6a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800dc66:	2301      	movs	r3, #1
 800dc68:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800dc6a:	697b      	ldr	r3, [r7, #20]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d10b      	bne.n	800dc88 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800dc70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc74:	f383 8811 	msr	BASEPRI, r3
 800dc78:	f3bf 8f6f 	isb	sy
 800dc7c:	f3bf 8f4f 	dsb	sy
 800dc80:	613b      	str	r3, [r7, #16]
}
 800dc82:	bf00      	nop
 800dc84:	bf00      	nop
 800dc86:	e7fd      	b.n	800dc84 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800dc88:	697b      	ldr	r3, [r7, #20]
}
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	3718      	adds	r7, #24
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	bd80      	pop	{r7, pc}
 800dc92:	bf00      	nop
 800dc94:	200023c0 	.word	0x200023c0
 800dc98:	08010940 	.word	0x08010940
 800dc9c:	0800dddd 	.word	0x0800dddd
 800dca0:	200023c4 	.word	0x200023c4

0800dca4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b08a      	sub	sp, #40	@ 0x28
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	60f8      	str	r0, [r7, #12]
 800dcac:	60b9      	str	r1, [r7, #8]
 800dcae:	607a      	str	r2, [r7, #4]
 800dcb0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d10b      	bne.n	800dcd4 <xTimerGenericCommand+0x30>
	__asm volatile
 800dcbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcc0:	f383 8811 	msr	BASEPRI, r3
 800dcc4:	f3bf 8f6f 	isb	sy
 800dcc8:	f3bf 8f4f 	dsb	sy
 800dccc:	623b      	str	r3, [r7, #32]
}
 800dcce:	bf00      	nop
 800dcd0:	bf00      	nop
 800dcd2:	e7fd      	b.n	800dcd0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800dcd4:	4b19      	ldr	r3, [pc, #100]	@ (800dd3c <xTimerGenericCommand+0x98>)
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d02a      	beq.n	800dd32 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800dcdc:	68bb      	ldr	r3, [r7, #8]
 800dcde:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800dce8:	68bb      	ldr	r3, [r7, #8]
 800dcea:	2b05      	cmp	r3, #5
 800dcec:	dc18      	bgt.n	800dd20 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800dcee:	f7ff fdad 	bl	800d84c <xTaskGetSchedulerState>
 800dcf2:	4603      	mov	r3, r0
 800dcf4:	2b02      	cmp	r3, #2
 800dcf6:	d109      	bne.n	800dd0c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800dcf8:	4b10      	ldr	r3, [pc, #64]	@ (800dd3c <xTimerGenericCommand+0x98>)
 800dcfa:	6818      	ldr	r0, [r3, #0]
 800dcfc:	f107 0110 	add.w	r1, r7, #16
 800dd00:	2300      	movs	r3, #0
 800dd02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dd04:	f7fe f8ce 	bl	800bea4 <xQueueGenericSend>
 800dd08:	6278      	str	r0, [r7, #36]	@ 0x24
 800dd0a:	e012      	b.n	800dd32 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800dd0c:	4b0b      	ldr	r3, [pc, #44]	@ (800dd3c <xTimerGenericCommand+0x98>)
 800dd0e:	6818      	ldr	r0, [r3, #0]
 800dd10:	f107 0110 	add.w	r1, r7, #16
 800dd14:	2300      	movs	r3, #0
 800dd16:	2200      	movs	r2, #0
 800dd18:	f7fe f8c4 	bl	800bea4 <xQueueGenericSend>
 800dd1c:	6278      	str	r0, [r7, #36]	@ 0x24
 800dd1e:	e008      	b.n	800dd32 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800dd20:	4b06      	ldr	r3, [pc, #24]	@ (800dd3c <xTimerGenericCommand+0x98>)
 800dd22:	6818      	ldr	r0, [r3, #0]
 800dd24:	f107 0110 	add.w	r1, r7, #16
 800dd28:	2300      	movs	r3, #0
 800dd2a:	683a      	ldr	r2, [r7, #0]
 800dd2c:	f7fe f9bc 	bl	800c0a8 <xQueueGenericSendFromISR>
 800dd30:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800dd32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800dd34:	4618      	mov	r0, r3
 800dd36:	3728      	adds	r7, #40	@ 0x28
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	bd80      	pop	{r7, pc}
 800dd3c:	200023c0 	.word	0x200023c0

0800dd40 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b088      	sub	sp, #32
 800dd44:	af02      	add	r7, sp, #8
 800dd46:	6078      	str	r0, [r7, #4]
 800dd48:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd4a:	4b23      	ldr	r3, [pc, #140]	@ (800ddd8 <prvProcessExpiredTimer+0x98>)
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	68db      	ldr	r3, [r3, #12]
 800dd50:	68db      	ldr	r3, [r3, #12]
 800dd52:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dd54:	697b      	ldr	r3, [r7, #20]
 800dd56:	3304      	adds	r3, #4
 800dd58:	4618      	mov	r0, r3
 800dd5a:	f7fd fec5 	bl	800bae8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dd5e:	697b      	ldr	r3, [r7, #20]
 800dd60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dd64:	f003 0304 	and.w	r3, r3, #4
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d023      	beq.n	800ddb4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800dd6c:	697b      	ldr	r3, [r7, #20]
 800dd6e:	699a      	ldr	r2, [r3, #24]
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	18d1      	adds	r1, r2, r3
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	683a      	ldr	r2, [r7, #0]
 800dd78:	6978      	ldr	r0, [r7, #20]
 800dd7a:	f000 f8d5 	bl	800df28 <prvInsertTimerInActiveList>
 800dd7e:	4603      	mov	r3, r0
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d020      	beq.n	800ddc6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dd84:	2300      	movs	r3, #0
 800dd86:	9300      	str	r3, [sp, #0]
 800dd88:	2300      	movs	r3, #0
 800dd8a:	687a      	ldr	r2, [r7, #4]
 800dd8c:	2100      	movs	r1, #0
 800dd8e:	6978      	ldr	r0, [r7, #20]
 800dd90:	f7ff ff88 	bl	800dca4 <xTimerGenericCommand>
 800dd94:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800dd96:	693b      	ldr	r3, [r7, #16]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d114      	bne.n	800ddc6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800dd9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dda0:	f383 8811 	msr	BASEPRI, r3
 800dda4:	f3bf 8f6f 	isb	sy
 800dda8:	f3bf 8f4f 	dsb	sy
 800ddac:	60fb      	str	r3, [r7, #12]
}
 800ddae:	bf00      	nop
 800ddb0:	bf00      	nop
 800ddb2:	e7fd      	b.n	800ddb0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ddb4:	697b      	ldr	r3, [r7, #20]
 800ddb6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ddba:	f023 0301 	bic.w	r3, r3, #1
 800ddbe:	b2da      	uxtb	r2, r3
 800ddc0:	697b      	ldr	r3, [r7, #20]
 800ddc2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ddc6:	697b      	ldr	r3, [r7, #20]
 800ddc8:	6a1b      	ldr	r3, [r3, #32]
 800ddca:	6978      	ldr	r0, [r7, #20]
 800ddcc:	4798      	blx	r3
}
 800ddce:	bf00      	nop
 800ddd0:	3718      	adds	r7, #24
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	bd80      	pop	{r7, pc}
 800ddd6:	bf00      	nop
 800ddd8:	200023b8 	.word	0x200023b8

0800dddc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b084      	sub	sp, #16
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dde4:	f107 0308 	add.w	r3, r7, #8
 800dde8:	4618      	mov	r0, r3
 800ddea:	f000 f859 	bl	800dea0 <prvGetNextExpireTime>
 800ddee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ddf0:	68bb      	ldr	r3, [r7, #8]
 800ddf2:	4619      	mov	r1, r3
 800ddf4:	68f8      	ldr	r0, [r7, #12]
 800ddf6:	f000 f805 	bl	800de04 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ddfa:	f000 f8d7 	bl	800dfac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ddfe:	bf00      	nop
 800de00:	e7f0      	b.n	800dde4 <prvTimerTask+0x8>
	...

0800de04 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800de04:	b580      	push	{r7, lr}
 800de06:	b084      	sub	sp, #16
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6078      	str	r0, [r7, #4]
 800de0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800de0e:	f7ff f8f1 	bl	800cff4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800de12:	f107 0308 	add.w	r3, r7, #8
 800de16:	4618      	mov	r0, r3
 800de18:	f000 f866 	bl	800dee8 <prvSampleTimeNow>
 800de1c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800de1e:	68bb      	ldr	r3, [r7, #8]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d130      	bne.n	800de86 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800de24:	683b      	ldr	r3, [r7, #0]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d10a      	bne.n	800de40 <prvProcessTimerOrBlockTask+0x3c>
 800de2a:	687a      	ldr	r2, [r7, #4]
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	429a      	cmp	r2, r3
 800de30:	d806      	bhi.n	800de40 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800de32:	f7ff f8ed 	bl	800d010 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800de36:	68f9      	ldr	r1, [r7, #12]
 800de38:	6878      	ldr	r0, [r7, #4]
 800de3a:	f7ff ff81 	bl	800dd40 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800de3e:	e024      	b.n	800de8a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800de40:	683b      	ldr	r3, [r7, #0]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d008      	beq.n	800de58 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800de46:	4b13      	ldr	r3, [pc, #76]	@ (800de94 <prvProcessTimerOrBlockTask+0x90>)
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d101      	bne.n	800de54 <prvProcessTimerOrBlockTask+0x50>
 800de50:	2301      	movs	r3, #1
 800de52:	e000      	b.n	800de56 <prvProcessTimerOrBlockTask+0x52>
 800de54:	2300      	movs	r3, #0
 800de56:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800de58:	4b0f      	ldr	r3, [pc, #60]	@ (800de98 <prvProcessTimerOrBlockTask+0x94>)
 800de5a:	6818      	ldr	r0, [r3, #0]
 800de5c:	687a      	ldr	r2, [r7, #4]
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	1ad3      	subs	r3, r2, r3
 800de62:	683a      	ldr	r2, [r7, #0]
 800de64:	4619      	mov	r1, r3
 800de66:	f7fe fe61 	bl	800cb2c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800de6a:	f7ff f8d1 	bl	800d010 <xTaskResumeAll>
 800de6e:	4603      	mov	r3, r0
 800de70:	2b00      	cmp	r3, #0
 800de72:	d10a      	bne.n	800de8a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800de74:	4b09      	ldr	r3, [pc, #36]	@ (800de9c <prvProcessTimerOrBlockTask+0x98>)
 800de76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800de7a:	601a      	str	r2, [r3, #0]
 800de7c:	f3bf 8f4f 	dsb	sy
 800de80:	f3bf 8f6f 	isb	sy
}
 800de84:	e001      	b.n	800de8a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800de86:	f7ff f8c3 	bl	800d010 <xTaskResumeAll>
}
 800de8a:	bf00      	nop
 800de8c:	3710      	adds	r7, #16
 800de8e:	46bd      	mov	sp, r7
 800de90:	bd80      	pop	{r7, pc}
 800de92:	bf00      	nop
 800de94:	200023bc 	.word	0x200023bc
 800de98:	200023c0 	.word	0x200023c0
 800de9c:	e000ed04 	.word	0xe000ed04

0800dea0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800dea0:	b480      	push	{r7}
 800dea2:	b085      	sub	sp, #20
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800dea8:	4b0e      	ldr	r3, [pc, #56]	@ (800dee4 <prvGetNextExpireTime+0x44>)
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d101      	bne.n	800deb6 <prvGetNextExpireTime+0x16>
 800deb2:	2201      	movs	r2, #1
 800deb4:	e000      	b.n	800deb8 <prvGetNextExpireTime+0x18>
 800deb6:	2200      	movs	r2, #0
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d105      	bne.n	800ded0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dec4:	4b07      	ldr	r3, [pc, #28]	@ (800dee4 <prvGetNextExpireTime+0x44>)
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	68db      	ldr	r3, [r3, #12]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	60fb      	str	r3, [r7, #12]
 800dece:	e001      	b.n	800ded4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ded0:	2300      	movs	r3, #0
 800ded2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ded4:	68fb      	ldr	r3, [r7, #12]
}
 800ded6:	4618      	mov	r0, r3
 800ded8:	3714      	adds	r7, #20
 800deda:	46bd      	mov	sp, r7
 800dedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee0:	4770      	bx	lr
 800dee2:	bf00      	nop
 800dee4:	200023b8 	.word	0x200023b8

0800dee8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	b084      	sub	sp, #16
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800def0:	f7ff f92c 	bl	800d14c <xTaskGetTickCount>
 800def4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800def6:	4b0b      	ldr	r3, [pc, #44]	@ (800df24 <prvSampleTimeNow+0x3c>)
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	68fa      	ldr	r2, [r7, #12]
 800defc:	429a      	cmp	r2, r3
 800defe:	d205      	bcs.n	800df0c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800df00:	f000 f93a 	bl	800e178 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	2201      	movs	r2, #1
 800df08:	601a      	str	r2, [r3, #0]
 800df0a:	e002      	b.n	800df12 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	2200      	movs	r2, #0
 800df10:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800df12:	4a04      	ldr	r2, [pc, #16]	@ (800df24 <prvSampleTimeNow+0x3c>)
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800df18:	68fb      	ldr	r3, [r7, #12]
}
 800df1a:	4618      	mov	r0, r3
 800df1c:	3710      	adds	r7, #16
 800df1e:	46bd      	mov	sp, r7
 800df20:	bd80      	pop	{r7, pc}
 800df22:	bf00      	nop
 800df24:	200023c8 	.word	0x200023c8

0800df28 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b086      	sub	sp, #24
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	60f8      	str	r0, [r7, #12]
 800df30:	60b9      	str	r1, [r7, #8]
 800df32:	607a      	str	r2, [r7, #4]
 800df34:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800df36:	2300      	movs	r3, #0
 800df38:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	68ba      	ldr	r2, [r7, #8]
 800df3e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	68fa      	ldr	r2, [r7, #12]
 800df44:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800df46:	68ba      	ldr	r2, [r7, #8]
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	429a      	cmp	r2, r3
 800df4c:	d812      	bhi.n	800df74 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df4e:	687a      	ldr	r2, [r7, #4]
 800df50:	683b      	ldr	r3, [r7, #0]
 800df52:	1ad2      	subs	r2, r2, r3
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	699b      	ldr	r3, [r3, #24]
 800df58:	429a      	cmp	r2, r3
 800df5a:	d302      	bcc.n	800df62 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800df5c:	2301      	movs	r3, #1
 800df5e:	617b      	str	r3, [r7, #20]
 800df60:	e01b      	b.n	800df9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800df62:	4b10      	ldr	r3, [pc, #64]	@ (800dfa4 <prvInsertTimerInActiveList+0x7c>)
 800df64:	681a      	ldr	r2, [r3, #0]
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	3304      	adds	r3, #4
 800df6a:	4619      	mov	r1, r3
 800df6c:	4610      	mov	r0, r2
 800df6e:	f7fd fd82 	bl	800ba76 <vListInsert>
 800df72:	e012      	b.n	800df9a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800df74:	687a      	ldr	r2, [r7, #4]
 800df76:	683b      	ldr	r3, [r7, #0]
 800df78:	429a      	cmp	r2, r3
 800df7a:	d206      	bcs.n	800df8a <prvInsertTimerInActiveList+0x62>
 800df7c:	68ba      	ldr	r2, [r7, #8]
 800df7e:	683b      	ldr	r3, [r7, #0]
 800df80:	429a      	cmp	r2, r3
 800df82:	d302      	bcc.n	800df8a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800df84:	2301      	movs	r3, #1
 800df86:	617b      	str	r3, [r7, #20]
 800df88:	e007      	b.n	800df9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800df8a:	4b07      	ldr	r3, [pc, #28]	@ (800dfa8 <prvInsertTimerInActiveList+0x80>)
 800df8c:	681a      	ldr	r2, [r3, #0]
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	3304      	adds	r3, #4
 800df92:	4619      	mov	r1, r3
 800df94:	4610      	mov	r0, r2
 800df96:	f7fd fd6e 	bl	800ba76 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800df9a:	697b      	ldr	r3, [r7, #20]
}
 800df9c:	4618      	mov	r0, r3
 800df9e:	3718      	adds	r7, #24
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	bd80      	pop	{r7, pc}
 800dfa4:	200023bc 	.word	0x200023bc
 800dfa8:	200023b8 	.word	0x200023b8

0800dfac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b08e      	sub	sp, #56	@ 0x38
 800dfb0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dfb2:	e0ce      	b.n	800e152 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	da19      	bge.n	800dfee <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800dfba:	1d3b      	adds	r3, r7, #4
 800dfbc:	3304      	adds	r3, #4
 800dfbe:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800dfc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d10b      	bne.n	800dfde <prvProcessReceivedCommands+0x32>
	__asm volatile
 800dfc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfca:	f383 8811 	msr	BASEPRI, r3
 800dfce:	f3bf 8f6f 	isb	sy
 800dfd2:	f3bf 8f4f 	dsb	sy
 800dfd6:	61fb      	str	r3, [r7, #28]
}
 800dfd8:	bf00      	nop
 800dfda:	bf00      	nop
 800dfdc:	e7fd      	b.n	800dfda <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800dfde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dfe4:	6850      	ldr	r0, [r2, #4]
 800dfe6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dfe8:	6892      	ldr	r2, [r2, #8]
 800dfea:	4611      	mov	r1, r2
 800dfec:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	f2c0 80ae 	blt.w	800e152 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800dffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dffc:	695b      	ldr	r3, [r3, #20]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d004      	beq.n	800e00c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e004:	3304      	adds	r3, #4
 800e006:	4618      	mov	r0, r3
 800e008:	f7fd fd6e 	bl	800bae8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e00c:	463b      	mov	r3, r7
 800e00e:	4618      	mov	r0, r3
 800e010:	f7ff ff6a 	bl	800dee8 <prvSampleTimeNow>
 800e014:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	2b09      	cmp	r3, #9
 800e01a:	f200 8097 	bhi.w	800e14c <prvProcessReceivedCommands+0x1a0>
 800e01e:	a201      	add	r2, pc, #4	@ (adr r2, 800e024 <prvProcessReceivedCommands+0x78>)
 800e020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e024:	0800e04d 	.word	0x0800e04d
 800e028:	0800e04d 	.word	0x0800e04d
 800e02c:	0800e04d 	.word	0x0800e04d
 800e030:	0800e0c3 	.word	0x0800e0c3
 800e034:	0800e0d7 	.word	0x0800e0d7
 800e038:	0800e123 	.word	0x0800e123
 800e03c:	0800e04d 	.word	0x0800e04d
 800e040:	0800e04d 	.word	0x0800e04d
 800e044:	0800e0c3 	.word	0x0800e0c3
 800e048:	0800e0d7 	.word	0x0800e0d7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e04c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e04e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e052:	f043 0301 	orr.w	r3, r3, #1
 800e056:	b2da      	uxtb	r2, r3
 800e058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e05a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e05e:	68ba      	ldr	r2, [r7, #8]
 800e060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e062:	699b      	ldr	r3, [r3, #24]
 800e064:	18d1      	adds	r1, r2, r3
 800e066:	68bb      	ldr	r3, [r7, #8]
 800e068:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e06a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e06c:	f7ff ff5c 	bl	800df28 <prvInsertTimerInActiveList>
 800e070:	4603      	mov	r3, r0
 800e072:	2b00      	cmp	r3, #0
 800e074:	d06c      	beq.n	800e150 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e078:	6a1b      	ldr	r3, [r3, #32]
 800e07a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e07c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e07e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e080:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e084:	f003 0304 	and.w	r3, r3, #4
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d061      	beq.n	800e150 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e08c:	68ba      	ldr	r2, [r7, #8]
 800e08e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e090:	699b      	ldr	r3, [r3, #24]
 800e092:	441a      	add	r2, r3
 800e094:	2300      	movs	r3, #0
 800e096:	9300      	str	r3, [sp, #0]
 800e098:	2300      	movs	r3, #0
 800e09a:	2100      	movs	r1, #0
 800e09c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e09e:	f7ff fe01 	bl	800dca4 <xTimerGenericCommand>
 800e0a2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e0a4:	6a3b      	ldr	r3, [r7, #32]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d152      	bne.n	800e150 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800e0aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0ae:	f383 8811 	msr	BASEPRI, r3
 800e0b2:	f3bf 8f6f 	isb	sy
 800e0b6:	f3bf 8f4f 	dsb	sy
 800e0ba:	61bb      	str	r3, [r7, #24]
}
 800e0bc:	bf00      	nop
 800e0be:	bf00      	nop
 800e0c0:	e7fd      	b.n	800e0be <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e0c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e0c8:	f023 0301 	bic.w	r3, r3, #1
 800e0cc:	b2da      	uxtb	r2, r3
 800e0ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0d0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e0d4:	e03d      	b.n	800e152 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e0d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e0dc:	f043 0301 	orr.w	r3, r3, #1
 800e0e0:	b2da      	uxtb	r2, r3
 800e0e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0e4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e0e8:	68ba      	ldr	r2, [r7, #8]
 800e0ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0ec:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e0ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0f0:	699b      	ldr	r3, [r3, #24]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d10b      	bne.n	800e10e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800e0f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0fa:	f383 8811 	msr	BASEPRI, r3
 800e0fe:	f3bf 8f6f 	isb	sy
 800e102:	f3bf 8f4f 	dsb	sy
 800e106:	617b      	str	r3, [r7, #20]
}
 800e108:	bf00      	nop
 800e10a:	bf00      	nop
 800e10c:	e7fd      	b.n	800e10a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e10e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e110:	699a      	ldr	r2, [r3, #24]
 800e112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e114:	18d1      	adds	r1, r2, r3
 800e116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e118:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e11a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e11c:	f7ff ff04 	bl	800df28 <prvInsertTimerInActiveList>
					break;
 800e120:	e017      	b.n	800e152 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e124:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e128:	f003 0302 	and.w	r3, r3, #2
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d103      	bne.n	800e138 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800e130:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e132:	f000 fbef 	bl	800e914 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e136:	e00c      	b.n	800e152 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e13a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e13e:	f023 0301 	bic.w	r3, r3, #1
 800e142:	b2da      	uxtb	r2, r3
 800e144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e146:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e14a:	e002      	b.n	800e152 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800e14c:	bf00      	nop
 800e14e:	e000      	b.n	800e152 <prvProcessReceivedCommands+0x1a6>
					break;
 800e150:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e152:	4b08      	ldr	r3, [pc, #32]	@ (800e174 <prvProcessReceivedCommands+0x1c8>)
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	1d39      	adds	r1, r7, #4
 800e158:	2200      	movs	r2, #0
 800e15a:	4618      	mov	r0, r3
 800e15c:	f7fe f8d2 	bl	800c304 <xQueueReceive>
 800e160:	4603      	mov	r3, r0
 800e162:	2b00      	cmp	r3, #0
 800e164:	f47f af26 	bne.w	800dfb4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800e168:	bf00      	nop
 800e16a:	bf00      	nop
 800e16c:	3730      	adds	r7, #48	@ 0x30
 800e16e:	46bd      	mov	sp, r7
 800e170:	bd80      	pop	{r7, pc}
 800e172:	bf00      	nop
 800e174:	200023c0 	.word	0x200023c0

0800e178 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e178:	b580      	push	{r7, lr}
 800e17a:	b088      	sub	sp, #32
 800e17c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e17e:	e049      	b.n	800e214 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e180:	4b2e      	ldr	r3, [pc, #184]	@ (800e23c <prvSwitchTimerLists+0xc4>)
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	68db      	ldr	r3, [r3, #12]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e18a:	4b2c      	ldr	r3, [pc, #176]	@ (800e23c <prvSwitchTimerLists+0xc4>)
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	68db      	ldr	r3, [r3, #12]
 800e190:	68db      	ldr	r3, [r3, #12]
 800e192:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	3304      	adds	r3, #4
 800e198:	4618      	mov	r0, r3
 800e19a:	f7fd fca5 	bl	800bae8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	6a1b      	ldr	r3, [r3, #32]
 800e1a2:	68f8      	ldr	r0, [r7, #12]
 800e1a4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e1ac:	f003 0304 	and.w	r3, r3, #4
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d02f      	beq.n	800e214 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	699b      	ldr	r3, [r3, #24]
 800e1b8:	693a      	ldr	r2, [r7, #16]
 800e1ba:	4413      	add	r3, r2
 800e1bc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e1be:	68ba      	ldr	r2, [r7, #8]
 800e1c0:	693b      	ldr	r3, [r7, #16]
 800e1c2:	429a      	cmp	r2, r3
 800e1c4:	d90e      	bls.n	800e1e4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	68ba      	ldr	r2, [r7, #8]
 800e1ca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	68fa      	ldr	r2, [r7, #12]
 800e1d0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e1d2:	4b1a      	ldr	r3, [pc, #104]	@ (800e23c <prvSwitchTimerLists+0xc4>)
 800e1d4:	681a      	ldr	r2, [r3, #0]
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	3304      	adds	r3, #4
 800e1da:	4619      	mov	r1, r3
 800e1dc:	4610      	mov	r0, r2
 800e1de:	f7fd fc4a 	bl	800ba76 <vListInsert>
 800e1e2:	e017      	b.n	800e214 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	9300      	str	r3, [sp, #0]
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	693a      	ldr	r2, [r7, #16]
 800e1ec:	2100      	movs	r1, #0
 800e1ee:	68f8      	ldr	r0, [r7, #12]
 800e1f0:	f7ff fd58 	bl	800dca4 <xTimerGenericCommand>
 800e1f4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d10b      	bne.n	800e214 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800e1fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e200:	f383 8811 	msr	BASEPRI, r3
 800e204:	f3bf 8f6f 	isb	sy
 800e208:	f3bf 8f4f 	dsb	sy
 800e20c:	603b      	str	r3, [r7, #0]
}
 800e20e:	bf00      	nop
 800e210:	bf00      	nop
 800e212:	e7fd      	b.n	800e210 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e214:	4b09      	ldr	r3, [pc, #36]	@ (800e23c <prvSwitchTimerLists+0xc4>)
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d1b0      	bne.n	800e180 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e21e:	4b07      	ldr	r3, [pc, #28]	@ (800e23c <prvSwitchTimerLists+0xc4>)
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e224:	4b06      	ldr	r3, [pc, #24]	@ (800e240 <prvSwitchTimerLists+0xc8>)
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	4a04      	ldr	r2, [pc, #16]	@ (800e23c <prvSwitchTimerLists+0xc4>)
 800e22a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e22c:	4a04      	ldr	r2, [pc, #16]	@ (800e240 <prvSwitchTimerLists+0xc8>)
 800e22e:	697b      	ldr	r3, [r7, #20]
 800e230:	6013      	str	r3, [r2, #0]
}
 800e232:	bf00      	nop
 800e234:	3718      	adds	r7, #24
 800e236:	46bd      	mov	sp, r7
 800e238:	bd80      	pop	{r7, pc}
 800e23a:	bf00      	nop
 800e23c:	200023b8 	.word	0x200023b8
 800e240:	200023bc 	.word	0x200023bc

0800e244 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e244:	b580      	push	{r7, lr}
 800e246:	b082      	sub	sp, #8
 800e248:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e24a:	f000 f96d 	bl	800e528 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e24e:	4b15      	ldr	r3, [pc, #84]	@ (800e2a4 <prvCheckForValidListAndQueue+0x60>)
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d120      	bne.n	800e298 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e256:	4814      	ldr	r0, [pc, #80]	@ (800e2a8 <prvCheckForValidListAndQueue+0x64>)
 800e258:	f7fd fbbc 	bl	800b9d4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e25c:	4813      	ldr	r0, [pc, #76]	@ (800e2ac <prvCheckForValidListAndQueue+0x68>)
 800e25e:	f7fd fbb9 	bl	800b9d4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e262:	4b13      	ldr	r3, [pc, #76]	@ (800e2b0 <prvCheckForValidListAndQueue+0x6c>)
 800e264:	4a10      	ldr	r2, [pc, #64]	@ (800e2a8 <prvCheckForValidListAndQueue+0x64>)
 800e266:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e268:	4b12      	ldr	r3, [pc, #72]	@ (800e2b4 <prvCheckForValidListAndQueue+0x70>)
 800e26a:	4a10      	ldr	r2, [pc, #64]	@ (800e2ac <prvCheckForValidListAndQueue+0x68>)
 800e26c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e26e:	2300      	movs	r3, #0
 800e270:	9300      	str	r3, [sp, #0]
 800e272:	4b11      	ldr	r3, [pc, #68]	@ (800e2b8 <prvCheckForValidListAndQueue+0x74>)
 800e274:	4a11      	ldr	r2, [pc, #68]	@ (800e2bc <prvCheckForValidListAndQueue+0x78>)
 800e276:	2110      	movs	r1, #16
 800e278:	200a      	movs	r0, #10
 800e27a:	f7fd fcc9 	bl	800bc10 <xQueueGenericCreateStatic>
 800e27e:	4603      	mov	r3, r0
 800e280:	4a08      	ldr	r2, [pc, #32]	@ (800e2a4 <prvCheckForValidListAndQueue+0x60>)
 800e282:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e284:	4b07      	ldr	r3, [pc, #28]	@ (800e2a4 <prvCheckForValidListAndQueue+0x60>)
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d005      	beq.n	800e298 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e28c:	4b05      	ldr	r3, [pc, #20]	@ (800e2a4 <prvCheckForValidListAndQueue+0x60>)
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	490b      	ldr	r1, [pc, #44]	@ (800e2c0 <prvCheckForValidListAndQueue+0x7c>)
 800e292:	4618      	mov	r0, r3
 800e294:	f7fe fbf6 	bl	800ca84 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e298:	f000 f978 	bl	800e58c <vPortExitCritical>
}
 800e29c:	bf00      	nop
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	bd80      	pop	{r7, pc}
 800e2a2:	bf00      	nop
 800e2a4:	200023c0 	.word	0x200023c0
 800e2a8:	20002390 	.word	0x20002390
 800e2ac:	200023a4 	.word	0x200023a4
 800e2b0:	200023b8 	.word	0x200023b8
 800e2b4:	200023bc 	.word	0x200023bc
 800e2b8:	2000246c 	.word	0x2000246c
 800e2bc:	200023cc 	.word	0x200023cc
 800e2c0:	08010948 	.word	0x08010948

0800e2c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e2c4:	b480      	push	{r7}
 800e2c6:	b085      	sub	sp, #20
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	60f8      	str	r0, [r7, #12]
 800e2cc:	60b9      	str	r1, [r7, #8]
 800e2ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	3b04      	subs	r3, #4
 800e2d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800e2dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	3b04      	subs	r3, #4
 800e2e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e2e4:	68bb      	ldr	r3, [r7, #8]
 800e2e6:	f023 0201 	bic.w	r2, r3, #1
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	3b04      	subs	r3, #4
 800e2f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e2f4:	4a0c      	ldr	r2, [pc, #48]	@ (800e328 <pxPortInitialiseStack+0x64>)
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	3b14      	subs	r3, #20
 800e2fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e300:	687a      	ldr	r2, [r7, #4]
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	3b04      	subs	r3, #4
 800e30a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	f06f 0202 	mvn.w	r2, #2
 800e312:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	3b20      	subs	r3, #32
 800e318:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e31a:	68fb      	ldr	r3, [r7, #12]
}
 800e31c:	4618      	mov	r0, r3
 800e31e:	3714      	adds	r7, #20
 800e320:	46bd      	mov	sp, r7
 800e322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e326:	4770      	bx	lr
 800e328:	0800e32d 	.word	0x0800e32d

0800e32c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e32c:	b480      	push	{r7}
 800e32e:	b085      	sub	sp, #20
 800e330:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e332:	2300      	movs	r3, #0
 800e334:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e336:	4b13      	ldr	r3, [pc, #76]	@ (800e384 <prvTaskExitError+0x58>)
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e33e:	d00b      	beq.n	800e358 <prvTaskExitError+0x2c>
	__asm volatile
 800e340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e344:	f383 8811 	msr	BASEPRI, r3
 800e348:	f3bf 8f6f 	isb	sy
 800e34c:	f3bf 8f4f 	dsb	sy
 800e350:	60fb      	str	r3, [r7, #12]
}
 800e352:	bf00      	nop
 800e354:	bf00      	nop
 800e356:	e7fd      	b.n	800e354 <prvTaskExitError+0x28>
	__asm volatile
 800e358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e35c:	f383 8811 	msr	BASEPRI, r3
 800e360:	f3bf 8f6f 	isb	sy
 800e364:	f3bf 8f4f 	dsb	sy
 800e368:	60bb      	str	r3, [r7, #8]
}
 800e36a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e36c:	bf00      	nop
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d0fc      	beq.n	800e36e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e374:	bf00      	nop
 800e376:	bf00      	nop
 800e378:	3714      	adds	r7, #20
 800e37a:	46bd      	mov	sp, r7
 800e37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e380:	4770      	bx	lr
 800e382:	bf00      	nop
 800e384:	2000000c 	.word	0x2000000c
	...

0800e390 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e390:	4b07      	ldr	r3, [pc, #28]	@ (800e3b0 <pxCurrentTCBConst2>)
 800e392:	6819      	ldr	r1, [r3, #0]
 800e394:	6808      	ldr	r0, [r1, #0]
 800e396:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e39a:	f380 8809 	msr	PSP, r0
 800e39e:	f3bf 8f6f 	isb	sy
 800e3a2:	f04f 0000 	mov.w	r0, #0
 800e3a6:	f380 8811 	msr	BASEPRI, r0
 800e3aa:	4770      	bx	lr
 800e3ac:	f3af 8000 	nop.w

0800e3b0 <pxCurrentTCBConst2>:
 800e3b0:	20001e90 	.word	0x20001e90
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e3b4:	bf00      	nop
 800e3b6:	bf00      	nop

0800e3b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e3b8:	4808      	ldr	r0, [pc, #32]	@ (800e3dc <prvPortStartFirstTask+0x24>)
 800e3ba:	6800      	ldr	r0, [r0, #0]
 800e3bc:	6800      	ldr	r0, [r0, #0]
 800e3be:	f380 8808 	msr	MSP, r0
 800e3c2:	f04f 0000 	mov.w	r0, #0
 800e3c6:	f380 8814 	msr	CONTROL, r0
 800e3ca:	b662      	cpsie	i
 800e3cc:	b661      	cpsie	f
 800e3ce:	f3bf 8f4f 	dsb	sy
 800e3d2:	f3bf 8f6f 	isb	sy
 800e3d6:	df00      	svc	0
 800e3d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e3da:	bf00      	nop
 800e3dc:	e000ed08 	.word	0xe000ed08

0800e3e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b086      	sub	sp, #24
 800e3e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e3e6:	4b47      	ldr	r3, [pc, #284]	@ (800e504 <xPortStartScheduler+0x124>)
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	4a47      	ldr	r2, [pc, #284]	@ (800e508 <xPortStartScheduler+0x128>)
 800e3ec:	4293      	cmp	r3, r2
 800e3ee:	d10b      	bne.n	800e408 <xPortStartScheduler+0x28>
	__asm volatile
 800e3f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3f4:	f383 8811 	msr	BASEPRI, r3
 800e3f8:	f3bf 8f6f 	isb	sy
 800e3fc:	f3bf 8f4f 	dsb	sy
 800e400:	613b      	str	r3, [r7, #16]
}
 800e402:	bf00      	nop
 800e404:	bf00      	nop
 800e406:	e7fd      	b.n	800e404 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e408:	4b3e      	ldr	r3, [pc, #248]	@ (800e504 <xPortStartScheduler+0x124>)
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	4a3f      	ldr	r2, [pc, #252]	@ (800e50c <xPortStartScheduler+0x12c>)
 800e40e:	4293      	cmp	r3, r2
 800e410:	d10b      	bne.n	800e42a <xPortStartScheduler+0x4a>
	__asm volatile
 800e412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e416:	f383 8811 	msr	BASEPRI, r3
 800e41a:	f3bf 8f6f 	isb	sy
 800e41e:	f3bf 8f4f 	dsb	sy
 800e422:	60fb      	str	r3, [r7, #12]
}
 800e424:	bf00      	nop
 800e426:	bf00      	nop
 800e428:	e7fd      	b.n	800e426 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e42a:	4b39      	ldr	r3, [pc, #228]	@ (800e510 <xPortStartScheduler+0x130>)
 800e42c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e42e:	697b      	ldr	r3, [r7, #20]
 800e430:	781b      	ldrb	r3, [r3, #0]
 800e432:	b2db      	uxtb	r3, r3
 800e434:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e436:	697b      	ldr	r3, [r7, #20]
 800e438:	22ff      	movs	r2, #255	@ 0xff
 800e43a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e43c:	697b      	ldr	r3, [r7, #20]
 800e43e:	781b      	ldrb	r3, [r3, #0]
 800e440:	b2db      	uxtb	r3, r3
 800e442:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e444:	78fb      	ldrb	r3, [r7, #3]
 800e446:	b2db      	uxtb	r3, r3
 800e448:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e44c:	b2da      	uxtb	r2, r3
 800e44e:	4b31      	ldr	r3, [pc, #196]	@ (800e514 <xPortStartScheduler+0x134>)
 800e450:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e452:	4b31      	ldr	r3, [pc, #196]	@ (800e518 <xPortStartScheduler+0x138>)
 800e454:	2207      	movs	r2, #7
 800e456:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e458:	e009      	b.n	800e46e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800e45a:	4b2f      	ldr	r3, [pc, #188]	@ (800e518 <xPortStartScheduler+0x138>)
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	3b01      	subs	r3, #1
 800e460:	4a2d      	ldr	r2, [pc, #180]	@ (800e518 <xPortStartScheduler+0x138>)
 800e462:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e464:	78fb      	ldrb	r3, [r7, #3]
 800e466:	b2db      	uxtb	r3, r3
 800e468:	005b      	lsls	r3, r3, #1
 800e46a:	b2db      	uxtb	r3, r3
 800e46c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e46e:	78fb      	ldrb	r3, [r7, #3]
 800e470:	b2db      	uxtb	r3, r3
 800e472:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e476:	2b80      	cmp	r3, #128	@ 0x80
 800e478:	d0ef      	beq.n	800e45a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e47a:	4b27      	ldr	r3, [pc, #156]	@ (800e518 <xPortStartScheduler+0x138>)
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	f1c3 0307 	rsb	r3, r3, #7
 800e482:	2b04      	cmp	r3, #4
 800e484:	d00b      	beq.n	800e49e <xPortStartScheduler+0xbe>
	__asm volatile
 800e486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e48a:	f383 8811 	msr	BASEPRI, r3
 800e48e:	f3bf 8f6f 	isb	sy
 800e492:	f3bf 8f4f 	dsb	sy
 800e496:	60bb      	str	r3, [r7, #8]
}
 800e498:	bf00      	nop
 800e49a:	bf00      	nop
 800e49c:	e7fd      	b.n	800e49a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e49e:	4b1e      	ldr	r3, [pc, #120]	@ (800e518 <xPortStartScheduler+0x138>)
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	021b      	lsls	r3, r3, #8
 800e4a4:	4a1c      	ldr	r2, [pc, #112]	@ (800e518 <xPortStartScheduler+0x138>)
 800e4a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e4a8:	4b1b      	ldr	r3, [pc, #108]	@ (800e518 <xPortStartScheduler+0x138>)
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e4b0:	4a19      	ldr	r2, [pc, #100]	@ (800e518 <xPortStartScheduler+0x138>)
 800e4b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	b2da      	uxtb	r2, r3
 800e4b8:	697b      	ldr	r3, [r7, #20]
 800e4ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e4bc:	4b17      	ldr	r3, [pc, #92]	@ (800e51c <xPortStartScheduler+0x13c>)
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	4a16      	ldr	r2, [pc, #88]	@ (800e51c <xPortStartScheduler+0x13c>)
 800e4c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e4c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e4c8:	4b14      	ldr	r3, [pc, #80]	@ (800e51c <xPortStartScheduler+0x13c>)
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	4a13      	ldr	r2, [pc, #76]	@ (800e51c <xPortStartScheduler+0x13c>)
 800e4ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e4d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e4d4:	f000 f8da 	bl	800e68c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e4d8:	4b11      	ldr	r3, [pc, #68]	@ (800e520 <xPortStartScheduler+0x140>)
 800e4da:	2200      	movs	r2, #0
 800e4dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e4de:	f000 f8f9 	bl	800e6d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e4e2:	4b10      	ldr	r3, [pc, #64]	@ (800e524 <xPortStartScheduler+0x144>)
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	4a0f      	ldr	r2, [pc, #60]	@ (800e524 <xPortStartScheduler+0x144>)
 800e4e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e4ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e4ee:	f7ff ff63 	bl	800e3b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e4f2:	f7fe ff07 	bl	800d304 <vTaskSwitchContext>
	prvTaskExitError();
 800e4f6:	f7ff ff19 	bl	800e32c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e4fa:	2300      	movs	r3, #0
}
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	3718      	adds	r7, #24
 800e500:	46bd      	mov	sp, r7
 800e502:	bd80      	pop	{r7, pc}
 800e504:	e000ed00 	.word	0xe000ed00
 800e508:	410fc271 	.word	0x410fc271
 800e50c:	410fc270 	.word	0x410fc270
 800e510:	e000e400 	.word	0xe000e400
 800e514:	200024bc 	.word	0x200024bc
 800e518:	200024c0 	.word	0x200024c0
 800e51c:	e000ed20 	.word	0xe000ed20
 800e520:	2000000c 	.word	0x2000000c
 800e524:	e000ef34 	.word	0xe000ef34

0800e528 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e528:	b480      	push	{r7}
 800e52a:	b083      	sub	sp, #12
 800e52c:	af00      	add	r7, sp, #0
	__asm volatile
 800e52e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e532:	f383 8811 	msr	BASEPRI, r3
 800e536:	f3bf 8f6f 	isb	sy
 800e53a:	f3bf 8f4f 	dsb	sy
 800e53e:	607b      	str	r3, [r7, #4]
}
 800e540:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e542:	4b10      	ldr	r3, [pc, #64]	@ (800e584 <vPortEnterCritical+0x5c>)
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	3301      	adds	r3, #1
 800e548:	4a0e      	ldr	r2, [pc, #56]	@ (800e584 <vPortEnterCritical+0x5c>)
 800e54a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e54c:	4b0d      	ldr	r3, [pc, #52]	@ (800e584 <vPortEnterCritical+0x5c>)
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	2b01      	cmp	r3, #1
 800e552:	d110      	bne.n	800e576 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e554:	4b0c      	ldr	r3, [pc, #48]	@ (800e588 <vPortEnterCritical+0x60>)
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	b2db      	uxtb	r3, r3
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d00b      	beq.n	800e576 <vPortEnterCritical+0x4e>
	__asm volatile
 800e55e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e562:	f383 8811 	msr	BASEPRI, r3
 800e566:	f3bf 8f6f 	isb	sy
 800e56a:	f3bf 8f4f 	dsb	sy
 800e56e:	603b      	str	r3, [r7, #0]
}
 800e570:	bf00      	nop
 800e572:	bf00      	nop
 800e574:	e7fd      	b.n	800e572 <vPortEnterCritical+0x4a>
	}
}
 800e576:	bf00      	nop
 800e578:	370c      	adds	r7, #12
 800e57a:	46bd      	mov	sp, r7
 800e57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e580:	4770      	bx	lr
 800e582:	bf00      	nop
 800e584:	2000000c 	.word	0x2000000c
 800e588:	e000ed04 	.word	0xe000ed04

0800e58c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e58c:	b480      	push	{r7}
 800e58e:	b083      	sub	sp, #12
 800e590:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e592:	4b12      	ldr	r3, [pc, #72]	@ (800e5dc <vPortExitCritical+0x50>)
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d10b      	bne.n	800e5b2 <vPortExitCritical+0x26>
	__asm volatile
 800e59a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e59e:	f383 8811 	msr	BASEPRI, r3
 800e5a2:	f3bf 8f6f 	isb	sy
 800e5a6:	f3bf 8f4f 	dsb	sy
 800e5aa:	607b      	str	r3, [r7, #4]
}
 800e5ac:	bf00      	nop
 800e5ae:	bf00      	nop
 800e5b0:	e7fd      	b.n	800e5ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e5b2:	4b0a      	ldr	r3, [pc, #40]	@ (800e5dc <vPortExitCritical+0x50>)
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	3b01      	subs	r3, #1
 800e5b8:	4a08      	ldr	r2, [pc, #32]	@ (800e5dc <vPortExitCritical+0x50>)
 800e5ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e5bc:	4b07      	ldr	r3, [pc, #28]	@ (800e5dc <vPortExitCritical+0x50>)
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d105      	bne.n	800e5d0 <vPortExitCritical+0x44>
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e5c8:	683b      	ldr	r3, [r7, #0]
 800e5ca:	f383 8811 	msr	BASEPRI, r3
}
 800e5ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e5d0:	bf00      	nop
 800e5d2:	370c      	adds	r7, #12
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5da:	4770      	bx	lr
 800e5dc:	2000000c 	.word	0x2000000c

0800e5e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e5e0:	f3ef 8009 	mrs	r0, PSP
 800e5e4:	f3bf 8f6f 	isb	sy
 800e5e8:	4b15      	ldr	r3, [pc, #84]	@ (800e640 <pxCurrentTCBConst>)
 800e5ea:	681a      	ldr	r2, [r3, #0]
 800e5ec:	f01e 0f10 	tst.w	lr, #16
 800e5f0:	bf08      	it	eq
 800e5f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e5f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5fa:	6010      	str	r0, [r2, #0]
 800e5fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e600:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e604:	f380 8811 	msr	BASEPRI, r0
 800e608:	f3bf 8f4f 	dsb	sy
 800e60c:	f3bf 8f6f 	isb	sy
 800e610:	f7fe fe78 	bl	800d304 <vTaskSwitchContext>
 800e614:	f04f 0000 	mov.w	r0, #0
 800e618:	f380 8811 	msr	BASEPRI, r0
 800e61c:	bc09      	pop	{r0, r3}
 800e61e:	6819      	ldr	r1, [r3, #0]
 800e620:	6808      	ldr	r0, [r1, #0]
 800e622:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e626:	f01e 0f10 	tst.w	lr, #16
 800e62a:	bf08      	it	eq
 800e62c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e630:	f380 8809 	msr	PSP, r0
 800e634:	f3bf 8f6f 	isb	sy
 800e638:	4770      	bx	lr
 800e63a:	bf00      	nop
 800e63c:	f3af 8000 	nop.w

0800e640 <pxCurrentTCBConst>:
 800e640:	20001e90 	.word	0x20001e90
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e644:	bf00      	nop
 800e646:	bf00      	nop

0800e648 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e648:	b580      	push	{r7, lr}
 800e64a:	b082      	sub	sp, #8
 800e64c:	af00      	add	r7, sp, #0
	__asm volatile
 800e64e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e652:	f383 8811 	msr	BASEPRI, r3
 800e656:	f3bf 8f6f 	isb	sy
 800e65a:	f3bf 8f4f 	dsb	sy
 800e65e:	607b      	str	r3, [r7, #4]
}
 800e660:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e662:	f7fe fd95 	bl	800d190 <xTaskIncrementTick>
 800e666:	4603      	mov	r3, r0
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d003      	beq.n	800e674 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e66c:	4b06      	ldr	r3, [pc, #24]	@ (800e688 <xPortSysTickHandler+0x40>)
 800e66e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e672:	601a      	str	r2, [r3, #0]
 800e674:	2300      	movs	r3, #0
 800e676:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e678:	683b      	ldr	r3, [r7, #0]
 800e67a:	f383 8811 	msr	BASEPRI, r3
}
 800e67e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e680:	bf00      	nop
 800e682:	3708      	adds	r7, #8
 800e684:	46bd      	mov	sp, r7
 800e686:	bd80      	pop	{r7, pc}
 800e688:	e000ed04 	.word	0xe000ed04

0800e68c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e68c:	b480      	push	{r7}
 800e68e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e690:	4b0b      	ldr	r3, [pc, #44]	@ (800e6c0 <vPortSetupTimerInterrupt+0x34>)
 800e692:	2200      	movs	r2, #0
 800e694:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e696:	4b0b      	ldr	r3, [pc, #44]	@ (800e6c4 <vPortSetupTimerInterrupt+0x38>)
 800e698:	2200      	movs	r2, #0
 800e69a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e69c:	4b0a      	ldr	r3, [pc, #40]	@ (800e6c8 <vPortSetupTimerInterrupt+0x3c>)
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	4a0a      	ldr	r2, [pc, #40]	@ (800e6cc <vPortSetupTimerInterrupt+0x40>)
 800e6a2:	fba2 2303 	umull	r2, r3, r2, r3
 800e6a6:	099b      	lsrs	r3, r3, #6
 800e6a8:	4a09      	ldr	r2, [pc, #36]	@ (800e6d0 <vPortSetupTimerInterrupt+0x44>)
 800e6aa:	3b01      	subs	r3, #1
 800e6ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e6ae:	4b04      	ldr	r3, [pc, #16]	@ (800e6c0 <vPortSetupTimerInterrupt+0x34>)
 800e6b0:	2207      	movs	r2, #7
 800e6b2:	601a      	str	r2, [r3, #0]
}
 800e6b4:	bf00      	nop
 800e6b6:	46bd      	mov	sp, r7
 800e6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6bc:	4770      	bx	lr
 800e6be:	bf00      	nop
 800e6c0:	e000e010 	.word	0xe000e010
 800e6c4:	e000e018 	.word	0xe000e018
 800e6c8:	20000000 	.word	0x20000000
 800e6cc:	10624dd3 	.word	0x10624dd3
 800e6d0:	e000e014 	.word	0xe000e014

0800e6d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e6d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e6e4 <vPortEnableVFP+0x10>
 800e6d8:	6801      	ldr	r1, [r0, #0]
 800e6da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e6de:	6001      	str	r1, [r0, #0]
 800e6e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e6e2:	bf00      	nop
 800e6e4:	e000ed88 	.word	0xe000ed88

0800e6e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e6e8:	b480      	push	{r7}
 800e6ea:	b085      	sub	sp, #20
 800e6ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e6ee:	f3ef 8305 	mrs	r3, IPSR
 800e6f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	2b0f      	cmp	r3, #15
 800e6f8:	d915      	bls.n	800e726 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e6fa:	4a18      	ldr	r2, [pc, #96]	@ (800e75c <vPortValidateInterruptPriority+0x74>)
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	4413      	add	r3, r2
 800e700:	781b      	ldrb	r3, [r3, #0]
 800e702:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e704:	4b16      	ldr	r3, [pc, #88]	@ (800e760 <vPortValidateInterruptPriority+0x78>)
 800e706:	781b      	ldrb	r3, [r3, #0]
 800e708:	7afa      	ldrb	r2, [r7, #11]
 800e70a:	429a      	cmp	r2, r3
 800e70c:	d20b      	bcs.n	800e726 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e70e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e712:	f383 8811 	msr	BASEPRI, r3
 800e716:	f3bf 8f6f 	isb	sy
 800e71a:	f3bf 8f4f 	dsb	sy
 800e71e:	607b      	str	r3, [r7, #4]
}
 800e720:	bf00      	nop
 800e722:	bf00      	nop
 800e724:	e7fd      	b.n	800e722 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e726:	4b0f      	ldr	r3, [pc, #60]	@ (800e764 <vPortValidateInterruptPriority+0x7c>)
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800e72e:	4b0e      	ldr	r3, [pc, #56]	@ (800e768 <vPortValidateInterruptPriority+0x80>)
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	429a      	cmp	r2, r3
 800e734:	d90b      	bls.n	800e74e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800e736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e73a:	f383 8811 	msr	BASEPRI, r3
 800e73e:	f3bf 8f6f 	isb	sy
 800e742:	f3bf 8f4f 	dsb	sy
 800e746:	603b      	str	r3, [r7, #0]
}
 800e748:	bf00      	nop
 800e74a:	bf00      	nop
 800e74c:	e7fd      	b.n	800e74a <vPortValidateInterruptPriority+0x62>
	}
 800e74e:	bf00      	nop
 800e750:	3714      	adds	r7, #20
 800e752:	46bd      	mov	sp, r7
 800e754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e758:	4770      	bx	lr
 800e75a:	bf00      	nop
 800e75c:	e000e3f0 	.word	0xe000e3f0
 800e760:	200024bc 	.word	0x200024bc
 800e764:	e000ed0c 	.word	0xe000ed0c
 800e768:	200024c0 	.word	0x200024c0

0800e76c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e76c:	b580      	push	{r7, lr}
 800e76e:	b08a      	sub	sp, #40	@ 0x28
 800e770:	af00      	add	r7, sp, #0
 800e772:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e774:	2300      	movs	r3, #0
 800e776:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e778:	f7fe fc3c 	bl	800cff4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e77c:	4b5f      	ldr	r3, [pc, #380]	@ (800e8fc <pvPortMalloc+0x190>)
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d101      	bne.n	800e788 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e784:	f000 f92a 	bl	800e9dc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e788:	4b5d      	ldr	r3, [pc, #372]	@ (800e900 <pvPortMalloc+0x194>)
 800e78a:	681a      	ldr	r2, [r3, #0]
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	4013      	ands	r3, r2
 800e790:	2b00      	cmp	r3, #0
 800e792:	f040 8095 	bne.w	800e8c0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d01e      	beq.n	800e7da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e79c:	2208      	movs	r2, #8
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	4413      	add	r3, r2
 800e7a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	f003 0307 	and.w	r3, r3, #7
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d015      	beq.n	800e7da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	f023 0307 	bic.w	r3, r3, #7
 800e7b4:	3308      	adds	r3, #8
 800e7b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	f003 0307 	and.w	r3, r3, #7
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d00b      	beq.n	800e7da <pvPortMalloc+0x6e>
	__asm volatile
 800e7c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7c6:	f383 8811 	msr	BASEPRI, r3
 800e7ca:	f3bf 8f6f 	isb	sy
 800e7ce:	f3bf 8f4f 	dsb	sy
 800e7d2:	617b      	str	r3, [r7, #20]
}
 800e7d4:	bf00      	nop
 800e7d6:	bf00      	nop
 800e7d8:	e7fd      	b.n	800e7d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d06f      	beq.n	800e8c0 <pvPortMalloc+0x154>
 800e7e0:	4b48      	ldr	r3, [pc, #288]	@ (800e904 <pvPortMalloc+0x198>)
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	687a      	ldr	r2, [r7, #4]
 800e7e6:	429a      	cmp	r2, r3
 800e7e8:	d86a      	bhi.n	800e8c0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e7ea:	4b47      	ldr	r3, [pc, #284]	@ (800e908 <pvPortMalloc+0x19c>)
 800e7ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e7ee:	4b46      	ldr	r3, [pc, #280]	@ (800e908 <pvPortMalloc+0x19c>)
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e7f4:	e004      	b.n	800e800 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800e7f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e7fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e802:	685b      	ldr	r3, [r3, #4]
 800e804:	687a      	ldr	r2, [r7, #4]
 800e806:	429a      	cmp	r2, r3
 800e808:	d903      	bls.n	800e812 <pvPortMalloc+0xa6>
 800e80a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d1f1      	bne.n	800e7f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e812:	4b3a      	ldr	r3, [pc, #232]	@ (800e8fc <pvPortMalloc+0x190>)
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e818:	429a      	cmp	r2, r3
 800e81a:	d051      	beq.n	800e8c0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e81c:	6a3b      	ldr	r3, [r7, #32]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	2208      	movs	r2, #8
 800e822:	4413      	add	r3, r2
 800e824:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e828:	681a      	ldr	r2, [r3, #0]
 800e82a:	6a3b      	ldr	r3, [r7, #32]
 800e82c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e82e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e830:	685a      	ldr	r2, [r3, #4]
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	1ad2      	subs	r2, r2, r3
 800e836:	2308      	movs	r3, #8
 800e838:	005b      	lsls	r3, r3, #1
 800e83a:	429a      	cmp	r2, r3
 800e83c:	d920      	bls.n	800e880 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e83e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	4413      	add	r3, r2
 800e844:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e846:	69bb      	ldr	r3, [r7, #24]
 800e848:	f003 0307 	and.w	r3, r3, #7
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d00b      	beq.n	800e868 <pvPortMalloc+0xfc>
	__asm volatile
 800e850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e854:	f383 8811 	msr	BASEPRI, r3
 800e858:	f3bf 8f6f 	isb	sy
 800e85c:	f3bf 8f4f 	dsb	sy
 800e860:	613b      	str	r3, [r7, #16]
}
 800e862:	bf00      	nop
 800e864:	bf00      	nop
 800e866:	e7fd      	b.n	800e864 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e86a:	685a      	ldr	r2, [r3, #4]
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	1ad2      	subs	r2, r2, r3
 800e870:	69bb      	ldr	r3, [r7, #24]
 800e872:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e876:	687a      	ldr	r2, [r7, #4]
 800e878:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e87a:	69b8      	ldr	r0, [r7, #24]
 800e87c:	f000 f910 	bl	800eaa0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e880:	4b20      	ldr	r3, [pc, #128]	@ (800e904 <pvPortMalloc+0x198>)
 800e882:	681a      	ldr	r2, [r3, #0]
 800e884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e886:	685b      	ldr	r3, [r3, #4]
 800e888:	1ad3      	subs	r3, r2, r3
 800e88a:	4a1e      	ldr	r2, [pc, #120]	@ (800e904 <pvPortMalloc+0x198>)
 800e88c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e88e:	4b1d      	ldr	r3, [pc, #116]	@ (800e904 <pvPortMalloc+0x198>)
 800e890:	681a      	ldr	r2, [r3, #0]
 800e892:	4b1e      	ldr	r3, [pc, #120]	@ (800e90c <pvPortMalloc+0x1a0>)
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	429a      	cmp	r2, r3
 800e898:	d203      	bcs.n	800e8a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e89a:	4b1a      	ldr	r3, [pc, #104]	@ (800e904 <pvPortMalloc+0x198>)
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	4a1b      	ldr	r2, [pc, #108]	@ (800e90c <pvPortMalloc+0x1a0>)
 800e8a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e8a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8a4:	685a      	ldr	r2, [r3, #4]
 800e8a6:	4b16      	ldr	r3, [pc, #88]	@ (800e900 <pvPortMalloc+0x194>)
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	431a      	orrs	r2, r3
 800e8ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e8b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e8b6:	4b16      	ldr	r3, [pc, #88]	@ (800e910 <pvPortMalloc+0x1a4>)
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	3301      	adds	r3, #1
 800e8bc:	4a14      	ldr	r2, [pc, #80]	@ (800e910 <pvPortMalloc+0x1a4>)
 800e8be:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e8c0:	f7fe fba6 	bl	800d010 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800e8c4:	69fb      	ldr	r3, [r7, #28]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d101      	bne.n	800e8ce <pvPortMalloc+0x162>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800e8ca:	f7f2 f959 	bl	8000b80 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e8ce:	69fb      	ldr	r3, [r7, #28]
 800e8d0:	f003 0307 	and.w	r3, r3, #7
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d00b      	beq.n	800e8f0 <pvPortMalloc+0x184>
	__asm volatile
 800e8d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8dc:	f383 8811 	msr	BASEPRI, r3
 800e8e0:	f3bf 8f6f 	isb	sy
 800e8e4:	f3bf 8f4f 	dsb	sy
 800e8e8:	60fb      	str	r3, [r7, #12]
}
 800e8ea:	bf00      	nop
 800e8ec:	bf00      	nop
 800e8ee:	e7fd      	b.n	800e8ec <pvPortMalloc+0x180>
	return pvReturn;
 800e8f0:	69fb      	ldr	r3, [r7, #28]
}
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	3728      	adds	r7, #40	@ 0x28
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	bd80      	pop	{r7, pc}
 800e8fa:	bf00      	nop
 800e8fc:	2000a4cc 	.word	0x2000a4cc
 800e900:	2000a4e0 	.word	0x2000a4e0
 800e904:	2000a4d0 	.word	0x2000a4d0
 800e908:	2000a4c4 	.word	0x2000a4c4
 800e90c:	2000a4d4 	.word	0x2000a4d4
 800e910:	2000a4d8 	.word	0x2000a4d8

0800e914 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e914:	b580      	push	{r7, lr}
 800e916:	b086      	sub	sp, #24
 800e918:	af00      	add	r7, sp, #0
 800e91a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	2b00      	cmp	r3, #0
 800e924:	d04f      	beq.n	800e9c6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e926:	2308      	movs	r3, #8
 800e928:	425b      	negs	r3, r3
 800e92a:	697a      	ldr	r2, [r7, #20]
 800e92c:	4413      	add	r3, r2
 800e92e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e930:	697b      	ldr	r3, [r7, #20]
 800e932:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e934:	693b      	ldr	r3, [r7, #16]
 800e936:	685a      	ldr	r2, [r3, #4]
 800e938:	4b25      	ldr	r3, [pc, #148]	@ (800e9d0 <vPortFree+0xbc>)
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	4013      	ands	r3, r2
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d10b      	bne.n	800e95a <vPortFree+0x46>
	__asm volatile
 800e942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e946:	f383 8811 	msr	BASEPRI, r3
 800e94a:	f3bf 8f6f 	isb	sy
 800e94e:	f3bf 8f4f 	dsb	sy
 800e952:	60fb      	str	r3, [r7, #12]
}
 800e954:	bf00      	nop
 800e956:	bf00      	nop
 800e958:	e7fd      	b.n	800e956 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e95a:	693b      	ldr	r3, [r7, #16]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d00b      	beq.n	800e97a <vPortFree+0x66>
	__asm volatile
 800e962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e966:	f383 8811 	msr	BASEPRI, r3
 800e96a:	f3bf 8f6f 	isb	sy
 800e96e:	f3bf 8f4f 	dsb	sy
 800e972:	60bb      	str	r3, [r7, #8]
}
 800e974:	bf00      	nop
 800e976:	bf00      	nop
 800e978:	e7fd      	b.n	800e976 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e97a:	693b      	ldr	r3, [r7, #16]
 800e97c:	685a      	ldr	r2, [r3, #4]
 800e97e:	4b14      	ldr	r3, [pc, #80]	@ (800e9d0 <vPortFree+0xbc>)
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	4013      	ands	r3, r2
 800e984:	2b00      	cmp	r3, #0
 800e986:	d01e      	beq.n	800e9c6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e988:	693b      	ldr	r3, [r7, #16]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d11a      	bne.n	800e9c6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e990:	693b      	ldr	r3, [r7, #16]
 800e992:	685a      	ldr	r2, [r3, #4]
 800e994:	4b0e      	ldr	r3, [pc, #56]	@ (800e9d0 <vPortFree+0xbc>)
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	43db      	mvns	r3, r3
 800e99a:	401a      	ands	r2, r3
 800e99c:	693b      	ldr	r3, [r7, #16]
 800e99e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e9a0:	f7fe fb28 	bl	800cff4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e9a4:	693b      	ldr	r3, [r7, #16]
 800e9a6:	685a      	ldr	r2, [r3, #4]
 800e9a8:	4b0a      	ldr	r3, [pc, #40]	@ (800e9d4 <vPortFree+0xc0>)
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	4413      	add	r3, r2
 800e9ae:	4a09      	ldr	r2, [pc, #36]	@ (800e9d4 <vPortFree+0xc0>)
 800e9b0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e9b2:	6938      	ldr	r0, [r7, #16]
 800e9b4:	f000 f874 	bl	800eaa0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e9b8:	4b07      	ldr	r3, [pc, #28]	@ (800e9d8 <vPortFree+0xc4>)
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	3301      	adds	r3, #1
 800e9be:	4a06      	ldr	r2, [pc, #24]	@ (800e9d8 <vPortFree+0xc4>)
 800e9c0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e9c2:	f7fe fb25 	bl	800d010 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e9c6:	bf00      	nop
 800e9c8:	3718      	adds	r7, #24
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	bd80      	pop	{r7, pc}
 800e9ce:	bf00      	nop
 800e9d0:	2000a4e0 	.word	0x2000a4e0
 800e9d4:	2000a4d0 	.word	0x2000a4d0
 800e9d8:	2000a4dc 	.word	0x2000a4dc

0800e9dc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e9dc:	b480      	push	{r7}
 800e9de:	b085      	sub	sp, #20
 800e9e0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e9e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e9e6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e9e8:	4b27      	ldr	r3, [pc, #156]	@ (800ea88 <prvHeapInit+0xac>)
 800e9ea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	f003 0307 	and.w	r3, r3, #7
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d00c      	beq.n	800ea10 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	3307      	adds	r3, #7
 800e9fa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	f023 0307 	bic.w	r3, r3, #7
 800ea02:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ea04:	68ba      	ldr	r2, [r7, #8]
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	1ad3      	subs	r3, r2, r3
 800ea0a:	4a1f      	ldr	r2, [pc, #124]	@ (800ea88 <prvHeapInit+0xac>)
 800ea0c:	4413      	add	r3, r2
 800ea0e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ea14:	4a1d      	ldr	r2, [pc, #116]	@ (800ea8c <prvHeapInit+0xb0>)
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ea1a:	4b1c      	ldr	r3, [pc, #112]	@ (800ea8c <prvHeapInit+0xb0>)
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	68ba      	ldr	r2, [r7, #8]
 800ea24:	4413      	add	r3, r2
 800ea26:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ea28:	2208      	movs	r2, #8
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	1a9b      	subs	r3, r3, r2
 800ea2e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	f023 0307 	bic.w	r3, r3, #7
 800ea36:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	4a15      	ldr	r2, [pc, #84]	@ (800ea90 <prvHeapInit+0xb4>)
 800ea3c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ea3e:	4b14      	ldr	r3, [pc, #80]	@ (800ea90 <prvHeapInit+0xb4>)
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	2200      	movs	r2, #0
 800ea44:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ea46:	4b12      	ldr	r3, [pc, #72]	@ (800ea90 <prvHeapInit+0xb4>)
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	2200      	movs	r2, #0
 800ea4c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ea52:	683b      	ldr	r3, [r7, #0]
 800ea54:	68fa      	ldr	r2, [r7, #12]
 800ea56:	1ad2      	subs	r2, r2, r3
 800ea58:	683b      	ldr	r3, [r7, #0]
 800ea5a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ea5c:	4b0c      	ldr	r3, [pc, #48]	@ (800ea90 <prvHeapInit+0xb4>)
 800ea5e:	681a      	ldr	r2, [r3, #0]
 800ea60:	683b      	ldr	r3, [r7, #0]
 800ea62:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ea64:	683b      	ldr	r3, [r7, #0]
 800ea66:	685b      	ldr	r3, [r3, #4]
 800ea68:	4a0a      	ldr	r2, [pc, #40]	@ (800ea94 <prvHeapInit+0xb8>)
 800ea6a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ea6c:	683b      	ldr	r3, [r7, #0]
 800ea6e:	685b      	ldr	r3, [r3, #4]
 800ea70:	4a09      	ldr	r2, [pc, #36]	@ (800ea98 <prvHeapInit+0xbc>)
 800ea72:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ea74:	4b09      	ldr	r3, [pc, #36]	@ (800ea9c <prvHeapInit+0xc0>)
 800ea76:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ea7a:	601a      	str	r2, [r3, #0]
}
 800ea7c:	bf00      	nop
 800ea7e:	3714      	adds	r7, #20
 800ea80:	46bd      	mov	sp, r7
 800ea82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea86:	4770      	bx	lr
 800ea88:	200024c4 	.word	0x200024c4
 800ea8c:	2000a4c4 	.word	0x2000a4c4
 800ea90:	2000a4cc 	.word	0x2000a4cc
 800ea94:	2000a4d4 	.word	0x2000a4d4
 800ea98:	2000a4d0 	.word	0x2000a4d0
 800ea9c:	2000a4e0 	.word	0x2000a4e0

0800eaa0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800eaa0:	b480      	push	{r7}
 800eaa2:	b085      	sub	sp, #20
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800eaa8:	4b28      	ldr	r3, [pc, #160]	@ (800eb4c <prvInsertBlockIntoFreeList+0xac>)
 800eaaa:	60fb      	str	r3, [r7, #12]
 800eaac:	e002      	b.n	800eab4 <prvInsertBlockIntoFreeList+0x14>
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	60fb      	str	r3, [r7, #12]
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	687a      	ldr	r2, [r7, #4]
 800eaba:	429a      	cmp	r2, r3
 800eabc:	d8f7      	bhi.n	800eaae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	685b      	ldr	r3, [r3, #4]
 800eac6:	68ba      	ldr	r2, [r7, #8]
 800eac8:	4413      	add	r3, r2
 800eaca:	687a      	ldr	r2, [r7, #4]
 800eacc:	429a      	cmp	r2, r3
 800eace:	d108      	bne.n	800eae2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	685a      	ldr	r2, [r3, #4]
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	685b      	ldr	r3, [r3, #4]
 800ead8:	441a      	add	r2, r3
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	685b      	ldr	r3, [r3, #4]
 800eaea:	68ba      	ldr	r2, [r7, #8]
 800eaec:	441a      	add	r2, r3
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	429a      	cmp	r2, r3
 800eaf4:	d118      	bne.n	800eb28 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	681a      	ldr	r2, [r3, #0]
 800eafa:	4b15      	ldr	r3, [pc, #84]	@ (800eb50 <prvInsertBlockIntoFreeList+0xb0>)
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	429a      	cmp	r2, r3
 800eb00:	d00d      	beq.n	800eb1e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	685a      	ldr	r2, [r3, #4]
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	685b      	ldr	r3, [r3, #4]
 800eb0c:	441a      	add	r2, r3
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	681a      	ldr	r2, [r3, #0]
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	601a      	str	r2, [r3, #0]
 800eb1c:	e008      	b.n	800eb30 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800eb1e:	4b0c      	ldr	r3, [pc, #48]	@ (800eb50 <prvInsertBlockIntoFreeList+0xb0>)
 800eb20:	681a      	ldr	r2, [r3, #0]
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	601a      	str	r2, [r3, #0]
 800eb26:	e003      	b.n	800eb30 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	681a      	ldr	r2, [r3, #0]
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800eb30:	68fa      	ldr	r2, [r7, #12]
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	429a      	cmp	r2, r3
 800eb36:	d002      	beq.n	800eb3e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	687a      	ldr	r2, [r7, #4]
 800eb3c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eb3e:	bf00      	nop
 800eb40:	3714      	adds	r7, #20
 800eb42:	46bd      	mov	sp, r7
 800eb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb48:	4770      	bx	lr
 800eb4a:	bf00      	nop
 800eb4c:	2000a4c4 	.word	0x2000a4c4
 800eb50:	2000a4cc 	.word	0x2000a4cc

0800eb54 <arm_rfft_32_fast_init_f32>:
 800eb54:	b150      	cbz	r0, 800eb6c <arm_rfft_32_fast_init_f32+0x18>
 800eb56:	b510      	push	{r4, lr}
 800eb58:	2110      	movs	r1, #16
 800eb5a:	4604      	mov	r4, r0
 800eb5c:	f000 fd58 	bl	800f610 <arm_cfft_init_f32>
 800eb60:	b918      	cbnz	r0, 800eb6a <arm_rfft_32_fast_init_f32+0x16>
 800eb62:	4b04      	ldr	r3, [pc, #16]	@ (800eb74 <arm_rfft_32_fast_init_f32+0x20>)
 800eb64:	6163      	str	r3, [r4, #20]
 800eb66:	2220      	movs	r2, #32
 800eb68:	8222      	strh	r2, [r4, #16]
 800eb6a:	bd10      	pop	{r4, pc}
 800eb6c:	f04f 30ff 	mov.w	r0, #4294967295
 800eb70:	4770      	bx	lr
 800eb72:	bf00      	nop
 800eb74:	08029464 	.word	0x08029464

0800eb78 <arm_rfft_64_fast_init_f32>:
 800eb78:	b150      	cbz	r0, 800eb90 <arm_rfft_64_fast_init_f32+0x18>
 800eb7a:	b510      	push	{r4, lr}
 800eb7c:	2120      	movs	r1, #32
 800eb7e:	4604      	mov	r4, r0
 800eb80:	f000 fd46 	bl	800f610 <arm_cfft_init_f32>
 800eb84:	b918      	cbnz	r0, 800eb8e <arm_rfft_64_fast_init_f32+0x16>
 800eb86:	4b04      	ldr	r3, [pc, #16]	@ (800eb98 <arm_rfft_64_fast_init_f32+0x20>)
 800eb88:	6163      	str	r3, [r4, #20]
 800eb8a:	2240      	movs	r2, #64	@ 0x40
 800eb8c:	8222      	strh	r2, [r4, #16]
 800eb8e:	bd10      	pop	{r4, pc}
 800eb90:	f04f 30ff 	mov.w	r0, #4294967295
 800eb94:	4770      	bx	lr
 800eb96:	bf00      	nop
 800eb98:	0802dce4 	.word	0x0802dce4

0800eb9c <arm_rfft_128_fast_init_f32>:
 800eb9c:	b150      	cbz	r0, 800ebb4 <arm_rfft_128_fast_init_f32+0x18>
 800eb9e:	b510      	push	{r4, lr}
 800eba0:	2140      	movs	r1, #64	@ 0x40
 800eba2:	4604      	mov	r4, r0
 800eba4:	f000 fd34 	bl	800f610 <arm_cfft_init_f32>
 800eba8:	b918      	cbnz	r0, 800ebb2 <arm_rfft_128_fast_init_f32+0x16>
 800ebaa:	4b04      	ldr	r3, [pc, #16]	@ (800ebbc <arm_rfft_128_fast_init_f32+0x20>)
 800ebac:	6163      	str	r3, [r4, #20]
 800ebae:	2280      	movs	r2, #128	@ 0x80
 800ebb0:	8222      	strh	r2, [r4, #16]
 800ebb2:	bd10      	pop	{r4, pc}
 800ebb4:	f04f 30ff 	mov.w	r0, #4294967295
 800ebb8:	4770      	bx	lr
 800ebba:	bf00      	nop
 800ebbc:	08026e64 	.word	0x08026e64

0800ebc0 <arm_rfft_256_fast_init_f32>:
 800ebc0:	b158      	cbz	r0, 800ebda <arm_rfft_256_fast_init_f32+0x1a>
 800ebc2:	b510      	push	{r4, lr}
 800ebc4:	2180      	movs	r1, #128	@ 0x80
 800ebc6:	4604      	mov	r4, r0
 800ebc8:	f000 fd22 	bl	800f610 <arm_cfft_init_f32>
 800ebcc:	b920      	cbnz	r0, 800ebd8 <arm_rfft_256_fast_init_f32+0x18>
 800ebce:	4b04      	ldr	r3, [pc, #16]	@ (800ebe0 <arm_rfft_256_fast_init_f32+0x20>)
 800ebd0:	6163      	str	r3, [r4, #20]
 800ebd2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ebd6:	8222      	strh	r2, [r4, #16]
 800ebd8:	bd10      	pop	{r4, pc}
 800ebda:	f04f 30ff 	mov.w	r0, #4294967295
 800ebde:	4770      	bx	lr
 800ebe0:	08029064 	.word	0x08029064

0800ebe4 <arm_rfft_512_fast_init_f32>:
 800ebe4:	b160      	cbz	r0, 800ec00 <arm_rfft_512_fast_init_f32+0x1c>
 800ebe6:	b510      	push	{r4, lr}
 800ebe8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800ebec:	4604      	mov	r4, r0
 800ebee:	f000 fd0f 	bl	800f610 <arm_cfft_init_f32>
 800ebf2:	b920      	cbnz	r0, 800ebfe <arm_rfft_512_fast_init_f32+0x1a>
 800ebf4:	4b04      	ldr	r3, [pc, #16]	@ (800ec08 <arm_rfft_512_fast_init_f32+0x24>)
 800ebf6:	6163      	str	r3, [r4, #20]
 800ebf8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ebfc:	8222      	strh	r2, [r4, #16]
 800ebfe:	bd10      	pop	{r4, pc}
 800ec00:	f04f 30ff 	mov.w	r0, #4294967295
 800ec04:	4770      	bx	lr
 800ec06:	bf00      	nop
 800ec08:	0802d4e4 	.word	0x0802d4e4

0800ec0c <arm_rfft_1024_fast_init_f32>:
 800ec0c:	b160      	cbz	r0, 800ec28 <arm_rfft_1024_fast_init_f32+0x1c>
 800ec0e:	b510      	push	{r4, lr}
 800ec10:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ec14:	4604      	mov	r4, r0
 800ec16:	f000 fcfb 	bl	800f610 <arm_cfft_init_f32>
 800ec1a:	b920      	cbnz	r0, 800ec26 <arm_rfft_1024_fast_init_f32+0x1a>
 800ec1c:	4b04      	ldr	r3, [pc, #16]	@ (800ec30 <arm_rfft_1024_fast_init_f32+0x24>)
 800ec1e:	6163      	str	r3, [r4, #20]
 800ec20:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800ec24:	8222      	strh	r2, [r4, #16]
 800ec26:	bd10      	pop	{r4, pc}
 800ec28:	f04f 30ff 	mov.w	r0, #4294967295
 800ec2c:	4770      	bx	lr
 800ec2e:	bf00      	nop
 800ec30:	08025e64 	.word	0x08025e64

0800ec34 <arm_rfft_2048_fast_init_f32>:
 800ec34:	b160      	cbz	r0, 800ec50 <arm_rfft_2048_fast_init_f32+0x1c>
 800ec36:	b510      	push	{r4, lr}
 800ec38:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800ec3c:	4604      	mov	r4, r0
 800ec3e:	f000 fce7 	bl	800f610 <arm_cfft_init_f32>
 800ec42:	b920      	cbnz	r0, 800ec4e <arm_rfft_2048_fast_init_f32+0x1a>
 800ec44:	4b04      	ldr	r3, [pc, #16]	@ (800ec58 <arm_rfft_2048_fast_init_f32+0x24>)
 800ec46:	6163      	str	r3, [r4, #20]
 800ec48:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ec4c:	8222      	strh	r2, [r4, #16]
 800ec4e:	bd10      	pop	{r4, pc}
 800ec50:	f04f 30ff 	mov.w	r0, #4294967295
 800ec54:	4770      	bx	lr
 800ec56:	bf00      	nop
 800ec58:	08027064 	.word	0x08027064

0800ec5c <arm_rfft_4096_fast_init_f32>:
 800ec5c:	b160      	cbz	r0, 800ec78 <arm_rfft_4096_fast_init_f32+0x1c>
 800ec5e:	b510      	push	{r4, lr}
 800ec60:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800ec64:	4604      	mov	r4, r0
 800ec66:	f000 fcd3 	bl	800f610 <arm_cfft_init_f32>
 800ec6a:	b920      	cbnz	r0, 800ec76 <arm_rfft_4096_fast_init_f32+0x1a>
 800ec6c:	4b04      	ldr	r3, [pc, #16]	@ (800ec80 <arm_rfft_4096_fast_init_f32+0x24>)
 800ec6e:	6163      	str	r3, [r4, #20]
 800ec70:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800ec74:	8222      	strh	r2, [r4, #16]
 800ec76:	bd10      	pop	{r4, pc}
 800ec78:	f04f 30ff 	mov.w	r0, #4294967295
 800ec7c:	4770      	bx	lr
 800ec7e:	bf00      	nop
 800ec80:	080294e4 	.word	0x080294e4

0800ec84 <arm_rfft_fast_init_f32>:
 800ec84:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800ec88:	d024      	beq.n	800ecd4 <arm_rfft_fast_init_f32+0x50>
 800ec8a:	d807      	bhi.n	800ec9c <arm_rfft_fast_init_f32+0x18>
 800ec8c:	2980      	cmp	r1, #128	@ 0x80
 800ec8e:	d01c      	beq.n	800ecca <arm_rfft_fast_init_f32+0x46>
 800ec90:	d90c      	bls.n	800ecac <arm_rfft_fast_init_f32+0x28>
 800ec92:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800ec96:	d11a      	bne.n	800ecce <arm_rfft_fast_init_f32+0x4a>
 800ec98:	4b0f      	ldr	r3, [pc, #60]	@ (800ecd8 <arm_rfft_fast_init_f32+0x54>)
 800ec9a:	4718      	bx	r3
 800ec9c:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 800eca0:	d011      	beq.n	800ecc6 <arm_rfft_fast_init_f32+0x42>
 800eca2:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 800eca6:	d107      	bne.n	800ecb8 <arm_rfft_fast_init_f32+0x34>
 800eca8:	4b0c      	ldr	r3, [pc, #48]	@ (800ecdc <arm_rfft_fast_init_f32+0x58>)
 800ecaa:	4718      	bx	r3
 800ecac:	2920      	cmp	r1, #32
 800ecae:	d008      	beq.n	800ecc2 <arm_rfft_fast_init_f32+0x3e>
 800ecb0:	2940      	cmp	r1, #64	@ 0x40
 800ecb2:	d10c      	bne.n	800ecce <arm_rfft_fast_init_f32+0x4a>
 800ecb4:	4b0a      	ldr	r3, [pc, #40]	@ (800ece0 <arm_rfft_fast_init_f32+0x5c>)
 800ecb6:	e7f0      	b.n	800ec9a <arm_rfft_fast_init_f32+0x16>
 800ecb8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800ecbc:	d107      	bne.n	800ecce <arm_rfft_fast_init_f32+0x4a>
 800ecbe:	4b09      	ldr	r3, [pc, #36]	@ (800ece4 <arm_rfft_fast_init_f32+0x60>)
 800ecc0:	e7eb      	b.n	800ec9a <arm_rfft_fast_init_f32+0x16>
 800ecc2:	4b09      	ldr	r3, [pc, #36]	@ (800ece8 <arm_rfft_fast_init_f32+0x64>)
 800ecc4:	e7e9      	b.n	800ec9a <arm_rfft_fast_init_f32+0x16>
 800ecc6:	4b09      	ldr	r3, [pc, #36]	@ (800ecec <arm_rfft_fast_init_f32+0x68>)
 800ecc8:	e7e7      	b.n	800ec9a <arm_rfft_fast_init_f32+0x16>
 800ecca:	4b09      	ldr	r3, [pc, #36]	@ (800ecf0 <arm_rfft_fast_init_f32+0x6c>)
 800eccc:	e7e5      	b.n	800ec9a <arm_rfft_fast_init_f32+0x16>
 800ecce:	f04f 30ff 	mov.w	r0, #4294967295
 800ecd2:	4770      	bx	lr
 800ecd4:	4b07      	ldr	r3, [pc, #28]	@ (800ecf4 <arm_rfft_fast_init_f32+0x70>)
 800ecd6:	e7e0      	b.n	800ec9a <arm_rfft_fast_init_f32+0x16>
 800ecd8:	0800ebc1 	.word	0x0800ebc1
 800ecdc:	0800ec5d 	.word	0x0800ec5d
 800ece0:	0800eb79 	.word	0x0800eb79
 800ece4:	0800ec0d 	.word	0x0800ec0d
 800ece8:	0800eb55 	.word	0x0800eb55
 800ecec:	0800ec35 	.word	0x0800ec35
 800ecf0:	0800eb9d 	.word	0x0800eb9d
 800ecf4:	0800ebe5 	.word	0x0800ebe5

0800ecf8 <stage_rfft_f32>:
 800ecf8:	b410      	push	{r4}
 800ecfa:	edd1 7a00 	vldr	s15, [r1]
 800ecfe:	ed91 7a01 	vldr	s14, [r1, #4]
 800ed02:	8804      	ldrh	r4, [r0, #0]
 800ed04:	6940      	ldr	r0, [r0, #20]
 800ed06:	ee37 7a07 	vadd.f32	s14, s14, s14
 800ed0a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ed0e:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 800ed12:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ed16:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ed1a:	3c01      	subs	r4, #1
 800ed1c:	ee26 7a84 	vmul.f32	s14, s13, s8
 800ed20:	ee67 7a84 	vmul.f32	s15, s15, s8
 800ed24:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 800ed28:	ed82 7a00 	vstr	s14, [r2]
 800ed2c:	edc2 7a01 	vstr	s15, [r2, #4]
 800ed30:	3010      	adds	r0, #16
 800ed32:	3210      	adds	r2, #16
 800ed34:	3b08      	subs	r3, #8
 800ed36:	3110      	adds	r1, #16
 800ed38:	ed11 5a02 	vldr	s10, [r1, #-8]
 800ed3c:	ed93 7a02 	vldr	s14, [r3, #8]
 800ed40:	ed50 6a02 	vldr	s13, [r0, #-8]
 800ed44:	edd3 4a03 	vldr	s9, [r3, #12]
 800ed48:	ed51 7a01 	vldr	s15, [r1, #-4]
 800ed4c:	ed10 6a01 	vldr	s12, [r0, #-4]
 800ed50:	ee77 5a45 	vsub.f32	s11, s14, s10
 800ed54:	ee37 7a05 	vadd.f32	s14, s14, s10
 800ed58:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800ed5c:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800ed60:	ee66 5a25 	vmul.f32	s11, s12, s11
 800ed64:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800ed68:	ee37 7a23 	vadd.f32	s14, s14, s7
 800ed6c:	ee66 6a85 	vmul.f32	s13, s13, s10
 800ed70:	ee26 6a05 	vmul.f32	s12, s12, s10
 800ed74:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800ed78:	ee37 7a06 	vadd.f32	s14, s14, s12
 800ed7c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ed80:	ee27 7a04 	vmul.f32	s14, s14, s8
 800ed84:	ee67 7a84 	vmul.f32	s15, s15, s8
 800ed88:	3c01      	subs	r4, #1
 800ed8a:	ed02 7a02 	vstr	s14, [r2, #-8]
 800ed8e:	ed42 7a01 	vstr	s15, [r2, #-4]
 800ed92:	f1a3 0308 	sub.w	r3, r3, #8
 800ed96:	f101 0108 	add.w	r1, r1, #8
 800ed9a:	f100 0008 	add.w	r0, r0, #8
 800ed9e:	f102 0208 	add.w	r2, r2, #8
 800eda2:	d1c9      	bne.n	800ed38 <stage_rfft_f32+0x40>
 800eda4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eda8:	4770      	bx	lr
 800edaa:	bf00      	nop

0800edac <merge_rfft_f32>:
 800edac:	b410      	push	{r4}
 800edae:	edd1 7a00 	vldr	s15, [r1]
 800edb2:	edd1 6a01 	vldr	s13, [r1, #4]
 800edb6:	8804      	ldrh	r4, [r0, #0]
 800edb8:	6940      	ldr	r0, [r0, #20]
 800edba:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800edbe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800edc2:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 800edc6:	ee27 7a04 	vmul.f32	s14, s14, s8
 800edca:	ee67 7a84 	vmul.f32	s15, s15, s8
 800edce:	3c01      	subs	r4, #1
 800edd0:	ed82 7a00 	vstr	s14, [r2]
 800edd4:	edc2 7a01 	vstr	s15, [r2, #4]
 800edd8:	b3dc      	cbz	r4, 800ee52 <merge_rfft_f32+0xa6>
 800edda:	00e3      	lsls	r3, r4, #3
 800eddc:	3b08      	subs	r3, #8
 800edde:	440b      	add	r3, r1
 800ede0:	3010      	adds	r0, #16
 800ede2:	3210      	adds	r2, #16
 800ede4:	3110      	adds	r1, #16
 800ede6:	ed11 5a02 	vldr	s10, [r1, #-8]
 800edea:	ed93 7a02 	vldr	s14, [r3, #8]
 800edee:	ed50 6a02 	vldr	s13, [r0, #-8]
 800edf2:	edd3 4a03 	vldr	s9, [r3, #12]
 800edf6:	ed51 7a01 	vldr	s15, [r1, #-4]
 800edfa:	ed10 6a01 	vldr	s12, [r0, #-4]
 800edfe:	ee75 5a47 	vsub.f32	s11, s10, s14
 800ee02:	ee37 7a05 	vadd.f32	s14, s14, s10
 800ee06:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800ee0a:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800ee0e:	ee66 5a25 	vmul.f32	s11, s12, s11
 800ee12:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800ee16:	ee37 7a63 	vsub.f32	s14, s14, s7
 800ee1a:	ee66 6a85 	vmul.f32	s13, s13, s10
 800ee1e:	ee26 6a05 	vmul.f32	s12, s12, s10
 800ee22:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800ee26:	ee37 7a46 	vsub.f32	s14, s14, s12
 800ee2a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ee2e:	ee27 7a04 	vmul.f32	s14, s14, s8
 800ee32:	ee67 7a84 	vmul.f32	s15, s15, s8
 800ee36:	3c01      	subs	r4, #1
 800ee38:	ed02 7a02 	vstr	s14, [r2, #-8]
 800ee3c:	ed42 7a01 	vstr	s15, [r2, #-4]
 800ee40:	f1a3 0308 	sub.w	r3, r3, #8
 800ee44:	f101 0108 	add.w	r1, r1, #8
 800ee48:	f100 0008 	add.w	r0, r0, #8
 800ee4c:	f102 0208 	add.w	r2, r2, #8
 800ee50:	d1c9      	bne.n	800ede6 <merge_rfft_f32+0x3a>
 800ee52:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee56:	4770      	bx	lr

0800ee58 <arm_rfft_fast_f32>:
 800ee58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee5c:	461c      	mov	r4, r3
 800ee5e:	4605      	mov	r5, r0
 800ee60:	4616      	mov	r6, r2
 800ee62:	b14b      	cbz	r3, 800ee78 <arm_rfft_fast_f32+0x20>
 800ee64:	f7ff ffa2 	bl	800edac <merge_rfft_f32>
 800ee68:	4622      	mov	r2, r4
 800ee6a:	4631      	mov	r1, r6
 800ee6c:	4628      	mov	r0, r5
 800ee6e:	2301      	movs	r3, #1
 800ee70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee74:	f000 bb34 	b.w	800f4e0 <arm_cfft_f32>
 800ee78:	460f      	mov	r7, r1
 800ee7a:	461a      	mov	r2, r3
 800ee7c:	2301      	movs	r3, #1
 800ee7e:	f000 fb2f 	bl	800f4e0 <arm_cfft_f32>
 800ee82:	4632      	mov	r2, r6
 800ee84:	4639      	mov	r1, r7
 800ee86:	4628      	mov	r0, r5
 800ee88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee8c:	f7ff bf34 	b.w	800ecf8 <stage_rfft_f32>

0800ee90 <arm_cfft_radix8by2_f32>:
 800ee90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee94:	ed2d 8b08 	vpush	{d8-d11}
 800ee98:	f8b0 c000 	ldrh.w	ip, [r0]
 800ee9c:	6842      	ldr	r2, [r0, #4]
 800ee9e:	4607      	mov	r7, r0
 800eea0:	4608      	mov	r0, r1
 800eea2:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800eea6:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800eeaa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800eeae:	b082      	sub	sp, #8
 800eeb0:	f000 80b0 	beq.w	800f014 <arm_cfft_radix8by2_f32+0x184>
 800eeb4:	008c      	lsls	r4, r1, #2
 800eeb6:	3410      	adds	r4, #16
 800eeb8:	f100 0310 	add.w	r3, r0, #16
 800eebc:	1906      	adds	r6, r0, r4
 800eebe:	3210      	adds	r2, #16
 800eec0:	4444      	add	r4, r8
 800eec2:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800eec6:	f108 0510 	add.w	r5, r8, #16
 800eeca:	ed15 2a04 	vldr	s4, [r5, #-16]
 800eece:	ed55 2a03 	vldr	s5, [r5, #-12]
 800eed2:	ed54 4a04 	vldr	s9, [r4, #-16]
 800eed6:	ed14 4a03 	vldr	s8, [r4, #-12]
 800eeda:	ed14 6a02 	vldr	s12, [r4, #-8]
 800eede:	ed54 5a01 	vldr	s11, [r4, #-4]
 800eee2:	ed53 3a04 	vldr	s7, [r3, #-16]
 800eee6:	ed15 0a02 	vldr	s0, [r5, #-8]
 800eeea:	ed55 0a01 	vldr	s1, [r5, #-4]
 800eeee:	ed56 6a04 	vldr	s13, [r6, #-16]
 800eef2:	ed16 3a03 	vldr	s6, [r6, #-12]
 800eef6:	ed13 7a03 	vldr	s14, [r3, #-12]
 800eefa:	ed13 5a02 	vldr	s10, [r3, #-8]
 800eefe:	ed53 7a01 	vldr	s15, [r3, #-4]
 800ef02:	ed16 1a02 	vldr	s2, [r6, #-8]
 800ef06:	ed56 1a01 	vldr	s3, [r6, #-4]
 800ef0a:	ee73 ba82 	vadd.f32	s23, s7, s4
 800ef0e:	ee37 ba22 	vadd.f32	s22, s14, s5
 800ef12:	ee76 9aa4 	vadd.f32	s19, s13, s9
 800ef16:	ee33 9a04 	vadd.f32	s18, s6, s8
 800ef1a:	ee31 8aa5 	vadd.f32	s16, s3, s11
 800ef1e:	ee75 aa00 	vadd.f32	s21, s10, s0
 800ef22:	ee37 aaa0 	vadd.f32	s20, s15, s1
 800ef26:	ee71 8a06 	vadd.f32	s17, s2, s12
 800ef2a:	ed43 ba04 	vstr	s23, [r3, #-16]
 800ef2e:	ed03 ba03 	vstr	s22, [r3, #-12]
 800ef32:	ed43 aa02 	vstr	s21, [r3, #-8]
 800ef36:	ed03 aa01 	vstr	s20, [r3, #-4]
 800ef3a:	ed06 8a01 	vstr	s16, [r6, #-4]
 800ef3e:	ed46 9a04 	vstr	s19, [r6, #-16]
 800ef42:	ed06 9a03 	vstr	s18, [r6, #-12]
 800ef46:	ed46 8a02 	vstr	s17, [r6, #-8]
 800ef4a:	ee37 7a62 	vsub.f32	s14, s14, s5
 800ef4e:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800ef52:	ee34 4a43 	vsub.f32	s8, s8, s6
 800ef56:	ed52 6a03 	vldr	s13, [r2, #-12]
 800ef5a:	ed12 3a04 	vldr	s6, [r2, #-16]
 800ef5e:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800ef62:	ee27 8a26 	vmul.f32	s16, s14, s13
 800ef66:	ee64 2aa6 	vmul.f32	s5, s9, s13
 800ef6a:	ee23 2a83 	vmul.f32	s4, s7, s6
 800ef6e:	ee64 4a83 	vmul.f32	s9, s9, s6
 800ef72:	ee63 3aa6 	vmul.f32	s7, s7, s13
 800ef76:	ee27 7a03 	vmul.f32	s14, s14, s6
 800ef7a:	ee64 6a26 	vmul.f32	s13, s8, s13
 800ef7e:	ee24 4a03 	vmul.f32	s8, s8, s6
 800ef82:	ee37 7a63 	vsub.f32	s14, s14, s7
 800ef86:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800ef8a:	ee32 4ac4 	vsub.f32	s8, s5, s8
 800ef8e:	ee32 3a08 	vadd.f32	s6, s4, s16
 800ef92:	ed05 7a03 	vstr	s14, [r5, #-12]
 800ef96:	ed05 3a04 	vstr	s6, [r5, #-16]
 800ef9a:	ed04 4a04 	vstr	s8, [r4, #-16]
 800ef9e:	ed44 6a03 	vstr	s13, [r4, #-12]
 800efa2:	ed12 7a01 	vldr	s14, [r2, #-4]
 800efa6:	ee76 6a41 	vsub.f32	s13, s12, s2
 800efaa:	ee35 5a40 	vsub.f32	s10, s10, s0
 800efae:	ee35 6ae1 	vsub.f32	s12, s11, s3
 800efb2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800efb6:	ed52 5a02 	vldr	s11, [r2, #-8]
 800efba:	ee67 3a87 	vmul.f32	s7, s15, s14
 800efbe:	ee66 4a87 	vmul.f32	s9, s13, s14
 800efc2:	ee25 4a25 	vmul.f32	s8, s10, s11
 800efc6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800efca:	ee25 5a07 	vmul.f32	s10, s10, s14
 800efce:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800efd2:	ee26 7a07 	vmul.f32	s14, s12, s14
 800efd6:	ee26 6a25 	vmul.f32	s12, s12, s11
 800efda:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800efde:	ee74 5a23 	vadd.f32	s11, s8, s7
 800efe2:	ee34 6ac6 	vsub.f32	s12, s9, s12
 800efe6:	ee37 7a26 	vadd.f32	s14, s14, s13
 800efea:	3310      	adds	r3, #16
 800efec:	4563      	cmp	r3, ip
 800efee:	ed45 5a02 	vstr	s11, [r5, #-8]
 800eff2:	f106 0610 	add.w	r6, r6, #16
 800eff6:	ed45 7a01 	vstr	s15, [r5, #-4]
 800effa:	f102 0210 	add.w	r2, r2, #16
 800effe:	ed04 6a02 	vstr	s12, [r4, #-8]
 800f002:	ed04 7a01 	vstr	s14, [r4, #-4]
 800f006:	f105 0510 	add.w	r5, r5, #16
 800f00a:	f104 0410 	add.w	r4, r4, #16
 800f00e:	f47f af5c 	bne.w	800eeca <arm_cfft_radix8by2_f32+0x3a>
 800f012:	687a      	ldr	r2, [r7, #4]
 800f014:	b289      	uxth	r1, r1
 800f016:	2302      	movs	r3, #2
 800f018:	9101      	str	r1, [sp, #4]
 800f01a:	f000 fb4b 	bl	800f6b4 <arm_radix8_butterfly_f32>
 800f01e:	9901      	ldr	r1, [sp, #4]
 800f020:	687a      	ldr	r2, [r7, #4]
 800f022:	4640      	mov	r0, r8
 800f024:	2302      	movs	r3, #2
 800f026:	b002      	add	sp, #8
 800f028:	ecbd 8b08 	vpop	{d8-d11}
 800f02c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f030:	f000 bb40 	b.w	800f6b4 <arm_radix8_butterfly_f32>

0800f034 <arm_cfft_radix8by4_f32>:
 800f034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f038:	ed2d 8b0a 	vpush	{d8-d12}
 800f03c:	8803      	ldrh	r3, [r0, #0]
 800f03e:	6842      	ldr	r2, [r0, #4]
 800f040:	b08d      	sub	sp, #52	@ 0x34
 800f042:	085b      	lsrs	r3, r3, #1
 800f044:	900a      	str	r0, [sp, #40]	@ 0x28
 800f046:	4608      	mov	r0, r1
 800f048:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f04c:	edd1 5a00 	vldr	s11, [r1]
 800f050:	edd0 7a00 	vldr	s15, [r0]
 800f054:	edd1 3a01 	vldr	s7, [r1, #4]
 800f058:	ed90 5a01 	vldr	s10, [r0, #4]
 800f05c:	9108      	str	r1, [sp, #32]
 800f05e:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800f062:	ed96 7a00 	vldr	s14, [r6]
 800f066:	ed96 4a01 	vldr	s8, [r6, #4]
 800f06a:	9607      	str	r6, [sp, #28]
 800f06c:	ee37 6aa5 	vadd.f32	s12, s15, s11
 800f070:	eb01 0883 	add.w	r8, r1, r3, lsl #2
 800f074:	edd8 4a00 	vldr	s9, [r8]
 800f078:	ed98 3a01 	vldr	s6, [r8, #4]
 800f07c:	ee77 6a06 	vadd.f32	s13, s14, s12
 800f080:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800f084:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800f088:	4604      	mov	r4, r0
 800f08a:	edc0 6a00 	vstr	s13, [r0]
 800f08e:	edd6 5a01 	vldr	s11, [r6, #4]
 800f092:	edd8 2a01 	vldr	s5, [r8, #4]
 800f096:	ee75 6a23 	vadd.f32	s13, s10, s7
 800f09a:	ee35 5a63 	vsub.f32	s10, s10, s7
 800f09e:	ee36 6a47 	vsub.f32	s12, s12, s14
 800f0a2:	ee74 3a27 	vadd.f32	s7, s8, s15
 800f0a6:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800f0aa:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800f0ae:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800f0b2:	3408      	adds	r4, #8
 800f0b4:	ee35 4a47 	vsub.f32	s8, s10, s14
 800f0b8:	460d      	mov	r5, r1
 800f0ba:	ee37 7a05 	vadd.f32	s14, s14, s10
 800f0be:	4637      	mov	r7, r6
 800f0c0:	9402      	str	r4, [sp, #8]
 800f0c2:	3708      	adds	r7, #8
 800f0c4:	460c      	mov	r4, r1
 800f0c6:	3508      	adds	r5, #8
 800f0c8:	0859      	lsrs	r1, r3, #1
 800f0ca:	9109      	str	r1, [sp, #36]	@ 0x24
 800f0cc:	9706      	str	r7, [sp, #24]
 800f0ce:	9505      	str	r5, [sp, #20]
 800f0d0:	f102 0708 	add.w	r7, r2, #8
 800f0d4:	ee36 6a64 	vsub.f32	s12, s12, s9
 800f0d8:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800f0dc:	ee75 5aa2 	vadd.f32	s11, s11, s5
 800f0e0:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800f0e4:	ee77 7a83 	vadd.f32	s15, s15, s6
 800f0e8:	ee34 5a24 	vadd.f32	s10, s8, s9
 800f0ec:	ee37 7a64 	vsub.f32	s14, s14, s9
 800f0f0:	3902      	subs	r1, #2
 800f0f2:	4645      	mov	r5, r8
 800f0f4:	9701      	str	r7, [sp, #4]
 800f0f6:	f102 0c18 	add.w	ip, r2, #24
 800f0fa:	f102 0710 	add.w	r7, r2, #16
 800f0fe:	3508      	adds	r5, #8
 800f100:	0849      	lsrs	r1, r1, #1
 800f102:	edc0 5a01 	vstr	s11, [r0, #4]
 800f106:	9703      	str	r7, [sp, #12]
 800f108:	edc6 3a00 	vstr	s7, [r6]
 800f10c:	ed86 5a01 	vstr	s10, [r6, #4]
 800f110:	f8cd c000 	str.w	ip, [sp]
 800f114:	ed84 6a00 	vstr	s12, [r4]
 800f118:	edc4 6a01 	vstr	s13, [r4, #4]
 800f11c:	9504      	str	r5, [sp, #16]
 800f11e:	edc8 7a00 	vstr	s15, [r8]
 800f122:	ed88 7a01 	vstr	s14, [r8, #4]
 800f126:	910b      	str	r1, [sp, #44]	@ 0x2c
 800f128:	f000 8138 	beq.w	800f39c <arm_cfft_radix8by4_f32+0x368>
 800f12c:	009b      	lsls	r3, r3, #2
 800f12e:	3b0c      	subs	r3, #12
 800f130:	f1a6 0c0c 	sub.w	ip, r6, #12
 800f134:	f106 0510 	add.w	r5, r6, #16
 800f138:	4626      	mov	r6, r4
 800f13a:	46bb      	mov	fp, r7
 800f13c:	f102 0a20 	add.w	sl, r2, #32
 800f140:	f102 0930 	add.w	r9, r2, #48	@ 0x30
 800f144:	f106 0710 	add.w	r7, r6, #16
 800f148:	4443      	add	r3, r8
 800f14a:	f100 0e10 	add.w	lr, r0, #16
 800f14e:	3c0c      	subs	r4, #12
 800f150:	f1a8 060c 	sub.w	r6, r8, #12
 800f154:	f108 0210 	add.w	r2, r8, #16
 800f158:	ed1e 5a02 	vldr	s10, [lr, #-8]
 800f15c:	ed57 5a02 	vldr	s11, [r7, #-8]
 800f160:	ed55 7a02 	vldr	s15, [r5, #-8]
 800f164:	ed52 1a02 	vldr	s3, [r2, #-8]
 800f168:	ed57 6a01 	vldr	s13, [r7, #-4]
 800f16c:	ed1e 0a01 	vldr	s0, [lr, #-4]
 800f170:	ed12 1a01 	vldr	s2, [r2, #-4]
 800f174:	ed15 8a01 	vldr	s16, [r5, #-4]
 800f178:	ee35 4a25 	vadd.f32	s8, s10, s11
 800f17c:	ee30 6a26 	vadd.f32	s12, s0, s13
 800f180:	ee37 7a84 	vadd.f32	s14, s15, s8
 800f184:	ee30 0a66 	vsub.f32	s0, s0, s13
 800f188:	ee37 7a21 	vadd.f32	s14, s14, s3
 800f18c:	ee75 5a65 	vsub.f32	s11, s10, s11
 800f190:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800f194:	ed15 7a01 	vldr	s14, [r5, #-4]
 800f198:	ed52 6a01 	vldr	s13, [r2, #-4]
 800f19c:	ee36 7a07 	vadd.f32	s14, s12, s14
 800f1a0:	ee78 aa25 	vadd.f32	s21, s16, s11
 800f1a4:	ee37 7a26 	vadd.f32	s14, s14, s13
 800f1a8:	ee70 3a67 	vsub.f32	s7, s0, s15
 800f1ac:	ed0e 7a01 	vstr	s14, [lr, #-4]
 800f1b0:	ed96 7a02 	vldr	s14, [r6, #8]
 800f1b4:	ed9c 2a02 	vldr	s4, [ip, #8]
 800f1b8:	ed94 ba02 	vldr	s22, [r4, #8]
 800f1bc:	edd3 9a02 	vldr	s19, [r3, #8]
 800f1c0:	edd6 2a01 	vldr	s5, [r6, #4]
 800f1c4:	ed9c 9a01 	vldr	s18, [ip, #4]
 800f1c8:	ed93 5a01 	vldr	s10, [r3, #4]
 800f1cc:	edd4 0a01 	vldr	s1, [r4, #4]
 800f1d0:	ee72 6a07 	vadd.f32	s13, s4, s14
 800f1d4:	ee32 2a47 	vsub.f32	s4, s4, s14
 800f1d8:	ee7b 8a26 	vadd.f32	s17, s22, s13
 800f1dc:	ee79 4a22 	vadd.f32	s9, s18, s5
 800f1e0:	ee38 7aa9 	vadd.f32	s14, s17, s19
 800f1e4:	ee79 2a62 	vsub.f32	s5, s18, s5
 800f1e8:	ed8c 7a02 	vstr	s14, [ip, #8]
 800f1ec:	ed94 7a01 	vldr	s14, [r4, #4]
 800f1f0:	edd3 8a01 	vldr	s17, [r3, #4]
 800f1f4:	ee34 7a87 	vadd.f32	s14, s9, s14
 800f1f8:	ee3b 3a69 	vsub.f32	s6, s22, s19
 800f1fc:	ee37 7a28 	vadd.f32	s14, s14, s17
 800f200:	ee32 9a60 	vsub.f32	s18, s4, s1
 800f204:	ed8c 7a01 	vstr	s14, [ip, #4]
 800f208:	ed1b 7a01 	vldr	s14, [fp, #-4]
 800f20c:	ed1b aa02 	vldr	s20, [fp, #-8]
 800f210:	ee73 8a22 	vadd.f32	s17, s6, s5
 800f214:	ee39 9a05 	vadd.f32	s18, s18, s10
 800f218:	ee7a aac1 	vsub.f32	s21, s21, s2
 800f21c:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800f220:	ee2a ca8a 	vmul.f32	s24, s21, s20
 800f224:	ee69 ba07 	vmul.f32	s23, s18, s14
 800f228:	ee6a aa87 	vmul.f32	s21, s21, s14
 800f22c:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800f230:	ee63 ca87 	vmul.f32	s25, s7, s14
 800f234:	ee63 3a8a 	vmul.f32	s7, s7, s20
 800f238:	ee28 aa8a 	vmul.f32	s20, s17, s20
 800f23c:	ee68 8a87 	vmul.f32	s17, s17, s14
 800f240:	ee73 3aea 	vsub.f32	s7, s7, s21
 800f244:	ee78 8a89 	vadd.f32	s17, s17, s18
 800f248:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 800f24c:	ee3b aaca 	vsub.f32	s20, s23, s20
 800f250:	ee34 4a67 	vsub.f32	s8, s8, s15
 800f254:	ee76 6acb 	vsub.f32	s13, s13, s22
 800f258:	ee36 6a48 	vsub.f32	s12, s12, s16
 800f25c:	ee74 4ae0 	vsub.f32	s9, s9, s1
 800f260:	ed05 7a02 	vstr	s14, [r5, #-8]
 800f264:	ed45 3a01 	vstr	s7, [r5, #-4]
 800f268:	edc4 8a01 	vstr	s17, [r4, #4]
 800f26c:	ed84 aa02 	vstr	s20, [r4, #8]
 800f270:	ed5a 3a04 	vldr	s7, [sl, #-16]
 800f274:	ee36 7ae9 	vsub.f32	s14, s13, s19
 800f278:	ee74 4ac5 	vsub.f32	s9, s9, s10
 800f27c:	ed5a 6a03 	vldr	s13, [sl, #-12]
 800f280:	ee34 4a61 	vsub.f32	s8, s8, s3
 800f284:	ee36 6a41 	vsub.f32	s12, s12, s2
 800f288:	ee67 8a63 	vnmul.f32	s17, s14, s7
 800f28c:	ee66 9a26 	vmul.f32	s19, s12, s13
 800f290:	ee24 9a23 	vmul.f32	s18, s8, s7
 800f294:	ee26 6a23 	vmul.f32	s12, s12, s7
 800f298:	ee24 4a26 	vmul.f32	s8, s8, s13
 800f29c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f2a0:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800f2a4:	ee64 4aa3 	vmul.f32	s9, s9, s7
 800f2a8:	ee36 6a44 	vsub.f32	s12, s12, s8
 800f2ac:	ee37 7a64 	vsub.f32	s14, s14, s9
 800f2b0:	ee38 4ae6 	vsub.f32	s8, s17, s13
 800f2b4:	ee79 3a29 	vadd.f32	s7, s18, s19
 800f2b8:	ee75 6a60 	vsub.f32	s13, s10, s1
 800f2bc:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800f2c0:	ee77 7a80 	vadd.f32	s15, s15, s0
 800f2c4:	ed47 3a02 	vstr	s7, [r7, #-8]
 800f2c8:	ed07 6a01 	vstr	s12, [r7, #-4]
 800f2cc:	ed86 7a01 	vstr	s14, [r6, #4]
 800f2d0:	ed86 4a02 	vstr	s8, [r6, #8]
 800f2d4:	ee35 6a81 	vadd.f32	s12, s11, s2
 800f2d8:	ee36 7ac2 	vsub.f32	s14, s13, s4
 800f2dc:	ed59 5a06 	vldr	s11, [r9, #-24]	@ 0xffffffe8
 800f2e0:	ed59 6a05 	vldr	s13, [r9, #-20]	@ 0xffffffec
 800f2e4:	ee33 3a62 	vsub.f32	s6, s6, s5
 800f2e8:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800f2ec:	ee67 2a26 	vmul.f32	s5, s14, s13
 800f2f0:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800f2f4:	ee26 5a25 	vmul.f32	s10, s12, s11
 800f2f8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800f2fc:	ee26 6a26 	vmul.f32	s12, s12, s13
 800f300:	ee27 7a25 	vmul.f32	s14, s14, s11
 800f304:	ee63 6a26 	vmul.f32	s13, s6, s13
 800f308:	ee23 3a25 	vmul.f32	s6, s6, s11
 800f30c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800f310:	ee75 5a24 	vadd.f32	s11, s10, s9
 800f314:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800f318:	ee36 7a87 	vadd.f32	s14, s13, s14
 800f31c:	3901      	subs	r1, #1
 800f31e:	ed42 5a02 	vstr	s11, [r2, #-8]
 800f322:	ed42 7a01 	vstr	s15, [r2, #-4]
 800f326:	f10e 0e08 	add.w	lr, lr, #8
 800f32a:	ed83 3a02 	vstr	s6, [r3, #8]
 800f32e:	ed83 7a01 	vstr	s14, [r3, #4]
 800f332:	f1ac 0c08 	sub.w	ip, ip, #8
 800f336:	f10b 0b08 	add.w	fp, fp, #8
 800f33a:	f105 0508 	add.w	r5, r5, #8
 800f33e:	f1a4 0408 	sub.w	r4, r4, #8
 800f342:	f10a 0a10 	add.w	sl, sl, #16
 800f346:	f107 0708 	add.w	r7, r7, #8
 800f34a:	f1a6 0608 	sub.w	r6, r6, #8
 800f34e:	f109 0918 	add.w	r9, r9, #24
 800f352:	f102 0208 	add.w	r2, r2, #8
 800f356:	f1a3 0308 	sub.w	r3, r3, #8
 800f35a:	f47f aefd 	bne.w	800f158 <arm_cfft_radix8by4_f32+0x124>
 800f35e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f360:	9902      	ldr	r1, [sp, #8]
 800f362:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800f366:	9102      	str	r1, [sp, #8]
 800f368:	9901      	ldr	r1, [sp, #4]
 800f36a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800f36e:	9101      	str	r1, [sp, #4]
 800f370:	9906      	ldr	r1, [sp, #24]
 800f372:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800f376:	9106      	str	r1, [sp, #24]
 800f378:	9903      	ldr	r1, [sp, #12]
 800f37a:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 800f37e:	9103      	str	r1, [sp, #12]
 800f380:	9905      	ldr	r1, [sp, #20]
 800f382:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800f386:	9105      	str	r1, [sp, #20]
 800f388:	9904      	ldr	r1, [sp, #16]
 800f38a:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800f38e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800f392:	9204      	str	r2, [sp, #16]
 800f394:	9a00      	ldr	r2, [sp, #0]
 800f396:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f39a:	9300      	str	r3, [sp, #0]
 800f39c:	9902      	ldr	r1, [sp, #8]
 800f39e:	9d05      	ldr	r5, [sp, #20]
 800f3a0:	ed91 4a00 	vldr	s8, [r1]
 800f3a4:	edd5 6a00 	vldr	s13, [r5]
 800f3a8:	9b06      	ldr	r3, [sp, #24]
 800f3aa:	9c04      	ldr	r4, [sp, #16]
 800f3ac:	edd3 7a00 	vldr	s15, [r3]
 800f3b0:	ed94 3a00 	vldr	s6, [r4]
 800f3b4:	edd5 4a01 	vldr	s9, [r5, #4]
 800f3b8:	edd1 3a01 	vldr	s7, [r1, #4]
 800f3bc:	ed94 2a01 	vldr	s4, [r4, #4]
 800f3c0:	ed93 7a01 	vldr	s14, [r3, #4]
 800f3c4:	9a01      	ldr	r2, [sp, #4]
 800f3c6:	ee34 6a26 	vadd.f32	s12, s8, s13
 800f3ca:	ee73 5aa4 	vadd.f32	s11, s7, s9
 800f3ce:	ee37 5a86 	vadd.f32	s10, s15, s12
 800f3d2:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800f3d6:	ee35 5a03 	vadd.f32	s10, s10, s6
 800f3da:	ee74 6a66 	vsub.f32	s13, s8, s13
 800f3de:	ed81 5a00 	vstr	s10, [r1]
 800f3e2:	ed93 5a01 	vldr	s10, [r3, #4]
 800f3e6:	edd4 4a01 	vldr	s9, [r4, #4]
 800f3ea:	ee35 5a85 	vadd.f32	s10, s11, s10
 800f3ee:	ee37 4a26 	vadd.f32	s8, s14, s13
 800f3f2:	ee35 5a24 	vadd.f32	s10, s10, s9
 800f3f6:	ee73 4ae7 	vsub.f32	s9, s7, s15
 800f3fa:	ed81 5a01 	vstr	s10, [r1, #4]
 800f3fe:	edd2 1a00 	vldr	s3, [r2]
 800f402:	edd2 2a01 	vldr	s5, [r2, #4]
 800f406:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 800f40a:	ee34 5a83 	vadd.f32	s10, s9, s6
 800f40e:	ee34 4a42 	vsub.f32	s8, s8, s4
 800f412:	ee36 6a67 	vsub.f32	s12, s12, s15
 800f416:	ee64 4a21 	vmul.f32	s9, s8, s3
 800f41a:	ee24 4a22 	vmul.f32	s8, s8, s5
 800f41e:	ee65 2a22 	vmul.f32	s5, s10, s5
 800f422:	ee25 5a21 	vmul.f32	s10, s10, s3
 800f426:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800f42a:	ee35 5a44 	vsub.f32	s10, s10, s8
 800f42e:	edc3 2a00 	vstr	s5, [r3]
 800f432:	ed83 5a01 	vstr	s10, [r3, #4]
 800f436:	ee75 5ac7 	vsub.f32	s11, s11, s14
 800f43a:	9b03      	ldr	r3, [sp, #12]
 800f43c:	ee36 6a43 	vsub.f32	s12, s12, s6
 800f440:	ed93 4a01 	vldr	s8, [r3, #4]
 800f444:	ed93 5a00 	vldr	s10, [r3]
 800f448:	9b00      	ldr	r3, [sp, #0]
 800f44a:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800f44e:	ee66 4a05 	vmul.f32	s9, s12, s10
 800f452:	ee25 5a85 	vmul.f32	s10, s11, s10
 800f456:	ee26 6a04 	vmul.f32	s12, s12, s8
 800f45a:	ee65 5a84 	vmul.f32	s11, s11, s8
 800f45e:	ee35 6a46 	vsub.f32	s12, s10, s12
 800f462:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800f466:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800f46a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800f46e:	ed85 6a01 	vstr	s12, [r5, #4]
 800f472:	edc5 5a00 	vstr	s11, [r5]
 800f476:	edd3 5a01 	vldr	s11, [r3, #4]
 800f47a:	edd3 6a00 	vldr	s13, [r3]
 800f47e:	ee37 7a02 	vadd.f32	s14, s14, s4
 800f482:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800f486:	ee27 6a26 	vmul.f32	s12, s14, s13
 800f48a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800f48e:	ee27 7a25 	vmul.f32	s14, s14, s11
 800f492:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800f496:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800f49a:	ee76 7a27 	vadd.f32	s15, s12, s15
 800f49e:	ed84 7a01 	vstr	s14, [r4, #4]
 800f4a2:	edc4 7a00 	vstr	s15, [r4]
 800f4a6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f4a8:	9100      	str	r1, [sp, #0]
 800f4aa:	6862      	ldr	r2, [r4, #4]
 800f4ac:	2304      	movs	r3, #4
 800f4ae:	f000 f901 	bl	800f6b4 <arm_radix8_butterfly_f32>
 800f4b2:	9807      	ldr	r0, [sp, #28]
 800f4b4:	9900      	ldr	r1, [sp, #0]
 800f4b6:	6862      	ldr	r2, [r4, #4]
 800f4b8:	2304      	movs	r3, #4
 800f4ba:	f000 f8fb 	bl	800f6b4 <arm_radix8_butterfly_f32>
 800f4be:	9808      	ldr	r0, [sp, #32]
 800f4c0:	9900      	ldr	r1, [sp, #0]
 800f4c2:	6862      	ldr	r2, [r4, #4]
 800f4c4:	2304      	movs	r3, #4
 800f4c6:	f000 f8f5 	bl	800f6b4 <arm_radix8_butterfly_f32>
 800f4ca:	9900      	ldr	r1, [sp, #0]
 800f4cc:	6862      	ldr	r2, [r4, #4]
 800f4ce:	4640      	mov	r0, r8
 800f4d0:	2304      	movs	r3, #4
 800f4d2:	b00d      	add	sp, #52	@ 0x34
 800f4d4:	ecbd 8b0a 	vpop	{d8-d12}
 800f4d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4dc:	f000 b8ea 	b.w	800f6b4 <arm_radix8_butterfly_f32>

0800f4e0 <arm_cfft_f32>:
 800f4e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f4e4:	2a01      	cmp	r2, #1
 800f4e6:	8805      	ldrh	r5, [r0, #0]
 800f4e8:	4607      	mov	r7, r0
 800f4ea:	4690      	mov	r8, r2
 800f4ec:	460c      	mov	r4, r1
 800f4ee:	4699      	mov	r9, r3
 800f4f0:	d05c      	beq.n	800f5ac <arm_cfft_f32+0xcc>
 800f4f2:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800f4f6:	d054      	beq.n	800f5a2 <arm_cfft_f32+0xc2>
 800f4f8:	d810      	bhi.n	800f51c <arm_cfft_f32+0x3c>
 800f4fa:	2d40      	cmp	r5, #64	@ 0x40
 800f4fc:	d015      	beq.n	800f52a <arm_cfft_f32+0x4a>
 800f4fe:	d94c      	bls.n	800f59a <arm_cfft_f32+0xba>
 800f500:	2d80      	cmp	r5, #128	@ 0x80
 800f502:	d103      	bne.n	800f50c <arm_cfft_f32+0x2c>
 800f504:	4621      	mov	r1, r4
 800f506:	4638      	mov	r0, r7
 800f508:	f7ff fcc2 	bl	800ee90 <arm_cfft_radix8by2_f32>
 800f50c:	f1b9 0f00 	cmp.w	r9, #0
 800f510:	d114      	bne.n	800f53c <arm_cfft_f32+0x5c>
 800f512:	f1b8 0f01 	cmp.w	r8, #1
 800f516:	d019      	beq.n	800f54c <arm_cfft_f32+0x6c>
 800f518:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f51c:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 800f520:	d03f      	beq.n	800f5a2 <arm_cfft_f32+0xc2>
 800f522:	d933      	bls.n	800f58c <arm_cfft_f32+0xac>
 800f524:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 800f528:	d1f0      	bne.n	800f50c <arm_cfft_f32+0x2c>
 800f52a:	687a      	ldr	r2, [r7, #4]
 800f52c:	2301      	movs	r3, #1
 800f52e:	4629      	mov	r1, r5
 800f530:	4620      	mov	r0, r4
 800f532:	f000 f8bf 	bl	800f6b4 <arm_radix8_butterfly_f32>
 800f536:	f1b9 0f00 	cmp.w	r9, #0
 800f53a:	d0ea      	beq.n	800f512 <arm_cfft_f32+0x32>
 800f53c:	68ba      	ldr	r2, [r7, #8]
 800f53e:	89b9      	ldrh	r1, [r7, #12]
 800f540:	4620      	mov	r0, r4
 800f542:	f000 f845 	bl	800f5d0 <arm_bitreversal_32>
 800f546:	f1b8 0f01 	cmp.w	r8, #1
 800f54a:	d1e5      	bne.n	800f518 <arm_cfft_f32+0x38>
 800f54c:	ee07 5a90 	vmov	s15, r5
 800f550:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f554:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f558:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f55c:	2d00      	cmp	r5, #0
 800f55e:	d0db      	beq.n	800f518 <arm_cfft_f32+0x38>
 800f560:	f104 0108 	add.w	r1, r4, #8
 800f564:	2300      	movs	r3, #0
 800f566:	3301      	adds	r3, #1
 800f568:	429d      	cmp	r5, r3
 800f56a:	f101 0108 	add.w	r1, r1, #8
 800f56e:	ed11 7a04 	vldr	s14, [r1, #-16]
 800f572:	ed51 7a03 	vldr	s15, [r1, #-12]
 800f576:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f57a:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800f57e:	ed01 7a04 	vstr	s14, [r1, #-16]
 800f582:	ed41 7a03 	vstr	s15, [r1, #-12]
 800f586:	d1ee      	bne.n	800f566 <arm_cfft_f32+0x86>
 800f588:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f58c:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 800f590:	d0cb      	beq.n	800f52a <arm_cfft_f32+0x4a>
 800f592:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 800f596:	d0b5      	beq.n	800f504 <arm_cfft_f32+0x24>
 800f598:	e7b8      	b.n	800f50c <arm_cfft_f32+0x2c>
 800f59a:	2d10      	cmp	r5, #16
 800f59c:	d0b2      	beq.n	800f504 <arm_cfft_f32+0x24>
 800f59e:	2d20      	cmp	r5, #32
 800f5a0:	d1b4      	bne.n	800f50c <arm_cfft_f32+0x2c>
 800f5a2:	4621      	mov	r1, r4
 800f5a4:	4638      	mov	r0, r7
 800f5a6:	f7ff fd45 	bl	800f034 <arm_cfft_radix8by4_f32>
 800f5aa:	e7af      	b.n	800f50c <arm_cfft_f32+0x2c>
 800f5ac:	b16d      	cbz	r5, 800f5ca <arm_cfft_f32+0xea>
 800f5ae:	310c      	adds	r1, #12
 800f5b0:	2600      	movs	r6, #0
 800f5b2:	ed51 7a02 	vldr	s15, [r1, #-8]
 800f5b6:	3601      	adds	r6, #1
 800f5b8:	eef1 7a67 	vneg.f32	s15, s15
 800f5bc:	42b5      	cmp	r5, r6
 800f5be:	ed41 7a02 	vstr	s15, [r1, #-8]
 800f5c2:	f101 0108 	add.w	r1, r1, #8
 800f5c6:	d1f4      	bne.n	800f5b2 <arm_cfft_f32+0xd2>
 800f5c8:	e793      	b.n	800f4f2 <arm_cfft_f32+0x12>
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d0a4      	beq.n	800f518 <arm_cfft_f32+0x38>
 800f5ce:	e7b5      	b.n	800f53c <arm_cfft_f32+0x5c>

0800f5d0 <arm_bitreversal_32>:
 800f5d0:	b1e9      	cbz	r1, 800f60e <arm_bitreversal_32+0x3e>
 800f5d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f5d4:	2500      	movs	r5, #0
 800f5d6:	f102 0e02 	add.w	lr, r2, #2
 800f5da:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 800f5de:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 800f5e2:	08a4      	lsrs	r4, r4, #2
 800f5e4:	089b      	lsrs	r3, r3, #2
 800f5e6:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800f5ea:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 800f5ee:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800f5f2:	00a6      	lsls	r6, r4, #2
 800f5f4:	009b      	lsls	r3, r3, #2
 800f5f6:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800f5fa:	3304      	adds	r3, #4
 800f5fc:	1d34      	adds	r4, r6, #4
 800f5fe:	3502      	adds	r5, #2
 800f600:	58c6      	ldr	r6, [r0, r3]
 800f602:	5907      	ldr	r7, [r0, r4]
 800f604:	50c7      	str	r7, [r0, r3]
 800f606:	428d      	cmp	r5, r1
 800f608:	5106      	str	r6, [r0, r4]
 800f60a:	d3e6      	bcc.n	800f5da <arm_bitreversal_32+0xa>
 800f60c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f60e:	4770      	bx	lr

0800f610 <arm_cfft_init_f32>:
 800f610:	4603      	mov	r3, r0
 800f612:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800f616:	f04f 0000 	mov.w	r0, #0
 800f61a:	b410      	push	{r4}
 800f61c:	8019      	strh	r1, [r3, #0]
 800f61e:	6058      	str	r0, [r3, #4]
 800f620:	d033      	beq.n	800f68a <arm_cfft_init_f32+0x7a>
 800f622:	d918      	bls.n	800f656 <arm_cfft_init_f32+0x46>
 800f624:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 800f628:	d027      	beq.n	800f67a <arm_cfft_init_f32+0x6a>
 800f62a:	d90c      	bls.n	800f646 <arm_cfft_init_f32+0x36>
 800f62c:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 800f630:	d11e      	bne.n	800f670 <arm_cfft_init_f32+0x60>
 800f632:	4a17      	ldr	r2, [pc, #92]	@ (800f690 <arm_cfft_init_f32+0x80>)
 800f634:	8994      	ldrh	r4, [r2, #12]
 800f636:	819c      	strh	r4, [r3, #12]
 800f638:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 800f63c:	e9c3 2101 	strd	r2, r1, [r3, #4]
 800f640:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f644:	4770      	bx	lr
 800f646:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800f64a:	d018      	beq.n	800f67e <arm_cfft_init_f32+0x6e>
 800f64c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800f650:	d10e      	bne.n	800f670 <arm_cfft_init_f32+0x60>
 800f652:	4a10      	ldr	r2, [pc, #64]	@ (800f694 <arm_cfft_init_f32+0x84>)
 800f654:	e7ee      	b.n	800f634 <arm_cfft_init_f32+0x24>
 800f656:	2940      	cmp	r1, #64	@ 0x40
 800f658:	d013      	beq.n	800f682 <arm_cfft_init_f32+0x72>
 800f65a:	d903      	bls.n	800f664 <arm_cfft_init_f32+0x54>
 800f65c:	2980      	cmp	r1, #128	@ 0x80
 800f65e:	d107      	bne.n	800f670 <arm_cfft_init_f32+0x60>
 800f660:	4a0d      	ldr	r2, [pc, #52]	@ (800f698 <arm_cfft_init_f32+0x88>)
 800f662:	e7e7      	b.n	800f634 <arm_cfft_init_f32+0x24>
 800f664:	2910      	cmp	r1, #16
 800f666:	d00e      	beq.n	800f686 <arm_cfft_init_f32+0x76>
 800f668:	2920      	cmp	r1, #32
 800f66a:	d101      	bne.n	800f670 <arm_cfft_init_f32+0x60>
 800f66c:	4a0b      	ldr	r2, [pc, #44]	@ (800f69c <arm_cfft_init_f32+0x8c>)
 800f66e:	e7e1      	b.n	800f634 <arm_cfft_init_f32+0x24>
 800f670:	f04f 30ff 	mov.w	r0, #4294967295
 800f674:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f678:	4770      	bx	lr
 800f67a:	4a09      	ldr	r2, [pc, #36]	@ (800f6a0 <arm_cfft_init_f32+0x90>)
 800f67c:	e7da      	b.n	800f634 <arm_cfft_init_f32+0x24>
 800f67e:	4a09      	ldr	r2, [pc, #36]	@ (800f6a4 <arm_cfft_init_f32+0x94>)
 800f680:	e7d8      	b.n	800f634 <arm_cfft_init_f32+0x24>
 800f682:	4a09      	ldr	r2, [pc, #36]	@ (800f6a8 <arm_cfft_init_f32+0x98>)
 800f684:	e7d6      	b.n	800f634 <arm_cfft_init_f32+0x24>
 800f686:	4a09      	ldr	r2, [pc, #36]	@ (800f6ac <arm_cfft_init_f32+0x9c>)
 800f688:	e7d4      	b.n	800f634 <arm_cfft_init_f32+0x24>
 800f68a:	4a09      	ldr	r2, [pc, #36]	@ (800f6b0 <arm_cfft_init_f32+0xa0>)
 800f68c:	e7d2      	b.n	800f634 <arm_cfft_init_f32+0x24>
 800f68e:	bf00      	nop
 800f690:	0802de44 	.word	0x0802de44
 800f694:	0802dde4 	.word	0x0802dde4
 800f698:	0802ddf4 	.word	0x0802ddf4
 800f69c:	0802de34 	.word	0x0802de34
 800f6a0:	0802de14 	.word	0x0802de14
 800f6a4:	0802de54 	.word	0x0802de54
 800f6a8:	0802de64 	.word	0x0802de64
 800f6ac:	0802de04 	.word	0x0802de04
 800f6b0:	0802de24 	.word	0x0802de24

0800f6b4 <arm_radix8_butterfly_f32>:
 800f6b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6b8:	ed2d 8b10 	vpush	{d8-d15}
 800f6bc:	b093      	sub	sp, #76	@ 0x4c
 800f6be:	e9cd 320e 	strd	r3, r2, [sp, #56]	@ 0x38
 800f6c2:	4603      	mov	r3, r0
 800f6c4:	3304      	adds	r3, #4
 800f6c6:	ed9f bac0 	vldr	s22, [pc, #768]	@ 800f9c8 <arm_radix8_butterfly_f32+0x314>
 800f6ca:	9010      	str	r0, [sp, #64]	@ 0x40
 800f6cc:	468b      	mov	fp, r1
 800f6ce:	9311      	str	r3, [sp, #68]	@ 0x44
 800f6d0:	4689      	mov	r9, r1
 800f6d2:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800f6d4:	ea4f 05db 	mov.w	r5, fp, lsr #3
 800f6d8:	eb04 1245 	add.w	r2, r4, r5, lsl #5
 800f6dc:	eb02 1105 	add.w	r1, r2, r5, lsl #4
 800f6e0:	eba5 0385 	sub.w	r3, r5, r5, lsl #2
 800f6e4:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 800f6e8:	ea4f 1e05 	mov.w	lr, r5, lsl #4
 800f6ec:	eb05 0a85 	add.w	sl, r5, r5, lsl #2
 800f6f0:	9100      	str	r1, [sp, #0]
 800f6f2:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800f6f6:	f108 0004 	add.w	r0, r8, #4
 800f6fa:	f10e 0104 	add.w	r1, lr, #4
 800f6fe:	462e      	mov	r6, r5
 800f700:	4420      	add	r0, r4
 800f702:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f706:	4421      	add	r1, r4
 800f708:	ea4f 04ca 	mov.w	r4, sl, lsl #3
 800f70c:	960d      	str	r6, [sp, #52]	@ 0x34
 800f70e:	9402      	str	r4, [sp, #8]
 800f710:	012c      	lsls	r4, r5, #4
 800f712:	ebc6 0cc6 	rsb	ip, r6, r6, lsl #3
 800f716:	9403      	str	r4, [sp, #12]
 800f718:	00ec      	lsls	r4, r5, #3
 800f71a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800f71c:	9404      	str	r4, [sp, #16]
 800f71e:	ea4f 04cc 	mov.w	r4, ip, lsl #3
 800f722:	9405      	str	r4, [sp, #20]
 800f724:	016c      	lsls	r4, r5, #5
 800f726:	9401      	str	r4, [sp, #4]
 800f728:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800f72a:	9c00      	ldr	r4, [sp, #0]
 800f72c:	eb03 1746 	add.w	r7, r3, r6, lsl #5
 800f730:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 800f734:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800f738:	f04f 0c00 	mov.w	ip, #0
 800f73c:	edd6 6a00 	vldr	s13, [r6]
 800f740:	edd7 1a00 	vldr	s3, [r7]
 800f744:	ed15 aa01 	vldr	s20, [r5, #-4]
 800f748:	edd2 5a00 	vldr	s11, [r2]
 800f74c:	ed51 9a01 	vldr	s19, [r1, #-4]
 800f750:	ed94 6a00 	vldr	s12, [r4]
 800f754:	ed50 7a01 	vldr	s15, [r0, #-4]
 800f758:	ed93 3a00 	vldr	s6, [r3]
 800f75c:	ee39 0a86 	vadd.f32	s0, s19, s12
 800f760:	ee33 2a21 	vadd.f32	s4, s6, s3
 800f764:	ee37 5aa6 	vadd.f32	s10, s15, s13
 800f768:	ee7a 4a25 	vadd.f32	s9, s20, s11
 800f76c:	ee35 7a02 	vadd.f32	s14, s10, s4
 800f770:	ee34 4a80 	vadd.f32	s8, s9, s0
 800f774:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f778:	ee74 6a07 	vadd.f32	s13, s8, s14
 800f77c:	ee34 4a47 	vsub.f32	s8, s8, s14
 800f780:	ed45 6a01 	vstr	s13, [r5, #-4]
 800f784:	ed82 4a00 	vstr	s8, [r2]
 800f788:	edd0 6a00 	vldr	s13, [r0]
 800f78c:	ed96 9a01 	vldr	s18, [r6, #4]
 800f790:	edd3 2a01 	vldr	s5, [r3, #4]
 800f794:	edd7 8a01 	vldr	s17, [r7, #4]
 800f798:	edd5 0a00 	vldr	s1, [r5]
 800f79c:	edd2 3a01 	vldr	s7, [r2, #4]
 800f7a0:	ed94 8a01 	vldr	s16, [r4, #4]
 800f7a4:	ed91 7a00 	vldr	s14, [r1]
 800f7a8:	ee33 3a61 	vsub.f32	s6, s6, s3
 800f7ac:	ee36 4ac9 	vsub.f32	s8, s13, s18
 800f7b0:	ee72 aae8 	vsub.f32	s21, s5, s17
 800f7b4:	ee77 1ac3 	vsub.f32	s3, s15, s6
 800f7b8:	ee34 1a2a 	vadd.f32	s2, s8, s21
 800f7bc:	ee77 7a83 	vadd.f32	s15, s15, s6
 800f7c0:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800f7c4:	ee30 3aa3 	vadd.f32	s6, s1, s7
 800f7c8:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800f7cc:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800f7d0:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800f7d4:	ee77 0a08 	vadd.f32	s1, s14, s16
 800f7d8:	ee21 1a0b 	vmul.f32	s2, s2, s22
 800f7dc:	ee37 7a48 	vsub.f32	s14, s14, s16
 800f7e0:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800f7e4:	ee7a 5a65 	vsub.f32	s11, s20, s11
 800f7e8:	ee76 6a89 	vadd.f32	s13, s13, s18
 800f7ec:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800f7f0:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800f7f4:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800f7f8:	ee35 5a42 	vsub.f32	s10, s10, s4
 800f7fc:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800f800:	ee33 2a20 	vadd.f32	s4, s6, s1
 800f804:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800f808:	ee33 3a60 	vsub.f32	s6, s6, s1
 800f80c:	ee75 2aa1 	vadd.f32	s5, s11, s3
 800f810:	ee77 0a01 	vadd.f32	s1, s14, s2
 800f814:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800f818:	ee37 7a41 	vsub.f32	s14, s14, s2
 800f81c:	ee73 1a84 	vadd.f32	s3, s7, s8
 800f820:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800f824:	ee76 3a27 	vadd.f32	s7, s12, s15
 800f828:	ee76 7a67 	vsub.f32	s15, s12, s15
 800f82c:	ee32 8a00 	vadd.f32	s16, s4, s0
 800f830:	ee33 1a45 	vsub.f32	s2, s6, s10
 800f834:	ee32 2a40 	vsub.f32	s4, s4, s0
 800f838:	ee35 5a03 	vadd.f32	s10, s10, s6
 800f83c:	ee34 0aa6 	vadd.f32	s0, s9, s13
 800f840:	ee32 3aa0 	vadd.f32	s6, s5, s1
 800f844:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800f848:	ee34 6a67 	vsub.f32	s12, s8, s15
 800f84c:	ee75 4a87 	vadd.f32	s9, s11, s14
 800f850:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800f854:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800f858:	ee77 7a84 	vadd.f32	s15, s15, s8
 800f85c:	ee71 5ae3 	vsub.f32	s11, s3, s7
 800f860:	44dc      	add	ip, fp
 800f862:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800f866:	45e1      	cmp	r9, ip
 800f868:	ed85 8a00 	vstr	s16, [r5]
 800f86c:	ed82 2a01 	vstr	s4, [r2, #4]
 800f870:	4455      	add	r5, sl
 800f872:	ed01 0a01 	vstr	s0, [r1, #-4]
 800f876:	4452      	add	r2, sl
 800f878:	edc4 6a00 	vstr	s13, [r4]
 800f87c:	ed81 1a00 	vstr	s2, [r1]
 800f880:	ed84 5a01 	vstr	s10, [r4, #4]
 800f884:	4451      	add	r1, sl
 800f886:	ed00 3a01 	vstr	s6, [r0, #-4]
 800f88a:	4454      	add	r4, sl
 800f88c:	edc7 2a00 	vstr	s5, [r7]
 800f890:	edc6 4a00 	vstr	s9, [r6]
 800f894:	ed83 7a00 	vstr	s14, [r3]
 800f898:	edc0 5a00 	vstr	s11, [r0]
 800f89c:	edc7 3a01 	vstr	s7, [r7, #4]
 800f8a0:	4450      	add	r0, sl
 800f8a2:	ed86 6a01 	vstr	s12, [r6, #4]
 800f8a6:	4457      	add	r7, sl
 800f8a8:	edc3 7a01 	vstr	s15, [r3, #4]
 800f8ac:	4456      	add	r6, sl
 800f8ae:	4453      	add	r3, sl
 800f8b0:	f63f af44 	bhi.w	800f73c <arm_radix8_butterfly_f32+0x88>
 800f8b4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f8b6:	2b07      	cmp	r3, #7
 800f8b8:	f240 81c3 	bls.w	800fc42 <arm_radix8_butterfly_f32+0x58e>
 800f8bc:	9805      	ldr	r0, [sp, #20]
 800f8be:	9a01      	ldr	r2, [sp, #4]
 800f8c0:	9b03      	ldr	r3, [sp, #12]
 800f8c2:	9d04      	ldr	r5, [sp, #16]
 800f8c4:	9902      	ldr	r1, [sp, #8]
 800f8c6:	f100 0c08 	add.w	ip, r0, #8
 800f8ca:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800f8cc:	3208      	adds	r2, #8
 800f8ce:	1882      	adds	r2, r0, r2
 800f8d0:	3308      	adds	r3, #8
 800f8d2:	920a      	str	r2, [sp, #40]	@ 0x28
 800f8d4:	4602      	mov	r2, r0
 800f8d6:	18d3      	adds	r3, r2, r3
 800f8d8:	3108      	adds	r1, #8
 800f8da:	3508      	adds	r5, #8
 800f8dc:	1851      	adds	r1, r2, r1
 800f8de:	9307      	str	r3, [sp, #28]
 800f8e0:	4613      	mov	r3, r2
 800f8e2:	442a      	add	r2, r5
 800f8e4:	9206      	str	r2, [sp, #24]
 800f8e6:	461a      	mov	r2, r3
 800f8e8:	4462      	add	r2, ip
 800f8ea:	f10e 0e0c 	add.w	lr, lr, #12
 800f8ee:	9205      	str	r2, [sp, #20]
 800f8f0:	461a      	mov	r2, r3
 800f8f2:	4472      	add	r2, lr
 800f8f4:	f108 0808 	add.w	r8, r8, #8
 800f8f8:	330c      	adds	r3, #12
 800f8fa:	4440      	add	r0, r8
 800f8fc:	f04f 0e00 	mov.w	lr, #0
 800f900:	9203      	str	r2, [sp, #12]
 800f902:	9304      	str	r3, [sp, #16]
 800f904:	465a      	mov	r2, fp
 800f906:	464b      	mov	r3, r9
 800f908:	46f3      	mov	fp, lr
 800f90a:	46d1      	mov	r9, sl
 800f90c:	9009      	str	r0, [sp, #36]	@ 0x24
 800f90e:	9108      	str	r1, [sp, #32]
 800f910:	f04f 0801 	mov.w	r8, #1
 800f914:	469a      	mov	sl, r3
 800f916:	4696      	mov	lr, r2
 800f918:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f91a:	449b      	add	fp, r3
 800f91c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f91e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f922:	eb03 02cb 	add.w	r2, r3, fp, lsl #3
 800f926:	eb02 00cb 	add.w	r0, r2, fp, lsl #3
 800f92a:	eb00 04cb 	add.w	r4, r0, fp, lsl #3
 800f92e:	eb04 05cb 	add.w	r5, r4, fp, lsl #3
 800f932:	eb05 06cb 	add.w	r6, r5, fp, lsl #3
 800f936:	930c      	str	r3, [sp, #48]	@ 0x30
 800f938:	eb06 07cb 	add.w	r7, r6, fp, lsl #3
 800f93c:	ebab 038b 	sub.w	r3, fp, fp, lsl #2
 800f940:	920b      	str	r2, [sp, #44]	@ 0x2c
 800f942:	eb07 1203 	add.w	r2, r7, r3, lsl #4
 800f946:	eb02 0ccb 	add.w	ip, r2, fp, lsl #3
 800f94a:	eb0c 03cb 	add.w	r3, ip, fp, lsl #3
 800f94e:	9202      	str	r2, [sp, #8]
 800f950:	eb03 02cb 	add.w	r2, r3, fp, lsl #3
 800f954:	9301      	str	r3, [sp, #4]
 800f956:	4613      	mov	r3, r2
 800f958:	edd3 da01 	vldr	s27, [r3, #4]
 800f95c:	9b01      	ldr	r3, [sp, #4]
 800f95e:	edd0 7a00 	vldr	s15, [r0]
 800f962:	ed93 da01 	vldr	s26, [r3, #4]
 800f966:	9b02      	ldr	r3, [sp, #8]
 800f968:	edcd 7a02 	vstr	s15, [sp, #8]
 800f96c:	ed93 ca01 	vldr	s24, [r3, #4]
 800f970:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f972:	eddc ca01 	vldr	s25, [ip, #4]
 800f976:	edd3 7a00 	vldr	s15, [r3]
 800f97a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f97c:	edcd 7a01 	vstr	s15, [sp, #4]
 800f980:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800f984:	eb02 01cb 	add.w	r1, r2, fp, lsl #3
 800f988:	9200      	str	r2, [sp, #0]
 800f98a:	eb01 02cb 	add.w	r2, r1, fp, lsl #3
 800f98e:	edd3 7a00 	vldr	s15, [r3]
 800f992:	ed92 fa01 	vldr	s30, [r2, #4]
 800f996:	9a00      	ldr	r2, [sp, #0]
 800f998:	edd1 ea01 	vldr	s29, [r1, #4]
 800f99c:	ed92 ea01 	vldr	s28, [r2, #4]
 800f9a0:	edd7 ba00 	vldr	s23, [r7]
 800f9a4:	edd6 aa00 	vldr	s21, [r6]
 800f9a8:	ed95 aa00 	vldr	s20, [r5]
 800f9ac:	edd4 9a00 	vldr	s19, [r4]
 800f9b0:	edcd 7a00 	vstr	s15, [sp]
 800f9b4:	e9dd 7603 	ldrd	r7, r6, [sp, #12]
 800f9b8:	e9dd 5405 	ldrd	r5, r4, [sp, #20]
 800f9bc:	e9dd 0107 	ldrd	r0, r1, [sp, #28]
 800f9c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	@ 0x24
 800f9c4:	46c4      	mov	ip, r8
 800f9c6:	e001      	b.n	800f9cc <arm_radix8_butterfly_f32+0x318>
 800f9c8:	3f3504f3 	.word	0x3f3504f3
 800f9cc:	ed91 6a00 	vldr	s12, [r1]
 800f9d0:	ed93 5a00 	vldr	s10, [r3]
 800f9d4:	edd0 fa00 	vldr	s31, [r0]
 800f9d8:	edd4 7a00 	vldr	s15, [r4]
 800f9dc:	ed95 7a00 	vldr	s14, [r5]
 800f9e0:	ed56 3a01 	vldr	s7, [r6, #-4]
 800f9e4:	ed17 3a01 	vldr	s6, [r7, #-4]
 800f9e8:	ed92 2a00 	vldr	s4, [r2]
 800f9ec:	ed96 0a00 	vldr	s0, [r6]
 800f9f0:	ee33 8a85 	vadd.f32	s16, s7, s10
 800f9f4:	ee32 1a06 	vadd.f32	s2, s4, s12
 800f9f8:	ee33 4a2f 	vadd.f32	s8, s6, s31
 800f9fc:	ee77 4a87 	vadd.f32	s9, s15, s14
 800fa00:	ee78 1a04 	vadd.f32	s3, s16, s8
 800fa04:	ee71 6a24 	vadd.f32	s13, s2, s9
 800fa08:	ee32 2a46 	vsub.f32	s4, s4, s12
 800fa0c:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800fa10:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fa14:	ed06 6a01 	vstr	s12, [r6, #-4]
 800fa18:	edd4 8a01 	vldr	s17, [r4, #4]
 800fa1c:	ed92 9a01 	vldr	s18, [r2, #4]
 800fa20:	edd7 0a00 	vldr	s1, [r7]
 800fa24:	edd1 2a01 	vldr	s5, [r1, #4]
 800fa28:	ed95 7a01 	vldr	s14, [r5, #4]
 800fa2c:	ed93 6a01 	vldr	s12, [r3, #4]
 800fa30:	edd0 5a01 	vldr	s11, [r0, #4]
 800fa34:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800fa38:	ee33 3a6f 	vsub.f32	s6, s6, s31
 800fa3c:	ee39 5a62 	vsub.f32	s10, s18, s5
 800fa40:	ee78 fac7 	vsub.f32	s31, s17, s14
 800fa44:	ee38 4a44 	vsub.f32	s8, s16, s8
 800fa48:	ee38 7a87 	vadd.f32	s14, s17, s14
 800fa4c:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800fa50:	ee79 2a22 	vadd.f32	s5, s18, s5
 800fa54:	ee32 9a27 	vadd.f32	s18, s4, s15
 800fa58:	ee72 7a67 	vsub.f32	s15, s4, s15
 800fa5c:	ee30 2a06 	vadd.f32	s4, s0, s12
 800fa60:	ee75 8a6f 	vsub.f32	s17, s10, s31
 800fa64:	ee71 4a64 	vsub.f32	s9, s2, s9
 800fa68:	ee35 5a2f 	vadd.f32	s10, s10, s31
 800fa6c:	ee32 1a08 	vadd.f32	s2, s4, s16
 800fa70:	ee72 fa87 	vadd.f32	s31, s5, s14
 800fa74:	ee32 2a48 	vsub.f32	s4, s4, s16
 800fa78:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800fa7c:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800fa80:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800fa84:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800fa88:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800fa8c:	ee29 9a0b 	vmul.f32	s18, s18, s22
 800fa90:	ee71 1a6f 	vsub.f32	s3, s2, s31
 800fa94:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800fa98:	ee30 6a46 	vsub.f32	s12, s0, s12
 800fa9c:	ee74 0a22 	vadd.f32	s1, s8, s5
 800faa0:	ee36 0a28 	vadd.f32	s0, s12, s17
 800faa4:	ee74 2a62 	vsub.f32	s5, s8, s5
 800faa8:	ee36 6a68 	vsub.f32	s12, s12, s17
 800faac:	ee32 4a64 	vsub.f32	s8, s4, s9
 800fab0:	ee73 8a09 	vadd.f32	s17, s6, s18
 800fab4:	ee74 4a82 	vadd.f32	s9, s9, s4
 800fab8:	ee33 9a49 	vsub.f32	s18, s6, s18
 800fabc:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 800fac0:	ee35 3a85 	vadd.f32	s6, s11, s10
 800fac4:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800fac8:	ee33 5aa7 	vadd.f32	s10, s7, s15
 800facc:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800fad0:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800fad4:	ee30 7a68 	vsub.f32	s14, s0, s17
 800fad8:	ee35 8a03 	vadd.f32	s16, s10, s6
 800fadc:	ee38 0a80 	vadd.f32	s0, s17, s0
 800fae0:	ee73 3a82 	vadd.f32	s7, s7, s4
 800fae4:	ee69 8aa1 	vmul.f32	s17, s19, s3
 800fae8:	ed9d 2a00 	vldr	s4, [sp]
 800faec:	eddd 1a01 	vldr	s3, [sp, #4]
 800faf0:	ee35 5a43 	vsub.f32	s10, s10, s6
 800faf4:	ee71 fa2f 	vadd.f32	s31, s2, s31
 800faf8:	ee37 3aa5 	vadd.f32	s6, s15, s11
 800fafc:	ee21 1aa0 	vmul.f32	s2, s3, s1
 800fb00:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800fb04:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 800fb08:	ee76 5a49 	vsub.f32	s11, s12, s18
 800fb0c:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 800fb10:	ee39 6a06 	vadd.f32	s12, s18, s12
 800fb14:	ee2c 9a84 	vmul.f32	s18, s25, s8
 800fb18:	ee21 4a84 	vmul.f32	s8, s3, s8
 800fb1c:	ee6c 1a07 	vmul.f32	s3, s24, s14
 800fb20:	ee22 7a07 	vmul.f32	s14, s4, s14
 800fb24:	ee22 2a08 	vmul.f32	s4, s4, s16
 800fb28:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800fb2c:	ee78 6ae6 	vsub.f32	s13, s17, s13
 800fb30:	ee31 1a09 	vadd.f32	s2, s2, s18
 800fb34:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 800fb38:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 800fb3c:	ee74 0a60 	vsub.f32	s1, s8, s1
 800fb40:	ee37 7a48 	vsub.f32	s14, s14, s16
 800fb44:	ee2f 4a00 	vmul.f32	s8, s30, s0
 800fb48:	ee2b 8a85 	vmul.f32	s16, s23, s10
 800fb4c:	ee72 1a21 	vadd.f32	s3, s4, s3
 800fb50:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 800fb54:	ee38 2a89 	vadd.f32	s4, s17, s18
 800fb58:	ee2f 5a05 	vmul.f32	s10, s30, s10
 800fb5c:	ee38 8a04 	vadd.f32	s16, s16, s8
 800fb60:	ee2e 9a25 	vmul.f32	s18, s28, s11
 800fb64:	ee2a 4a25 	vmul.f32	s8, s20, s11
 800fb68:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 800fb6c:	eddd 5a02 	vldr	s11, [sp, #8]
 800fb70:	edc6 fa00 	vstr	s31, [r6]
 800fb74:	ee2b 0a80 	vmul.f32	s0, s23, s0
 800fb78:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800fb7c:	ee30 0a45 	vsub.f32	s0, s0, s10
 800fb80:	ee6a 4a03 	vmul.f32	s9, s20, s6
 800fb84:	ee65 8aa7 	vmul.f32	s17, s11, s15
 800fb88:	ee2d 5a06 	vmul.f32	s10, s26, s12
 800fb8c:	ee2e 3a03 	vmul.f32	s6, s28, s6
 800fb90:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800fb94:	ee25 6a86 	vmul.f32	s12, s11, s12
 800fb98:	ee74 4a89 	vadd.f32	s9, s9, s18
 800fb9c:	ee34 3a43 	vsub.f32	s6, s8, s6
 800fba0:	ee78 8a85 	vadd.f32	s17, s17, s10
 800fba4:	ee36 6a67 	vsub.f32	s12, s12, s15
 800fba8:	44f4      	add	ip, lr
 800fbaa:	45e2      	cmp	sl, ip
 800fbac:	edc3 3a00 	vstr	s7, [r3]
 800fbb0:	edc3 6a01 	vstr	s13, [r3, #4]
 800fbb4:	444e      	add	r6, r9
 800fbb6:	ed07 1a01 	vstr	s2, [r7, #-4]
 800fbba:	edc7 0a00 	vstr	s1, [r7]
 800fbbe:	444b      	add	r3, r9
 800fbc0:	ed80 2a00 	vstr	s4, [r0]
 800fbc4:	edc0 2a01 	vstr	s5, [r0, #4]
 800fbc8:	444f      	add	r7, r9
 800fbca:	edc2 1a00 	vstr	s3, [r2]
 800fbce:	ed82 7a01 	vstr	s14, [r2, #4]
 800fbd2:	4448      	add	r0, r9
 800fbd4:	ed85 8a00 	vstr	s16, [r5]
 800fbd8:	ed85 0a01 	vstr	s0, [r5, #4]
 800fbdc:	444a      	add	r2, r9
 800fbde:	edc1 4a00 	vstr	s9, [r1]
 800fbe2:	444d      	add	r5, r9
 800fbe4:	ed81 3a01 	vstr	s6, [r1, #4]
 800fbe8:	edc4 8a00 	vstr	s17, [r4]
 800fbec:	ed84 6a01 	vstr	s12, [r4, #4]
 800fbf0:	4449      	add	r1, r9
 800fbf2:	444c      	add	r4, r9
 800fbf4:	f63f aeea 	bhi.w	800f9cc <arm_radix8_butterfly_f32+0x318>
 800fbf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fbfa:	3308      	adds	r3, #8
 800fbfc:	930a      	str	r3, [sp, #40]	@ 0x28
 800fbfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fc00:	3308      	adds	r3, #8
 800fc02:	9309      	str	r3, [sp, #36]	@ 0x24
 800fc04:	9b08      	ldr	r3, [sp, #32]
 800fc06:	3308      	adds	r3, #8
 800fc08:	9308      	str	r3, [sp, #32]
 800fc0a:	9b07      	ldr	r3, [sp, #28]
 800fc0c:	3308      	adds	r3, #8
 800fc0e:	9307      	str	r3, [sp, #28]
 800fc10:	9b06      	ldr	r3, [sp, #24]
 800fc12:	3308      	adds	r3, #8
 800fc14:	9306      	str	r3, [sp, #24]
 800fc16:	9b05      	ldr	r3, [sp, #20]
 800fc18:	3308      	adds	r3, #8
 800fc1a:	9305      	str	r3, [sp, #20]
 800fc1c:	9b04      	ldr	r3, [sp, #16]
 800fc1e:	3308      	adds	r3, #8
 800fc20:	9304      	str	r3, [sp, #16]
 800fc22:	9b03      	ldr	r3, [sp, #12]
 800fc24:	3308      	adds	r3, #8
 800fc26:	9303      	str	r3, [sp, #12]
 800fc28:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fc2a:	f108 0801 	add.w	r8, r8, #1
 800fc2e:	4543      	cmp	r3, r8
 800fc30:	f47f ae72 	bne.w	800f918 <arm_radix8_butterfly_f32+0x264>
 800fc34:	469b      	mov	fp, r3
 800fc36:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fc38:	00db      	lsls	r3, r3, #3
 800fc3a:	b29b      	uxth	r3, r3
 800fc3c:	46d1      	mov	r9, sl
 800fc3e:	930e      	str	r3, [sp, #56]	@ 0x38
 800fc40:	e547      	b.n	800f6d2 <arm_radix8_butterfly_f32+0x1e>
 800fc42:	b013      	add	sp, #76	@ 0x4c
 800fc44:	ecbd 8b10 	vpop	{d8-d15}
 800fc48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fc4c <memset>:
 800fc4c:	4402      	add	r2, r0
 800fc4e:	4603      	mov	r3, r0
 800fc50:	4293      	cmp	r3, r2
 800fc52:	d100      	bne.n	800fc56 <memset+0xa>
 800fc54:	4770      	bx	lr
 800fc56:	f803 1b01 	strb.w	r1, [r3], #1
 800fc5a:	e7f9      	b.n	800fc50 <memset+0x4>

0800fc5c <_reclaim_reent>:
 800fc5c:	4b29      	ldr	r3, [pc, #164]	@ (800fd04 <_reclaim_reent+0xa8>)
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	4283      	cmp	r3, r0
 800fc62:	b570      	push	{r4, r5, r6, lr}
 800fc64:	4604      	mov	r4, r0
 800fc66:	d04b      	beq.n	800fd00 <_reclaim_reent+0xa4>
 800fc68:	69c3      	ldr	r3, [r0, #28]
 800fc6a:	b1ab      	cbz	r3, 800fc98 <_reclaim_reent+0x3c>
 800fc6c:	68db      	ldr	r3, [r3, #12]
 800fc6e:	b16b      	cbz	r3, 800fc8c <_reclaim_reent+0x30>
 800fc70:	2500      	movs	r5, #0
 800fc72:	69e3      	ldr	r3, [r4, #28]
 800fc74:	68db      	ldr	r3, [r3, #12]
 800fc76:	5959      	ldr	r1, [r3, r5]
 800fc78:	2900      	cmp	r1, #0
 800fc7a:	d13b      	bne.n	800fcf4 <_reclaim_reent+0x98>
 800fc7c:	3504      	adds	r5, #4
 800fc7e:	2d80      	cmp	r5, #128	@ 0x80
 800fc80:	d1f7      	bne.n	800fc72 <_reclaim_reent+0x16>
 800fc82:	69e3      	ldr	r3, [r4, #28]
 800fc84:	4620      	mov	r0, r4
 800fc86:	68d9      	ldr	r1, [r3, #12]
 800fc88:	f000 f878 	bl	800fd7c <_free_r>
 800fc8c:	69e3      	ldr	r3, [r4, #28]
 800fc8e:	6819      	ldr	r1, [r3, #0]
 800fc90:	b111      	cbz	r1, 800fc98 <_reclaim_reent+0x3c>
 800fc92:	4620      	mov	r0, r4
 800fc94:	f000 f872 	bl	800fd7c <_free_r>
 800fc98:	6961      	ldr	r1, [r4, #20]
 800fc9a:	b111      	cbz	r1, 800fca2 <_reclaim_reent+0x46>
 800fc9c:	4620      	mov	r0, r4
 800fc9e:	f000 f86d 	bl	800fd7c <_free_r>
 800fca2:	69e1      	ldr	r1, [r4, #28]
 800fca4:	b111      	cbz	r1, 800fcac <_reclaim_reent+0x50>
 800fca6:	4620      	mov	r0, r4
 800fca8:	f000 f868 	bl	800fd7c <_free_r>
 800fcac:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800fcae:	b111      	cbz	r1, 800fcb6 <_reclaim_reent+0x5a>
 800fcb0:	4620      	mov	r0, r4
 800fcb2:	f000 f863 	bl	800fd7c <_free_r>
 800fcb6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fcb8:	b111      	cbz	r1, 800fcc0 <_reclaim_reent+0x64>
 800fcba:	4620      	mov	r0, r4
 800fcbc:	f000 f85e 	bl	800fd7c <_free_r>
 800fcc0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800fcc2:	b111      	cbz	r1, 800fcca <_reclaim_reent+0x6e>
 800fcc4:	4620      	mov	r0, r4
 800fcc6:	f000 f859 	bl	800fd7c <_free_r>
 800fcca:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800fccc:	b111      	cbz	r1, 800fcd4 <_reclaim_reent+0x78>
 800fcce:	4620      	mov	r0, r4
 800fcd0:	f000 f854 	bl	800fd7c <_free_r>
 800fcd4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800fcd6:	b111      	cbz	r1, 800fcde <_reclaim_reent+0x82>
 800fcd8:	4620      	mov	r0, r4
 800fcda:	f000 f84f 	bl	800fd7c <_free_r>
 800fcde:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800fce0:	b111      	cbz	r1, 800fce8 <_reclaim_reent+0x8c>
 800fce2:	4620      	mov	r0, r4
 800fce4:	f000 f84a 	bl	800fd7c <_free_r>
 800fce8:	6a23      	ldr	r3, [r4, #32]
 800fcea:	b14b      	cbz	r3, 800fd00 <_reclaim_reent+0xa4>
 800fcec:	4620      	mov	r0, r4
 800fcee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fcf2:	4718      	bx	r3
 800fcf4:	680e      	ldr	r6, [r1, #0]
 800fcf6:	4620      	mov	r0, r4
 800fcf8:	f000 f840 	bl	800fd7c <_free_r>
 800fcfc:	4631      	mov	r1, r6
 800fcfe:	e7bb      	b.n	800fc78 <_reclaim_reent+0x1c>
 800fd00:	bd70      	pop	{r4, r5, r6, pc}
 800fd02:	bf00      	nop
 800fd04:	20000010 	.word	0x20000010

0800fd08 <__errno>:
 800fd08:	4b01      	ldr	r3, [pc, #4]	@ (800fd10 <__errno+0x8>)
 800fd0a:	6818      	ldr	r0, [r3, #0]
 800fd0c:	4770      	bx	lr
 800fd0e:	bf00      	nop
 800fd10:	20000010 	.word	0x20000010

0800fd14 <__libc_init_array>:
 800fd14:	b570      	push	{r4, r5, r6, lr}
 800fd16:	4d0d      	ldr	r5, [pc, #52]	@ (800fd4c <__libc_init_array+0x38>)
 800fd18:	4c0d      	ldr	r4, [pc, #52]	@ (800fd50 <__libc_init_array+0x3c>)
 800fd1a:	1b64      	subs	r4, r4, r5
 800fd1c:	10a4      	asrs	r4, r4, #2
 800fd1e:	2600      	movs	r6, #0
 800fd20:	42a6      	cmp	r6, r4
 800fd22:	d109      	bne.n	800fd38 <__libc_init_array+0x24>
 800fd24:	4d0b      	ldr	r5, [pc, #44]	@ (800fd54 <__libc_init_array+0x40>)
 800fd26:	4c0c      	ldr	r4, [pc, #48]	@ (800fd58 <__libc_init_array+0x44>)
 800fd28:	f000 fdd8 	bl	80108dc <_init>
 800fd2c:	1b64      	subs	r4, r4, r5
 800fd2e:	10a4      	asrs	r4, r4, #2
 800fd30:	2600      	movs	r6, #0
 800fd32:	42a6      	cmp	r6, r4
 800fd34:	d105      	bne.n	800fd42 <__libc_init_array+0x2e>
 800fd36:	bd70      	pop	{r4, r5, r6, pc}
 800fd38:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd3c:	4798      	blx	r3
 800fd3e:	3601      	adds	r6, #1
 800fd40:	e7ee      	b.n	800fd20 <__libc_init_array+0xc>
 800fd42:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd46:	4798      	blx	r3
 800fd48:	3601      	adds	r6, #1
 800fd4a:	e7f2      	b.n	800fd32 <__libc_init_array+0x1e>
 800fd4c:	0802e24c 	.word	0x0802e24c
 800fd50:	0802e24c 	.word	0x0802e24c
 800fd54:	0802e24c 	.word	0x0802e24c
 800fd58:	0802e250 	.word	0x0802e250

0800fd5c <__retarget_lock_acquire_recursive>:
 800fd5c:	4770      	bx	lr

0800fd5e <__retarget_lock_release_recursive>:
 800fd5e:	4770      	bx	lr

0800fd60 <memcpy>:
 800fd60:	440a      	add	r2, r1
 800fd62:	4291      	cmp	r1, r2
 800fd64:	f100 33ff 	add.w	r3, r0, #4294967295
 800fd68:	d100      	bne.n	800fd6c <memcpy+0xc>
 800fd6a:	4770      	bx	lr
 800fd6c:	b510      	push	{r4, lr}
 800fd6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fd72:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fd76:	4291      	cmp	r1, r2
 800fd78:	d1f9      	bne.n	800fd6e <memcpy+0xe>
 800fd7a:	bd10      	pop	{r4, pc}

0800fd7c <_free_r>:
 800fd7c:	b538      	push	{r3, r4, r5, lr}
 800fd7e:	4605      	mov	r5, r0
 800fd80:	2900      	cmp	r1, #0
 800fd82:	d041      	beq.n	800fe08 <_free_r+0x8c>
 800fd84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fd88:	1f0c      	subs	r4, r1, #4
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	bfb8      	it	lt
 800fd8e:	18e4      	addlt	r4, r4, r3
 800fd90:	f000 f83e 	bl	800fe10 <__malloc_lock>
 800fd94:	4a1d      	ldr	r2, [pc, #116]	@ (800fe0c <_free_r+0x90>)
 800fd96:	6813      	ldr	r3, [r2, #0]
 800fd98:	b933      	cbnz	r3, 800fda8 <_free_r+0x2c>
 800fd9a:	6063      	str	r3, [r4, #4]
 800fd9c:	6014      	str	r4, [r2, #0]
 800fd9e:	4628      	mov	r0, r5
 800fda0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fda4:	f000 b83a 	b.w	800fe1c <__malloc_unlock>
 800fda8:	42a3      	cmp	r3, r4
 800fdaa:	d908      	bls.n	800fdbe <_free_r+0x42>
 800fdac:	6820      	ldr	r0, [r4, #0]
 800fdae:	1821      	adds	r1, r4, r0
 800fdb0:	428b      	cmp	r3, r1
 800fdb2:	bf01      	itttt	eq
 800fdb4:	6819      	ldreq	r1, [r3, #0]
 800fdb6:	685b      	ldreq	r3, [r3, #4]
 800fdb8:	1809      	addeq	r1, r1, r0
 800fdba:	6021      	streq	r1, [r4, #0]
 800fdbc:	e7ed      	b.n	800fd9a <_free_r+0x1e>
 800fdbe:	461a      	mov	r2, r3
 800fdc0:	685b      	ldr	r3, [r3, #4]
 800fdc2:	b10b      	cbz	r3, 800fdc8 <_free_r+0x4c>
 800fdc4:	42a3      	cmp	r3, r4
 800fdc6:	d9fa      	bls.n	800fdbe <_free_r+0x42>
 800fdc8:	6811      	ldr	r1, [r2, #0]
 800fdca:	1850      	adds	r0, r2, r1
 800fdcc:	42a0      	cmp	r0, r4
 800fdce:	d10b      	bne.n	800fde8 <_free_r+0x6c>
 800fdd0:	6820      	ldr	r0, [r4, #0]
 800fdd2:	4401      	add	r1, r0
 800fdd4:	1850      	adds	r0, r2, r1
 800fdd6:	4283      	cmp	r3, r0
 800fdd8:	6011      	str	r1, [r2, #0]
 800fdda:	d1e0      	bne.n	800fd9e <_free_r+0x22>
 800fddc:	6818      	ldr	r0, [r3, #0]
 800fdde:	685b      	ldr	r3, [r3, #4]
 800fde0:	6053      	str	r3, [r2, #4]
 800fde2:	4408      	add	r0, r1
 800fde4:	6010      	str	r0, [r2, #0]
 800fde6:	e7da      	b.n	800fd9e <_free_r+0x22>
 800fde8:	d902      	bls.n	800fdf0 <_free_r+0x74>
 800fdea:	230c      	movs	r3, #12
 800fdec:	602b      	str	r3, [r5, #0]
 800fdee:	e7d6      	b.n	800fd9e <_free_r+0x22>
 800fdf0:	6820      	ldr	r0, [r4, #0]
 800fdf2:	1821      	adds	r1, r4, r0
 800fdf4:	428b      	cmp	r3, r1
 800fdf6:	bf04      	itt	eq
 800fdf8:	6819      	ldreq	r1, [r3, #0]
 800fdfa:	685b      	ldreq	r3, [r3, #4]
 800fdfc:	6063      	str	r3, [r4, #4]
 800fdfe:	bf04      	itt	eq
 800fe00:	1809      	addeq	r1, r1, r0
 800fe02:	6021      	streq	r1, [r4, #0]
 800fe04:	6054      	str	r4, [r2, #4]
 800fe06:	e7ca      	b.n	800fd9e <_free_r+0x22>
 800fe08:	bd38      	pop	{r3, r4, r5, pc}
 800fe0a:	bf00      	nop
 800fe0c:	2000a620 	.word	0x2000a620

0800fe10 <__malloc_lock>:
 800fe10:	4801      	ldr	r0, [pc, #4]	@ (800fe18 <__malloc_lock+0x8>)
 800fe12:	f7ff bfa3 	b.w	800fd5c <__retarget_lock_acquire_recursive>
 800fe16:	bf00      	nop
 800fe18:	2000a61c 	.word	0x2000a61c

0800fe1c <__malloc_unlock>:
 800fe1c:	4801      	ldr	r0, [pc, #4]	@ (800fe24 <__malloc_unlock+0x8>)
 800fe1e:	f7ff bf9e 	b.w	800fd5e <__retarget_lock_release_recursive>
 800fe22:	bf00      	nop
 800fe24:	2000a61c 	.word	0x2000a61c

0800fe28 <sqrtf>:
 800fe28:	b508      	push	{r3, lr}
 800fe2a:	ed2d 8b02 	vpush	{d8}
 800fe2e:	eeb0 8a40 	vmov.f32	s16, s0
 800fe32:	f000 f85b 	bl	800feec <__ieee754_sqrtf>
 800fe36:	eeb4 8a48 	vcmp.f32	s16, s16
 800fe3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe3e:	d60c      	bvs.n	800fe5a <sqrtf+0x32>
 800fe40:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800fe60 <sqrtf+0x38>
 800fe44:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800fe48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe4c:	d505      	bpl.n	800fe5a <sqrtf+0x32>
 800fe4e:	f7ff ff5b 	bl	800fd08 <__errno>
 800fe52:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800fe56:	2321      	movs	r3, #33	@ 0x21
 800fe58:	6003      	str	r3, [r0, #0]
 800fe5a:	ecbd 8b02 	vpop	{d8}
 800fe5e:	bd08      	pop	{r3, pc}
 800fe60:	00000000 	.word	0x00000000

0800fe64 <cosf>:
 800fe64:	ee10 3a10 	vmov	r3, s0
 800fe68:	b507      	push	{r0, r1, r2, lr}
 800fe6a:	4a1e      	ldr	r2, [pc, #120]	@ (800fee4 <cosf+0x80>)
 800fe6c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fe70:	4293      	cmp	r3, r2
 800fe72:	d806      	bhi.n	800fe82 <cosf+0x1e>
 800fe74:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800fee8 <cosf+0x84>
 800fe78:	b003      	add	sp, #12
 800fe7a:	f85d eb04 	ldr.w	lr, [sp], #4
 800fe7e:	f000 b839 	b.w	800fef4 <__kernel_cosf>
 800fe82:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800fe86:	d304      	bcc.n	800fe92 <cosf+0x2e>
 800fe88:	ee30 0a40 	vsub.f32	s0, s0, s0
 800fe8c:	b003      	add	sp, #12
 800fe8e:	f85d fb04 	ldr.w	pc, [sp], #4
 800fe92:	4668      	mov	r0, sp
 800fe94:	f000 f8ce 	bl	8010034 <__ieee754_rem_pio2f>
 800fe98:	f000 0003 	and.w	r0, r0, #3
 800fe9c:	2801      	cmp	r0, #1
 800fe9e:	d009      	beq.n	800feb4 <cosf+0x50>
 800fea0:	2802      	cmp	r0, #2
 800fea2:	d010      	beq.n	800fec6 <cosf+0x62>
 800fea4:	b9b0      	cbnz	r0, 800fed4 <cosf+0x70>
 800fea6:	eddd 0a01 	vldr	s1, [sp, #4]
 800feaa:	ed9d 0a00 	vldr	s0, [sp]
 800feae:	f000 f821 	bl	800fef4 <__kernel_cosf>
 800feb2:	e7eb      	b.n	800fe8c <cosf+0x28>
 800feb4:	eddd 0a01 	vldr	s1, [sp, #4]
 800feb8:	ed9d 0a00 	vldr	s0, [sp]
 800febc:	f000 f872 	bl	800ffa4 <__kernel_sinf>
 800fec0:	eeb1 0a40 	vneg.f32	s0, s0
 800fec4:	e7e2      	b.n	800fe8c <cosf+0x28>
 800fec6:	eddd 0a01 	vldr	s1, [sp, #4]
 800feca:	ed9d 0a00 	vldr	s0, [sp]
 800fece:	f000 f811 	bl	800fef4 <__kernel_cosf>
 800fed2:	e7f5      	b.n	800fec0 <cosf+0x5c>
 800fed4:	eddd 0a01 	vldr	s1, [sp, #4]
 800fed8:	ed9d 0a00 	vldr	s0, [sp]
 800fedc:	2001      	movs	r0, #1
 800fede:	f000 f861 	bl	800ffa4 <__kernel_sinf>
 800fee2:	e7d3      	b.n	800fe8c <cosf+0x28>
 800fee4:	3f490fd8 	.word	0x3f490fd8
 800fee8:	00000000 	.word	0x00000000

0800feec <__ieee754_sqrtf>:
 800feec:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800fef0:	4770      	bx	lr
	...

0800fef4 <__kernel_cosf>:
 800fef4:	ee10 3a10 	vmov	r3, s0
 800fef8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fefc:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800ff00:	eef0 6a40 	vmov.f32	s13, s0
 800ff04:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800ff08:	d204      	bcs.n	800ff14 <__kernel_cosf+0x20>
 800ff0a:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800ff0e:	ee17 2a90 	vmov	r2, s15
 800ff12:	b342      	cbz	r2, 800ff66 <__kernel_cosf+0x72>
 800ff14:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800ff18:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800ff84 <__kernel_cosf+0x90>
 800ff1c:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800ff88 <__kernel_cosf+0x94>
 800ff20:	4a1a      	ldr	r2, [pc, #104]	@ (800ff8c <__kernel_cosf+0x98>)
 800ff22:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ff26:	4293      	cmp	r3, r2
 800ff28:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800ff90 <__kernel_cosf+0x9c>
 800ff2c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ff30:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800ff94 <__kernel_cosf+0xa0>
 800ff34:	eea7 6a87 	vfma.f32	s12, s15, s14
 800ff38:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800ff98 <__kernel_cosf+0xa4>
 800ff3c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ff40:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800ff9c <__kernel_cosf+0xa8>
 800ff44:	eea7 6a87 	vfma.f32	s12, s15, s14
 800ff48:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800ff4c:	ee26 6a07 	vmul.f32	s12, s12, s14
 800ff50:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800ff54:	eee7 0a06 	vfma.f32	s1, s14, s12
 800ff58:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ff5c:	d804      	bhi.n	800ff68 <__kernel_cosf+0x74>
 800ff5e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800ff62:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ff66:	4770      	bx	lr
 800ff68:	4a0d      	ldr	r2, [pc, #52]	@ (800ffa0 <__kernel_cosf+0xac>)
 800ff6a:	4293      	cmp	r3, r2
 800ff6c:	bf9a      	itte	ls
 800ff6e:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800ff72:	ee07 3a10 	vmovls	s14, r3
 800ff76:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800ff7a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800ff7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ff82:	e7ec      	b.n	800ff5e <__kernel_cosf+0x6a>
 800ff84:	ad47d74e 	.word	0xad47d74e
 800ff88:	310f74f6 	.word	0x310f74f6
 800ff8c:	3e999999 	.word	0x3e999999
 800ff90:	b493f27c 	.word	0xb493f27c
 800ff94:	37d00d01 	.word	0x37d00d01
 800ff98:	bab60b61 	.word	0xbab60b61
 800ff9c:	3d2aaaab 	.word	0x3d2aaaab
 800ffa0:	3f480000 	.word	0x3f480000

0800ffa4 <__kernel_sinf>:
 800ffa4:	ee10 3a10 	vmov	r3, s0
 800ffa8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ffac:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800ffb0:	d204      	bcs.n	800ffbc <__kernel_sinf+0x18>
 800ffb2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800ffb6:	ee17 3a90 	vmov	r3, s15
 800ffba:	b35b      	cbz	r3, 8010014 <__kernel_sinf+0x70>
 800ffbc:	ee20 7a00 	vmul.f32	s14, s0, s0
 800ffc0:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8010018 <__kernel_sinf+0x74>
 800ffc4:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 801001c <__kernel_sinf+0x78>
 800ffc8:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ffcc:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8010020 <__kernel_sinf+0x7c>
 800ffd0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ffd4:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8010024 <__kernel_sinf+0x80>
 800ffd8:	eea7 6a87 	vfma.f32	s12, s15, s14
 800ffdc:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8010028 <__kernel_sinf+0x84>
 800ffe0:	ee60 6a07 	vmul.f32	s13, s0, s14
 800ffe4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ffe8:	b930      	cbnz	r0, 800fff8 <__kernel_sinf+0x54>
 800ffea:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 801002c <__kernel_sinf+0x88>
 800ffee:	eea7 6a27 	vfma.f32	s12, s14, s15
 800fff2:	eea6 0a26 	vfma.f32	s0, s12, s13
 800fff6:	4770      	bx	lr
 800fff8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800fffc:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8010000:	eee0 7a86 	vfma.f32	s15, s1, s12
 8010004:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8010008:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8010030 <__kernel_sinf+0x8c>
 801000c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8010010:	ee30 0a60 	vsub.f32	s0, s0, s1
 8010014:	4770      	bx	lr
 8010016:	bf00      	nop
 8010018:	2f2ec9d3 	.word	0x2f2ec9d3
 801001c:	b2d72f34 	.word	0xb2d72f34
 8010020:	3638ef1b 	.word	0x3638ef1b
 8010024:	b9500d01 	.word	0xb9500d01
 8010028:	3c088889 	.word	0x3c088889
 801002c:	be2aaaab 	.word	0xbe2aaaab
 8010030:	3e2aaaab 	.word	0x3e2aaaab

08010034 <__ieee754_rem_pio2f>:
 8010034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010036:	ee10 6a10 	vmov	r6, s0
 801003a:	4b88      	ldr	r3, [pc, #544]	@ (801025c <__ieee754_rem_pio2f+0x228>)
 801003c:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8010040:	429d      	cmp	r5, r3
 8010042:	b087      	sub	sp, #28
 8010044:	4604      	mov	r4, r0
 8010046:	d805      	bhi.n	8010054 <__ieee754_rem_pio2f+0x20>
 8010048:	2300      	movs	r3, #0
 801004a:	ed80 0a00 	vstr	s0, [r0]
 801004e:	6043      	str	r3, [r0, #4]
 8010050:	2000      	movs	r0, #0
 8010052:	e022      	b.n	801009a <__ieee754_rem_pio2f+0x66>
 8010054:	4b82      	ldr	r3, [pc, #520]	@ (8010260 <__ieee754_rem_pio2f+0x22c>)
 8010056:	429d      	cmp	r5, r3
 8010058:	d83a      	bhi.n	80100d0 <__ieee754_rem_pio2f+0x9c>
 801005a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801005e:	2e00      	cmp	r6, #0
 8010060:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8010264 <__ieee754_rem_pio2f+0x230>
 8010064:	4a80      	ldr	r2, [pc, #512]	@ (8010268 <__ieee754_rem_pio2f+0x234>)
 8010066:	f023 030f 	bic.w	r3, r3, #15
 801006a:	dd18      	ble.n	801009e <__ieee754_rem_pio2f+0x6a>
 801006c:	4293      	cmp	r3, r2
 801006e:	ee70 7a47 	vsub.f32	s15, s0, s14
 8010072:	bf09      	itett	eq
 8010074:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 801026c <__ieee754_rem_pio2f+0x238>
 8010078:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8010270 <__ieee754_rem_pio2f+0x23c>
 801007c:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8010274 <__ieee754_rem_pio2f+0x240>
 8010080:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8010084:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8010088:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801008c:	ed80 7a00 	vstr	s14, [r0]
 8010090:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010094:	edc0 7a01 	vstr	s15, [r0, #4]
 8010098:	2001      	movs	r0, #1
 801009a:	b007      	add	sp, #28
 801009c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801009e:	4293      	cmp	r3, r2
 80100a0:	ee70 7a07 	vadd.f32	s15, s0, s14
 80100a4:	bf09      	itett	eq
 80100a6:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 801026c <__ieee754_rem_pio2f+0x238>
 80100aa:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8010270 <__ieee754_rem_pio2f+0x23c>
 80100ae:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8010274 <__ieee754_rem_pio2f+0x240>
 80100b2:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80100b6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80100ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80100be:	ed80 7a00 	vstr	s14, [r0]
 80100c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80100c6:	edc0 7a01 	vstr	s15, [r0, #4]
 80100ca:	f04f 30ff 	mov.w	r0, #4294967295
 80100ce:	e7e4      	b.n	801009a <__ieee754_rem_pio2f+0x66>
 80100d0:	4b69      	ldr	r3, [pc, #420]	@ (8010278 <__ieee754_rem_pio2f+0x244>)
 80100d2:	429d      	cmp	r5, r3
 80100d4:	d873      	bhi.n	80101be <__ieee754_rem_pio2f+0x18a>
 80100d6:	f000 f8dd 	bl	8010294 <fabsf>
 80100da:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 801027c <__ieee754_rem_pio2f+0x248>
 80100de:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80100e2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80100e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80100ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80100ee:	ee17 0a90 	vmov	r0, s15
 80100f2:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8010264 <__ieee754_rem_pio2f+0x230>
 80100f6:	eea7 0a67 	vfms.f32	s0, s14, s15
 80100fa:	281f      	cmp	r0, #31
 80100fc:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8010270 <__ieee754_rem_pio2f+0x23c>
 8010100:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010104:	eeb1 6a47 	vneg.f32	s12, s14
 8010108:	ee70 6a67 	vsub.f32	s13, s0, s15
 801010c:	ee16 1a90 	vmov	r1, s13
 8010110:	dc09      	bgt.n	8010126 <__ieee754_rem_pio2f+0xf2>
 8010112:	4a5b      	ldr	r2, [pc, #364]	@ (8010280 <__ieee754_rem_pio2f+0x24c>)
 8010114:	1e47      	subs	r7, r0, #1
 8010116:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801011a:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 801011e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8010122:	4293      	cmp	r3, r2
 8010124:	d107      	bne.n	8010136 <__ieee754_rem_pio2f+0x102>
 8010126:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 801012a:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 801012e:	2a08      	cmp	r2, #8
 8010130:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8010134:	dc14      	bgt.n	8010160 <__ieee754_rem_pio2f+0x12c>
 8010136:	6021      	str	r1, [r4, #0]
 8010138:	ed94 7a00 	vldr	s14, [r4]
 801013c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8010140:	2e00      	cmp	r6, #0
 8010142:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010146:	ed84 0a01 	vstr	s0, [r4, #4]
 801014a:	daa6      	bge.n	801009a <__ieee754_rem_pio2f+0x66>
 801014c:	eeb1 7a47 	vneg.f32	s14, s14
 8010150:	eeb1 0a40 	vneg.f32	s0, s0
 8010154:	ed84 7a00 	vstr	s14, [r4]
 8010158:	ed84 0a01 	vstr	s0, [r4, #4]
 801015c:	4240      	negs	r0, r0
 801015e:	e79c      	b.n	801009a <__ieee754_rem_pio2f+0x66>
 8010160:	eddf 5a42 	vldr	s11, [pc, #264]	@ 801026c <__ieee754_rem_pio2f+0x238>
 8010164:	eef0 6a40 	vmov.f32	s13, s0
 8010168:	eee6 6a25 	vfma.f32	s13, s12, s11
 801016c:	ee70 7a66 	vsub.f32	s15, s0, s13
 8010170:	eee6 7a25 	vfma.f32	s15, s12, s11
 8010174:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8010274 <__ieee754_rem_pio2f+0x240>
 8010178:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801017c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8010180:	ee15 2a90 	vmov	r2, s11
 8010184:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8010188:	1a5b      	subs	r3, r3, r1
 801018a:	2b19      	cmp	r3, #25
 801018c:	dc04      	bgt.n	8010198 <__ieee754_rem_pio2f+0x164>
 801018e:	edc4 5a00 	vstr	s11, [r4]
 8010192:	eeb0 0a66 	vmov.f32	s0, s13
 8010196:	e7cf      	b.n	8010138 <__ieee754_rem_pio2f+0x104>
 8010198:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8010284 <__ieee754_rem_pio2f+0x250>
 801019c:	eeb0 0a66 	vmov.f32	s0, s13
 80101a0:	eea6 0a25 	vfma.f32	s0, s12, s11
 80101a4:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80101a8:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8010288 <__ieee754_rem_pio2f+0x254>
 80101ac:	eee6 7a25 	vfma.f32	s15, s12, s11
 80101b0:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80101b4:	ee30 7a67 	vsub.f32	s14, s0, s15
 80101b8:	ed84 7a00 	vstr	s14, [r4]
 80101bc:	e7bc      	b.n	8010138 <__ieee754_rem_pio2f+0x104>
 80101be:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 80101c2:	d306      	bcc.n	80101d2 <__ieee754_rem_pio2f+0x19e>
 80101c4:	ee70 7a40 	vsub.f32	s15, s0, s0
 80101c8:	edc0 7a01 	vstr	s15, [r0, #4]
 80101cc:	edc0 7a00 	vstr	s15, [r0]
 80101d0:	e73e      	b.n	8010050 <__ieee754_rem_pio2f+0x1c>
 80101d2:	15ea      	asrs	r2, r5, #23
 80101d4:	3a86      	subs	r2, #134	@ 0x86
 80101d6:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80101da:	ee07 3a90 	vmov	s15, r3
 80101de:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80101e2:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 801028c <__ieee754_rem_pio2f+0x258>
 80101e6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80101ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80101ee:	ed8d 7a03 	vstr	s14, [sp, #12]
 80101f2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80101f6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80101fa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80101fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010202:	ed8d 7a04 	vstr	s14, [sp, #16]
 8010206:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801020a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801020e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010212:	edcd 7a05 	vstr	s15, [sp, #20]
 8010216:	d11e      	bne.n	8010256 <__ieee754_rem_pio2f+0x222>
 8010218:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801021c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010220:	bf0c      	ite	eq
 8010222:	2301      	moveq	r3, #1
 8010224:	2302      	movne	r3, #2
 8010226:	491a      	ldr	r1, [pc, #104]	@ (8010290 <__ieee754_rem_pio2f+0x25c>)
 8010228:	9101      	str	r1, [sp, #4]
 801022a:	2102      	movs	r1, #2
 801022c:	9100      	str	r1, [sp, #0]
 801022e:	a803      	add	r0, sp, #12
 8010230:	4621      	mov	r1, r4
 8010232:	f000 f837 	bl	80102a4 <__kernel_rem_pio2f>
 8010236:	2e00      	cmp	r6, #0
 8010238:	f6bf af2f 	bge.w	801009a <__ieee754_rem_pio2f+0x66>
 801023c:	edd4 7a00 	vldr	s15, [r4]
 8010240:	eef1 7a67 	vneg.f32	s15, s15
 8010244:	edc4 7a00 	vstr	s15, [r4]
 8010248:	edd4 7a01 	vldr	s15, [r4, #4]
 801024c:	eef1 7a67 	vneg.f32	s15, s15
 8010250:	edc4 7a01 	vstr	s15, [r4, #4]
 8010254:	e782      	b.n	801015c <__ieee754_rem_pio2f+0x128>
 8010256:	2303      	movs	r3, #3
 8010258:	e7e5      	b.n	8010226 <__ieee754_rem_pio2f+0x1f2>
 801025a:	bf00      	nop
 801025c:	3f490fd8 	.word	0x3f490fd8
 8010260:	4016cbe3 	.word	0x4016cbe3
 8010264:	3fc90f80 	.word	0x3fc90f80
 8010268:	3fc90fd0 	.word	0x3fc90fd0
 801026c:	37354400 	.word	0x37354400
 8010270:	37354443 	.word	0x37354443
 8010274:	2e85a308 	.word	0x2e85a308
 8010278:	43490f80 	.word	0x43490f80
 801027c:	3f22f984 	.word	0x3f22f984
 8010280:	0802de74 	.word	0x0802de74
 8010284:	2e85a300 	.word	0x2e85a300
 8010288:	248d3132 	.word	0x248d3132
 801028c:	43800000 	.word	0x43800000
 8010290:	0802def4 	.word	0x0802def4

08010294 <fabsf>:
 8010294:	ee10 3a10 	vmov	r3, s0
 8010298:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801029c:	ee00 3a10 	vmov	s0, r3
 80102a0:	4770      	bx	lr
	...

080102a4 <__kernel_rem_pio2f>:
 80102a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102a8:	ed2d 8b04 	vpush	{d8-d9}
 80102ac:	b0d9      	sub	sp, #356	@ 0x164
 80102ae:	4690      	mov	r8, r2
 80102b0:	9001      	str	r0, [sp, #4]
 80102b2:	4ab9      	ldr	r2, [pc, #740]	@ (8010598 <__kernel_rem_pio2f+0x2f4>)
 80102b4:	9866      	ldr	r0, [sp, #408]	@ 0x198
 80102b6:	f118 0f04 	cmn.w	r8, #4
 80102ba:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 80102be:	460f      	mov	r7, r1
 80102c0:	f103 3bff 	add.w	fp, r3, #4294967295
 80102c4:	db27      	blt.n	8010316 <__kernel_rem_pio2f+0x72>
 80102c6:	f1b8 0203 	subs.w	r2, r8, #3
 80102ca:	bf48      	it	mi
 80102cc:	f108 0204 	addmi.w	r2, r8, #4
 80102d0:	10d2      	asrs	r2, r2, #3
 80102d2:	1c55      	adds	r5, r2, #1
 80102d4:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80102d6:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 80105a8 <__kernel_rem_pio2f+0x304>
 80102da:	00e8      	lsls	r0, r5, #3
 80102dc:	eba2 060b 	sub.w	r6, r2, fp
 80102e0:	9002      	str	r0, [sp, #8]
 80102e2:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 80102e6:	eb0a 0c0b 	add.w	ip, sl, fp
 80102ea:	ac1c      	add	r4, sp, #112	@ 0x70
 80102ec:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 80102f0:	2000      	movs	r0, #0
 80102f2:	4560      	cmp	r0, ip
 80102f4:	dd11      	ble.n	801031a <__kernel_rem_pio2f+0x76>
 80102f6:	a91c      	add	r1, sp, #112	@ 0x70
 80102f8:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 80102fc:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8010300:	f04f 0c00 	mov.w	ip, #0
 8010304:	45d4      	cmp	ip, sl
 8010306:	dc27      	bgt.n	8010358 <__kernel_rem_pio2f+0xb4>
 8010308:	f8dd e004 	ldr.w	lr, [sp, #4]
 801030c:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 80105a8 <__kernel_rem_pio2f+0x304>
 8010310:	4606      	mov	r6, r0
 8010312:	2400      	movs	r4, #0
 8010314:	e016      	b.n	8010344 <__kernel_rem_pio2f+0xa0>
 8010316:	2200      	movs	r2, #0
 8010318:	e7db      	b.n	80102d2 <__kernel_rem_pio2f+0x2e>
 801031a:	42c6      	cmn	r6, r0
 801031c:	bf5d      	ittte	pl
 801031e:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8010322:	ee07 1a90 	vmovpl	s15, r1
 8010326:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801032a:	eef0 7a47 	vmovmi.f32	s15, s14
 801032e:	ece4 7a01 	vstmia	r4!, {s15}
 8010332:	3001      	adds	r0, #1
 8010334:	e7dd      	b.n	80102f2 <__kernel_rem_pio2f+0x4e>
 8010336:	ecfe 6a01 	vldmia	lr!, {s13}
 801033a:	ed96 7a00 	vldr	s14, [r6]
 801033e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010342:	3401      	adds	r4, #1
 8010344:	455c      	cmp	r4, fp
 8010346:	f1a6 0604 	sub.w	r6, r6, #4
 801034a:	ddf4      	ble.n	8010336 <__kernel_rem_pio2f+0x92>
 801034c:	ece9 7a01 	vstmia	r9!, {s15}
 8010350:	f10c 0c01 	add.w	ip, ip, #1
 8010354:	3004      	adds	r0, #4
 8010356:	e7d5      	b.n	8010304 <__kernel_rem_pio2f+0x60>
 8010358:	a908      	add	r1, sp, #32
 801035a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801035e:	9104      	str	r1, [sp, #16]
 8010360:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8010362:	eddf 8a90 	vldr	s17, [pc, #576]	@ 80105a4 <__kernel_rem_pio2f+0x300>
 8010366:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 80105a0 <__kernel_rem_pio2f+0x2fc>
 801036a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801036e:	9203      	str	r2, [sp, #12]
 8010370:	4654      	mov	r4, sl
 8010372:	00a2      	lsls	r2, r4, #2
 8010374:	9205      	str	r2, [sp, #20]
 8010376:	aa58      	add	r2, sp, #352	@ 0x160
 8010378:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 801037c:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8010380:	a944      	add	r1, sp, #272	@ 0x110
 8010382:	aa08      	add	r2, sp, #32
 8010384:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8010388:	4694      	mov	ip, r2
 801038a:	4626      	mov	r6, r4
 801038c:	2e00      	cmp	r6, #0
 801038e:	f1a0 0004 	sub.w	r0, r0, #4
 8010392:	dc4c      	bgt.n	801042e <__kernel_rem_pio2f+0x18a>
 8010394:	4628      	mov	r0, r5
 8010396:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801039a:	f000 f9f5 	bl	8010788 <scalbnf>
 801039e:	eeb0 8a40 	vmov.f32	s16, s0
 80103a2:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 80103a6:	ee28 0a00 	vmul.f32	s0, s16, s0
 80103aa:	f000 fa53 	bl	8010854 <floorf>
 80103ae:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 80103b2:	eea0 8a67 	vfms.f32	s16, s0, s15
 80103b6:	2d00      	cmp	r5, #0
 80103b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80103bc:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80103c0:	ee17 9a90 	vmov	r9, s15
 80103c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80103c8:	ee38 8a67 	vsub.f32	s16, s16, s15
 80103cc:	dd41      	ble.n	8010452 <__kernel_rem_pio2f+0x1ae>
 80103ce:	f104 3cff 	add.w	ip, r4, #4294967295
 80103d2:	a908      	add	r1, sp, #32
 80103d4:	f1c5 0e08 	rsb	lr, r5, #8
 80103d8:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 80103dc:	fa46 f00e 	asr.w	r0, r6, lr
 80103e0:	4481      	add	r9, r0
 80103e2:	fa00 f00e 	lsl.w	r0, r0, lr
 80103e6:	1a36      	subs	r6, r6, r0
 80103e8:	f1c5 0007 	rsb	r0, r5, #7
 80103ec:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 80103f0:	4106      	asrs	r6, r0
 80103f2:	2e00      	cmp	r6, #0
 80103f4:	dd3c      	ble.n	8010470 <__kernel_rem_pio2f+0x1cc>
 80103f6:	f04f 0e00 	mov.w	lr, #0
 80103fa:	f109 0901 	add.w	r9, r9, #1
 80103fe:	4670      	mov	r0, lr
 8010400:	4574      	cmp	r4, lr
 8010402:	dc68      	bgt.n	80104d6 <__kernel_rem_pio2f+0x232>
 8010404:	2d00      	cmp	r5, #0
 8010406:	dd03      	ble.n	8010410 <__kernel_rem_pio2f+0x16c>
 8010408:	2d01      	cmp	r5, #1
 801040a:	d074      	beq.n	80104f6 <__kernel_rem_pio2f+0x252>
 801040c:	2d02      	cmp	r5, #2
 801040e:	d07d      	beq.n	801050c <__kernel_rem_pio2f+0x268>
 8010410:	2e02      	cmp	r6, #2
 8010412:	d12d      	bne.n	8010470 <__kernel_rem_pio2f+0x1cc>
 8010414:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8010418:	ee30 8a48 	vsub.f32	s16, s0, s16
 801041c:	b340      	cbz	r0, 8010470 <__kernel_rem_pio2f+0x1cc>
 801041e:	4628      	mov	r0, r5
 8010420:	9306      	str	r3, [sp, #24]
 8010422:	f000 f9b1 	bl	8010788 <scalbnf>
 8010426:	9b06      	ldr	r3, [sp, #24]
 8010428:	ee38 8a40 	vsub.f32	s16, s16, s0
 801042c:	e020      	b.n	8010470 <__kernel_rem_pio2f+0x1cc>
 801042e:	ee60 7a28 	vmul.f32	s15, s0, s17
 8010432:	3e01      	subs	r6, #1
 8010434:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010438:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801043c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8010440:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8010444:	ecac 0a01 	vstmia	ip!, {s0}
 8010448:	ed90 0a00 	vldr	s0, [r0]
 801044c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8010450:	e79c      	b.n	801038c <__kernel_rem_pio2f+0xe8>
 8010452:	d105      	bne.n	8010460 <__kernel_rem_pio2f+0x1bc>
 8010454:	1e60      	subs	r0, r4, #1
 8010456:	a908      	add	r1, sp, #32
 8010458:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 801045c:	11f6      	asrs	r6, r6, #7
 801045e:	e7c8      	b.n	80103f2 <__kernel_rem_pio2f+0x14e>
 8010460:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010464:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8010468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801046c:	da31      	bge.n	80104d2 <__kernel_rem_pio2f+0x22e>
 801046e:	2600      	movs	r6, #0
 8010470:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8010474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010478:	f040 8098 	bne.w	80105ac <__kernel_rem_pio2f+0x308>
 801047c:	1e60      	subs	r0, r4, #1
 801047e:	2200      	movs	r2, #0
 8010480:	4550      	cmp	r0, sl
 8010482:	da4b      	bge.n	801051c <__kernel_rem_pio2f+0x278>
 8010484:	2a00      	cmp	r2, #0
 8010486:	d065      	beq.n	8010554 <__kernel_rem_pio2f+0x2b0>
 8010488:	3c01      	subs	r4, #1
 801048a:	ab08      	add	r3, sp, #32
 801048c:	3d08      	subs	r5, #8
 801048e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8010492:	2b00      	cmp	r3, #0
 8010494:	d0f8      	beq.n	8010488 <__kernel_rem_pio2f+0x1e4>
 8010496:	4628      	mov	r0, r5
 8010498:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801049c:	f000 f974 	bl	8010788 <scalbnf>
 80104a0:	1c63      	adds	r3, r4, #1
 80104a2:	aa44      	add	r2, sp, #272	@ 0x110
 80104a4:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80105a4 <__kernel_rem_pio2f+0x300>
 80104a8:	0099      	lsls	r1, r3, #2
 80104aa:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80104ae:	4623      	mov	r3, r4
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	f280 80a9 	bge.w	8010608 <__kernel_rem_pio2f+0x364>
 80104b6:	4623      	mov	r3, r4
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	f2c0 80c7 	blt.w	801064c <__kernel_rem_pio2f+0x3a8>
 80104be:	aa44      	add	r2, sp, #272	@ 0x110
 80104c0:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80104c4:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 801059c <__kernel_rem_pio2f+0x2f8>
 80104c8:	eddf 7a37 	vldr	s15, [pc, #220]	@ 80105a8 <__kernel_rem_pio2f+0x304>
 80104cc:	2000      	movs	r0, #0
 80104ce:	1ae2      	subs	r2, r4, r3
 80104d0:	e0b1      	b.n	8010636 <__kernel_rem_pio2f+0x392>
 80104d2:	2602      	movs	r6, #2
 80104d4:	e78f      	b.n	80103f6 <__kernel_rem_pio2f+0x152>
 80104d6:	f852 1b04 	ldr.w	r1, [r2], #4
 80104da:	b948      	cbnz	r0, 80104f0 <__kernel_rem_pio2f+0x24c>
 80104dc:	b121      	cbz	r1, 80104e8 <__kernel_rem_pio2f+0x244>
 80104de:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80104e2:	f842 1c04 	str.w	r1, [r2, #-4]
 80104e6:	2101      	movs	r1, #1
 80104e8:	f10e 0e01 	add.w	lr, lr, #1
 80104ec:	4608      	mov	r0, r1
 80104ee:	e787      	b.n	8010400 <__kernel_rem_pio2f+0x15c>
 80104f0:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 80104f4:	e7f5      	b.n	80104e2 <__kernel_rem_pio2f+0x23e>
 80104f6:	f104 3cff 	add.w	ip, r4, #4294967295
 80104fa:	aa08      	add	r2, sp, #32
 80104fc:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8010500:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8010504:	a908      	add	r1, sp, #32
 8010506:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801050a:	e781      	b.n	8010410 <__kernel_rem_pio2f+0x16c>
 801050c:	f104 3cff 	add.w	ip, r4, #4294967295
 8010510:	aa08      	add	r2, sp, #32
 8010512:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8010516:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801051a:	e7f3      	b.n	8010504 <__kernel_rem_pio2f+0x260>
 801051c:	a908      	add	r1, sp, #32
 801051e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8010522:	3801      	subs	r0, #1
 8010524:	430a      	orrs	r2, r1
 8010526:	e7ab      	b.n	8010480 <__kernel_rem_pio2f+0x1dc>
 8010528:	3201      	adds	r2, #1
 801052a:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 801052e:	2e00      	cmp	r6, #0
 8010530:	d0fa      	beq.n	8010528 <__kernel_rem_pio2f+0x284>
 8010532:	9905      	ldr	r1, [sp, #20]
 8010534:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8010538:	eb0d 0001 	add.w	r0, sp, r1
 801053c:	18e6      	adds	r6, r4, r3
 801053e:	a91c      	add	r1, sp, #112	@ 0x70
 8010540:	f104 0c01 	add.w	ip, r4, #1
 8010544:	384c      	subs	r0, #76	@ 0x4c
 8010546:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 801054a:	4422      	add	r2, r4
 801054c:	4562      	cmp	r2, ip
 801054e:	da04      	bge.n	801055a <__kernel_rem_pio2f+0x2b6>
 8010550:	4614      	mov	r4, r2
 8010552:	e70e      	b.n	8010372 <__kernel_rem_pio2f+0xce>
 8010554:	9804      	ldr	r0, [sp, #16]
 8010556:	2201      	movs	r2, #1
 8010558:	e7e7      	b.n	801052a <__kernel_rem_pio2f+0x286>
 801055a:	9903      	ldr	r1, [sp, #12]
 801055c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010560:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8010564:	9105      	str	r1, [sp, #20]
 8010566:	ee07 1a90 	vmov	s15, r1
 801056a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801056e:	2400      	movs	r4, #0
 8010570:	ece6 7a01 	vstmia	r6!, {s15}
 8010574:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80105a8 <__kernel_rem_pio2f+0x304>
 8010578:	46b1      	mov	r9, r6
 801057a:	455c      	cmp	r4, fp
 801057c:	dd04      	ble.n	8010588 <__kernel_rem_pio2f+0x2e4>
 801057e:	ece0 7a01 	vstmia	r0!, {s15}
 8010582:	f10c 0c01 	add.w	ip, ip, #1
 8010586:	e7e1      	b.n	801054c <__kernel_rem_pio2f+0x2a8>
 8010588:	ecfe 6a01 	vldmia	lr!, {s13}
 801058c:	ed39 7a01 	vldmdb	r9!, {s14}
 8010590:	3401      	adds	r4, #1
 8010592:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010596:	e7f0      	b.n	801057a <__kernel_rem_pio2f+0x2d6>
 8010598:	0802e238 	.word	0x0802e238
 801059c:	0802e20c 	.word	0x0802e20c
 80105a0:	43800000 	.word	0x43800000
 80105a4:	3b800000 	.word	0x3b800000
 80105a8:	00000000 	.word	0x00000000
 80105ac:	9b02      	ldr	r3, [sp, #8]
 80105ae:	eeb0 0a48 	vmov.f32	s0, s16
 80105b2:	eba3 0008 	sub.w	r0, r3, r8
 80105b6:	f000 f8e7 	bl	8010788 <scalbnf>
 80105ba:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 80105a0 <__kernel_rem_pio2f+0x2fc>
 80105be:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80105c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105c6:	db19      	blt.n	80105fc <__kernel_rem_pio2f+0x358>
 80105c8:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 80105a4 <__kernel_rem_pio2f+0x300>
 80105cc:	ee60 7a27 	vmul.f32	s15, s0, s15
 80105d0:	aa08      	add	r2, sp, #32
 80105d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80105d6:	3508      	adds	r5, #8
 80105d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80105dc:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80105e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80105e4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80105e8:	ee10 3a10 	vmov	r3, s0
 80105ec:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80105f0:	ee17 3a90 	vmov	r3, s15
 80105f4:	3401      	adds	r4, #1
 80105f6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80105fa:	e74c      	b.n	8010496 <__kernel_rem_pio2f+0x1f2>
 80105fc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8010600:	aa08      	add	r2, sp, #32
 8010602:	ee10 3a10 	vmov	r3, s0
 8010606:	e7f6      	b.n	80105f6 <__kernel_rem_pio2f+0x352>
 8010608:	a808      	add	r0, sp, #32
 801060a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801060e:	9001      	str	r0, [sp, #4]
 8010610:	ee07 0a90 	vmov	s15, r0
 8010614:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010618:	3b01      	subs	r3, #1
 801061a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801061e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8010622:	ed62 7a01 	vstmdb	r2!, {s15}
 8010626:	e743      	b.n	80104b0 <__kernel_rem_pio2f+0x20c>
 8010628:	ecfc 6a01 	vldmia	ip!, {s13}
 801062c:	ecb5 7a01 	vldmia	r5!, {s14}
 8010630:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010634:	3001      	adds	r0, #1
 8010636:	4550      	cmp	r0, sl
 8010638:	dc01      	bgt.n	801063e <__kernel_rem_pio2f+0x39a>
 801063a:	4282      	cmp	r2, r0
 801063c:	daf4      	bge.n	8010628 <__kernel_rem_pio2f+0x384>
 801063e:	a858      	add	r0, sp, #352	@ 0x160
 8010640:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8010644:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8010648:	3b01      	subs	r3, #1
 801064a:	e735      	b.n	80104b8 <__kernel_rem_pio2f+0x214>
 801064c:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801064e:	2b02      	cmp	r3, #2
 8010650:	dc09      	bgt.n	8010666 <__kernel_rem_pio2f+0x3c2>
 8010652:	2b00      	cmp	r3, #0
 8010654:	dc2b      	bgt.n	80106ae <__kernel_rem_pio2f+0x40a>
 8010656:	d044      	beq.n	80106e2 <__kernel_rem_pio2f+0x43e>
 8010658:	f009 0007 	and.w	r0, r9, #7
 801065c:	b059      	add	sp, #356	@ 0x164
 801065e:	ecbd 8b04 	vpop	{d8-d9}
 8010662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010666:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8010668:	2b03      	cmp	r3, #3
 801066a:	d1f5      	bne.n	8010658 <__kernel_rem_pio2f+0x3b4>
 801066c:	aa30      	add	r2, sp, #192	@ 0xc0
 801066e:	1f0b      	subs	r3, r1, #4
 8010670:	4413      	add	r3, r2
 8010672:	461a      	mov	r2, r3
 8010674:	4620      	mov	r0, r4
 8010676:	2800      	cmp	r0, #0
 8010678:	f1a2 0204 	sub.w	r2, r2, #4
 801067c:	dc52      	bgt.n	8010724 <__kernel_rem_pio2f+0x480>
 801067e:	4622      	mov	r2, r4
 8010680:	2a01      	cmp	r2, #1
 8010682:	f1a3 0304 	sub.w	r3, r3, #4
 8010686:	dc5d      	bgt.n	8010744 <__kernel_rem_pio2f+0x4a0>
 8010688:	ab30      	add	r3, sp, #192	@ 0xc0
 801068a:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 80105a8 <__kernel_rem_pio2f+0x304>
 801068e:	440b      	add	r3, r1
 8010690:	2c01      	cmp	r4, #1
 8010692:	dc67      	bgt.n	8010764 <__kernel_rem_pio2f+0x4c0>
 8010694:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8010698:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 801069c:	2e00      	cmp	r6, #0
 801069e:	d167      	bne.n	8010770 <__kernel_rem_pio2f+0x4cc>
 80106a0:	edc7 6a00 	vstr	s13, [r7]
 80106a4:	ed87 7a01 	vstr	s14, [r7, #4]
 80106a8:	edc7 7a02 	vstr	s15, [r7, #8]
 80106ac:	e7d4      	b.n	8010658 <__kernel_rem_pio2f+0x3b4>
 80106ae:	ab30      	add	r3, sp, #192	@ 0xc0
 80106b0:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 80105a8 <__kernel_rem_pio2f+0x304>
 80106b4:	440b      	add	r3, r1
 80106b6:	4622      	mov	r2, r4
 80106b8:	2a00      	cmp	r2, #0
 80106ba:	da24      	bge.n	8010706 <__kernel_rem_pio2f+0x462>
 80106bc:	b34e      	cbz	r6, 8010712 <__kernel_rem_pio2f+0x46e>
 80106be:	eef1 7a47 	vneg.f32	s15, s14
 80106c2:	edc7 7a00 	vstr	s15, [r7]
 80106c6:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 80106ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80106ce:	aa31      	add	r2, sp, #196	@ 0xc4
 80106d0:	2301      	movs	r3, #1
 80106d2:	429c      	cmp	r4, r3
 80106d4:	da20      	bge.n	8010718 <__kernel_rem_pio2f+0x474>
 80106d6:	b10e      	cbz	r6, 80106dc <__kernel_rem_pio2f+0x438>
 80106d8:	eef1 7a67 	vneg.f32	s15, s15
 80106dc:	edc7 7a01 	vstr	s15, [r7, #4]
 80106e0:	e7ba      	b.n	8010658 <__kernel_rem_pio2f+0x3b4>
 80106e2:	ab30      	add	r3, sp, #192	@ 0xc0
 80106e4:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 80105a8 <__kernel_rem_pio2f+0x304>
 80106e8:	440b      	add	r3, r1
 80106ea:	2c00      	cmp	r4, #0
 80106ec:	da05      	bge.n	80106fa <__kernel_rem_pio2f+0x456>
 80106ee:	b10e      	cbz	r6, 80106f4 <__kernel_rem_pio2f+0x450>
 80106f0:	eef1 7a67 	vneg.f32	s15, s15
 80106f4:	edc7 7a00 	vstr	s15, [r7]
 80106f8:	e7ae      	b.n	8010658 <__kernel_rem_pio2f+0x3b4>
 80106fa:	ed33 7a01 	vldmdb	r3!, {s14}
 80106fe:	3c01      	subs	r4, #1
 8010700:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010704:	e7f1      	b.n	80106ea <__kernel_rem_pio2f+0x446>
 8010706:	ed73 7a01 	vldmdb	r3!, {s15}
 801070a:	3a01      	subs	r2, #1
 801070c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010710:	e7d2      	b.n	80106b8 <__kernel_rem_pio2f+0x414>
 8010712:	eef0 7a47 	vmov.f32	s15, s14
 8010716:	e7d4      	b.n	80106c2 <__kernel_rem_pio2f+0x41e>
 8010718:	ecb2 7a01 	vldmia	r2!, {s14}
 801071c:	3301      	adds	r3, #1
 801071e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010722:	e7d6      	b.n	80106d2 <__kernel_rem_pio2f+0x42e>
 8010724:	edd2 7a00 	vldr	s15, [r2]
 8010728:	edd2 6a01 	vldr	s13, [r2, #4]
 801072c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8010730:	3801      	subs	r0, #1
 8010732:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010736:	ed82 7a00 	vstr	s14, [r2]
 801073a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801073e:	edc2 7a01 	vstr	s15, [r2, #4]
 8010742:	e798      	b.n	8010676 <__kernel_rem_pio2f+0x3d2>
 8010744:	edd3 7a00 	vldr	s15, [r3]
 8010748:	edd3 6a01 	vldr	s13, [r3, #4]
 801074c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8010750:	3a01      	subs	r2, #1
 8010752:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010756:	ed83 7a00 	vstr	s14, [r3]
 801075a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801075e:	edc3 7a01 	vstr	s15, [r3, #4]
 8010762:	e78d      	b.n	8010680 <__kernel_rem_pio2f+0x3dc>
 8010764:	ed33 7a01 	vldmdb	r3!, {s14}
 8010768:	3c01      	subs	r4, #1
 801076a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801076e:	e78f      	b.n	8010690 <__kernel_rem_pio2f+0x3ec>
 8010770:	eef1 6a66 	vneg.f32	s13, s13
 8010774:	eeb1 7a47 	vneg.f32	s14, s14
 8010778:	edc7 6a00 	vstr	s13, [r7]
 801077c:	ed87 7a01 	vstr	s14, [r7, #4]
 8010780:	eef1 7a67 	vneg.f32	s15, s15
 8010784:	e790      	b.n	80106a8 <__kernel_rem_pio2f+0x404>
 8010786:	bf00      	nop

08010788 <scalbnf>:
 8010788:	ee10 3a10 	vmov	r3, s0
 801078c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8010790:	d02b      	beq.n	80107ea <scalbnf+0x62>
 8010792:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8010796:	d302      	bcc.n	801079e <scalbnf+0x16>
 8010798:	ee30 0a00 	vadd.f32	s0, s0, s0
 801079c:	4770      	bx	lr
 801079e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80107a2:	d123      	bne.n	80107ec <scalbnf+0x64>
 80107a4:	4b24      	ldr	r3, [pc, #144]	@ (8010838 <scalbnf+0xb0>)
 80107a6:	eddf 7a25 	vldr	s15, [pc, #148]	@ 801083c <scalbnf+0xb4>
 80107aa:	4298      	cmp	r0, r3
 80107ac:	ee20 0a27 	vmul.f32	s0, s0, s15
 80107b0:	db17      	blt.n	80107e2 <scalbnf+0x5a>
 80107b2:	ee10 3a10 	vmov	r3, s0
 80107b6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80107ba:	3a19      	subs	r2, #25
 80107bc:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80107c0:	4288      	cmp	r0, r1
 80107c2:	dd15      	ble.n	80107f0 <scalbnf+0x68>
 80107c4:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8010840 <scalbnf+0xb8>
 80107c8:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8010844 <scalbnf+0xbc>
 80107cc:	ee10 3a10 	vmov	r3, s0
 80107d0:	eeb0 7a67 	vmov.f32	s14, s15
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	bfb8      	it	lt
 80107d8:	eef0 7a66 	vmovlt.f32	s15, s13
 80107dc:	ee27 0a87 	vmul.f32	s0, s15, s14
 80107e0:	4770      	bx	lr
 80107e2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8010848 <scalbnf+0xc0>
 80107e6:	ee27 0a80 	vmul.f32	s0, s15, s0
 80107ea:	4770      	bx	lr
 80107ec:	0dd2      	lsrs	r2, r2, #23
 80107ee:	e7e5      	b.n	80107bc <scalbnf+0x34>
 80107f0:	4410      	add	r0, r2
 80107f2:	28fe      	cmp	r0, #254	@ 0xfe
 80107f4:	dce6      	bgt.n	80107c4 <scalbnf+0x3c>
 80107f6:	2800      	cmp	r0, #0
 80107f8:	dd06      	ble.n	8010808 <scalbnf+0x80>
 80107fa:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80107fe:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8010802:	ee00 3a10 	vmov	s0, r3
 8010806:	4770      	bx	lr
 8010808:	f110 0f16 	cmn.w	r0, #22
 801080c:	da09      	bge.n	8010822 <scalbnf+0x9a>
 801080e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8010848 <scalbnf+0xc0>
 8010812:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 801084c <scalbnf+0xc4>
 8010816:	ee10 3a10 	vmov	r3, s0
 801081a:	eeb0 7a67 	vmov.f32	s14, s15
 801081e:	2b00      	cmp	r3, #0
 8010820:	e7d9      	b.n	80107d6 <scalbnf+0x4e>
 8010822:	3019      	adds	r0, #25
 8010824:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010828:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801082c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8010850 <scalbnf+0xc8>
 8010830:	ee07 3a90 	vmov	s15, r3
 8010834:	e7d7      	b.n	80107e6 <scalbnf+0x5e>
 8010836:	bf00      	nop
 8010838:	ffff3cb0 	.word	0xffff3cb0
 801083c:	4c000000 	.word	0x4c000000
 8010840:	7149f2ca 	.word	0x7149f2ca
 8010844:	f149f2ca 	.word	0xf149f2ca
 8010848:	0da24260 	.word	0x0da24260
 801084c:	8da24260 	.word	0x8da24260
 8010850:	33000000 	.word	0x33000000

08010854 <floorf>:
 8010854:	ee10 3a10 	vmov	r3, s0
 8010858:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801085c:	3a7f      	subs	r2, #127	@ 0x7f
 801085e:	2a16      	cmp	r2, #22
 8010860:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8010864:	dc2b      	bgt.n	80108be <floorf+0x6a>
 8010866:	2a00      	cmp	r2, #0
 8010868:	da12      	bge.n	8010890 <floorf+0x3c>
 801086a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80108d0 <floorf+0x7c>
 801086e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010872:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801087a:	dd06      	ble.n	801088a <floorf+0x36>
 801087c:	2b00      	cmp	r3, #0
 801087e:	da24      	bge.n	80108ca <floorf+0x76>
 8010880:	2900      	cmp	r1, #0
 8010882:	4b14      	ldr	r3, [pc, #80]	@ (80108d4 <floorf+0x80>)
 8010884:	bf08      	it	eq
 8010886:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801088a:	ee00 3a10 	vmov	s0, r3
 801088e:	4770      	bx	lr
 8010890:	4911      	ldr	r1, [pc, #68]	@ (80108d8 <floorf+0x84>)
 8010892:	4111      	asrs	r1, r2
 8010894:	420b      	tst	r3, r1
 8010896:	d0fa      	beq.n	801088e <floorf+0x3a>
 8010898:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 80108d0 <floorf+0x7c>
 801089c:	ee30 0a27 	vadd.f32	s0, s0, s15
 80108a0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80108a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108a8:	ddef      	ble.n	801088a <floorf+0x36>
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	bfbe      	ittt	lt
 80108ae:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 80108b2:	fa40 f202 	asrlt.w	r2, r0, r2
 80108b6:	189b      	addlt	r3, r3, r2
 80108b8:	ea23 0301 	bic.w	r3, r3, r1
 80108bc:	e7e5      	b.n	801088a <floorf+0x36>
 80108be:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80108c2:	d3e4      	bcc.n	801088e <floorf+0x3a>
 80108c4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80108c8:	4770      	bx	lr
 80108ca:	2300      	movs	r3, #0
 80108cc:	e7dd      	b.n	801088a <floorf+0x36>
 80108ce:	bf00      	nop
 80108d0:	7149f2ca 	.word	0x7149f2ca
 80108d4:	bf800000 	.word	0xbf800000
 80108d8:	007fffff 	.word	0x007fffff

080108dc <_init>:
 80108dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108de:	bf00      	nop
 80108e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80108e2:	bc08      	pop	{r3}
 80108e4:	469e      	mov	lr, r3
 80108e6:	4770      	bx	lr

080108e8 <_fini>:
 80108e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108ea:	bf00      	nop
 80108ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80108ee:	bc08      	pop	{r3}
 80108f0:	469e      	mov	lr, r3
 80108f2:	4770      	bx	lr
