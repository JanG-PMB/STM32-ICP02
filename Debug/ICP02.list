
ICP02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011dbc  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001d9f4  08011f7c  08011f7c  00012f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802f970  0802f970  0003106c  2**0
                  CONTENTS
  4 .ARM          00000008  0802f970  0802f970  00030970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802f978  0802f978  0003106c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802f978  0802f978  00030978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802f97c  0802f97c  0003097c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0802f980  00031000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003106c  2**0
                  CONTENTS
 10 .bss          0000a694  2000006c  2000006c  0003106c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000a700  2000a700  0003106c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003106c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003ec39  00000000  00000000  0003109c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000078b7  00000000  00000000  0006fcd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002bb8  00000000  00000000  00077590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000020d8  00000000  00000000  0007a148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00035c1d  00000000  00000000  0007c220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003926a  00000000  00000000  000b1e3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012f02d  00000000  00000000  000eb0a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000bc  00000000  00000000  0021a0d4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000c2e0  00000000  00000000  0021a190  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004a  00000000  00000000  00226470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00002fbb  00000000  00000000  002264ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 000000d0  00000000  00000000  00229475  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08011f64 	.word	0x08011f64

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000070 	.word	0x20000070
 80001fc:	08011f64 	.word	0x08011f64

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_dmul>:
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002a6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ae:	bf1d      	ittte	ne
 80002b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002b4:	ea94 0f0c 	teqne	r4, ip
 80002b8:	ea95 0f0c 	teqne	r5, ip
 80002bc:	f000 f8de 	bleq	800047c <__aeabi_dmul+0x1dc>
 80002c0:	442c      	add	r4, r5
 80002c2:	ea81 0603 	eor.w	r6, r1, r3
 80002c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002d2:	bf18      	it	ne
 80002d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002e0:	d038      	beq.n	8000354 <__aeabi_dmul+0xb4>
 80002e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002e6:	f04f 0500 	mov.w	r5, #0
 80002ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ee:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002f6:	f04f 0600 	mov.w	r6, #0
 80002fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002fe:	f09c 0f00 	teq	ip, #0
 8000302:	bf18      	it	ne
 8000304:	f04e 0e01 	orrne.w	lr, lr, #1
 8000308:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800030c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000310:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000314:	d204      	bcs.n	8000320 <__aeabi_dmul+0x80>
 8000316:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800031a:	416d      	adcs	r5, r5
 800031c:	eb46 0606 	adc.w	r6, r6, r6
 8000320:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000324:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000328:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800032c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000330:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000334:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000338:	bf88      	it	hi
 800033a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800033e:	d81e      	bhi.n	800037e <__aeabi_dmul+0xde>
 8000340:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000358:	ea46 0101 	orr.w	r1, r6, r1
 800035c:	ea40 0002 	orr.w	r0, r0, r2
 8000360:	ea81 0103 	eor.w	r1, r1, r3
 8000364:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000368:	bfc2      	ittt	gt
 800036a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800036e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000372:	bd70      	popgt	{r4, r5, r6, pc}
 8000374:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000378:	f04f 0e00 	mov.w	lr, #0
 800037c:	3c01      	subs	r4, #1
 800037e:	f300 80ab 	bgt.w	80004d8 <__aeabi_dmul+0x238>
 8000382:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000386:	bfde      	ittt	le
 8000388:	2000      	movle	r0, #0
 800038a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800038e:	bd70      	pople	{r4, r5, r6, pc}
 8000390:	f1c4 0400 	rsb	r4, r4, #0
 8000394:	3c20      	subs	r4, #32
 8000396:	da35      	bge.n	8000404 <__aeabi_dmul+0x164>
 8000398:	340c      	adds	r4, #12
 800039a:	dc1b      	bgt.n	80003d4 <__aeabi_dmul+0x134>
 800039c:	f104 0414 	add.w	r4, r4, #20
 80003a0:	f1c4 0520 	rsb	r5, r4, #32
 80003a4:	fa00 f305 	lsl.w	r3, r0, r5
 80003a8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ac:	fa01 f205 	lsl.w	r2, r1, r5
 80003b0:	ea40 0002 	orr.w	r0, r0, r2
 80003b4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003b8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c0:	fa21 f604 	lsr.w	r6, r1, r4
 80003c4:	eb42 0106 	adc.w	r1, r2, r6
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 040c 	rsb	r4, r4, #12
 80003d8:	f1c4 0520 	rsb	r5, r4, #32
 80003dc:	fa00 f304 	lsl.w	r3, r0, r4
 80003e0:	fa20 f005 	lsr.w	r0, r0, r5
 80003e4:	fa01 f204 	lsl.w	r2, r1, r4
 80003e8:	ea40 0002 	orr.w	r0, r0, r2
 80003ec:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003f4:	f141 0100 	adc.w	r1, r1, #0
 80003f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003fc:	bf08      	it	eq
 80003fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f1c4 0520 	rsb	r5, r4, #32
 8000408:	fa00 f205 	lsl.w	r2, r0, r5
 800040c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000410:	fa20 f304 	lsr.w	r3, r0, r4
 8000414:	fa01 f205 	lsl.w	r2, r1, r5
 8000418:	ea43 0302 	orr.w	r3, r3, r2
 800041c:	fa21 f004 	lsr.w	r0, r1, r4
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000424:	fa21 f204 	lsr.w	r2, r1, r4
 8000428:	ea20 0002 	bic.w	r0, r0, r2
 800042c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000430:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000434:	bf08      	it	eq
 8000436:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800043a:	bd70      	pop	{r4, r5, r6, pc}
 800043c:	f094 0f00 	teq	r4, #0
 8000440:	d10f      	bne.n	8000462 <__aeabi_dmul+0x1c2>
 8000442:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000446:	0040      	lsls	r0, r0, #1
 8000448:	eb41 0101 	adc.w	r1, r1, r1
 800044c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000450:	bf08      	it	eq
 8000452:	3c01      	subeq	r4, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1a6>
 8000456:	ea41 0106 	orr.w	r1, r1, r6
 800045a:	f095 0f00 	teq	r5, #0
 800045e:	bf18      	it	ne
 8000460:	4770      	bxne	lr
 8000462:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000466:	0052      	lsls	r2, r2, #1
 8000468:	eb43 0303 	adc.w	r3, r3, r3
 800046c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000470:	bf08      	it	eq
 8000472:	3d01      	subeq	r5, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1c6>
 8000476:	ea43 0306 	orr.w	r3, r3, r6
 800047a:	4770      	bx	lr
 800047c:	ea94 0f0c 	teq	r4, ip
 8000480:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000484:	bf18      	it	ne
 8000486:	ea95 0f0c 	teqne	r5, ip
 800048a:	d00c      	beq.n	80004a6 <__aeabi_dmul+0x206>
 800048c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000490:	bf18      	it	ne
 8000492:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000496:	d1d1      	bne.n	800043c <__aeabi_dmul+0x19c>
 8000498:	ea81 0103 	eor.w	r1, r1, r3
 800049c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd70      	pop	{r4, r5, r6, pc}
 80004a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004aa:	bf06      	itte	eq
 80004ac:	4610      	moveq	r0, r2
 80004ae:	4619      	moveq	r1, r3
 80004b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b4:	d019      	beq.n	80004ea <__aeabi_dmul+0x24a>
 80004b6:	ea94 0f0c 	teq	r4, ip
 80004ba:	d102      	bne.n	80004c2 <__aeabi_dmul+0x222>
 80004bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004c0:	d113      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004c2:	ea95 0f0c 	teq	r5, ip
 80004c6:	d105      	bne.n	80004d4 <__aeabi_dmul+0x234>
 80004c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004cc:	bf1c      	itt	ne
 80004ce:	4610      	movne	r0, r2
 80004d0:	4619      	movne	r1, r3
 80004d2:	d10a      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004d4:	ea81 0103 	eor.w	r1, r1, r3
 80004d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004dc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd70      	pop	{r4, r5, r6, pc}
 80004ea:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004ee:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004f2:	bd70      	pop	{r4, r5, r6, pc}

080004f4 <__aeabi_drsub>:
 80004f4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004f8:	e002      	b.n	8000500 <__adddf3>
 80004fa:	bf00      	nop

080004fc <__aeabi_dsub>:
 80004fc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000500 <__adddf3>:
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000506:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800050a:	ea94 0f05 	teq	r4, r5
 800050e:	bf08      	it	eq
 8000510:	ea90 0f02 	teqeq	r0, r2
 8000514:	bf1f      	itttt	ne
 8000516:	ea54 0c00 	orrsne.w	ip, r4, r0
 800051a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800051e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000522:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000526:	f000 80e2 	beq.w	80006ee <__adddf3+0x1ee>
 800052a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800052e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000532:	bfb8      	it	lt
 8000534:	426d      	neglt	r5, r5
 8000536:	dd0c      	ble.n	8000552 <__adddf3+0x52>
 8000538:	442c      	add	r4, r5
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	ea82 0000 	eor.w	r0, r2, r0
 8000546:	ea83 0101 	eor.w	r1, r3, r1
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	2d36      	cmp	r5, #54	@ 0x36
 8000554:	bf88      	it	hi
 8000556:	bd30      	pophi	{r4, r5, pc}
 8000558:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800055c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000560:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000564:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000568:	d002      	beq.n	8000570 <__adddf3+0x70>
 800056a:	4240      	negs	r0, r0
 800056c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000570:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000574:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000578:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800057c:	d002      	beq.n	8000584 <__adddf3+0x84>
 800057e:	4252      	negs	r2, r2
 8000580:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000584:	ea94 0f05 	teq	r4, r5
 8000588:	f000 80a7 	beq.w	80006da <__adddf3+0x1da>
 800058c:	f1a4 0401 	sub.w	r4, r4, #1
 8000590:	f1d5 0e20 	rsbs	lr, r5, #32
 8000594:	db0d      	blt.n	80005b2 <__adddf3+0xb2>
 8000596:	fa02 fc0e 	lsl.w	ip, r2, lr
 800059a:	fa22 f205 	lsr.w	r2, r2, r5
 800059e:	1880      	adds	r0, r0, r2
 80005a0:	f141 0100 	adc.w	r1, r1, #0
 80005a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005a8:	1880      	adds	r0, r0, r2
 80005aa:	fa43 f305 	asr.w	r3, r3, r5
 80005ae:	4159      	adcs	r1, r3
 80005b0:	e00e      	b.n	80005d0 <__adddf3+0xd0>
 80005b2:	f1a5 0520 	sub.w	r5, r5, #32
 80005b6:	f10e 0e20 	add.w	lr, lr, #32
 80005ba:	2a01      	cmp	r2, #1
 80005bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005c0:	bf28      	it	cs
 80005c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005c6:	fa43 f305 	asr.w	r3, r3, r5
 80005ca:	18c0      	adds	r0, r0, r3
 80005cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	d507      	bpl.n	80005e6 <__adddf3+0xe6>
 80005d6:	f04f 0e00 	mov.w	lr, #0
 80005da:	f1dc 0c00 	rsbs	ip, ip, #0
 80005de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005e6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ea:	d31b      	bcc.n	8000624 <__adddf3+0x124>
 80005ec:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005f0:	d30c      	bcc.n	800060c <__adddf3+0x10c>
 80005f2:	0849      	lsrs	r1, r1, #1
 80005f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005fc:	f104 0401 	add.w	r4, r4, #1
 8000600:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000604:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000608:	f080 809a 	bcs.w	8000740 <__adddf3+0x240>
 800060c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000610:	bf08      	it	eq
 8000612:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000616:	f150 0000 	adcs.w	r0, r0, #0
 800061a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061e:	ea41 0105 	orr.w	r1, r1, r5
 8000622:	bd30      	pop	{r4, r5, pc}
 8000624:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000628:	4140      	adcs	r0, r0
 800062a:	eb41 0101 	adc.w	r1, r1, r1
 800062e:	3c01      	subs	r4, #1
 8000630:	bf28      	it	cs
 8000632:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000636:	d2e9      	bcs.n	800060c <__adddf3+0x10c>
 8000638:	f091 0f00 	teq	r1, #0
 800063c:	bf04      	itt	eq
 800063e:	4601      	moveq	r1, r0
 8000640:	2000      	moveq	r0, #0
 8000642:	fab1 f381 	clz	r3, r1
 8000646:	bf08      	it	eq
 8000648:	3320      	addeq	r3, #32
 800064a:	f1a3 030b 	sub.w	r3, r3, #11
 800064e:	f1b3 0220 	subs.w	r2, r3, #32
 8000652:	da0c      	bge.n	800066e <__adddf3+0x16e>
 8000654:	320c      	adds	r2, #12
 8000656:	dd08      	ble.n	800066a <__adddf3+0x16a>
 8000658:	f102 0c14 	add.w	ip, r2, #20
 800065c:	f1c2 020c 	rsb	r2, r2, #12
 8000660:	fa01 f00c 	lsl.w	r0, r1, ip
 8000664:	fa21 f102 	lsr.w	r1, r1, r2
 8000668:	e00c      	b.n	8000684 <__adddf3+0x184>
 800066a:	f102 0214 	add.w	r2, r2, #20
 800066e:	bfd8      	it	le
 8000670:	f1c2 0c20 	rsble	ip, r2, #32
 8000674:	fa01 f102 	lsl.w	r1, r1, r2
 8000678:	fa20 fc0c 	lsr.w	ip, r0, ip
 800067c:	bfdc      	itt	le
 800067e:	ea41 010c 	orrle.w	r1, r1, ip
 8000682:	4090      	lslle	r0, r2
 8000684:	1ae4      	subs	r4, r4, r3
 8000686:	bfa2      	ittt	ge
 8000688:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800068c:	4329      	orrge	r1, r5
 800068e:	bd30      	popge	{r4, r5, pc}
 8000690:	ea6f 0404 	mvn.w	r4, r4
 8000694:	3c1f      	subs	r4, #31
 8000696:	da1c      	bge.n	80006d2 <__adddf3+0x1d2>
 8000698:	340c      	adds	r4, #12
 800069a:	dc0e      	bgt.n	80006ba <__adddf3+0x1ba>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0220 	rsb	r2, r4, #32
 80006a4:	fa20 f004 	lsr.w	r0, r0, r4
 80006a8:	fa01 f302 	lsl.w	r3, r1, r2
 80006ac:	ea40 0003 	orr.w	r0, r0, r3
 80006b0:	fa21 f304 	lsr.w	r3, r1, r4
 80006b4:	ea45 0103 	orr.w	r1, r5, r3
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f1c4 040c 	rsb	r4, r4, #12
 80006be:	f1c4 0220 	rsb	r2, r4, #32
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ca:	ea40 0003 	orr.w	r0, r0, r3
 80006ce:	4629      	mov	r1, r5
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	fa21 f004 	lsr.w	r0, r1, r4
 80006d6:	4629      	mov	r1, r5
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f094 0f00 	teq	r4, #0
 80006de:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006e2:	bf06      	itte	eq
 80006e4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006e8:	3401      	addeq	r4, #1
 80006ea:	3d01      	subne	r5, #1
 80006ec:	e74e      	b.n	800058c <__adddf3+0x8c>
 80006ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006f2:	bf18      	it	ne
 80006f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006f8:	d029      	beq.n	800074e <__adddf3+0x24e>
 80006fa:	ea94 0f05 	teq	r4, r5
 80006fe:	bf08      	it	eq
 8000700:	ea90 0f02 	teqeq	r0, r2
 8000704:	d005      	beq.n	8000712 <__adddf3+0x212>
 8000706:	ea54 0c00 	orrs.w	ip, r4, r0
 800070a:	bf04      	itt	eq
 800070c:	4619      	moveq	r1, r3
 800070e:	4610      	moveq	r0, r2
 8000710:	bd30      	pop	{r4, r5, pc}
 8000712:	ea91 0f03 	teq	r1, r3
 8000716:	bf1e      	ittt	ne
 8000718:	2100      	movne	r1, #0
 800071a:	2000      	movne	r0, #0
 800071c:	bd30      	popne	{r4, r5, pc}
 800071e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000722:	d105      	bne.n	8000730 <__adddf3+0x230>
 8000724:	0040      	lsls	r0, r0, #1
 8000726:	4149      	adcs	r1, r1
 8000728:	bf28      	it	cs
 800072a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800072e:	bd30      	pop	{r4, r5, pc}
 8000730:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000734:	bf3c      	itt	cc
 8000736:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800073a:	bd30      	popcc	{r4, r5, pc}
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000740:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000744:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd30      	pop	{r4, r5, pc}
 800074e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000752:	bf1a      	itte	ne
 8000754:	4619      	movne	r1, r3
 8000756:	4610      	movne	r0, r2
 8000758:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800075c:	bf1c      	itt	ne
 800075e:	460b      	movne	r3, r1
 8000760:	4602      	movne	r2, r0
 8000762:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000766:	bf06      	itte	eq
 8000768:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800076c:	ea91 0f03 	teqeq	r1, r3
 8000770:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000774:	bd30      	pop	{r4, r5, pc}
 8000776:	bf00      	nop

08000778 <__aeabi_ui2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800078c:	f04f 0500 	mov.w	r5, #0
 8000790:	f04f 0100 	mov.w	r1, #0
 8000794:	e750      	b.n	8000638 <__adddf3+0x138>
 8000796:	bf00      	nop

08000798 <__aeabi_i2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007ac:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007b0:	bf48      	it	mi
 80007b2:	4240      	negmi	r0, r0
 80007b4:	f04f 0100 	mov.w	r1, #0
 80007b8:	e73e      	b.n	8000638 <__adddf3+0x138>
 80007ba:	bf00      	nop

080007bc <__aeabi_f2d>:
 80007bc:	0042      	lsls	r2, r0, #1
 80007be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ca:	bf1f      	itttt	ne
 80007cc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007d0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007d4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007d8:	4770      	bxne	lr
 80007da:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007de:	bf08      	it	eq
 80007e0:	4770      	bxeq	lr
 80007e2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007e6:	bf04      	itt	eq
 80007e8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007ec:	4770      	bxeq	lr
 80007ee:	b530      	push	{r4, r5, lr}
 80007f0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007f8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007fc:	e71c      	b.n	8000638 <__adddf3+0x138>
 80007fe:	bf00      	nop

08000800 <__aeabi_ul2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f04f 0500 	mov.w	r5, #0
 800080e:	e00a      	b.n	8000826 <__aeabi_l2d+0x16>

08000810 <__aeabi_l2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800081e:	d502      	bpl.n	8000826 <__aeabi_l2d+0x16>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800082a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800082e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000832:	f43f aed8 	beq.w	80005e6 <__adddf3+0xe6>
 8000836:	f04f 0203 	mov.w	r2, #3
 800083a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800083e:	bf18      	it	ne
 8000840:	3203      	addne	r2, #3
 8000842:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000846:	bf18      	it	ne
 8000848:	3203      	addne	r2, #3
 800084a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800084e:	f1c2 0320 	rsb	r3, r2, #32
 8000852:	fa00 fc03 	lsl.w	ip, r0, r3
 8000856:	fa20 f002 	lsr.w	r0, r0, r2
 800085a:	fa01 fe03 	lsl.w	lr, r1, r3
 800085e:	ea40 000e 	orr.w	r0, r0, lr
 8000862:	fa21 f102 	lsr.w	r1, r1, r2
 8000866:	4414      	add	r4, r2
 8000868:	e6bd      	b.n	80005e6 <__adddf3+0xe6>
 800086a:	bf00      	nop

0800086c <__aeabi_d2f>:
 800086c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000870:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000874:	bf24      	itt	cs
 8000876:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800087a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800087e:	d90d      	bls.n	800089c <__aeabi_d2f+0x30>
 8000880:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000884:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000888:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800088c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000890:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000894:	bf08      	it	eq
 8000896:	f020 0001 	biceq.w	r0, r0, #1
 800089a:	4770      	bx	lr
 800089c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80008a0:	d121      	bne.n	80008e6 <__aeabi_d2f+0x7a>
 80008a2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80008a6:	bfbc      	itt	lt
 80008a8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80008ac:	4770      	bxlt	lr
 80008ae:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008b6:	f1c2 0218 	rsb	r2, r2, #24
 80008ba:	f1c2 0c20 	rsb	ip, r2, #32
 80008be:	fa10 f30c 	lsls.w	r3, r0, ip
 80008c2:	fa20 f002 	lsr.w	r0, r0, r2
 80008c6:	bf18      	it	ne
 80008c8:	f040 0001 	orrne.w	r0, r0, #1
 80008cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008d8:	ea40 000c 	orr.w	r0, r0, ip
 80008dc:	fa23 f302 	lsr.w	r3, r3, r2
 80008e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008e4:	e7cc      	b.n	8000880 <__aeabi_d2f+0x14>
 80008e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ea:	d107      	bne.n	80008fc <__aeabi_d2f+0x90>
 80008ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008f0:	bf1e      	ittt	ne
 80008f2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80008f6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80008fa:	4770      	bxne	lr
 80008fc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000900:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000904:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop

0800090c <__aeabi_uldivmod>:
 800090c:	b953      	cbnz	r3, 8000924 <__aeabi_uldivmod+0x18>
 800090e:	b94a      	cbnz	r2, 8000924 <__aeabi_uldivmod+0x18>
 8000910:	2900      	cmp	r1, #0
 8000912:	bf08      	it	eq
 8000914:	2800      	cmpeq	r0, #0
 8000916:	bf1c      	itt	ne
 8000918:	f04f 31ff 	movne.w	r1, #4294967295
 800091c:	f04f 30ff 	movne.w	r0, #4294967295
 8000920:	f000 b96a 	b.w	8000bf8 <__aeabi_idiv0>
 8000924:	f1ad 0c08 	sub.w	ip, sp, #8
 8000928:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800092c:	f000 f806 	bl	800093c <__udivmoddi4>
 8000930:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000934:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000938:	b004      	add	sp, #16
 800093a:	4770      	bx	lr

0800093c <__udivmoddi4>:
 800093c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000940:	9d08      	ldr	r5, [sp, #32]
 8000942:	460c      	mov	r4, r1
 8000944:	2b00      	cmp	r3, #0
 8000946:	d14e      	bne.n	80009e6 <__udivmoddi4+0xaa>
 8000948:	4694      	mov	ip, r2
 800094a:	458c      	cmp	ip, r1
 800094c:	4686      	mov	lr, r0
 800094e:	fab2 f282 	clz	r2, r2
 8000952:	d962      	bls.n	8000a1a <__udivmoddi4+0xde>
 8000954:	b14a      	cbz	r2, 800096a <__udivmoddi4+0x2e>
 8000956:	f1c2 0320 	rsb	r3, r2, #32
 800095a:	4091      	lsls	r1, r2
 800095c:	fa20 f303 	lsr.w	r3, r0, r3
 8000960:	fa0c fc02 	lsl.w	ip, ip, r2
 8000964:	4319      	orrs	r1, r3
 8000966:	fa00 fe02 	lsl.w	lr, r0, r2
 800096a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800096e:	fa1f f68c 	uxth.w	r6, ip
 8000972:	fbb1 f4f7 	udiv	r4, r1, r7
 8000976:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800097a:	fb07 1114 	mls	r1, r7, r4, r1
 800097e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000982:	fb04 f106 	mul.w	r1, r4, r6
 8000986:	4299      	cmp	r1, r3
 8000988:	d90a      	bls.n	80009a0 <__udivmoddi4+0x64>
 800098a:	eb1c 0303 	adds.w	r3, ip, r3
 800098e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000992:	f080 8112 	bcs.w	8000bba <__udivmoddi4+0x27e>
 8000996:	4299      	cmp	r1, r3
 8000998:	f240 810f 	bls.w	8000bba <__udivmoddi4+0x27e>
 800099c:	3c02      	subs	r4, #2
 800099e:	4463      	add	r3, ip
 80009a0:	1a59      	subs	r1, r3, r1
 80009a2:	fa1f f38e 	uxth.w	r3, lr
 80009a6:	fbb1 f0f7 	udiv	r0, r1, r7
 80009aa:	fb07 1110 	mls	r1, r7, r0, r1
 80009ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009b2:	fb00 f606 	mul.w	r6, r0, r6
 80009b6:	429e      	cmp	r6, r3
 80009b8:	d90a      	bls.n	80009d0 <__udivmoddi4+0x94>
 80009ba:	eb1c 0303 	adds.w	r3, ip, r3
 80009be:	f100 31ff 	add.w	r1, r0, #4294967295
 80009c2:	f080 80fc 	bcs.w	8000bbe <__udivmoddi4+0x282>
 80009c6:	429e      	cmp	r6, r3
 80009c8:	f240 80f9 	bls.w	8000bbe <__udivmoddi4+0x282>
 80009cc:	4463      	add	r3, ip
 80009ce:	3802      	subs	r0, #2
 80009d0:	1b9b      	subs	r3, r3, r6
 80009d2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80009d6:	2100      	movs	r1, #0
 80009d8:	b11d      	cbz	r5, 80009e2 <__udivmoddi4+0xa6>
 80009da:	40d3      	lsrs	r3, r2
 80009dc:	2200      	movs	r2, #0
 80009de:	e9c5 3200 	strd	r3, r2, [r5]
 80009e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009e6:	428b      	cmp	r3, r1
 80009e8:	d905      	bls.n	80009f6 <__udivmoddi4+0xba>
 80009ea:	b10d      	cbz	r5, 80009f0 <__udivmoddi4+0xb4>
 80009ec:	e9c5 0100 	strd	r0, r1, [r5]
 80009f0:	2100      	movs	r1, #0
 80009f2:	4608      	mov	r0, r1
 80009f4:	e7f5      	b.n	80009e2 <__udivmoddi4+0xa6>
 80009f6:	fab3 f183 	clz	r1, r3
 80009fa:	2900      	cmp	r1, #0
 80009fc:	d146      	bne.n	8000a8c <__udivmoddi4+0x150>
 80009fe:	42a3      	cmp	r3, r4
 8000a00:	d302      	bcc.n	8000a08 <__udivmoddi4+0xcc>
 8000a02:	4290      	cmp	r0, r2
 8000a04:	f0c0 80f0 	bcc.w	8000be8 <__udivmoddi4+0x2ac>
 8000a08:	1a86      	subs	r6, r0, r2
 8000a0a:	eb64 0303 	sbc.w	r3, r4, r3
 8000a0e:	2001      	movs	r0, #1
 8000a10:	2d00      	cmp	r5, #0
 8000a12:	d0e6      	beq.n	80009e2 <__udivmoddi4+0xa6>
 8000a14:	e9c5 6300 	strd	r6, r3, [r5]
 8000a18:	e7e3      	b.n	80009e2 <__udivmoddi4+0xa6>
 8000a1a:	2a00      	cmp	r2, #0
 8000a1c:	f040 8090 	bne.w	8000b40 <__udivmoddi4+0x204>
 8000a20:	eba1 040c 	sub.w	r4, r1, ip
 8000a24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a28:	fa1f f78c 	uxth.w	r7, ip
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a36:	fb08 4416 	mls	r4, r8, r6, r4
 8000a3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a3e:	fb07 f006 	mul.w	r0, r7, r6
 8000a42:	4298      	cmp	r0, r3
 8000a44:	d908      	bls.n	8000a58 <__udivmoddi4+0x11c>
 8000a46:	eb1c 0303 	adds.w	r3, ip, r3
 8000a4a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a4e:	d202      	bcs.n	8000a56 <__udivmoddi4+0x11a>
 8000a50:	4298      	cmp	r0, r3
 8000a52:	f200 80cd 	bhi.w	8000bf0 <__udivmoddi4+0x2b4>
 8000a56:	4626      	mov	r6, r4
 8000a58:	1a1c      	subs	r4, r3, r0
 8000a5a:	fa1f f38e 	uxth.w	r3, lr
 8000a5e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a62:	fb08 4410 	mls	r4, r8, r0, r4
 8000a66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a6a:	fb00 f707 	mul.w	r7, r0, r7
 8000a6e:	429f      	cmp	r7, r3
 8000a70:	d908      	bls.n	8000a84 <__udivmoddi4+0x148>
 8000a72:	eb1c 0303 	adds.w	r3, ip, r3
 8000a76:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a7a:	d202      	bcs.n	8000a82 <__udivmoddi4+0x146>
 8000a7c:	429f      	cmp	r7, r3
 8000a7e:	f200 80b0 	bhi.w	8000be2 <__udivmoddi4+0x2a6>
 8000a82:	4620      	mov	r0, r4
 8000a84:	1bdb      	subs	r3, r3, r7
 8000a86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a8a:	e7a5      	b.n	80009d8 <__udivmoddi4+0x9c>
 8000a8c:	f1c1 0620 	rsb	r6, r1, #32
 8000a90:	408b      	lsls	r3, r1
 8000a92:	fa22 f706 	lsr.w	r7, r2, r6
 8000a96:	431f      	orrs	r7, r3
 8000a98:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a9c:	fa04 f301 	lsl.w	r3, r4, r1
 8000aa0:	ea43 030c 	orr.w	r3, r3, ip
 8000aa4:	40f4      	lsrs	r4, r6
 8000aa6:	fa00 f801 	lsl.w	r8, r0, r1
 8000aaa:	0c38      	lsrs	r0, r7, #16
 8000aac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ab0:	fbb4 fef0 	udiv	lr, r4, r0
 8000ab4:	fa1f fc87 	uxth.w	ip, r7
 8000ab8:	fb00 441e 	mls	r4, r0, lr, r4
 8000abc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ac0:	fb0e f90c 	mul.w	r9, lr, ip
 8000ac4:	45a1      	cmp	r9, r4
 8000ac6:	fa02 f201 	lsl.w	r2, r2, r1
 8000aca:	d90a      	bls.n	8000ae2 <__udivmoddi4+0x1a6>
 8000acc:	193c      	adds	r4, r7, r4
 8000ace:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000ad2:	f080 8084 	bcs.w	8000bde <__udivmoddi4+0x2a2>
 8000ad6:	45a1      	cmp	r9, r4
 8000ad8:	f240 8081 	bls.w	8000bde <__udivmoddi4+0x2a2>
 8000adc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ae0:	443c      	add	r4, r7
 8000ae2:	eba4 0409 	sub.w	r4, r4, r9
 8000ae6:	fa1f f983 	uxth.w	r9, r3
 8000aea:	fbb4 f3f0 	udiv	r3, r4, r0
 8000aee:	fb00 4413 	mls	r4, r0, r3, r4
 8000af2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000af6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000afa:	45a4      	cmp	ip, r4
 8000afc:	d907      	bls.n	8000b0e <__udivmoddi4+0x1d2>
 8000afe:	193c      	adds	r4, r7, r4
 8000b00:	f103 30ff 	add.w	r0, r3, #4294967295
 8000b04:	d267      	bcs.n	8000bd6 <__udivmoddi4+0x29a>
 8000b06:	45a4      	cmp	ip, r4
 8000b08:	d965      	bls.n	8000bd6 <__udivmoddi4+0x29a>
 8000b0a:	3b02      	subs	r3, #2
 8000b0c:	443c      	add	r4, r7
 8000b0e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000b12:	fba0 9302 	umull	r9, r3, r0, r2
 8000b16:	eba4 040c 	sub.w	r4, r4, ip
 8000b1a:	429c      	cmp	r4, r3
 8000b1c:	46ce      	mov	lr, r9
 8000b1e:	469c      	mov	ip, r3
 8000b20:	d351      	bcc.n	8000bc6 <__udivmoddi4+0x28a>
 8000b22:	d04e      	beq.n	8000bc2 <__udivmoddi4+0x286>
 8000b24:	b155      	cbz	r5, 8000b3c <__udivmoddi4+0x200>
 8000b26:	ebb8 030e 	subs.w	r3, r8, lr
 8000b2a:	eb64 040c 	sbc.w	r4, r4, ip
 8000b2e:	fa04 f606 	lsl.w	r6, r4, r6
 8000b32:	40cb      	lsrs	r3, r1
 8000b34:	431e      	orrs	r6, r3
 8000b36:	40cc      	lsrs	r4, r1
 8000b38:	e9c5 6400 	strd	r6, r4, [r5]
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	e750      	b.n	80009e2 <__udivmoddi4+0xa6>
 8000b40:	f1c2 0320 	rsb	r3, r2, #32
 8000b44:	fa20 f103 	lsr.w	r1, r0, r3
 8000b48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b4c:	fa24 f303 	lsr.w	r3, r4, r3
 8000b50:	4094      	lsls	r4, r2
 8000b52:	430c      	orrs	r4, r1
 8000b54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b58:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b5c:	fa1f f78c 	uxth.w	r7, ip
 8000b60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b64:	fb08 3110 	mls	r1, r8, r0, r3
 8000b68:	0c23      	lsrs	r3, r4, #16
 8000b6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b6e:	fb00 f107 	mul.w	r1, r0, r7
 8000b72:	4299      	cmp	r1, r3
 8000b74:	d908      	bls.n	8000b88 <__udivmoddi4+0x24c>
 8000b76:	eb1c 0303 	adds.w	r3, ip, r3
 8000b7a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000b7e:	d22c      	bcs.n	8000bda <__udivmoddi4+0x29e>
 8000b80:	4299      	cmp	r1, r3
 8000b82:	d92a      	bls.n	8000bda <__udivmoddi4+0x29e>
 8000b84:	3802      	subs	r0, #2
 8000b86:	4463      	add	r3, ip
 8000b88:	1a5b      	subs	r3, r3, r1
 8000b8a:	b2a4      	uxth	r4, r4
 8000b8c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b90:	fb08 3311 	mls	r3, r8, r1, r3
 8000b94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b98:	fb01 f307 	mul.w	r3, r1, r7
 8000b9c:	42a3      	cmp	r3, r4
 8000b9e:	d908      	bls.n	8000bb2 <__udivmoddi4+0x276>
 8000ba0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ba4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ba8:	d213      	bcs.n	8000bd2 <__udivmoddi4+0x296>
 8000baa:	42a3      	cmp	r3, r4
 8000bac:	d911      	bls.n	8000bd2 <__udivmoddi4+0x296>
 8000bae:	3902      	subs	r1, #2
 8000bb0:	4464      	add	r4, ip
 8000bb2:	1ae4      	subs	r4, r4, r3
 8000bb4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000bb8:	e739      	b.n	8000a2e <__udivmoddi4+0xf2>
 8000bba:	4604      	mov	r4, r0
 8000bbc:	e6f0      	b.n	80009a0 <__udivmoddi4+0x64>
 8000bbe:	4608      	mov	r0, r1
 8000bc0:	e706      	b.n	80009d0 <__udivmoddi4+0x94>
 8000bc2:	45c8      	cmp	r8, r9
 8000bc4:	d2ae      	bcs.n	8000b24 <__udivmoddi4+0x1e8>
 8000bc6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000bca:	eb63 0c07 	sbc.w	ip, r3, r7
 8000bce:	3801      	subs	r0, #1
 8000bd0:	e7a8      	b.n	8000b24 <__udivmoddi4+0x1e8>
 8000bd2:	4631      	mov	r1, r6
 8000bd4:	e7ed      	b.n	8000bb2 <__udivmoddi4+0x276>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	e799      	b.n	8000b0e <__udivmoddi4+0x1d2>
 8000bda:	4630      	mov	r0, r6
 8000bdc:	e7d4      	b.n	8000b88 <__udivmoddi4+0x24c>
 8000bde:	46d6      	mov	lr, sl
 8000be0:	e77f      	b.n	8000ae2 <__udivmoddi4+0x1a6>
 8000be2:	4463      	add	r3, ip
 8000be4:	3802      	subs	r0, #2
 8000be6:	e74d      	b.n	8000a84 <__udivmoddi4+0x148>
 8000be8:	4606      	mov	r6, r0
 8000bea:	4623      	mov	r3, r4
 8000bec:	4608      	mov	r0, r1
 8000bee:	e70f      	b.n	8000a10 <__udivmoddi4+0xd4>
 8000bf0:	3e02      	subs	r6, #2
 8000bf2:	4463      	add	r3, ip
 8000bf4:	e730      	b.n	8000a58 <__udivmoddi4+0x11c>
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_idiv0>:
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	b083      	sub	sp, #12
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
 8000c12:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000c14:	bf00      	nop
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
	...

08000c30 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// SEND PRINTF TO UART BEGIN
	int _write(int fd, char *ptr, int len) {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	607a      	str	r2, [r7, #4]
		HAL_StatusTypeDef hstatus;

		if (fd == 1 || fd == 2) {
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d002      	beq.n	8000c48 <_write+0x18>
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	2b02      	cmp	r3, #2
 8000c46:	d111      	bne.n	8000c6c <_write+0x3c>
			hstatus = HAL_UART_Transmit(&huart3, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	b29a      	uxth	r2, r3
 8000c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c50:	68b9      	ldr	r1, [r7, #8]
 8000c52:	4809      	ldr	r0, [pc, #36]	@ (8000c78 <_write+0x48>)
 8000c54:	f008 fe1a 	bl	800988c <HAL_UART_Transmit>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	75fb      	strb	r3, [r7, #23]
			if (hstatus == HAL_OK)
 8000c5c:	7dfb      	ldrb	r3, [r7, #23]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d101      	bne.n	8000c66 <_write+0x36>
				return len;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	e004      	b.n	8000c70 <_write+0x40>
			else
				return -1;
 8000c66:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6a:	e001      	b.n	8000c70 <_write+0x40>
		}
		return -1;
 8000c6c:	f04f 33ff 	mov.w	r3, #4294967295
	}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3718      	adds	r7, #24
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000600 	.word	0x20000600

08000c7c <uint16_to_float32>:
// SEND PRINTF TO UART END



void uint16_to_float32(const uint16_t *input, float32_t *output, size_t length) {
 8000c7c:	b480      	push	{r7}
 8000c7e:	b087      	sub	sp, #28
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	607a      	str	r2, [r7, #4]
    for (size_t i = 0; i < length; i++) {
 8000c88:	2300      	movs	r3, #0
 8000c8a:	617b      	str	r3, [r7, #20]
 8000c8c:	e021      	b.n	8000cd2 <uint16_to_float32+0x56>
        output[i] = (float32_t)input[i];  // Cast uint16_t to float
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	68fa      	ldr	r2, [r7, #12]
 8000c94:	4413      	add	r3, r2
 8000c96:	8819      	ldrh	r1, [r3, #0]
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	68ba      	ldr	r2, [r7, #8]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	ee07 1a90 	vmov	s15, r1
 8000ca4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ca8:	edc3 7a00 	vstr	s15, [r3]
        output[i] -= 1000;
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	68ba      	ldr	r2, [r7, #8]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	edd3 7a00 	vldr	s15, [r3]
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	68ba      	ldr	r2, [r7, #8]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8000ce8 <uint16_to_float32+0x6c>
 8000cc4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000cc8:	edc3 7a00 	vstr	s15, [r3]
    for (size_t i = 0; i < length; i++) {
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	617b      	str	r3, [r7, #20]
 8000cd2:	697a      	ldr	r2, [r7, #20]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	d3d9      	bcc.n	8000c8e <uint16_to_float32+0x12>
    }
}
 8000cda:	bf00      	nop
 8000cdc:	bf00      	nop
 8000cde:	371c      	adds	r7, #28
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	447a0000 	.word	0x447a0000

08000cec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cf0:	f002 fa1a 	bl	8003128 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cf4:	f000 f882 	bl	8000dfc <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000cf8:	f000 f8f2 	bl	8000ee0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cfc:	f000 fe04 	bl	8001908 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d00:	f000 fd64 	bl	80017cc <MX_DMA_Init>
  MX_CRC_Init();
 8000d04:	f000 f96a 	bl	8000fdc <MX_CRC_Init>
  MX_DMA2D_Init();
 8000d08:	f000 f9a6 	bl	8001058 <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 8000d0c:	f000 f9d6 	bl	80010bc <MX_DSIHOST_DSI_Init>
  MX_FMC_Init();
 8000d10:	f000 fdaa 	bl	8001868 <MX_FMC_Init>
  MX_I2C1_Init();
 8000d14:	f000 fad2 	bl	80012bc <MX_I2C1_Init>
  MX_I2C2_Init();
 8000d18:	f000 fafe 	bl	8001318 <MX_I2C2_Init>
  MX_LTDC_Init();
 8000d1c:	f000 fb2a 	bl	8001374 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8000d20:	f000 fba6 	bl	8001470 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 8000d24:	f000 fbd0 	bl	80014c8 <MX_SAI1_Init>
  MX_SDIO_SD_Init();
 8000d28:	f000 fc2c 	bl	8001584 <MX_SDIO_SD_Init>
  MX_TIM1_Init();
 8000d2c:	f000 fc5e 	bl	80015ec <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000d30:	f000 fcf8 	bl	8001724 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8000d34:	f000 fd20 	bl	8001778 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8000d38:	f00a fb94 	bl	800b464 <MX_FATFS_Init>
  MX_ADC1_Init();
 8000d3c:	f000 f8fc 	bl	8000f38 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000d40:	f000 fca4 	bl	800168c <MX_TIM2_Init>
  MX_DAC_Init();
 8000d44:	f000 f95e 	bl	8001004 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */

  arm_rfft_fast_init_f32(&fft_instance, N);
 8000d48:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d4c:	481c      	ldr	r0, [pc, #112]	@ (8000dc0 <main+0xd4>)
 8000d4e:	f00e fbd9 	bl	800f504 <arm_rfft_fast_init_f32>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d52:	f00a fe99 	bl	800ba88 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of ADCHalfSem */
  ADCHalfSemHandle = osSemaphoreNew(1, 0, &ADCHalfSem_attributes);
 8000d56:	4a1b      	ldr	r2, [pc, #108]	@ (8000dc4 <main+0xd8>)
 8000d58:	2100      	movs	r1, #0
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	f00a ffc2 	bl	800bce4 <osSemaphoreNew>
 8000d60:	4603      	mov	r3, r0
 8000d62:	4a19      	ldr	r2, [pc, #100]	@ (8000dc8 <main+0xdc>)
 8000d64:	6013      	str	r3, [r2, #0]

  /* creation of ADCFullSem */
  ADCFullSemHandle = osSemaphoreNew(1, 0, &ADCFullSem_attributes);
 8000d66:	4a19      	ldr	r2, [pc, #100]	@ (8000dcc <main+0xe0>)
 8000d68:	2100      	movs	r1, #0
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	f00a ffba 	bl	800bce4 <osSemaphoreNew>
 8000d70:	4603      	mov	r3, r0
 8000d72:	4a17      	ldr	r2, [pc, #92]	@ (8000dd0 <main+0xe4>)
 8000d74:	6013      	str	r3, [r2, #0]

  /* creation of FFTHalfSem */
  FFTHalfSemHandle = osSemaphoreNew(1, 0, &FFTHalfSem_attributes);
 8000d76:	4a17      	ldr	r2, [pc, #92]	@ (8000dd4 <main+0xe8>)
 8000d78:	2100      	movs	r1, #0
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	f00a ffb2 	bl	800bce4 <osSemaphoreNew>
 8000d80:	4603      	mov	r3, r0
 8000d82:	4a15      	ldr	r2, [pc, #84]	@ (8000dd8 <main+0xec>)
 8000d84:	6013      	str	r3, [r2, #0]

  /* creation of FFTFullSem */
  FFTFullSemHandle = osSemaphoreNew(1, 0, &FFTFullSem_attributes);
 8000d86:	4a15      	ldr	r2, [pc, #84]	@ (8000ddc <main+0xf0>)
 8000d88:	2100      	movs	r1, #0
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	f00a ffaa 	bl	800bce4 <osSemaphoreNew>
 8000d90:	4603      	mov	r3, r0
 8000d92:	4a13      	ldr	r2, [pc, #76]	@ (8000de0 <main+0xf4>)
 8000d94:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000d96:	4a13      	ldr	r2, [pc, #76]	@ (8000de4 <main+0xf8>)
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4813      	ldr	r0, [pc, #76]	@ (8000de8 <main+0xfc>)
 8000d9c:	f00a fef5 	bl	800bb8a <osThreadNew>
 8000da0:	4603      	mov	r3, r0
 8000da2:	4a12      	ldr	r2, [pc, #72]	@ (8000dec <main+0x100>)
 8000da4:	6013      	str	r3, [r2, #0]

  /* creation of FFTTask */
  FFTTaskHandle = osThreadNew(StartFFTTask, NULL, &FFTTask_attributes);
 8000da6:	4a12      	ldr	r2, [pc, #72]	@ (8000df0 <main+0x104>)
 8000da8:	2100      	movs	r1, #0
 8000daa:	4812      	ldr	r0, [pc, #72]	@ (8000df4 <main+0x108>)
 8000dac:	f00a feed 	bl	800bb8a <osThreadNew>
 8000db0:	4603      	mov	r3, r0
 8000db2:	4a11      	ldr	r2, [pc, #68]	@ (8000df8 <main+0x10c>)
 8000db4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000db6:	f00a fead 	bl	800bb14 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000dba:	bf00      	nop
 8000dbc:	e7fd      	b.n	8000dba <main+0xce>
 8000dbe:	bf00      	nop
 8000dc0:	2000173c 	.word	0x2000173c
 8000dc4:	08012090 	.word	0x08012090
 8000dc8:	2000072c 	.word	0x2000072c
 8000dcc:	080120a0 	.word	0x080120a0
 8000dd0:	20000730 	.word	0x20000730
 8000dd4:	080120b0 	.word	0x080120b0
 8000dd8:	20000734 	.word	0x20000734
 8000ddc:	080120c0 	.word	0x080120c0
 8000de0:	20000738 	.word	0x20000738
 8000de4:	08012048 	.word	0x08012048
 8000de8:	08001cf9 	.word	0x08001cf9
 8000dec:	20000724 	.word	0x20000724
 8000df0:	0801206c 	.word	0x0801206c
 8000df4:	08001d89 	.word	0x08001d89
 8000df8:	20000728 	.word	0x20000728

08000dfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b094      	sub	sp, #80	@ 0x50
 8000e00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e02:	f107 031c 	add.w	r3, r7, #28
 8000e06:	2234      	movs	r2, #52	@ 0x34
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f00f fd68 	bl	80108e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e10:	f107 0308 	add.w	r3, r7, #8
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e20:	2300      	movs	r3, #0
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	4b2c      	ldr	r3, [pc, #176]	@ (8000ed8 <SystemClock_Config+0xdc>)
 8000e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e28:	4a2b      	ldr	r2, [pc, #172]	@ (8000ed8 <SystemClock_Config+0xdc>)
 8000e2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e30:	4b29      	ldr	r3, [pc, #164]	@ (8000ed8 <SystemClock_Config+0xdc>)
 8000e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e38:	607b      	str	r3, [r7, #4]
 8000e3a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	603b      	str	r3, [r7, #0]
 8000e40:	4b26      	ldr	r3, [pc, #152]	@ (8000edc <SystemClock_Config+0xe0>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a25      	ldr	r2, [pc, #148]	@ (8000edc <SystemClock_Config+0xe0>)
 8000e46:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e4a:	6013      	str	r3, [r2, #0]
 8000e4c:	4b23      	ldr	r3, [pc, #140]	@ (8000edc <SystemClock_Config+0xe0>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e54:	603b      	str	r3, [r7, #0]
 8000e56:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e5c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e60:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e62:	2302      	movs	r3, #2
 8000e64:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e66:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000e6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e6c:	2304      	movs	r3, #4
 8000e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000e70:	23b4      	movs	r3, #180	@ 0xb4
 8000e72:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e74:	2302      	movs	r3, #2
 8000e76:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8000e78:	2306      	movs	r3, #6
 8000e7a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 6;
 8000e7c:	2306      	movs	r3, #6
 8000e7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e80:	f107 031c 	add.w	r3, r7, #28
 8000e84:	4618      	mov	r0, r3
 8000e86:	f005 ffd5 	bl	8006e34 <HAL_RCC_OscConfig>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000e90:	f001 f9a2 	bl	80021d8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e94:	f005 fa2c 	bl	80062f0 <HAL_PWREx_EnableOverDrive>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000e9e:	f001 f99b 	bl	80021d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ea2:	230f      	movs	r3, #15
 8000ea4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000eae:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000eb2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000eb4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eb8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000eba:	f107 0308 	add.w	r3, r7, #8
 8000ebe:	2105      	movs	r1, #5
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f005 fb27 	bl	8006514 <HAL_RCC_ClockConfig>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000ecc:	f001 f984 	bl	80021d8 <Error_Handler>
  }
}
 8000ed0:	bf00      	nop
 8000ed2:	3750      	adds	r7, #80	@ 0x50
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	40007000 	.word	0x40007000

08000ee0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b090      	sub	sp, #64	@ 0x40
 8000ee4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ee6:	1d3b      	adds	r3, r7, #4
 8000ee8:	223c      	movs	r2, #60	@ 0x3c
 8000eea:	2100      	movs	r1, #0
 8000eec:	4618      	mov	r0, r3
 8000eee:	f00f fcf7 	bl	80108e0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI_PLLSAI|RCC_PERIPHCLK_SDIO
 8000ef2:	f44f 73c6 	mov.w	r3, #396	@ 0x18c
 8000ef6:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_CLK48|RCC_PERIPHCLK_LTDC;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 144;
 8000ef8:	2390      	movs	r3, #144	@ 0x90
 8000efa:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000efc:	2302      	movs	r3, #2
 8000efe:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000f00:	2302      	movs	r3, #2
 8000f02:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV6;
 8000f04:	2306      	movs	r3, #6
 8000f06:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8000f0c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 8000f12:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000f16:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f1c:	1d3b      	adds	r3, r7, #4
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f005 fd4a 	bl	80069b8 <HAL_RCCEx_PeriphCLKConfig>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8000f2a:	f001 f955 	bl	80021d8 <Error_Handler>
  }
}
 8000f2e:	bf00      	nop
 8000f30:	3740      	adds	r7, #64	@ 0x40
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
	...

08000f38 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f3e:	463b      	mov	r3, r7
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f4a:	4b22      	ldr	r3, [pc, #136]	@ (8000fd4 <MX_ADC1_Init+0x9c>)
 8000f4c:	4a22      	ldr	r2, [pc, #136]	@ (8000fd8 <MX_ADC1_Init+0xa0>)
 8000f4e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f50:	4b20      	ldr	r3, [pc, #128]	@ (8000fd4 <MX_ADC1_Init+0x9c>)
 8000f52:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000f56:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f58:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd4 <MX_ADC1_Init+0x9c>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f5e:	4b1d      	ldr	r3, [pc, #116]	@ (8000fd4 <MX_ADC1_Init+0x9c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f64:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd4 <MX_ADC1_Init+0x9c>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f6a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd4 <MX_ADC1_Init+0x9c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f72:	4b18      	ldr	r3, [pc, #96]	@ (8000fd4 <MX_ADC1_Init+0x9c>)
 8000f74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000f78:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000f7a:	4b16      	ldr	r3, [pc, #88]	@ (8000fd4 <MX_ADC1_Init+0x9c>)
 8000f7c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000f80:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f82:	4b14      	ldr	r3, [pc, #80]	@ (8000fd4 <MX_ADC1_Init+0x9c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f88:	4b12      	ldr	r3, [pc, #72]	@ (8000fd4 <MX_ADC1_Init+0x9c>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f8e:	4b11      	ldr	r3, [pc, #68]	@ (8000fd4 <MX_ADC1_Init+0x9c>)
 8000f90:	2201      	movs	r2, #1
 8000f92:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f96:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd4 <MX_ADC1_Init+0x9c>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f9c:	480d      	ldr	r0, [pc, #52]	@ (8000fd4 <MX_ADC1_Init+0x9c>)
 8000f9e:	f002 f929 	bl	80031f4 <HAL_ADC_Init>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000fa8:	f001 f916 	bl	80021d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000fac:	230f      	movs	r3, #15
 8000fae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fb8:	463b      	mov	r3, r7
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4805      	ldr	r0, [pc, #20]	@ (8000fd4 <MX_ADC1_Init+0x9c>)
 8000fbe:	f002 fa77 	bl	80034b0 <HAL_ADC_ConfigChannel>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000fc8:	f001 f906 	bl	80021d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fcc:	bf00      	nop
 8000fce:	3710      	adds	r7, #16
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	20000088 	.word	0x20000088
 8000fd8:	40012000 	.word	0x40012000

08000fdc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000fe0:	4b06      	ldr	r3, [pc, #24]	@ (8000ffc <MX_CRC_Init+0x20>)
 8000fe2:	4a07      	ldr	r2, [pc, #28]	@ (8001000 <MX_CRC_Init+0x24>)
 8000fe4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000fe6:	4805      	ldr	r0, [pc, #20]	@ (8000ffc <MX_CRC_Init+0x20>)
 8000fe8:	f002 fdf4 	bl	8003bd4 <HAL_CRC_Init>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000ff2:	f001 f8f1 	bl	80021d8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000130 	.word	0x20000130
 8001000:	40023000 	.word	0x40023000

08001004 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800100a:	463b      	mov	r3, r7
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001012:	4b0f      	ldr	r3, [pc, #60]	@ (8001050 <MX_DAC_Init+0x4c>)
 8001014:	4a0f      	ldr	r2, [pc, #60]	@ (8001054 <MX_DAC_Init+0x50>)
 8001016:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001018:	480d      	ldr	r0, [pc, #52]	@ (8001050 <MX_DAC_Init+0x4c>)
 800101a:	f002 fdf7 	bl	8003c0c <HAL_DAC_Init>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001024:	f001 f8d8 	bl	80021d8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001028:	2324      	movs	r3, #36	@ 0x24
 800102a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800102c:	2300      	movs	r3, #0
 800102e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001030:	463b      	mov	r3, r7
 8001032:	2200      	movs	r2, #0
 8001034:	4619      	mov	r1, r3
 8001036:	4806      	ldr	r0, [pc, #24]	@ (8001050 <MX_DAC_Init+0x4c>)
 8001038:	f002 fe6a 	bl	8003d10 <HAL_DAC_ConfigChannel>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001042:	f001 f8c9 	bl	80021d8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000138 	.word	0x20000138
 8001054:	40007400 	.word	0x40007400

08001058 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800105c:	4b15      	ldr	r3, [pc, #84]	@ (80010b4 <MX_DMA2D_Init+0x5c>)
 800105e:	4a16      	ldr	r2, [pc, #88]	@ (80010b8 <MX_DMA2D_Init+0x60>)
 8001060:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001062:	4b14      	ldr	r3, [pc, #80]	@ (80010b4 <MX_DMA2D_Init+0x5c>)
 8001064:	2200      	movs	r2, #0
 8001066:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001068:	4b12      	ldr	r3, [pc, #72]	@ (80010b4 <MX_DMA2D_Init+0x5c>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800106e:	4b11      	ldr	r3, [pc, #68]	@ (80010b4 <MX_DMA2D_Init+0x5c>)
 8001070:	2200      	movs	r2, #0
 8001072:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001074:	4b0f      	ldr	r3, [pc, #60]	@ (80010b4 <MX_DMA2D_Init+0x5c>)
 8001076:	2200      	movs	r2, #0
 8001078:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800107a:	4b0e      	ldr	r3, [pc, #56]	@ (80010b4 <MX_DMA2D_Init+0x5c>)
 800107c:	2200      	movs	r2, #0
 800107e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001080:	4b0c      	ldr	r3, [pc, #48]	@ (80010b4 <MX_DMA2D_Init+0x5c>)
 8001082:	2200      	movs	r2, #0
 8001084:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001086:	4b0b      	ldr	r3, [pc, #44]	@ (80010b4 <MX_DMA2D_Init+0x5c>)
 8001088:	2200      	movs	r2, #0
 800108a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800108c:	4809      	ldr	r0, [pc, #36]	@ (80010b4 <MX_DMA2D_Init+0x5c>)
 800108e:	f003 fab1 	bl	80045f4 <HAL_DMA2D_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001098:	f001 f89e 	bl	80021d8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800109c:	2101      	movs	r1, #1
 800109e:	4805      	ldr	r0, [pc, #20]	@ (80010b4 <MX_DMA2D_Init+0x5c>)
 80010a0:	f003 fc02 	bl	80048a8 <HAL_DMA2D_ConfigLayer>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80010aa:	f001 f895 	bl	80021d8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	200001ac 	.word	0x200001ac
 80010b8:	4002b000 	.word	0x4002b000

080010bc <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b0aa      	sub	sp, #168	@ 0xa8
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 80010c2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 80010ce:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80010d2:	2224      	movs	r2, #36	@ 0x24
 80010d4:	2100      	movs	r1, #0
 80010d6:	4618      	mov	r0, r3
 80010d8:	f00f fc02 	bl	80108e0 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 80010dc:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
 80010ec:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 80010ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010f2:	2234      	movs	r2, #52	@ 0x34
 80010f4:	2100      	movs	r1, #0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f00f fbf2 	bl	80108e0 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 80010fc:	463b      	mov	r3, r7
 80010fe:	222c      	movs	r2, #44	@ 0x2c
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f00f fbec 	bl	80108e0 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8001108:	4b6a      	ldr	r3, [pc, #424]	@ (80012b4 <MX_DSIHOST_DSI_Init+0x1f8>)
 800110a:	4a6b      	ldr	r2, [pc, #428]	@ (80012b8 <MX_DSIHOST_DSI_Init+0x1fc>)
 800110c:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 800110e:	4b69      	ldr	r3, [pc, #420]	@ (80012b4 <MX_DSIHOST_DSI_Init+0x1f8>)
 8001110:	2200      	movs	r2, #0
 8001112:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8001114:	4b67      	ldr	r3, [pc, #412]	@ (80012b4 <MX_DSIHOST_DSI_Init+0x1f8>)
 8001116:	2204      	movs	r2, #4
 8001118:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 800111a:	4b66      	ldr	r3, [pc, #408]	@ (80012b4 <MX_DSIHOST_DSI_Init+0x1f8>)
 800111c:	2201      	movs	r2, #1
 800111e:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 125;
 8001120:	237d      	movs	r3, #125	@ 0x7d
 8001122:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV2;
 8001126:	2302      	movs	r3, #2
 8001128:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 800112c:	2300      	movs	r3, #0
 800112e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8001132:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001136:	4619      	mov	r1, r3
 8001138:	485e      	ldr	r0, [pc, #376]	@ (80012b4 <MX_DSIHOST_DSI_Init+0x1f8>)
 800113a:	f003 fc47 	bl	80049cc <HAL_DSI_Init>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 8001144:	f001 f848 	bl	80021d8 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8001148:	2301      	movs	r3, #1
 800114a:	67bb      	str	r3, [r7, #120]	@ 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 800114c:	2300      	movs	r3, #0
 800114e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8001150:	2300      	movs	r3, #0
 8001152:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 8001156:	2300      	movs	r3, #0
 8001158:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8001168:	2300      	movs	r3, #0
 800116a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  HostTimeouts.BTATimeout = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 800117a:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800117e:	4619      	mov	r1, r3
 8001180:	484c      	ldr	r0, [pc, #304]	@ (80012b4 <MX_DSIHOST_DSI_Init+0x1f8>)
 8001182:	f004 f937 	bl	80053f4 <HAL_DSI_ConfigHostTimeouts>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 800118c:	f001 f824 	bl	80021d8 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 8001190:	231c      	movs	r3, #28
 8001192:	663b      	str	r3, [r7, #96]	@ 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 8001194:	2321      	movs	r3, #33	@ 0x21
 8001196:	667b      	str	r3, [r7, #100]	@ 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 8001198:	230f      	movs	r3, #15
 800119a:	66bb      	str	r3, [r7, #104]	@ 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 800119c:	2319      	movs	r3, #25
 800119e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	673b      	str	r3, [r7, #112]	@ 0x70
  PhyTimings.StopWaitTime = 10;
 80011a4:	230a      	movs	r3, #10
 80011a6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 80011a8:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80011ac:	4619      	mov	r1, r3
 80011ae:	4841      	ldr	r0, [pc, #260]	@ (80012b4 <MX_DSIHOST_DSI_Init+0x1f8>)
 80011b0:	f004 f8b6 	bl	8005320 <HAL_DSI_ConfigPhyTimer>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 80011ba:	f001 f80d 	bl	80021d8 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 80011be:	2104      	movs	r1, #4
 80011c0:	483c      	ldr	r0, [pc, #240]	@ (80012b4 <MX_DSIHOST_DSI_Init+0x1f8>)
 80011c2:	f004 f885 	bl	80052d0 <HAL_DSI_ConfigFlowControl>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 80011cc:	f001 f804 	bl	80021d8 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 80011d0:	f242 7110 	movw	r1, #10000	@ 0x2710
 80011d4:	4837      	ldr	r0, [pc, #220]	@ (80012b4 <MX_DSIHOST_DSI_Init+0x1f8>)
 80011d6:	f004 f9d3 	bl	8005580 <HAL_DSI_SetLowPowerRXFilter>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 80011e0:	f000 fffa 	bl	80021d8 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 80011e4:	2100      	movs	r1, #0
 80011e6:	4833      	ldr	r0, [pc, #204]	@ (80012b4 <MX_DSIHOST_DSI_Init+0x1f8>)
 80011e8:	f003 fd70 	bl	8004ccc <HAL_DSI_ConfigErrorMonitor>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 80011f2:	f000 fff1 	bl	80021d8 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_ENABLE;
 80011f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 80011fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001200:	633b      	str	r3, [r7, #48]	@ 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_ENABLE;
 8001202:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001206:	637b      	str	r3, [r7, #52]	@ 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8001208:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800120c:	63bb      	str	r3, [r7, #56]	@ 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_ENABLE;
 800120e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001212:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8001214:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001218:	643b      	str	r3, [r7, #64]	@ 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_ENABLE;
 800121a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800121e:	647b      	str	r3, [r7, #68]	@ 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8001220:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001224:	64bb      	str	r3, [r7, #72]	@ 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_ENABLE;
 8001226:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800122a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 800122c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001230:	653b      	str	r3, [r7, #80]	@ 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_ENABLE;
 8001232:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001236:	657b      	str	r3, [r7, #84]	@ 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8001238:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800123c:	65bb      	str	r3, [r7, #88]	@ 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 800123e:	2300      	movs	r3, #0
 8001240:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8001242:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001246:	4619      	mov	r1, r3
 8001248:	481a      	ldr	r0, [pc, #104]	@ (80012b4 <MX_DSIHOST_DSI_Init+0x1f8>)
 800124a:	f003 ffe3 	bl	8005214 <HAL_DSI_ConfigCommand>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_DSIHOST_DSI_Init+0x19c>
  {
    Error_Handler();
 8001254:	f000 ffc0 	bl	80021d8 <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB888;
 800125c:	2305      	movs	r3, #5
 800125e:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 200;
 8001260:	23c8      	movs	r3, #200	@ 0xc8
 8001262:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8001264:	2310      	movs	r3, #16
 8001266:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8001268:	2300      	movs	r3, #0
 800126a:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 800126c:	2304      	movs	r3, #4
 800126e:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 8001270:	2302      	movs	r3, #2
 8001272:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8001274:	2300      	movs	r3, #0
 8001276:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 8001278:	2300      	movs	r3, #0
 800127a:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 800127c:	2340      	movs	r3, #64	@ 0x40
 800127e:	627b      	str	r3, [r7, #36]	@ 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8001280:	2301      	movs	r3, #1
 8001282:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8001284:	463b      	mov	r3, r7
 8001286:	4619      	mov	r1, r3
 8001288:	480a      	ldr	r0, [pc, #40]	@ (80012b4 <MX_DSIHOST_DSI_Init+0x1f8>)
 800128a:	f003 feeb 	bl	8005064 <HAL_DSI_ConfigAdaptedCommandMode>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_DSIHOST_DSI_Init+0x1dc>
  {
    Error_Handler();
 8001294:	f000 ffa0 	bl	80021d8 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8001298:	2100      	movs	r1, #0
 800129a:	4806      	ldr	r0, [pc, #24]	@ (80012b4 <MX_DSIHOST_DSI_Init+0x1f8>)
 800129c:	f003 feba 	bl	8005014 <HAL_DSI_SetGenericVCID>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_DSIHOST_DSI_Init+0x1ee>
  {
    Error_Handler();
 80012a6:	f000 ff97 	bl	80021d8 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 80012aa:	bf00      	nop
 80012ac:	37a8      	adds	r7, #168	@ 0xa8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	200001ec 	.word	0x200001ec
 80012b8:	40016c00 	.word	0x40016c00

080012bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012c0:	4b12      	ldr	r3, [pc, #72]	@ (800130c <MX_I2C1_Init+0x50>)
 80012c2:	4a13      	ldr	r2, [pc, #76]	@ (8001310 <MX_I2C1_Init+0x54>)
 80012c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012c6:	4b11      	ldr	r3, [pc, #68]	@ (800130c <MX_I2C1_Init+0x50>)
 80012c8:	4a12      	ldr	r2, [pc, #72]	@ (8001314 <MX_I2C1_Init+0x58>)
 80012ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012cc:	4b0f      	ldr	r3, [pc, #60]	@ (800130c <MX_I2C1_Init+0x50>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012d2:	4b0e      	ldr	r3, [pc, #56]	@ (800130c <MX_I2C1_Init+0x50>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012d8:	4b0c      	ldr	r3, [pc, #48]	@ (800130c <MX_I2C1_Init+0x50>)
 80012da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012e0:	4b0a      	ldr	r3, [pc, #40]	@ (800130c <MX_I2C1_Init+0x50>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012e6:	4b09      	ldr	r3, [pc, #36]	@ (800130c <MX_I2C1_Init+0x50>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012ec:	4b07      	ldr	r3, [pc, #28]	@ (800130c <MX_I2C1_Init+0x50>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012f2:	4b06      	ldr	r3, [pc, #24]	@ (800130c <MX_I2C1_Init+0x50>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012f8:	4804      	ldr	r0, [pc, #16]	@ (800130c <MX_I2C1_Init+0x50>)
 80012fa:	f004 fb4d 	bl	8005998 <HAL_I2C_Init>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001304:	f000 ff68 	bl	80021d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001308:	bf00      	nop
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000208 	.word	0x20000208
 8001310:	40005400 	.word	0x40005400
 8001314:	000186a0 	.word	0x000186a0

08001318 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800131c:	4b12      	ldr	r3, [pc, #72]	@ (8001368 <MX_I2C2_Init+0x50>)
 800131e:	4a13      	ldr	r2, [pc, #76]	@ (800136c <MX_I2C2_Init+0x54>)
 8001320:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001322:	4b11      	ldr	r3, [pc, #68]	@ (8001368 <MX_I2C2_Init+0x50>)
 8001324:	4a12      	ldr	r2, [pc, #72]	@ (8001370 <MX_I2C2_Init+0x58>)
 8001326:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001328:	4b0f      	ldr	r3, [pc, #60]	@ (8001368 <MX_I2C2_Init+0x50>)
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800132e:	4b0e      	ldr	r3, [pc, #56]	@ (8001368 <MX_I2C2_Init+0x50>)
 8001330:	2200      	movs	r2, #0
 8001332:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001334:	4b0c      	ldr	r3, [pc, #48]	@ (8001368 <MX_I2C2_Init+0x50>)
 8001336:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800133a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800133c:	4b0a      	ldr	r3, [pc, #40]	@ (8001368 <MX_I2C2_Init+0x50>)
 800133e:	2200      	movs	r2, #0
 8001340:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001342:	4b09      	ldr	r3, [pc, #36]	@ (8001368 <MX_I2C2_Init+0x50>)
 8001344:	2200      	movs	r2, #0
 8001346:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001348:	4b07      	ldr	r3, [pc, #28]	@ (8001368 <MX_I2C2_Init+0x50>)
 800134a:	2200      	movs	r2, #0
 800134c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800134e:	4b06      	ldr	r3, [pc, #24]	@ (8001368 <MX_I2C2_Init+0x50>)
 8001350:	2200      	movs	r2, #0
 8001352:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001354:	4804      	ldr	r0, [pc, #16]	@ (8001368 <MX_I2C2_Init+0x50>)
 8001356:	f004 fb1f 	bl	8005998 <HAL_I2C_Init>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001360:	f000 ff3a 	bl	80021d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001364:	bf00      	nop
 8001366:	bd80      	pop	{r7, pc}
 8001368:	2000025c 	.word	0x2000025c
 800136c:	40005800 	.word	0x40005800
 8001370:	000186a0 	.word	0x000186a0

08001374 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08e      	sub	sp, #56	@ 0x38
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	2234      	movs	r2, #52	@ 0x34
 800137e:	2100      	movs	r1, #0
 8001380:	4618      	mov	r0, r3
 8001382:	f00f faad 	bl	80108e0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001386:	4b38      	ldr	r3, [pc, #224]	@ (8001468 <MX_LTDC_Init+0xf4>)
 8001388:	4a38      	ldr	r2, [pc, #224]	@ (800146c <MX_LTDC_Init+0xf8>)
 800138a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800138c:	4b36      	ldr	r3, [pc, #216]	@ (8001468 <MX_LTDC_Init+0xf4>)
 800138e:	2200      	movs	r2, #0
 8001390:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001392:	4b35      	ldr	r3, [pc, #212]	@ (8001468 <MX_LTDC_Init+0xf4>)
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001398:	4b33      	ldr	r3, [pc, #204]	@ (8001468 <MX_LTDC_Init+0xf4>)
 800139a:	2200      	movs	r2, #0
 800139c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800139e:	4b32      	ldr	r3, [pc, #200]	@ (8001468 <MX_LTDC_Init+0xf4>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 80013a4:	4b30      	ldr	r3, [pc, #192]	@ (8001468 <MX_LTDC_Init+0xf4>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 80013aa:	4b2f      	ldr	r3, [pc, #188]	@ (8001468 <MX_LTDC_Init+0xf4>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 1;
 80013b0:	4b2d      	ldr	r3, [pc, #180]	@ (8001468 <MX_LTDC_Init+0xf4>)
 80013b2:	2201      	movs	r2, #1
 80013b4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 1;
 80013b6:	4b2c      	ldr	r3, [pc, #176]	@ (8001468 <MX_LTDC_Init+0xf4>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 201;
 80013bc:	4b2a      	ldr	r3, [pc, #168]	@ (8001468 <MX_LTDC_Init+0xf4>)
 80013be:	22c9      	movs	r2, #201	@ 0xc9
 80013c0:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 481;
 80013c2:	4b29      	ldr	r3, [pc, #164]	@ (8001468 <MX_LTDC_Init+0xf4>)
 80013c4:	f240 12e1 	movw	r2, #481	@ 0x1e1
 80013c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 202;
 80013ca:	4b27      	ldr	r3, [pc, #156]	@ (8001468 <MX_LTDC_Init+0xf4>)
 80013cc:	22ca      	movs	r2, #202	@ 0xca
 80013ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 482;
 80013d0:	4b25      	ldr	r3, [pc, #148]	@ (8001468 <MX_LTDC_Init+0xf4>)
 80013d2:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 80013d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80013d8:	4b23      	ldr	r3, [pc, #140]	@ (8001468 <MX_LTDC_Init+0xf4>)
 80013da:	2200      	movs	r2, #0
 80013dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80013e0:	4b21      	ldr	r3, [pc, #132]	@ (8001468 <MX_LTDC_Init+0xf4>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80013e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001468 <MX_LTDC_Init+0xf4>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80013f0:	481d      	ldr	r0, [pc, #116]	@ (8001468 <MX_LTDC_Init+0xf4>)
 80013f2:	f004 fc15 	bl	8005c20 <HAL_LTDC_Init>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_LTDC_Init+0x8c>
  {
    Error_Handler();
 80013fc:	f000 feec 	bl	80021d8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001400:	2300      	movs	r3, #0
 8001402:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 200;
 8001404:	23c8      	movs	r3, #200	@ 0xc8
 8001406:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 800140c:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001410:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001412:	2302      	movs	r3, #2
 8001414:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001416:	23ff      	movs	r3, #255	@ 0xff
 8001418:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800141a:	2300      	movs	r3, #0
 800141c:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800141e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001422:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001424:	2307      	movs	r3, #7
 8001426:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001428:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 800142c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 200;
 800142e:	23c8      	movs	r3, #200	@ 0xc8
 8001430:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 480;
 8001432:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001436:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001438:	2300      	movs	r3, #0
 800143a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 800143e:	2300      	movs	r3, #0
 8001440:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001444:	2300      	movs	r3, #0
 8001446:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800144a:	1d3b      	adds	r3, r7, #4
 800144c:	2200      	movs	r2, #0
 800144e:	4619      	mov	r1, r3
 8001450:	4805      	ldr	r0, [pc, #20]	@ (8001468 <MX_LTDC_Init+0xf4>)
 8001452:	f004 fd77 	bl	8005f44 <HAL_LTDC_ConfigLayer>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 800145c:	f000 febc 	bl	80021d8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001460:	bf00      	nop
 8001462:	3738      	adds	r7, #56	@ 0x38
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	200002b0 	.word	0x200002b0
 800146c:	40016800 	.word	0x40016800

08001470 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001474:	4b12      	ldr	r3, [pc, #72]	@ (80014c0 <MX_QUADSPI_Init+0x50>)
 8001476:	4a13      	ldr	r2, [pc, #76]	@ (80014c4 <MX_QUADSPI_Init+0x54>)
 8001478:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 800147a:	4b11      	ldr	r3, [pc, #68]	@ (80014c0 <MX_QUADSPI_Init+0x50>)
 800147c:	2201      	movs	r2, #1
 800147e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001480:	4b0f      	ldr	r3, [pc, #60]	@ (80014c0 <MX_QUADSPI_Init+0x50>)
 8001482:	2201      	movs	r2, #1
 8001484:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001486:	4b0e      	ldr	r3, [pc, #56]	@ (80014c0 <MX_QUADSPI_Init+0x50>)
 8001488:	2210      	movs	r2, #16
 800148a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 800148c:	4b0c      	ldr	r3, [pc, #48]	@ (80014c0 <MX_QUADSPI_Init+0x50>)
 800148e:	2218      	movs	r2, #24
 8001490:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 8001492:	4b0b      	ldr	r3, [pc, #44]	@ (80014c0 <MX_QUADSPI_Init+0x50>)
 8001494:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001498:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800149a:	4b09      	ldr	r3, [pc, #36]	@ (80014c0 <MX_QUADSPI_Init+0x50>)
 800149c:	2200      	movs	r2, #0
 800149e:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80014a0:	4b07      	ldr	r3, [pc, #28]	@ (80014c0 <MX_QUADSPI_Init+0x50>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80014a6:	4b06      	ldr	r3, [pc, #24]	@ (80014c0 <MX_QUADSPI_Init+0x50>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80014ac:	4804      	ldr	r0, [pc, #16]	@ (80014c0 <MX_QUADSPI_Init+0x50>)
 80014ae:	f004 ff6f 	bl	8006390 <HAL_QSPI_Init>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 80014b8:	f000 fe8e 	bl	80021d8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80014bc:	bf00      	nop
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20000358 	.word	0x20000358
 80014c4:	a0001000 	.word	0xa0001000

080014c8 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 80014cc:	4b2a      	ldr	r3, [pc, #168]	@ (8001578 <MX_SAI1_Init+0xb0>)
 80014ce:	4a2b      	ldr	r2, [pc, #172]	@ (800157c <MX_SAI1_Init+0xb4>)
 80014d0:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 80014d2:	4b29      	ldr	r3, [pc, #164]	@ (8001578 <MX_SAI1_Init+0xb0>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 80014d8:	4b27      	ldr	r3, [pc, #156]	@ (8001578 <MX_SAI1_Init+0xb0>)
 80014da:	2200      	movs	r2, #0
 80014dc:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 80014de:	4b26      	ldr	r3, [pc, #152]	@ (8001578 <MX_SAI1_Init+0xb0>)
 80014e0:	2240      	movs	r2, #64	@ 0x40
 80014e2:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80014e4:	4b24      	ldr	r3, [pc, #144]	@ (8001578 <MX_SAI1_Init+0xb0>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80014ea:	4b23      	ldr	r3, [pc, #140]	@ (8001578 <MX_SAI1_Init+0xb0>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 80014f0:	4b21      	ldr	r3, [pc, #132]	@ (8001578 <MX_SAI1_Init+0xb0>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80014f6:	4b20      	ldr	r3, [pc, #128]	@ (8001578 <MX_SAI1_Init+0xb0>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80014fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001578 <MX_SAI1_Init+0xb0>)
 80014fe:	2200      	movs	r2, #0
 8001500:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001502:	4b1d      	ldr	r3, [pc, #116]	@ (8001578 <MX_SAI1_Init+0xb0>)
 8001504:	2200      	movs	r2, #0
 8001506:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.ClockSource = SAI_CLKSOURCE_PLLSAI;
 8001508:	4b1b      	ldr	r3, [pc, #108]	@ (8001578 <MX_SAI1_Init+0xb0>)
 800150a:	2200      	movs	r2, #0
 800150c:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800150e:	4b1a      	ldr	r3, [pc, #104]	@ (8001578 <MX_SAI1_Init+0xb0>)
 8001510:	4a1b      	ldr	r2, [pc, #108]	@ (8001580 <MX_SAI1_Init+0xb8>)
 8001512:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001514:	4b18      	ldr	r3, [pc, #96]	@ (8001578 <MX_SAI1_Init+0xb0>)
 8001516:	2200      	movs	r2, #0
 8001518:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800151a:	4b17      	ldr	r3, [pc, #92]	@ (8001578 <MX_SAI1_Init+0xb0>)
 800151c:	2200      	movs	r2, #0
 800151e:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001520:	4b15      	ldr	r3, [pc, #84]	@ (8001578 <MX_SAI1_Init+0xb0>)
 8001522:	2200      	movs	r2, #0
 8001524:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001526:	4b14      	ldr	r3, [pc, #80]	@ (8001578 <MX_SAI1_Init+0xb0>)
 8001528:	2200      	movs	r2, #0
 800152a:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.FrameInit.FrameLength = 8;
 800152c:	4b12      	ldr	r3, [pc, #72]	@ (8001578 <MX_SAI1_Init+0xb0>)
 800152e:	2208      	movs	r2, #8
 8001530:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8001532:	4b11      	ldr	r3, [pc, #68]	@ (8001578 <MX_SAI1_Init+0xb0>)
 8001534:	2201      	movs	r2, #1
 8001536:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001538:	4b0f      	ldr	r3, [pc, #60]	@ (8001578 <MX_SAI1_Init+0xb0>)
 800153a:	2200      	movs	r2, #0
 800153c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800153e:	4b0e      	ldr	r3, [pc, #56]	@ (8001578 <MX_SAI1_Init+0xb0>)
 8001540:	2200      	movs	r2, #0
 8001542:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001544:	4b0c      	ldr	r3, [pc, #48]	@ (8001578 <MX_SAI1_Init+0xb0>)
 8001546:	2200      	movs	r2, #0
 8001548:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 800154a:	4b0b      	ldr	r3, [pc, #44]	@ (8001578 <MX_SAI1_Init+0xb0>)
 800154c:	2200      	movs	r2, #0
 800154e:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001550:	4b09      	ldr	r3, [pc, #36]	@ (8001578 <MX_SAI1_Init+0xb0>)
 8001552:	2200      	movs	r2, #0
 8001554:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8001556:	4b08      	ldr	r3, [pc, #32]	@ (8001578 <MX_SAI1_Init+0xb0>)
 8001558:	2201      	movs	r2, #1
 800155a:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 800155c:	4b06      	ldr	r3, [pc, #24]	@ (8001578 <MX_SAI1_Init+0xb0>)
 800155e:	2200      	movs	r2, #0
 8001560:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8001562:	4805      	ldr	r0, [pc, #20]	@ (8001578 <MX_SAI1_Init+0xb0>)
 8001564:	f005 feea 	bl	800733c <HAL_SAI_Init>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_SAI1_Init+0xaa>
  {
    Error_Handler();
 800156e:	f000 fe33 	bl	80021d8 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	200003a4 	.word	0x200003a4
 800157c:	40015804 	.word	0x40015804
 8001580:	0002ee00 	.word	0x0002ee00

08001584 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001588:	4b16      	ldr	r3, [pc, #88]	@ (80015e4 <MX_SDIO_SD_Init+0x60>)
 800158a:	4a17      	ldr	r2, [pc, #92]	@ (80015e8 <MX_SDIO_SD_Init+0x64>)
 800158c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800158e:	4b15      	ldr	r3, [pc, #84]	@ (80015e4 <MX_SDIO_SD_Init+0x60>)
 8001590:	2200      	movs	r2, #0
 8001592:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001594:	4b13      	ldr	r3, [pc, #76]	@ (80015e4 <MX_SDIO_SD_Init+0x60>)
 8001596:	2200      	movs	r2, #0
 8001598:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800159a:	4b12      	ldr	r3, [pc, #72]	@ (80015e4 <MX_SDIO_SD_Init+0x60>)
 800159c:	2200      	movs	r2, #0
 800159e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 80015a0:	4b10      	ldr	r3, [pc, #64]	@ (80015e4 <MX_SDIO_SD_Init+0x60>)
 80015a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80015a6:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80015a8:	4b0e      	ldr	r3, [pc, #56]	@ (80015e4 <MX_SDIO_SD_Init+0x60>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 80015ae:	4b0d      	ldr	r3, [pc, #52]	@ (80015e4 <MX_SDIO_SD_Init+0x60>)
 80015b0:	2202      	movs	r2, #2
 80015b2:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
  // First init with 1B bus - SD card will not initialize with 4 bits
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80015b4:	4b0b      	ldr	r3, [pc, #44]	@ (80015e4 <MX_SDIO_SD_Init+0x60>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	611a      	str	r2, [r3, #16]
  if (HAL_SD_Init(&hsd) != HAL_OK) {
 80015ba:	480a      	ldr	r0, [pc, #40]	@ (80015e4 <MX_SDIO_SD_Init+0x60>)
 80015bc:	f006 f8e8 	bl	8007790 <HAL_SD_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_SDIO_SD_Init+0x46>
      Error_Handler();
 80015c6:	f000 fe07 	bl	80021d8 <Error_Handler>
  }

  // Now we can switch to 4 bit mode
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK) {
 80015ca:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80015ce:	4805      	ldr	r0, [pc, #20]	@ (80015e4 <MX_SDIO_SD_Init+0x60>)
 80015d0:	f006 fea0 	bl	8008314 <HAL_SD_ConfigWideBusOperation>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_SDIO_SD_Init+0x5a>
      Error_Handler();
 80015da:	f000 fdfd 	bl	80021d8 <Error_Handler>
  }
  /* USER CODE END SDIO_Init 2 */

}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	2000042c 	.word	0x2000042c
 80015e8:	40012c00 	.word	0x40012c00

080015ec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015f2:	f107 0308 	add.w	r3, r7, #8
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	605a      	str	r2, [r3, #4]
 80015fc:	609a      	str	r2, [r3, #8]
 80015fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001600:	463b      	mov	r3, r7
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001608:	4b1e      	ldr	r3, [pc, #120]	@ (8001684 <MX_TIM1_Init+0x98>)
 800160a:	4a1f      	ldr	r2, [pc, #124]	@ (8001688 <MX_TIM1_Init+0x9c>)
 800160c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800160e:	4b1d      	ldr	r3, [pc, #116]	@ (8001684 <MX_TIM1_Init+0x98>)
 8001610:	2200      	movs	r2, #0
 8001612:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001614:	4b1b      	ldr	r3, [pc, #108]	@ (8001684 <MX_TIM1_Init+0x98>)
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800161a:	4b1a      	ldr	r3, [pc, #104]	@ (8001684 <MX_TIM1_Init+0x98>)
 800161c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001620:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001622:	4b18      	ldr	r3, [pc, #96]	@ (8001684 <MX_TIM1_Init+0x98>)
 8001624:	2200      	movs	r2, #0
 8001626:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001628:	4b16      	ldr	r3, [pc, #88]	@ (8001684 <MX_TIM1_Init+0x98>)
 800162a:	2200      	movs	r2, #0
 800162c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800162e:	4b15      	ldr	r3, [pc, #84]	@ (8001684 <MX_TIM1_Init+0x98>)
 8001630:	2200      	movs	r2, #0
 8001632:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001634:	4813      	ldr	r0, [pc, #76]	@ (8001684 <MX_TIM1_Init+0x98>)
 8001636:	f007 fbfc 	bl	8008e32 <HAL_TIM_Base_Init>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001640:	f000 fdca 	bl	80021d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001644:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001648:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800164a:	f107 0308 	add.w	r3, r7, #8
 800164e:	4619      	mov	r1, r3
 8001650:	480c      	ldr	r0, [pc, #48]	@ (8001684 <MX_TIM1_Init+0x98>)
 8001652:	f007 fe05 	bl	8009260 <HAL_TIM_ConfigClockSource>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800165c:	f000 fdbc 	bl	80021d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001660:	2300      	movs	r3, #0
 8001662:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001664:	2300      	movs	r3, #0
 8001666:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001668:	463b      	mov	r3, r7
 800166a:	4619      	mov	r1, r3
 800166c:	4805      	ldr	r0, [pc, #20]	@ (8001684 <MX_TIM1_Init+0x98>)
 800166e:	f008 f82d 	bl	80096cc <HAL_TIMEx_MasterConfigSynchronization>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001678:	f000 fdae 	bl	80021d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800167c:	bf00      	nop
 800167e:	3718      	adds	r7, #24
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	20000570 	.word	0x20000570
 8001688:	40010000 	.word	0x40010000

0800168c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001692:	f107 0308 	add.w	r3, r7, #8
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	605a      	str	r2, [r3, #4]
 800169c:	609a      	str	r2, [r3, #8]
 800169e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016a0:	463b      	mov	r3, r7
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001720 <MX_TIM2_Init+0x94>)
 80016aa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80016ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 80016b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001720 <MX_TIM2_Init+0x94>)
 80016b2:	2259      	movs	r2, #89	@ 0x59
 80016b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001720 <MX_TIM2_Init+0x94>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80016bc:	4b18      	ldr	r3, [pc, #96]	@ (8001720 <MX_TIM2_Init+0x94>)
 80016be:	2263      	movs	r2, #99	@ 0x63
 80016c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c2:	4b17      	ldr	r3, [pc, #92]	@ (8001720 <MX_TIM2_Init+0x94>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016c8:	4b15      	ldr	r3, [pc, #84]	@ (8001720 <MX_TIM2_Init+0x94>)
 80016ca:	2280      	movs	r2, #128	@ 0x80
 80016cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016ce:	4814      	ldr	r0, [pc, #80]	@ (8001720 <MX_TIM2_Init+0x94>)
 80016d0:	f007 fbaf 	bl	8008e32 <HAL_TIM_Base_Init>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80016da:	f000 fd7d 	bl	80021d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016e4:	f107 0308 	add.w	r3, r7, #8
 80016e8:	4619      	mov	r1, r3
 80016ea:	480d      	ldr	r0, [pc, #52]	@ (8001720 <MX_TIM2_Init+0x94>)
 80016ec:	f007 fdb8 	bl	8009260 <HAL_TIM_ConfigClockSource>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80016f6:	f000 fd6f 	bl	80021d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80016fa:	2320      	movs	r3, #32
 80016fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016fe:	2300      	movs	r3, #0
 8001700:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001702:	463b      	mov	r3, r7
 8001704:	4619      	mov	r1, r3
 8001706:	4806      	ldr	r0, [pc, #24]	@ (8001720 <MX_TIM2_Init+0x94>)
 8001708:	f007 ffe0 	bl	80096cc <HAL_TIMEx_MasterConfigSynchronization>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001712:	f000 fd61 	bl	80021d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001716:	bf00      	nop
 8001718:	3718      	adds	r7, #24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	200005b8 	.word	0x200005b8

08001724 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001728:	4b10      	ldr	r3, [pc, #64]	@ (800176c <MX_USART3_UART_Init+0x48>)
 800172a:	4a11      	ldr	r2, [pc, #68]	@ (8001770 <MX_USART3_UART_Init+0x4c>)
 800172c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1500000;
 800172e:	4b0f      	ldr	r3, [pc, #60]	@ (800176c <MX_USART3_UART_Init+0x48>)
 8001730:	4a10      	ldr	r2, [pc, #64]	@ (8001774 <MX_USART3_UART_Init+0x50>)
 8001732:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001734:	4b0d      	ldr	r3, [pc, #52]	@ (800176c <MX_USART3_UART_Init+0x48>)
 8001736:	2200      	movs	r2, #0
 8001738:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800173a:	4b0c      	ldr	r3, [pc, #48]	@ (800176c <MX_USART3_UART_Init+0x48>)
 800173c:	2200      	movs	r2, #0
 800173e:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001740:	4b0a      	ldr	r3, [pc, #40]	@ (800176c <MX_USART3_UART_Init+0x48>)
 8001742:	2200      	movs	r2, #0
 8001744:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001746:	4b09      	ldr	r3, [pc, #36]	@ (800176c <MX_USART3_UART_Init+0x48>)
 8001748:	220c      	movs	r2, #12
 800174a:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800174c:	4b07      	ldr	r3, [pc, #28]	@ (800176c <MX_USART3_UART_Init+0x48>)
 800174e:	2200      	movs	r2, #0
 8001750:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001752:	4b06      	ldr	r3, [pc, #24]	@ (800176c <MX_USART3_UART_Init+0x48>)
 8001754:	2200      	movs	r2, #0
 8001756:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001758:	4804      	ldr	r0, [pc, #16]	@ (800176c <MX_USART3_UART_Init+0x48>)
 800175a:	f008 f847 	bl	80097ec <HAL_UART_Init>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 8001764:	f000 fd38 	bl	80021d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20000600 	.word	0x20000600
 8001770:	40004800 	.word	0x40004800
 8001774:	0016e360 	.word	0x0016e360

08001778 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800177c:	4b11      	ldr	r3, [pc, #68]	@ (80017c4 <MX_USART6_UART_Init+0x4c>)
 800177e:	4a12      	ldr	r2, [pc, #72]	@ (80017c8 <MX_USART6_UART_Init+0x50>)
 8001780:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001782:	4b10      	ldr	r3, [pc, #64]	@ (80017c4 <MX_USART6_UART_Init+0x4c>)
 8001784:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001788:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800178a:	4b0e      	ldr	r3, [pc, #56]	@ (80017c4 <MX_USART6_UART_Init+0x4c>)
 800178c:	2200      	movs	r2, #0
 800178e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001790:	4b0c      	ldr	r3, [pc, #48]	@ (80017c4 <MX_USART6_UART_Init+0x4c>)
 8001792:	2200      	movs	r2, #0
 8001794:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001796:	4b0b      	ldr	r3, [pc, #44]	@ (80017c4 <MX_USART6_UART_Init+0x4c>)
 8001798:	2200      	movs	r2, #0
 800179a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800179c:	4b09      	ldr	r3, [pc, #36]	@ (80017c4 <MX_USART6_UART_Init+0x4c>)
 800179e:	220c      	movs	r2, #12
 80017a0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017a2:	4b08      	ldr	r3, [pc, #32]	@ (80017c4 <MX_USART6_UART_Init+0x4c>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80017a8:	4b06      	ldr	r3, [pc, #24]	@ (80017c4 <MX_USART6_UART_Init+0x4c>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80017ae:	4805      	ldr	r0, [pc, #20]	@ (80017c4 <MX_USART6_UART_Init+0x4c>)
 80017b0:	f008 f81c 	bl	80097ec <HAL_UART_Init>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80017ba:	f000 fd0d 	bl	80021d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000648 	.word	0x20000648
 80017c8:	40011400 	.word	0x40011400

080017cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	607b      	str	r3, [r7, #4]
 80017d6:	4b23      	ldr	r3, [pc, #140]	@ (8001864 <MX_DMA_Init+0x98>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017da:	4a22      	ldr	r2, [pc, #136]	@ (8001864 <MX_DMA_Init+0x98>)
 80017dc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80017e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017e2:	4b20      	ldr	r3, [pc, #128]	@ (8001864 <MX_DMA_Init+0x98>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017ea:	607b      	str	r3, [r7, #4]
 80017ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	603b      	str	r3, [r7, #0]
 80017f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001864 <MX_DMA_Init+0x98>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f6:	4a1b      	ldr	r2, [pc, #108]	@ (8001864 <MX_DMA_Init+0x98>)
 80017f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80017fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017fe:	4b19      	ldr	r3, [pc, #100]	@ (8001864 <MX_DMA_Init+0x98>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001802:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001806:	603b      	str	r3, [r7, #0]
 8001808:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800180a:	2200      	movs	r2, #0
 800180c:	2105      	movs	r1, #5
 800180e:	200e      	movs	r0, #14
 8001810:	f002 f9b6 	bl	8003b80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001814:	200e      	movs	r0, #14
 8001816:	f002 f9cf 	bl	8003bb8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800181a:	2200      	movs	r2, #0
 800181c:	2105      	movs	r1, #5
 800181e:	2010      	movs	r0, #16
 8001820:	f002 f9ae 	bl	8003b80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001824:	2010      	movs	r0, #16
 8001826:	f002 f9c7 	bl	8003bb8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800182a:	2200      	movs	r2, #0
 800182c:	2105      	movs	r1, #5
 800182e:	2038      	movs	r0, #56	@ 0x38
 8001830:	f002 f9a6 	bl	8003b80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001834:	2038      	movs	r0, #56	@ 0x38
 8001836:	f002 f9bf 	bl	8003bb8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800183a:	2200      	movs	r2, #0
 800183c:	2105      	movs	r1, #5
 800183e:	203b      	movs	r0, #59	@ 0x3b
 8001840:	f002 f99e 	bl	8003b80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001844:	203b      	movs	r0, #59	@ 0x3b
 8001846:	f002 f9b7 	bl	8003bb8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 800184a:	2200      	movs	r2, #0
 800184c:	2105      	movs	r1, #5
 800184e:	2045      	movs	r0, #69	@ 0x45
 8001850:	f002 f996 	bl	8003b80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001854:	2045      	movs	r0, #69	@ 0x45
 8001856:	f002 f9af 	bl	8003bb8 <HAL_NVIC_EnableIRQ>

}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40023800 	.word	0x40023800

08001868 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b088      	sub	sp, #32
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800186e:	1d3b      	adds	r3, r7, #4
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	60da      	str	r2, [r3, #12]
 800187a:	611a      	str	r2, [r3, #16]
 800187c:	615a      	str	r2, [r3, #20]
 800187e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001880:	4b1f      	ldr	r3, [pc, #124]	@ (8001900 <MX_FMC_Init+0x98>)
 8001882:	4a20      	ldr	r2, [pc, #128]	@ (8001904 <MX_FMC_Init+0x9c>)
 8001884:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001886:	4b1e      	ldr	r3, [pc, #120]	@ (8001900 <MX_FMC_Init+0x98>)
 8001888:	2200      	movs	r2, #0
 800188a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800188c:	4b1c      	ldr	r3, [pc, #112]	@ (8001900 <MX_FMC_Init+0x98>)
 800188e:	2200      	movs	r2, #0
 8001890:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001892:	4b1b      	ldr	r3, [pc, #108]	@ (8001900 <MX_FMC_Init+0x98>)
 8001894:	2204      	movs	r2, #4
 8001896:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8001898:	4b19      	ldr	r3, [pc, #100]	@ (8001900 <MX_FMC_Init+0x98>)
 800189a:	2220      	movs	r2, #32
 800189c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800189e:	4b18      	ldr	r3, [pc, #96]	@ (8001900 <MX_FMC_Init+0x98>)
 80018a0:	2240      	movs	r2, #64	@ 0x40
 80018a2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80018a4:	4b16      	ldr	r3, [pc, #88]	@ (8001900 <MX_FMC_Init+0x98>)
 80018a6:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80018aa:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80018ac:	4b14      	ldr	r3, [pc, #80]	@ (8001900 <MX_FMC_Init+0x98>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80018b2:	4b13      	ldr	r3, [pc, #76]	@ (8001900 <MX_FMC_Init+0x98>)
 80018b4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80018b8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80018ba:	4b11      	ldr	r3, [pc, #68]	@ (8001900 <MX_FMC_Init+0x98>)
 80018bc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80018c0:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80018c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001900 <MX_FMC_Init+0x98>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80018c8:	2302      	movs	r3, #2
 80018ca:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80018cc:	2307      	movs	r3, #7
 80018ce:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80018d0:	2304      	movs	r3, #4
 80018d2:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80018d4:	2307      	movs	r3, #7
 80018d6:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80018d8:	2303      	movs	r3, #3
 80018da:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80018dc:	2302      	movs	r3, #2
 80018de:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80018e0:	2302      	movs	r3, #2
 80018e2:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80018e4:	1d3b      	adds	r3, r7, #4
 80018e6:	4619      	mov	r1, r3
 80018e8:	4805      	ldr	r0, [pc, #20]	@ (8001900 <MX_FMC_Init+0x98>)
 80018ea:	f007 fa6e 	bl	8008dca <HAL_SDRAM_Init>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80018f4:	f000 fc70 	bl	80021d8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80018f8:	bf00      	nop
 80018fa:	3720      	adds	r7, #32
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	200006f0 	.word	0x200006f0
 8001904:	a0000140 	.word	0xa0000140

08001908 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b090      	sub	sp, #64	@ 0x40
 800190c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800190e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	605a      	str	r2, [r3, #4]
 8001918:	609a      	str	r2, [r3, #8]
 800191a:	60da      	str	r2, [r3, #12]
 800191c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001922:	4bae      	ldr	r3, [pc, #696]	@ (8001bdc <MX_GPIO_Init+0x2d4>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001926:	4aad      	ldr	r2, [pc, #692]	@ (8001bdc <MX_GPIO_Init+0x2d4>)
 8001928:	f043 0310 	orr.w	r3, r3, #16
 800192c:	6313      	str	r3, [r2, #48]	@ 0x30
 800192e:	4bab      	ldr	r3, [pc, #684]	@ (8001bdc <MX_GPIO_Init+0x2d4>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001932:	f003 0310 	and.w	r3, r3, #16
 8001936:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	627b      	str	r3, [r7, #36]	@ 0x24
 800193e:	4ba7      	ldr	r3, [pc, #668]	@ (8001bdc <MX_GPIO_Init+0x2d4>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001942:	4aa6      	ldr	r2, [pc, #664]	@ (8001bdc <MX_GPIO_Init+0x2d4>)
 8001944:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001948:	6313      	str	r3, [r2, #48]	@ 0x30
 800194a:	4ba4      	ldr	r3, [pc, #656]	@ (8001bdc <MX_GPIO_Init+0x2d4>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001952:	627b      	str	r3, [r7, #36]	@ 0x24
 8001954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	623b      	str	r3, [r7, #32]
 800195a:	4ba0      	ldr	r3, [pc, #640]	@ (8001bdc <MX_GPIO_Init+0x2d4>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195e:	4a9f      	ldr	r2, [pc, #636]	@ (8001bdc <MX_GPIO_Init+0x2d4>)
 8001960:	f043 0302 	orr.w	r3, r3, #2
 8001964:	6313      	str	r3, [r2, #48]	@ 0x30
 8001966:	4b9d      	ldr	r3, [pc, #628]	@ (8001bdc <MX_GPIO_Init+0x2d4>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	623b      	str	r3, [r7, #32]
 8001970:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	61fb      	str	r3, [r7, #28]
 8001976:	4b99      	ldr	r3, [pc, #612]	@ (8001bdc <MX_GPIO_Init+0x2d4>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197a:	4a98      	ldr	r2, [pc, #608]	@ (8001bdc <MX_GPIO_Init+0x2d4>)
 800197c:	f043 0304 	orr.w	r3, r3, #4
 8001980:	6313      	str	r3, [r2, #48]	@ 0x30
 8001982:	4b96      	ldr	r3, [pc, #600]	@ (8001bdc <MX_GPIO_Init+0x2d4>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001986:	f003 0304 	and.w	r3, r3, #4
 800198a:	61fb      	str	r3, [r7, #28]
 800198c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	61bb      	str	r3, [r7, #24]
 8001992:	4b92      	ldr	r3, [pc, #584]	@ (8001bdc <MX_GPIO_Init+0x2d4>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001996:	4a91      	ldr	r2, [pc, #580]	@ (8001bdc <MX_GPIO_Init+0x2d4>)
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	6313      	str	r3, [r2, #48]	@ 0x30
 800199e:	4b8f      	ldr	r3, [pc, #572]	@ (8001bdc <MX_GPIO_Init+0x2d4>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	61bb      	str	r3, [r7, #24]
 80019a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	617b      	str	r3, [r7, #20]
 80019ae:	4b8b      	ldr	r3, [pc, #556]	@ (8001bdc <MX_GPIO_Init+0x2d4>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b2:	4a8a      	ldr	r2, [pc, #552]	@ (8001bdc <MX_GPIO_Init+0x2d4>)
 80019b4:	f043 0308 	orr.w	r3, r3, #8
 80019b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ba:	4b88      	ldr	r3, [pc, #544]	@ (8001bdc <MX_GPIO_Init+0x2d4>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019be:	f003 0308 	and.w	r3, r3, #8
 80019c2:	617b      	str	r3, [r7, #20]
 80019c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	613b      	str	r3, [r7, #16]
 80019ca:	4b84      	ldr	r3, [pc, #528]	@ (8001bdc <MX_GPIO_Init+0x2d4>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ce:	4a83      	ldr	r2, [pc, #524]	@ (8001bdc <MX_GPIO_Init+0x2d4>)
 80019d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019d6:	4b81      	ldr	r3, [pc, #516]	@ (8001bdc <MX_GPIO_Init+0x2d4>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019de:	613b      	str	r3, [r7, #16]
 80019e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	4b7d      	ldr	r3, [pc, #500]	@ (8001bdc <MX_GPIO_Init+0x2d4>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ea:	4a7c      	ldr	r2, [pc, #496]	@ (8001bdc <MX_GPIO_Init+0x2d4>)
 80019ec:	f043 0320 	orr.w	r3, r3, #32
 80019f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019f2:	4b7a      	ldr	r3, [pc, #488]	@ (8001bdc <MX_GPIO_Init+0x2d4>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f6:	f003 0320 	and.w	r3, r3, #32
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	60bb      	str	r3, [r7, #8]
 8001a02:	4b76      	ldr	r3, [pc, #472]	@ (8001bdc <MX_GPIO_Init+0x2d4>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a06:	4a75      	ldr	r2, [pc, #468]	@ (8001bdc <MX_GPIO_Init+0x2d4>)
 8001a08:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a0e:	4b73      	ldr	r3, [pc, #460]	@ (8001bdc <MX_GPIO_Init+0x2d4>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a16:	60bb      	str	r3, [r7, #8]
 8001a18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	607b      	str	r3, [r7, #4]
 8001a1e:	4b6f      	ldr	r3, [pc, #444]	@ (8001bdc <MX_GPIO_Init+0x2d4>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a22:	4a6e      	ldr	r2, [pc, #440]	@ (8001bdc <MX_GPIO_Init+0x2d4>)
 8001a24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a2a:	4b6c      	ldr	r3, [pc, #432]	@ (8001bdc <MX_GPIO_Init+0x2d4>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a32:	607b      	str	r3, [r7, #4]
 8001a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	603b      	str	r3, [r7, #0]
 8001a3a:	4b68      	ldr	r3, [pc, #416]	@ (8001bdc <MX_GPIO_Init+0x2d4>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3e:	4a67      	ldr	r2, [pc, #412]	@ (8001bdc <MX_GPIO_Init+0x2d4>)
 8001a40:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a46:	4b65      	ldr	r3, [pc, #404]	@ (8001bdc <MX_GPIO_Init+0x2d4>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a4e:	603b      	str	r3, [r7, #0]
 8001a50:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPKR_HP_Pin|AUDIO_RST_Pin, GPIO_PIN_RESET);
 8001a52:	2200      	movs	r2, #0
 8001a54:	210c      	movs	r1, #12
 8001a56:	4862      	ldr	r0, [pc, #392]	@ (8001be0 <MX_GPIO_Init+0x2d8>)
 8001a58:	f003 ff84 	bl	8005964 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	2130      	movs	r1, #48	@ 0x30
 8001a60:	4860      	ldr	r0, [pc, #384]	@ (8001be4 <MX_GPIO_Init+0x2dc>)
 8001a62:	f003 ff7f 	bl	8005964 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8001a66:	2200      	movs	r2, #0
 8001a68:	2108      	movs	r1, #8
 8001a6a:	485f      	ldr	r0, [pc, #380]	@ (8001be8 <MX_GPIO_Init+0x2e0>)
 8001a6c:	f003 ff7a 	bl	8005964 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001a70:	2200      	movs	r2, #0
 8001a72:	2140      	movs	r1, #64	@ 0x40
 8001a74:	485d      	ldr	r0, [pc, #372]	@ (8001bec <MX_GPIO_Init+0x2e4>)
 8001a76:	f003 ff75 	bl	8005964 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin, GPIO_PIN_RESET);
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	2105      	movs	r1, #5
 8001a7e:	485c      	ldr	r0, [pc, #368]	@ (8001bf0 <MX_GPIO_Init+0x2e8>)
 8001a80:	f003 ff70 	bl	8005964 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_RESET);
 8001a84:	2200      	movs	r2, #0
 8001a86:	2180      	movs	r1, #128	@ 0x80
 8001a88:	485a      	ldr	r0, [pc, #360]	@ (8001bf4 <MX_GPIO_Init+0x2ec>)
 8001a8a:	f003 ff6b 	bl	8005964 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8001a8e:	2200      	movs	r2, #0
 8001a90:	2108      	movs	r1, #8
 8001a92:	4859      	ldr	r0, [pc, #356]	@ (8001bf8 <MX_GPIO_Init+0x2f0>)
 8001a94:	f003 ff66 	bl	8005964 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPKR_HP_Pin AUDIO_RST_Pin */
  GPIO_InitStruct.Pin = SPKR_HP_Pin|AUDIO_RST_Pin;
 8001a98:	230c      	movs	r3, #12
 8001a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001aa8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001aac:	4619      	mov	r1, r3
 8001aae:	484c      	ldr	r0, [pc, #304]	@ (8001be0 <MX_GPIO_Init+0x2d8>)
 8001ab0:	f003 fd94 	bl	80055dc <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_CK_Pin */
  GPIO_InitStruct.Pin = I2S3_CK_Pin;
 8001ab4:	2308      	movs	r3, #8
 8001ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ac4:	2306      	movs	r3, #6
 8001ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(I2S3_CK_GPIO_Port, &GPIO_InitStruct);
 8001ac8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001acc:	4619      	mov	r1, r3
 8001ace:	4848      	ldr	r0, [pc, #288]	@ (8001bf0 <MX_GPIO_Init+0x2e8>)
 8001ad0:	f003 fd84 	bl	80055dc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS1_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS1_OverCurrent_Pin;
 8001ad4:	2380      	movs	r3, #128	@ 0x80
 8001ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ad8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001adc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS1_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001ae2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4841      	ldr	r0, [pc, #260]	@ (8001bf0 <MX_GPIO_Init+0x2e8>)
 8001aea:	f003 fd77 	bl	80055dc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS1_P_Pin USB_FS1_N_Pin USB_FS1_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS1_P_Pin|USB_FS1_N_Pin|USB_FS1_ID_Pin;
 8001aee:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001af2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af4:	2302      	movs	r3, #2
 8001af6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af8:	2300      	movs	r3, #0
 8001afa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afc:	2303      	movs	r3, #3
 8001afe:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001b00:	230a      	movs	r3, #10
 8001b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b04:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b08:	4619      	mov	r1, r3
 8001b0a:	483b      	ldr	r0, [pc, #236]	@ (8001bf8 <MX_GPIO_Init+0x2f0>)
 8001b0c:	f003 fd66 	bl	80055dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 8001b10:	2330      	movs	r3, #48	@ 0x30
 8001b12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001b14:	2311      	movs	r3, #17
 8001b16:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b24:	4619      	mov	r1, r3
 8001b26:	482f      	ldr	r0, [pc, #188]	@ (8001be4 <MX_GPIO_Init+0x2dc>)
 8001b28:	f003 fd58 	bl	80055dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED4_Pin */
  GPIO_InitStruct.Pin = LED4_Pin;
 8001b2c:	2308      	movs	r3, #8
 8001b2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001b30:	2311      	movs	r3, #17
 8001b32:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8001b3c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b40:	4619      	mov	r1, r3
 8001b42:	4829      	ldr	r0, [pc, #164]	@ (8001be8 <MX_GPIO_Init+0x2e0>)
 8001b44:	f003 fd4a 	bl	80055dc <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS1_Pin */
  GPIO_InitStruct.Pin = VBUS_FS1_Pin;
 8001b48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(VBUS_FS1_GPIO_Port, &GPIO_InitStruct);
 8001b56:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4826      	ldr	r0, [pc, #152]	@ (8001bf8 <MX_GPIO_Init+0x2f0>)
 8001b5e:	f003 fd3d 	bl	80055dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001b62:	2340      	movs	r3, #64	@ 0x40
 8001b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001b66:	2311      	movs	r3, #17
 8001b68:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001b72:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b76:	4619      	mov	r1, r3
 8001b78:	481c      	ldr	r0, [pc, #112]	@ (8001bec <MX_GPIO_Init+0x2e4>)
 8001b7a:	f003 fd2f 	bl	80055dc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS1_PowerSwitchOn_Pin EXT_RESET_Pin */
  GPIO_InitStruct.Pin = OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin;
 8001b7e:	2305      	movs	r3, #5
 8001b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b82:	2301      	movs	r3, #1
 8001b84:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b8e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b92:	4619      	mov	r1, r3
 8001b94:	4816      	ldr	r0, [pc, #88]	@ (8001bf0 <MX_GPIO_Init+0x2e8>)
 8001b96:	f003 fd21 	bl	80055dc <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_CK_Pin */
  GPIO_InitStruct.Pin = MIC_CK_Pin;
 8001b9a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001bac:	2302      	movs	r3, #2
 8001bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(MIC_CK_GPIO_Port, &GPIO_InitStruct);
 8001bb0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	480b      	ldr	r0, [pc, #44]	@ (8001be4 <MX_GPIO_Init+0x2dc>)
 8001bb8:	f003 fd10 	bl	80055dc <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001bbc:	2304      	movs	r3, #4
 8001bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001bc8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4807      	ldr	r0, [pc, #28]	@ (8001bec <MX_GPIO_Init+0x2e4>)
 8001bd0:	f003 fd04 	bl	80055dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001bd4:	2320      	movs	r3, #32
 8001bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bd8:	e010      	b.n	8001bfc <MX_GPIO_Init+0x2f4>
 8001bda:	bf00      	nop
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	40021000 	.word	0x40021000
 8001be4:	40020c00 	.word	0x40020c00
 8001be8:	40022800 	.word	0x40022800
 8001bec:	40021800 	.word	0x40021800
 8001bf0:	40020400 	.word	0x40020400
 8001bf4:	40021c00 	.word	0x40021c00
 8001bf8:	40020000 	.word	0x40020000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bfc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001c00:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c02:	2300      	movs	r3, #0
 8001c04:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001c06:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4811      	ldr	r0, [pc, #68]	@ (8001c54 <MX_GPIO_Init+0x34c>)
 8001c0e:	f003 fce5 	bl	80055dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c12:	2380      	movs	r3, #128	@ 0x80
 8001c14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c16:	2301      	movs	r3, #1
 8001c18:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c22:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c26:	4619      	mov	r1, r3
 8001c28:	480b      	ldr	r0, [pc, #44]	@ (8001c58 <MX_GPIO_Init+0x350>)
 8001c2a:	f003 fcd7 	bl	80055dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001c2e:	2308      	movs	r3, #8
 8001c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c32:	2301      	movs	r3, #1
 8001c34:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c36:	2300      	movs	r3, #0
 8001c38:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001c3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c42:	4619      	mov	r1, r3
 8001c44:	4805      	ldr	r0, [pc, #20]	@ (8001c5c <MX_GPIO_Init+0x354>)
 8001c46:	f003 fcc9 	bl	80055dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c4a:	bf00      	nop
 8001c4c:	3740      	adds	r7, #64	@ 0x40
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40022400 	.word	0x40022400
 8001c58:	40021c00 	.word	0x40021c00
 8001c5c:	40020000 	.word	0x40020000

08001c60 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
	for (int n = 0; n < halfN; n++) {
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	e00a      	b.n	8001c84 <HAL_ADC_ConvHalfCpltCallback+0x24>
		dac_buffer[n] = adc_buffer[n];
 8001c6e:	4a0c      	ldr	r2, [pc, #48]	@ (8001ca0 <HAL_ADC_ConvHalfCpltCallback+0x40>)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001c76:	4a0b      	ldr	r2, [pc, #44]	@ (8001ca4 <HAL_ADC_ConvHalfCpltCallback+0x44>)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int n = 0; n < halfN; n++) {
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	3301      	adds	r3, #1
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c8a:	dbf0      	blt.n	8001c6e <HAL_ADC_ConvHalfCpltCallback+0xe>
	}
  	osSemaphoreRelease(FFTHalfSemHandle);
 8001c8c:	4b06      	ldr	r3, [pc, #24]	@ (8001ca8 <HAL_ADC_ConvHalfCpltCallback+0x48>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f00a f903 	bl	800be9c <osSemaphoreRelease>
//	osSemaphoreRelease(ADCHalfSemHandle);

}
 8001c96:	bf00      	nop
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	2000073c 	.word	0x2000073c
 8001ca4:	20000f3c 	.word	0x20000f3c
 8001ca8:	20000734 	.word	0x20000734

08001cac <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
	for (int n = halfN; n < N; n++) {
 8001cb4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001cb8:	60fb      	str	r3, [r7, #12]
 8001cba:	e00a      	b.n	8001cd2 <HAL_ADC_ConvCpltCallback+0x26>
		dac_buffer[n] = adc_buffer[n];
 8001cbc:	4a0b      	ldr	r2, [pc, #44]	@ (8001cec <HAL_ADC_ConvCpltCallback+0x40>)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001cc4:	4a0a      	ldr	r2, [pc, #40]	@ (8001cf0 <HAL_ADC_ConvCpltCallback+0x44>)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int n = halfN; n < N; n++) {
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cd8:	dbf0      	blt.n	8001cbc <HAL_ADC_ConvCpltCallback+0x10>
	}
  	osSemaphoreRelease(FFTFullSemHandle);
 8001cda:	4b06      	ldr	r3, [pc, #24]	@ (8001cf4 <HAL_ADC_ConvCpltCallback+0x48>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f00a f8dc 	bl	800be9c <osSemaphoreRelease>
//	osSemaphoreRelease(ADCFullSemHandle);

}
 8001ce4:	bf00      	nop
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	2000073c 	.word	0x2000073c
 8001cf0:	20000f3c 	.word	0x20000f3c
 8001cf4:	20000738 	.word	0x20000738

08001cf8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	//	printf("....STARTING .... \r\n");
	HAL_TIM_Base_Start(&htim2);
 8001d00:	4817      	ldr	r0, [pc, #92]	@ (8001d60 <StartDefaultTask+0x68>)
 8001d02:	f007 f8e5 	bl	8008ed0 <HAL_TIM_Base_Start>
	//	HAL_TIM_Base_Start(&htim7);

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buffer, N);
 8001d06:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d0a:	4916      	ldr	r1, [pc, #88]	@ (8001d64 <StartDefaultTask+0x6c>)
 8001d0c:	4816      	ldr	r0, [pc, #88]	@ (8001d68 <StartDefaultTask+0x70>)
 8001d0e:	f001 fab5 	bl	800327c <HAL_ADC_Start_DMA>
//	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*) dac_buffer, N, DAC_ALIGN_12B_R);

	/* SDCARD STUFF */
	printf("SD Card Information:\r\n");
 8001d12:	4816      	ldr	r0, [pc, #88]	@ (8001d6c <StartDefaultTask+0x74>)
 8001d14:	f00e fd04 	bl	8010720 <puts>
	printf("Block size  : %lu\r\n", hsd.SdCard.BlockSize);
 8001d18:	4b15      	ldr	r3, [pc, #84]	@ (8001d70 <StartDefaultTask+0x78>)
 8001d1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4815      	ldr	r0, [pc, #84]	@ (8001d74 <StartDefaultTask+0x7c>)
 8001d20:	f00e fc96 	bl	8010650 <iprintf>
	printf("Block nmbr  : %lu\r\n", hsd.SdCard.BlockNbr);
 8001d24:	4b12      	ldr	r3, [pc, #72]	@ (8001d70 <StartDefaultTask+0x78>)
 8001d26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4813      	ldr	r0, [pc, #76]	@ (8001d78 <StartDefaultTask+0x80>)
 8001d2c:	f00e fc90 	bl	8010650 <iprintf>
	printf("Card size   : %lu\r\n", (hsd.SdCard.BlockSize * hsd.SdCard.BlockNbr) / 1000);
 8001d30:	4b0f      	ldr	r3, [pc, #60]	@ (8001d70 <StartDefaultTask+0x78>)
 8001d32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d34:	4a0e      	ldr	r2, [pc, #56]	@ (8001d70 <StartDefaultTask+0x78>)
 8001d36:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8001d38:	fb02 f303 	mul.w	r3, r2, r3
 8001d3c:	4a0f      	ldr	r2, [pc, #60]	@ (8001d7c <StartDefaultTask+0x84>)
 8001d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d42:	099b      	lsrs	r3, r3, #6
 8001d44:	4619      	mov	r1, r3
 8001d46:	480e      	ldr	r0, [pc, #56]	@ (8001d80 <StartDefaultTask+0x88>)
 8001d48:	f00e fc82 	bl	8010650 <iprintf>
	printf("Card version: %lu\r\n", hsd.SdCard.CardVersion);
 8001d4c:	4b08      	ldr	r3, [pc, #32]	@ (8001d70 <StartDefaultTask+0x78>)
 8001d4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d50:	4619      	mov	r1, r3
 8001d52:	480c      	ldr	r0, [pc, #48]	@ (8001d84 <StartDefaultTask+0x8c>)
 8001d54:	f00e fc7c 	bl	8010650 <iprintf>
//			Error_Handler();
//		  }
//      }
//
//    }
		osDelay(10);
 8001d58:	200a      	movs	r0, #10
 8001d5a:	f009 ffa8 	bl	800bcae <osDelay>
 8001d5e:	e7fb      	b.n	8001d58 <StartDefaultTask+0x60>
 8001d60:	200005b8 	.word	0x200005b8
 8001d64:	2000073c 	.word	0x2000073c
 8001d68:	20000088 	.word	0x20000088
 8001d6c:	08011fc0 	.word	0x08011fc0
 8001d70:	2000042c 	.word	0x2000042c
 8001d74:	08011fd8 	.word	0x08011fd8
 8001d78:	08011fec 	.word	0x08011fec
 8001d7c:	10624dd3 	.word	0x10624dd3
 8001d80:	08012000 	.word	0x08012000
 8001d84:	08012014 	.word	0x08012014

08001d88 <StartFFTTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFFTTask */
void StartFFTTask(void *argument)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	f5ad 4d80 	sub.w	sp, sp, #16384	@ 0x4000
 8001d8e:	b08c      	sub	sp, #48	@ 0x30
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001d96:	f843 0c2c 	str.w	r0, [r3, #-44]
	float32_t FFT_inp[N];  // = output of uint to float function and input to FFT computation
	float32_t FFT_out[N]; // = output of FFT computation = complex number: [0]=real part, [1]=imaginary part and so on
//	float32_t Complex_mag[N];
	float32_t peakVal;
	float32_t peakHz;
	float32_t normalization_factor = 1.0 / (N / 2) * 2.0;
 8001d9a:	f04f 536e 	mov.w	r3, #998244352	@ 0x3b800000
 8001d9e:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 8001da2:	f102 0214 	add.w	r2, r2, #20
 8001da6:	6013      	str	r3, [r2, #0]
//	float32_t hann_correction_factor = 2.0;  // ✅ Adjust for Hann window loss
	float32_t windowed_input[N];  // Windowed input
	float32_t hann_window[N];  // Precompute window
	uint16_t peakIndex;

    for (int i = 0; i < N; i++) {
 8001da8:	2300      	movs	r3, #0
 8001daa:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 8001dae:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8001db2:	6013      	str	r3, [r2, #0]
 8001db4:	e043      	b.n	8001e3e <StartFFTTask+0xb6>
        hann_window[i] = 0.5 - 0.5 * cosf(2 * PI * i / (N - 1));  // Compute Hann window
 8001db6:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8001dba:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	ee07 3a90 	vmov	s15, r3
 8001dc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dc8:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 8001fec <StartFFTTask+0x264>
 8001dcc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dd0:	eddf 6a87 	vldr	s13, [pc, #540]	@ 8001ff0 <StartFFTTask+0x268>
 8001dd4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001dd8:	eeb0 0a47 	vmov.f32	s0, s14
 8001ddc:	f00f fb86 	bl	80114ec <cosf>
 8001de0:	ee10 3a10 	vmov	r3, s0
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7fe fce9 	bl	80007bc <__aeabi_f2d>
 8001dea:	f04f 0200 	mov.w	r2, #0
 8001dee:	4b81      	ldr	r3, [pc, #516]	@ (8001ff4 <StartFFTTask+0x26c>)
 8001df0:	f7fe fa56 	bl	80002a0 <__aeabi_dmul>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	f04f 0000 	mov.w	r0, #0
 8001dfc:	497d      	ldr	r1, [pc, #500]	@ (8001ff4 <StartFFTTask+0x26c>)
 8001dfe:	f7fe fb7d 	bl	80004fc <__aeabi_dsub>
 8001e02:	4602      	mov	r2, r0
 8001e04:	460b      	mov	r3, r1
 8001e06:	4610      	mov	r0, r2
 8001e08:	4619      	mov	r1, r3
 8001e0a:	f7fe fd2f 	bl	800086c <__aeabi_d2f>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001e14:	4619      	mov	r1, r3
 8001e16:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8001e1a:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	440b      	add	r3, r1
 8001e24:	3b24      	subs	r3, #36	@ 0x24
 8001e26:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < N; i++) {
 8001e28:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8001e2c:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	3301      	adds	r3, #1
 8001e34:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 8001e38:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8001e3c:	6013      	str	r3, [r2, #0]
 8001e3e:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8001e42:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e4c:	dbb3      	blt.n	8001db6 <StartFFTTask+0x2e>
    }

    uint32_t now=uwTick;
 8001e4e:	4b6a      	ldr	r3, [pc, #424]	@ (8001ff8 <StartFFTTask+0x270>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 8001e56:	f102 0220 	add.w	r2, r2, #32
 8001e5a:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  for(;;)
  {
	  if (osSemaphoreAcquire(FFTHalfSemHandle, osWaitForever) == osOK) {
 8001e5c:	4b67      	ldr	r3, [pc, #412]	@ (8001ffc <StartFFTTask+0x274>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f04f 31ff 	mov.w	r1, #4294967295
 8001e64:	4618      	mov	r0, r3
 8001e66:	f009 ffc7 	bl	800bdf8 <osSemaphoreAcquire>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d10a      	bne.n	8001e86 <StartFFTTask+0xfe>
		uint16_to_float32(&dac_buffer[0], &FFT_inp[0], halfN);
 8001e70:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8001e74:	f103 0310 	add.w	r3, r3, #16
 8001e78:	3b04      	subs	r3, #4
 8001e7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e7e:	4619      	mov	r1, r3
 8001e80:	485f      	ldr	r0, [pc, #380]	@ (8002000 <StartFFTTask+0x278>)
 8001e82:	f7fe fefb 	bl	8000c7c <uint16_to_float32>
//		arm_rfft_fast_f32(&fft_instance, FFT_inp, FFT_out, 0);
//		arm_cmplx_mag_f32(FFT_out, Complex_mag, N);
	  }

	  if (osSemaphoreAcquire(FFTFullSemHandle, osWaitForever) == osOK) {
 8001e86:	4b5f      	ldr	r3, [pc, #380]	@ (8002004 <StartFFTTask+0x27c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f04f 31ff 	mov.w	r1, #4294967295
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f009 ffb2 	bl	800bdf8 <osSemaphoreAcquire>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f040 8171 	bne.w	800217e <StartFFTTask+0x3f6>
		  peakVal = 0.0f;
 8001e9c:	f04f 0300 	mov.w	r3, #0
 8001ea0:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 8001ea4:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 8001ea8:	6013      	str	r3, [r2, #0]
		  peakHz = 0.0f;
 8001eaa:	f04f 0300 	mov.w	r3, #0
 8001eae:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 8001eb2:	f102 0210 	add.w	r2, r2, #16
 8001eb6:	6013      	str	r3, [r2, #0]
		  peakIndex=0;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 8001ebe:	f102 022a 	add.w	r2, r2, #42	@ 0x2a
 8001ec2:	8013      	strh	r3, [r2, #0]
		  uint16_to_float32(&dac_buffer[N-halfN], &FFT_inp[N-halfN], halfN);
 8001ec4:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8001ec8:	f103 0310 	add.w	r3, r3, #16
 8001ecc:	3b04      	subs	r3, #4
 8001ece:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ed2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	484b      	ldr	r0, [pc, #300]	@ (8002008 <StartFFTTask+0x280>)
 8001eda:	f7fe fecf 	bl	8000c7c <uint16_to_float32>
		  for (int i = 0; i < N; i++){
 8001ede:	2300      	movs	r3, #0
 8001ee0:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 8001ee4:	f102 021c 	add.w	r2, r2, #28
 8001ee8:	6013      	str	r3, [r2, #0]
 8001eea:	e037      	b.n	8001f5c <StartFFTTask+0x1d4>
			  windowed_input[i] = FFT_inp[i] * hann_window[i];  // Apply window
 8001eec:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8001ef0:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8001efa:	f103 031c 	add.w	r3, r3, #28
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	4413      	add	r3, r2
 8001f04:	3b24      	subs	r3, #36	@ 0x24
 8001f06:	ed93 7a00 	vldr	s14, [r3]
 8001f0a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001f0e:	461a      	mov	r2, r3
 8001f10:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8001f14:	f103 031c 	add.w	r3, r3, #28
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	4413      	add	r3, r2
 8001f1e:	3b24      	subs	r3, #36	@ 0x24
 8001f20:	edd3 7a00 	vldr	s15, [r3]
 8001f24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f28:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001f2c:	f103 0310 	add.w	r3, r3, #16
 8001f30:	461a      	mov	r2, r3
 8001f32:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8001f36:	f103 031c 	add.w	r3, r3, #28
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	4413      	add	r3, r2
 8001f40:	3b24      	subs	r3, #36	@ 0x24
 8001f42:	edc3 7a00 	vstr	s15, [r3]
		  for (int i = 0; i < N; i++){
 8001f46:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8001f4a:	f103 031c 	add.w	r3, r3, #28
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	3301      	adds	r3, #1
 8001f52:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 8001f56:	f102 021c 	add.w	r2, r2, #28
 8001f5a:	6013      	str	r3, [r2, #0]
 8001f5c:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8001f60:	f103 031c 	add.w	r3, r3, #28
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f6a:	dbbf      	blt.n	8001eec <StartFFTTask+0x164>
		  }
		  arm_rfft_fast_f32(&fft_instance, windowed_input, FFT_out, 0);
 8001f6c:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8001f70:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8001f74:	3a24      	subs	r2, #36	@ 0x24
 8001f76:	f507 5181 	add.w	r1, r7, #4128	@ 0x1020
 8001f7a:	f101 0110 	add.w	r1, r1, #16
 8001f7e:	3924      	subs	r1, #36	@ 0x24
 8001f80:	2300      	movs	r3, #0
 8001f82:	4822      	ldr	r0, [pc, #136]	@ (800200c <StartFFTTask+0x284>)
 8001f84:	f00d fba8 	bl	800f6d8 <arm_rfft_fast_f32>
//		  arm_cmplx_mag_f32(FFT_out, Complex_mag, N);
		  FFT_out[0]=0; FFT_out[1]=0; FFT_out[2]=0; FFT_out[3]=0; //FFT_out[4]=0; FFT_out[5]=0;
 8001f88:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8001f8c:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8001f90:	461a      	mov	r2, r3
 8001f92:	f04f 0300 	mov.w	r3, #0
 8001f96:	f842 3c24 	str.w	r3, [r2, #-36]
 8001f9a:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8001f9e:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	f04f 0300 	mov.w	r3, #0
 8001fa8:	f842 3c20 	str.w	r3, [r2, #-32]
 8001fac:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8001fb0:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	f04f 0300 	mov.w	r3, #0
 8001fba:	f842 3c1c 	str.w	r3, [r2, #-28]
 8001fbe:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8001fc2:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	f04f 0300 	mov.w	r3, #0
 8001fcc:	f842 3c18 	str.w	r3, [r2, #-24]
		  for (uint16_t index = 0, bin = 0; index < N; index += 2, bin++) {
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 8001fd6:	f102 021a 	add.w	r2, r2, #26
 8001fda:	8013      	strh	r3, [r2, #0]
 8001fdc:	2300      	movs	r3, #0
 8001fde:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 8001fe2:	f102 0218 	add.w	r2, r2, #24
 8001fe6:	8013      	strh	r3, [r2, #0]
 8001fe8:	e0ad      	b.n	8002146 <StartFFTTask+0x3be>
 8001fea:	bf00      	nop
 8001fec:	40c90fdb 	.word	0x40c90fdb
 8001ff0:	447fc000 	.word	0x447fc000
 8001ff4:	3fe00000 	.word	0x3fe00000
 8001ff8:	200017a8 	.word	0x200017a8
 8001ffc:	20000734 	.word	0x20000734
 8002000:	20000f3c 	.word	0x20000f3c
 8002004:	20000738 	.word	0x20000738
 8002008:	2000133c 	.word	0x2000133c
 800200c:	2000173c 	.word	0x2000173c
 8002010:	411c4000 	.word	0x411c4000
//			  float32_t curVal = sqrtf((FFT_out[index]*FFT_out[index]) + (FFT_out[index+1]*FFT_out[index+1]));
			  float32_t curVal = sqrtf((FFT_out[index] * FFT_out[index]) + (FFT_out[index+1] * FFT_out[index+1]));
 8002014:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8002018:	f103 031a 	add.w	r3, r3, #26
 800201c:	881b      	ldrh	r3, [r3, #0]
 800201e:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8002022:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	4413      	add	r3, r2
 800202a:	3b24      	subs	r3, #36	@ 0x24
 800202c:	ed93 7a00 	vldr	s14, [r3]
 8002030:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8002034:	f103 031a 	add.w	r3, r3, #26
 8002038:	881b      	ldrh	r3, [r3, #0]
 800203a:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 800203e:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	4413      	add	r3, r2
 8002046:	3b24      	subs	r3, #36	@ 0x24
 8002048:	edd3 7a00 	vldr	s15, [r3]
 800204c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002050:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8002054:	f103 031a 	add.w	r3, r3, #26
 8002058:	881b      	ldrh	r3, [r3, #0]
 800205a:	3301      	adds	r3, #1
 800205c:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8002060:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	4413      	add	r3, r2
 8002068:	3b24      	subs	r3, #36	@ 0x24
 800206a:	edd3 6a00 	vldr	s13, [r3]
 800206e:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8002072:	f103 031a 	add.w	r3, r3, #26
 8002076:	881b      	ldrh	r3, [r3, #0]
 8002078:	3301      	adds	r3, #1
 800207a:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 800207e:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	4413      	add	r3, r2
 8002086:	3b24      	subs	r3, #36	@ 0x24
 8002088:	edd3 7a00 	vldr	s15, [r3]
 800208c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002090:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002094:	eeb0 0a67 	vmov.f32	s0, s15
 8002098:	f00f fa0a 	bl	80114b0 <sqrtf>
 800209c:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 80020a0:	f103 030c 	add.w	r3, r3, #12
 80020a4:	ed83 0a00 	vstr	s0, [r3]
			  curVal *= normalization_factor;  // Apply normalization
 80020a8:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 80020ac:	f103 030c 	add.w	r3, r3, #12
 80020b0:	ed93 7a00 	vldr	s14, [r3]
 80020b4:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 80020b8:	f103 0314 	add.w	r3, r3, #20
 80020bc:	edd3 7a00 	vldr	s15, [r3]
 80020c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020c4:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 80020c8:	f103 030c 	add.w	r3, r3, #12
 80020cc:	edc3 7a00 	vstr	s15, [r3]
			  if (curVal > peakVal) {
 80020d0:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 80020d4:	f103 030c 	add.w	r3, r3, #12
 80020d8:	ed93 7a00 	vldr	s14, [r3]
 80020dc:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 80020e0:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 80020e4:	edd3 7a00 	vldr	s15, [r3]
 80020e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020f0:	dd13      	ble.n	800211a <StartFFTTask+0x392>
				  peakVal = curVal;
 80020f2:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 80020f6:	f103 030c 	add.w	r3, r3, #12
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 8002100:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 8002104:	6013      	str	r3, [r2, #0]
				  peakIndex = bin;
 8002106:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 800210a:	f103 0318 	add.w	r3, r3, #24
 800210e:	881b      	ldrh	r3, [r3, #0]
 8002110:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 8002114:	f102 022a 	add.w	r2, r2, #42	@ 0x2a
 8002118:	8013      	strh	r3, [r2, #0]
		  for (uint16_t index = 0, bin = 0; index < N; index += 2, bin++) {
 800211a:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 800211e:	f103 031a 	add.w	r3, r3, #26
 8002122:	881b      	ldrh	r3, [r3, #0]
 8002124:	3302      	adds	r3, #2
 8002126:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 800212a:	f102 021a 	add.w	r2, r2, #26
 800212e:	8013      	strh	r3, [r2, #0]
 8002130:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8002134:	f103 0318 	add.w	r3, r3, #24
 8002138:	881b      	ldrh	r3, [r3, #0]
 800213a:	3301      	adds	r3, #1
 800213c:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 8002140:	f102 0218 	add.w	r2, r2, #24
 8002144:	8013      	strh	r3, [r2, #0]
 8002146:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 800214a:	f103 031a 	add.w	r3, r3, #26
 800214e:	881b      	ldrh	r3, [r3, #0]
 8002150:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002154:	f4ff af5e 	bcc.w	8002014 <StartFFTTask+0x28c>
			  }
		  }
		  peakHz=peakIndex * (10000.0f / N);  // ✅ Correct frequency conversion
 8002158:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 800215c:	f103 032a 	add.w	r3, r3, #42	@ 0x2a
 8002160:	881b      	ldrh	r3, [r3, #0]
 8002162:	ee07 3a90 	vmov	s15, r3
 8002166:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800216a:	ed1f 7a57 	vldr	s14, [pc, #-348]	@ 8002010 <StartFFTTask+0x288>
 800216e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002172:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8002176:	f103 0310 	add.w	r3, r3, #16
 800217a:	edc3 7a00 	vstr	s15, [r3]
	  }

	  if (uwTick > now+1000){
 800217e:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8002182:	f103 0320 	add.w	r3, r3, #32
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f503 727a 	add.w	r2, r3, #1000	@ 0x3e8
 800218c:	4b07      	ldr	r3, [pc, #28]	@ (80021ac <StartFFTTask+0x424>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	429a      	cmp	r2, r3
 8002192:	f4bf ae63 	bcs.w	8001e5c <StartFFTTask+0xd4>
		  printf("Test\r\n");
 8002196:	4806      	ldr	r0, [pc, #24]	@ (80021b0 <StartFFTTask+0x428>)
 8002198:	f00e fac2 	bl	8010720 <puts>
		  now=uwTick;
 800219c:	4b03      	ldr	r3, [pc, #12]	@ (80021ac <StartFFTTask+0x424>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 80021a4:	f102 0220 	add.w	r2, r2, #32
 80021a8:	6013      	str	r3, [r2, #0]
	  if (osSemaphoreAcquire(FFTHalfSemHandle, osWaitForever) == osOK) {
 80021aa:	e657      	b.n	8001e5c <StartFFTTask+0xd4>
 80021ac:	200017a8 	.word	0x200017a8
 80021b0:	08012028 	.word	0x08012028

080021b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a04      	ldr	r2, [pc, #16]	@ (80021d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d101      	bne.n	80021ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80021c6:	f000 ffd1 	bl	800316c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80021ca:	bf00      	nop
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	40001000 	.word	0x40001000

080021d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021dc:	b672      	cpsid	i
}
 80021de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021e0:	bf00      	nop
 80021e2:	e7fd      	b.n	80021e0 <Error_Handler+0x8>

080021e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	607b      	str	r3, [r7, #4]
 80021ee:	4b12      	ldr	r3, [pc, #72]	@ (8002238 <HAL_MspInit+0x54>)
 80021f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021f2:	4a11      	ldr	r2, [pc, #68]	@ (8002238 <HAL_MspInit+0x54>)
 80021f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80021fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002238 <HAL_MspInit+0x54>)
 80021fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002202:	607b      	str	r3, [r7, #4]
 8002204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	603b      	str	r3, [r7, #0]
 800220a:	4b0b      	ldr	r3, [pc, #44]	@ (8002238 <HAL_MspInit+0x54>)
 800220c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220e:	4a0a      	ldr	r2, [pc, #40]	@ (8002238 <HAL_MspInit+0x54>)
 8002210:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002214:	6413      	str	r3, [r2, #64]	@ 0x40
 8002216:	4b08      	ldr	r3, [pc, #32]	@ (8002238 <HAL_MspInit+0x54>)
 8002218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800221e:	603b      	str	r3, [r7, #0]
 8002220:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002222:	2200      	movs	r2, #0
 8002224:	210f      	movs	r1, #15
 8002226:	f06f 0001 	mvn.w	r0, #1
 800222a:	f001 fca9 	bl	8003b80 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800222e:	bf00      	nop
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	40023800 	.word	0x40023800

0800223c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b08a      	sub	sp, #40	@ 0x28
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002244:	f107 0314 	add.w	r3, r7, #20
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	605a      	str	r2, [r3, #4]
 800224e:	609a      	str	r2, [r3, #8]
 8002250:	60da      	str	r2, [r3, #12]
 8002252:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a2f      	ldr	r2, [pc, #188]	@ (8002318 <HAL_ADC_MspInit+0xdc>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d157      	bne.n	800230e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800225e:	2300      	movs	r3, #0
 8002260:	613b      	str	r3, [r7, #16]
 8002262:	4b2e      	ldr	r3, [pc, #184]	@ (800231c <HAL_ADC_MspInit+0xe0>)
 8002264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002266:	4a2d      	ldr	r2, [pc, #180]	@ (800231c <HAL_ADC_MspInit+0xe0>)
 8002268:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800226c:	6453      	str	r3, [r2, #68]	@ 0x44
 800226e:	4b2b      	ldr	r3, [pc, #172]	@ (800231c <HAL_ADC_MspInit+0xe0>)
 8002270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002272:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002276:	613b      	str	r3, [r7, #16]
 8002278:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800227a:	2300      	movs	r3, #0
 800227c:	60fb      	str	r3, [r7, #12]
 800227e:	4b27      	ldr	r3, [pc, #156]	@ (800231c <HAL_ADC_MspInit+0xe0>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002282:	4a26      	ldr	r2, [pc, #152]	@ (800231c <HAL_ADC_MspInit+0xe0>)
 8002284:	f043 0304 	orr.w	r3, r3, #4
 8002288:	6313      	str	r3, [r2, #48]	@ 0x30
 800228a:	4b24      	ldr	r3, [pc, #144]	@ (800231c <HAL_ADC_MspInit+0xe0>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228e:	f003 0304 	and.w	r3, r3, #4
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002296:	2320      	movs	r3, #32
 8002298:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800229a:	2303      	movs	r3, #3
 800229c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229e:	2300      	movs	r3, #0
 80022a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022a2:	f107 0314 	add.w	r3, r7, #20
 80022a6:	4619      	mov	r1, r3
 80022a8:	481d      	ldr	r0, [pc, #116]	@ (8002320 <HAL_ADC_MspInit+0xe4>)
 80022aa:	f003 f997 	bl	80055dc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80022ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002324 <HAL_ADC_MspInit+0xe8>)
 80022b0:	4a1d      	ldr	r2, [pc, #116]	@ (8002328 <HAL_ADC_MspInit+0xec>)
 80022b2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80022b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002324 <HAL_ADC_MspInit+0xe8>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002324 <HAL_ADC_MspInit+0xe8>)
 80022bc:	2200      	movs	r2, #0
 80022be:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80022c0:	4b18      	ldr	r3, [pc, #96]	@ (8002324 <HAL_ADC_MspInit+0xe8>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80022c6:	4b17      	ldr	r3, [pc, #92]	@ (8002324 <HAL_ADC_MspInit+0xe8>)
 80022c8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022cc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80022ce:	4b15      	ldr	r3, [pc, #84]	@ (8002324 <HAL_ADC_MspInit+0xe8>)
 80022d0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80022d4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80022d6:	4b13      	ldr	r3, [pc, #76]	@ (8002324 <HAL_ADC_MspInit+0xe8>)
 80022d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022dc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80022de:	4b11      	ldr	r3, [pc, #68]	@ (8002324 <HAL_ADC_MspInit+0xe8>)
 80022e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80022e4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80022e6:	4b0f      	ldr	r3, [pc, #60]	@ (8002324 <HAL_ADC_MspInit+0xe8>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022ec:	4b0d      	ldr	r3, [pc, #52]	@ (8002324 <HAL_ADC_MspInit+0xe8>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80022f2:	480c      	ldr	r0, [pc, #48]	@ (8002324 <HAL_ADC_MspInit+0xe8>)
 80022f4:	f001 fd70 	bl	8003dd8 <HAL_DMA_Init>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80022fe:	f7ff ff6b 	bl	80021d8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a07      	ldr	r2, [pc, #28]	@ (8002324 <HAL_ADC_MspInit+0xe8>)
 8002306:	639a      	str	r2, [r3, #56]	@ 0x38
 8002308:	4a06      	ldr	r2, [pc, #24]	@ (8002324 <HAL_ADC_MspInit+0xe8>)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800230e:	bf00      	nop
 8002310:	3728      	adds	r7, #40	@ 0x28
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40012000 	.word	0x40012000
 800231c:	40023800 	.word	0x40023800
 8002320:	40020800 	.word	0x40020800
 8002324:	200000d0 	.word	0x200000d0
 8002328:	40026410 	.word	0x40026410

0800232c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a0b      	ldr	r2, [pc, #44]	@ (8002368 <HAL_CRC_MspInit+0x3c>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d10d      	bne.n	800235a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	4b0a      	ldr	r3, [pc, #40]	@ (800236c <HAL_CRC_MspInit+0x40>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002346:	4a09      	ldr	r2, [pc, #36]	@ (800236c <HAL_CRC_MspInit+0x40>)
 8002348:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800234c:	6313      	str	r3, [r2, #48]	@ 0x30
 800234e:	4b07      	ldr	r3, [pc, #28]	@ (800236c <HAL_CRC_MspInit+0x40>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002352:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 800235a:	bf00      	nop
 800235c:	3714      	adds	r7, #20
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	40023000 	.word	0x40023000
 800236c:	40023800 	.word	0x40023800

08002370 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b08a      	sub	sp, #40	@ 0x28
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002378:	f107 0314 	add.w	r3, r7, #20
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	605a      	str	r2, [r3, #4]
 8002382:	609a      	str	r2, [r3, #8]
 8002384:	60da      	str	r2, [r3, #12]
 8002386:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a33      	ldr	r2, [pc, #204]	@ (800245c <HAL_DAC_MspInit+0xec>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d160      	bne.n	8002454 <HAL_DAC_MspInit+0xe4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002392:	2300      	movs	r3, #0
 8002394:	613b      	str	r3, [r7, #16]
 8002396:	4b32      	ldr	r3, [pc, #200]	@ (8002460 <HAL_DAC_MspInit+0xf0>)
 8002398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800239a:	4a31      	ldr	r2, [pc, #196]	@ (8002460 <HAL_DAC_MspInit+0xf0>)
 800239c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80023a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80023a2:	4b2f      	ldr	r3, [pc, #188]	@ (8002460 <HAL_DAC_MspInit+0xf0>)
 80023a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80023aa:	613b      	str	r3, [r7, #16]
 80023ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ae:	2300      	movs	r3, #0
 80023b0:	60fb      	str	r3, [r7, #12]
 80023b2:	4b2b      	ldr	r3, [pc, #172]	@ (8002460 <HAL_DAC_MspInit+0xf0>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b6:	4a2a      	ldr	r2, [pc, #168]	@ (8002460 <HAL_DAC_MspInit+0xf0>)
 80023b8:	f043 0301 	orr.w	r3, r3, #1
 80023bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80023be:	4b28      	ldr	r3, [pc, #160]	@ (8002460 <HAL_DAC_MspInit+0xf0>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	60fb      	str	r3, [r7, #12]
 80023c8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80023ca:	2310      	movs	r3, #16
 80023cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023ce:	2303      	movs	r3, #3
 80023d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d2:	2300      	movs	r3, #0
 80023d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023d6:	f107 0314 	add.w	r3, r7, #20
 80023da:	4619      	mov	r1, r3
 80023dc:	4821      	ldr	r0, [pc, #132]	@ (8002464 <HAL_DAC_MspInit+0xf4>)
 80023de:	f003 f8fd 	bl	80055dc <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80023e2:	4b21      	ldr	r3, [pc, #132]	@ (8002468 <HAL_DAC_MspInit+0xf8>)
 80023e4:	4a21      	ldr	r2, [pc, #132]	@ (800246c <HAL_DAC_MspInit+0xfc>)
 80023e6:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80023e8:	4b1f      	ldr	r3, [pc, #124]	@ (8002468 <HAL_DAC_MspInit+0xf8>)
 80023ea:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 80023ee:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002468 <HAL_DAC_MspInit+0xf8>)
 80023f2:	2240      	movs	r2, #64	@ 0x40
 80023f4:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 80023f6:	4b1c      	ldr	r3, [pc, #112]	@ (8002468 <HAL_DAC_MspInit+0xf8>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80023fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002468 <HAL_DAC_MspInit+0xf8>)
 80023fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002402:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002404:	4b18      	ldr	r3, [pc, #96]	@ (8002468 <HAL_DAC_MspInit+0xf8>)
 8002406:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800240a:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800240c:	4b16      	ldr	r3, [pc, #88]	@ (8002468 <HAL_DAC_MspInit+0xf8>)
 800240e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002412:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8002414:	4b14      	ldr	r3, [pc, #80]	@ (8002468 <HAL_DAC_MspInit+0xf8>)
 8002416:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800241a:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 800241c:	4b12      	ldr	r3, [pc, #72]	@ (8002468 <HAL_DAC_MspInit+0xf8>)
 800241e:	2200      	movs	r2, #0
 8002420:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002422:	4b11      	ldr	r3, [pc, #68]	@ (8002468 <HAL_DAC_MspInit+0xf8>)
 8002424:	2200      	movs	r2, #0
 8002426:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8002428:	480f      	ldr	r0, [pc, #60]	@ (8002468 <HAL_DAC_MspInit+0xf8>)
 800242a:	f001 fcd5 	bl	8003dd8 <HAL_DMA_Init>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 8002434:	f7ff fed0 	bl	80021d8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	4a0b      	ldr	r2, [pc, #44]	@ (8002468 <HAL_DAC_MspInit+0xf8>)
 800243c:	609a      	str	r2, [r3, #8]
 800243e:	4a0a      	ldr	r2, [pc, #40]	@ (8002468 <HAL_DAC_MspInit+0xf8>)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8002444:	2200      	movs	r2, #0
 8002446:	2105      	movs	r1, #5
 8002448:	2036      	movs	r0, #54	@ 0x36
 800244a:	f001 fb99 	bl	8003b80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800244e:	2036      	movs	r0, #54	@ 0x36
 8002450:	f001 fbb2 	bl	8003bb8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DAC_MspInit 1 */

  }

}
 8002454:	bf00      	nop
 8002456:	3728      	adds	r7, #40	@ 0x28
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40007400 	.word	0x40007400
 8002460:	40023800 	.word	0x40023800
 8002464:	40020000 	.word	0x40020000
 8002468:	2000014c 	.word	0x2000014c
 800246c:	40026088 	.word	0x40026088

08002470 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a0e      	ldr	r2, [pc, #56]	@ (80024b8 <HAL_DMA2D_MspInit+0x48>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d115      	bne.n	80024ae <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002482:	2300      	movs	r3, #0
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	4b0d      	ldr	r3, [pc, #52]	@ (80024bc <HAL_DMA2D_MspInit+0x4c>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248a:	4a0c      	ldr	r2, [pc, #48]	@ (80024bc <HAL_DMA2D_MspInit+0x4c>)
 800248c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002490:	6313      	str	r3, [r2, #48]	@ 0x30
 8002492:	4b0a      	ldr	r3, [pc, #40]	@ (80024bc <HAL_DMA2D_MspInit+0x4c>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002496:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800249e:	2200      	movs	r2, #0
 80024a0:	2105      	movs	r1, #5
 80024a2:	205a      	movs	r0, #90	@ 0x5a
 80024a4:	f001 fb6c 	bl	8003b80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80024a8:	205a      	movs	r0, #90	@ 0x5a
 80024aa:	f001 fb85 	bl	8003bb8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 80024ae:	bf00      	nop
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	4002b000 	.word	0x4002b000
 80024bc:	40023800 	.word	0x40023800

080024c0 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b08a      	sub	sp, #40	@ 0x28
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c8:	f107 0314 	add.w	r3, r7, #20
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	605a      	str	r2, [r3, #4]
 80024d2:	609a      	str	r2, [r3, #8]
 80024d4:	60da      	str	r2, [r3, #12]
 80024d6:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a1d      	ldr	r2, [pc, #116]	@ (8002554 <HAL_DSI_MspInit+0x94>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d133      	bne.n	800254a <HAL_DSI_MspInit+0x8a>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 80024e2:	2300      	movs	r3, #0
 80024e4:	613b      	str	r3, [r7, #16]
 80024e6:	4b1c      	ldr	r3, [pc, #112]	@ (8002558 <HAL_DSI_MspInit+0x98>)
 80024e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ea:	4a1b      	ldr	r2, [pc, #108]	@ (8002558 <HAL_DSI_MspInit+0x98>)
 80024ec:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80024f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80024f2:	4b19      	ldr	r3, [pc, #100]	@ (8002558 <HAL_DSI_MspInit+0x98>)
 80024f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80024fa:	613b      	str	r3, [r7, #16]
 80024fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80024fe:	2300      	movs	r3, #0
 8002500:	60fb      	str	r3, [r7, #12]
 8002502:	4b15      	ldr	r3, [pc, #84]	@ (8002558 <HAL_DSI_MspInit+0x98>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002506:	4a14      	ldr	r2, [pc, #80]	@ (8002558 <HAL_DSI_MspInit+0x98>)
 8002508:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800250c:	6313      	str	r3, [r2, #48]	@ 0x30
 800250e:	4b12      	ldr	r3, [pc, #72]	@ (8002558 <HAL_DSI_MspInit+0x98>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002512:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = DSI_TE_Pin;
 800251a:	2304      	movs	r3, #4
 800251c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800251e:	2302      	movs	r3, #2
 8002520:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002522:	2300      	movs	r3, #0
 8002524:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002526:	2303      	movs	r3, #3
 8002528:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 800252a:	230d      	movs	r3, #13
 800252c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 800252e:	f107 0314 	add.w	r3, r7, #20
 8002532:	4619      	mov	r1, r3
 8002534:	4809      	ldr	r0, [pc, #36]	@ (800255c <HAL_DSI_MspInit+0x9c>)
 8002536:	f003 f851 	bl	80055dc <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 5, 0);
 800253a:	2200      	movs	r2, #0
 800253c:	2105      	movs	r1, #5
 800253e:	205c      	movs	r0, #92	@ 0x5c
 8002540:	f001 fb1e 	bl	8003b80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8002544:	205c      	movs	r0, #92	@ 0x5c
 8002546:	f001 fb37 	bl	8003bb8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DSI_MspInit 1 */

  }

}
 800254a:	bf00      	nop
 800254c:	3728      	adds	r7, #40	@ 0x28
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40016c00 	.word	0x40016c00
 8002558:	40023800 	.word	0x40023800
 800255c:	40022400 	.word	0x40022400

08002560 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b08c      	sub	sp, #48	@ 0x30
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002568:	f107 031c 	add.w	r3, r7, #28
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	605a      	str	r2, [r3, #4]
 8002572:	609a      	str	r2, [r3, #8]
 8002574:	60da      	str	r2, [r3, #12]
 8002576:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a32      	ldr	r2, [pc, #200]	@ (8002648 <HAL_I2C_MspInit+0xe8>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d12d      	bne.n	80025de <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002582:	2300      	movs	r3, #0
 8002584:	61bb      	str	r3, [r7, #24]
 8002586:	4b31      	ldr	r3, [pc, #196]	@ (800264c <HAL_I2C_MspInit+0xec>)
 8002588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800258a:	4a30      	ldr	r2, [pc, #192]	@ (800264c <HAL_I2C_MspInit+0xec>)
 800258c:	f043 0302 	orr.w	r3, r3, #2
 8002590:	6313      	str	r3, [r2, #48]	@ 0x30
 8002592:	4b2e      	ldr	r3, [pc, #184]	@ (800264c <HAL_I2C_MspInit+0xec>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	61bb      	str	r3, [r7, #24]
 800259c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800259e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80025a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025a4:	2312      	movs	r3, #18
 80025a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025a8:	2301      	movs	r3, #1
 80025aa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ac:	2303      	movs	r3, #3
 80025ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80025b0:	2304      	movs	r3, #4
 80025b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025b4:	f107 031c 	add.w	r3, r7, #28
 80025b8:	4619      	mov	r1, r3
 80025ba:	4825      	ldr	r0, [pc, #148]	@ (8002650 <HAL_I2C_MspInit+0xf0>)
 80025bc:	f003 f80e 	bl	80055dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025c0:	2300      	movs	r3, #0
 80025c2:	617b      	str	r3, [r7, #20]
 80025c4:	4b21      	ldr	r3, [pc, #132]	@ (800264c <HAL_I2C_MspInit+0xec>)
 80025c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c8:	4a20      	ldr	r2, [pc, #128]	@ (800264c <HAL_I2C_MspInit+0xec>)
 80025ca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80025ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80025d0:	4b1e      	ldr	r3, [pc, #120]	@ (800264c <HAL_I2C_MspInit+0xec>)
 80025d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025d8:	617b      	str	r3, [r7, #20]
 80025da:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80025dc:	e030      	b.n	8002640 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a1c      	ldr	r2, [pc, #112]	@ (8002654 <HAL_I2C_MspInit+0xf4>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d12b      	bne.n	8002640 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80025e8:	2300      	movs	r3, #0
 80025ea:	613b      	str	r3, [r7, #16]
 80025ec:	4b17      	ldr	r3, [pc, #92]	@ (800264c <HAL_I2C_MspInit+0xec>)
 80025ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f0:	4a16      	ldr	r2, [pc, #88]	@ (800264c <HAL_I2C_MspInit+0xec>)
 80025f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80025f8:	4b14      	ldr	r3, [pc, #80]	@ (800264c <HAL_I2C_MspInit+0xec>)
 80025fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002600:	613b      	str	r3, [r7, #16]
 8002602:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 8002604:	2330      	movs	r3, #48	@ 0x30
 8002606:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002608:	2312      	movs	r3, #18
 800260a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800260c:	2301      	movs	r3, #1
 800260e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002610:	2303      	movs	r3, #3
 8002612:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002614:	2304      	movs	r3, #4
 8002616:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002618:	f107 031c 	add.w	r3, r7, #28
 800261c:	4619      	mov	r1, r3
 800261e:	480e      	ldr	r0, [pc, #56]	@ (8002658 <HAL_I2C_MspInit+0xf8>)
 8002620:	f002 ffdc 	bl	80055dc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002624:	2300      	movs	r3, #0
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	4b08      	ldr	r3, [pc, #32]	@ (800264c <HAL_I2C_MspInit+0xec>)
 800262a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262c:	4a07      	ldr	r2, [pc, #28]	@ (800264c <HAL_I2C_MspInit+0xec>)
 800262e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002632:	6413      	str	r3, [r2, #64]	@ 0x40
 8002634:	4b05      	ldr	r3, [pc, #20]	@ (800264c <HAL_I2C_MspInit+0xec>)
 8002636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002638:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800263c:	60fb      	str	r3, [r7, #12]
 800263e:	68fb      	ldr	r3, [r7, #12]
}
 8002640:	bf00      	nop
 8002642:	3730      	adds	r7, #48	@ 0x30
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40005400 	.word	0x40005400
 800264c:	40023800 	.word	0x40023800
 8002650:	40020400 	.word	0x40020400
 8002654:	40005800 	.word	0x40005800
 8002658:	40021c00 	.word	0x40021c00

0800265c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a0e      	ldr	r2, [pc, #56]	@ (80026a4 <HAL_LTDC_MspInit+0x48>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d115      	bne.n	800269a <HAL_LTDC_MspInit+0x3e>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800266e:	2300      	movs	r3, #0
 8002670:	60fb      	str	r3, [r7, #12]
 8002672:	4b0d      	ldr	r3, [pc, #52]	@ (80026a8 <HAL_LTDC_MspInit+0x4c>)
 8002674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002676:	4a0c      	ldr	r2, [pc, #48]	@ (80026a8 <HAL_LTDC_MspInit+0x4c>)
 8002678:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800267c:	6453      	str	r3, [r2, #68]	@ 0x44
 800267e:	4b0a      	ldr	r3, [pc, #40]	@ (80026a8 <HAL_LTDC_MspInit+0x4c>)
 8002680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002682:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	68fb      	ldr	r3, [r7, #12]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800268a:	2200      	movs	r2, #0
 800268c:	2105      	movs	r1, #5
 800268e:	2058      	movs	r0, #88	@ 0x58
 8002690:	f001 fa76 	bl	8003b80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002694:	2058      	movs	r0, #88	@ 0x58
 8002696:	f001 fa8f 	bl	8003bb8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 800269a:	bf00      	nop
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40016800 	.word	0x40016800
 80026a8:	40023800 	.word	0x40023800

080026ac <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b08a      	sub	sp, #40	@ 0x28
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b4:	f107 0314 	add.w	r3, r7, #20
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	605a      	str	r2, [r3, #4]
 80026be:	609a      	str	r2, [r3, #8]
 80026c0:	60da      	str	r2, [r3, #12]
 80026c2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a31      	ldr	r2, [pc, #196]	@ (8002790 <HAL_QSPI_MspInit+0xe4>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d15b      	bne.n	8002786 <HAL_QSPI_MspInit+0xda>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80026ce:	2300      	movs	r3, #0
 80026d0:	613b      	str	r3, [r7, #16]
 80026d2:	4b30      	ldr	r3, [pc, #192]	@ (8002794 <HAL_QSPI_MspInit+0xe8>)
 80026d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026d6:	4a2f      	ldr	r2, [pc, #188]	@ (8002794 <HAL_QSPI_MspInit+0xe8>)
 80026d8:	f043 0302 	orr.w	r3, r3, #2
 80026dc:	6393      	str	r3, [r2, #56]	@ 0x38
 80026de:	4b2d      	ldr	r3, [pc, #180]	@ (8002794 <HAL_QSPI_MspInit+0xe8>)
 80026e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	613b      	str	r3, [r7, #16]
 80026e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ea:	2300      	movs	r3, #0
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	4b29      	ldr	r3, [pc, #164]	@ (8002794 <HAL_QSPI_MspInit+0xe8>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f2:	4a28      	ldr	r2, [pc, #160]	@ (8002794 <HAL_QSPI_MspInit+0xe8>)
 80026f4:	f043 0302 	orr.w	r3, r3, #2
 80026f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026fa:	4b26      	ldr	r3, [pc, #152]	@ (8002794 <HAL_QSPI_MspInit+0xe8>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	60bb      	str	r3, [r7, #8]
 800270a:	4b22      	ldr	r3, [pc, #136]	@ (8002794 <HAL_QSPI_MspInit+0xe8>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270e:	4a21      	ldr	r2, [pc, #132]	@ (8002794 <HAL_QSPI_MspInit+0xe8>)
 8002710:	f043 0320 	orr.w	r3, r3, #32
 8002714:	6313      	str	r3, [r2, #48]	@ 0x30
 8002716:	4b1f      	ldr	r3, [pc, #124]	@ (8002794 <HAL_QSPI_MspInit+0xe8>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800271a:	f003 0320 	and.w	r3, r3, #32
 800271e:	60bb      	str	r3, [r7, #8]
 8002720:	68bb      	ldr	r3, [r7, #8]
    PF6     ------> QUADSPI_BK1_IO3
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PF8     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8002722:	2340      	movs	r3, #64	@ 0x40
 8002724:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002726:	2302      	movs	r3, #2
 8002728:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272a:	2300      	movs	r3, #0
 800272c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800272e:	2303      	movs	r3, #3
 8002730:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8002732:	230a      	movs	r3, #10
 8002734:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8002736:	f107 0314 	add.w	r3, r7, #20
 800273a:	4619      	mov	r1, r3
 800273c:	4816      	ldr	r0, [pc, #88]	@ (8002798 <HAL_QSPI_MspInit+0xec>)
 800273e:	f002 ff4d 	bl	80055dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_BK1_IO3_Pin|QSPI_CLK_Pin;
 8002742:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002746:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002748:	2302      	movs	r3, #2
 800274a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274c:	2300      	movs	r3, #0
 800274e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002750:	2303      	movs	r3, #3
 8002752:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8002754:	2309      	movs	r3, #9
 8002756:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002758:	f107 0314 	add.w	r3, r7, #20
 800275c:	4619      	mov	r1, r3
 800275e:	480f      	ldr	r0, [pc, #60]	@ (800279c <HAL_QSPI_MspInit+0xf0>)
 8002760:	f002 ff3c 	bl	80055dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 8002764:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002768:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276a:	2302      	movs	r3, #2
 800276c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276e:	2300      	movs	r3, #0
 8002770:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002772:	2303      	movs	r3, #3
 8002774:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8002776:	230a      	movs	r3, #10
 8002778:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800277a:	f107 0314 	add.w	r3, r7, #20
 800277e:	4619      	mov	r1, r3
 8002780:	4806      	ldr	r0, [pc, #24]	@ (800279c <HAL_QSPI_MspInit+0xf0>)
 8002782:	f002 ff2b 	bl	80055dc <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8002786:	bf00      	nop
 8002788:	3728      	adds	r7, #40	@ 0x28
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	a0001000 	.word	0xa0001000
 8002794:	40023800 	.word	0x40023800
 8002798:	40020400 	.word	0x40020400
 800279c:	40021400 	.word	0x40021400

080027a0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b08a      	sub	sp, #40	@ 0x28
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a8:	f107 0314 	add.w	r3, r7, #20
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	605a      	str	r2, [r3, #4]
 80027b2:	609a      	str	r2, [r3, #8]
 80027b4:	60da      	str	r2, [r3, #12]
 80027b6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a68      	ldr	r2, [pc, #416]	@ (8002960 <HAL_SD_MspInit+0x1c0>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	f040 80c9 	bne.w	8002956 <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80027c4:	2300      	movs	r3, #0
 80027c6:	613b      	str	r3, [r7, #16]
 80027c8:	4b66      	ldr	r3, [pc, #408]	@ (8002964 <HAL_SD_MspInit+0x1c4>)
 80027ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027cc:	4a65      	ldr	r2, [pc, #404]	@ (8002964 <HAL_SD_MspInit+0x1c4>)
 80027ce:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80027d2:	6453      	str	r3, [r2, #68]	@ 0x44
 80027d4:	4b63      	ldr	r3, [pc, #396]	@ (8002964 <HAL_SD_MspInit+0x1c4>)
 80027d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027dc:	613b      	str	r3, [r7, #16]
 80027de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027e0:	2300      	movs	r3, #0
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	4b5f      	ldr	r3, [pc, #380]	@ (8002964 <HAL_SD_MspInit+0x1c4>)
 80027e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e8:	4a5e      	ldr	r2, [pc, #376]	@ (8002964 <HAL_SD_MspInit+0x1c4>)
 80027ea:	f043 0304 	orr.w	r3, r3, #4
 80027ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80027f0:	4b5c      	ldr	r3, [pc, #368]	@ (8002964 <HAL_SD_MspInit+0x1c4>)
 80027f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f4:	f003 0304 	and.w	r3, r3, #4
 80027f8:	60fb      	str	r3, [r7, #12]
 80027fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027fc:	2300      	movs	r3, #0
 80027fe:	60bb      	str	r3, [r7, #8]
 8002800:	4b58      	ldr	r3, [pc, #352]	@ (8002964 <HAL_SD_MspInit+0x1c4>)
 8002802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002804:	4a57      	ldr	r2, [pc, #348]	@ (8002964 <HAL_SD_MspInit+0x1c4>)
 8002806:	f043 0308 	orr.w	r3, r3, #8
 800280a:	6313      	str	r3, [r2, #48]	@ 0x30
 800280c:	4b55      	ldr	r3, [pc, #340]	@ (8002964 <HAL_SD_MspInit+0x1c4>)
 800280e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002810:	f003 0308 	and.w	r3, r3, #8
 8002814:	60bb      	str	r3, [r7, #8]
 8002816:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PD2     ------> SDIO_CMD
    PC9     ------> SDIO_D1
    PC8     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = uSD_CLK_Pin|uSD_D3_Pin|uSD_D2_Pin|uSD_D1_Pin
 8002818:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800281c:	617b      	str	r3, [r7, #20]
                          |uSD_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281e:	2302      	movs	r3, #2
 8002820:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002822:	2300      	movs	r3, #0
 8002824:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002826:	2303      	movs	r3, #3
 8002828:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800282a:	230c      	movs	r3, #12
 800282c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800282e:	f107 0314 	add.w	r3, r7, #20
 8002832:	4619      	mov	r1, r3
 8002834:	484c      	ldr	r0, [pc, #304]	@ (8002968 <HAL_SD_MspInit+0x1c8>)
 8002836:	f002 fed1 	bl	80055dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 800283a:	2304      	movs	r3, #4
 800283c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283e:	2302      	movs	r3, #2
 8002840:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002842:	2300      	movs	r3, #0
 8002844:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002846:	2303      	movs	r3, #3
 8002848:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800284a:	230c      	movs	r3, #12
 800284c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 800284e:	f107 0314 	add.w	r3, r7, #20
 8002852:	4619      	mov	r1, r3
 8002854:	4845      	ldr	r0, [pc, #276]	@ (800296c <HAL_SD_MspInit+0x1cc>)
 8002856:	f002 fec1 	bl	80055dc <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800285a:	4b45      	ldr	r3, [pc, #276]	@ (8002970 <HAL_SD_MspInit+0x1d0>)
 800285c:	4a45      	ldr	r2, [pc, #276]	@ (8002974 <HAL_SD_MspInit+0x1d4>)
 800285e:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8002860:	4b43      	ldr	r3, [pc, #268]	@ (8002970 <HAL_SD_MspInit+0x1d0>)
 8002862:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002866:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002868:	4b41      	ldr	r3, [pc, #260]	@ (8002970 <HAL_SD_MspInit+0x1d0>)
 800286a:	2200      	movs	r2, #0
 800286c:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800286e:	4b40      	ldr	r3, [pc, #256]	@ (8002970 <HAL_SD_MspInit+0x1d0>)
 8002870:	2200      	movs	r2, #0
 8002872:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002874:	4b3e      	ldr	r3, [pc, #248]	@ (8002970 <HAL_SD_MspInit+0x1d0>)
 8002876:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800287a:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800287c:	4b3c      	ldr	r3, [pc, #240]	@ (8002970 <HAL_SD_MspInit+0x1d0>)
 800287e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002882:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002884:	4b3a      	ldr	r3, [pc, #232]	@ (8002970 <HAL_SD_MspInit+0x1d0>)
 8002886:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800288a:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800288c:	4b38      	ldr	r3, [pc, #224]	@ (8002970 <HAL_SD_MspInit+0x1d0>)
 800288e:	2220      	movs	r2, #32
 8002890:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002892:	4b37      	ldr	r3, [pc, #220]	@ (8002970 <HAL_SD_MspInit+0x1d0>)
 8002894:	2200      	movs	r2, #0
 8002896:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002898:	4b35      	ldr	r3, [pc, #212]	@ (8002970 <HAL_SD_MspInit+0x1d0>)
 800289a:	2204      	movs	r2, #4
 800289c:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800289e:	4b34      	ldr	r3, [pc, #208]	@ (8002970 <HAL_SD_MspInit+0x1d0>)
 80028a0:	2203      	movs	r2, #3
 80028a2:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80028a4:	4b32      	ldr	r3, [pc, #200]	@ (8002970 <HAL_SD_MspInit+0x1d0>)
 80028a6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80028aa:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80028ac:	4b30      	ldr	r3, [pc, #192]	@ (8002970 <HAL_SD_MspInit+0x1d0>)
 80028ae:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80028b2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80028b4:	482e      	ldr	r0, [pc, #184]	@ (8002970 <HAL_SD_MspInit+0x1d0>)
 80028b6:	f001 fa8f 	bl	8003dd8 <HAL_DMA_Init>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 80028c0:	f7ff fc8a 	bl	80021d8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a2a      	ldr	r2, [pc, #168]	@ (8002970 <HAL_SD_MspInit+0x1d0>)
 80028c8:	641a      	str	r2, [r3, #64]	@ 0x40
 80028ca:	4a29      	ldr	r2, [pc, #164]	@ (8002970 <HAL_SD_MspInit+0x1d0>)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80028d0:	4b29      	ldr	r3, [pc, #164]	@ (8002978 <HAL_SD_MspInit+0x1d8>)
 80028d2:	4a2a      	ldr	r2, [pc, #168]	@ (800297c <HAL_SD_MspInit+0x1dc>)
 80028d4:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80028d6:	4b28      	ldr	r3, [pc, #160]	@ (8002978 <HAL_SD_MspInit+0x1d8>)
 80028d8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80028dc:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028de:	4b26      	ldr	r3, [pc, #152]	@ (8002978 <HAL_SD_MspInit+0x1d8>)
 80028e0:	2240      	movs	r2, #64	@ 0x40
 80028e2:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028e4:	4b24      	ldr	r3, [pc, #144]	@ (8002978 <HAL_SD_MspInit+0x1d8>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80028ea:	4b23      	ldr	r3, [pc, #140]	@ (8002978 <HAL_SD_MspInit+0x1d8>)
 80028ec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80028f0:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80028f2:	4b21      	ldr	r3, [pc, #132]	@ (8002978 <HAL_SD_MspInit+0x1d8>)
 80028f4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80028f8:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80028fa:	4b1f      	ldr	r3, [pc, #124]	@ (8002978 <HAL_SD_MspInit+0x1d8>)
 80028fc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002900:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8002902:	4b1d      	ldr	r3, [pc, #116]	@ (8002978 <HAL_SD_MspInit+0x1d8>)
 8002904:	2220      	movs	r2, #32
 8002906:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002908:	4b1b      	ldr	r3, [pc, #108]	@ (8002978 <HAL_SD_MspInit+0x1d8>)
 800290a:	2200      	movs	r2, #0
 800290c:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800290e:	4b1a      	ldr	r3, [pc, #104]	@ (8002978 <HAL_SD_MspInit+0x1d8>)
 8002910:	2204      	movs	r2, #4
 8002912:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002914:	4b18      	ldr	r3, [pc, #96]	@ (8002978 <HAL_SD_MspInit+0x1d8>)
 8002916:	2203      	movs	r2, #3
 8002918:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800291a:	4b17      	ldr	r3, [pc, #92]	@ (8002978 <HAL_SD_MspInit+0x1d8>)
 800291c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002920:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002922:	4b15      	ldr	r3, [pc, #84]	@ (8002978 <HAL_SD_MspInit+0x1d8>)
 8002924:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002928:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800292a:	4813      	ldr	r0, [pc, #76]	@ (8002978 <HAL_SD_MspInit+0x1d8>)
 800292c:	f001 fa54 	bl	8003dd8 <HAL_DMA_Init>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 8002936:	f7ff fc4f 	bl	80021d8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a0e      	ldr	r2, [pc, #56]	@ (8002978 <HAL_SD_MspInit+0x1d8>)
 800293e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002940:	4a0d      	ldr	r2, [pc, #52]	@ (8002978 <HAL_SD_MspInit+0x1d8>)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8002946:	2200      	movs	r2, #0
 8002948:	2105      	movs	r1, #5
 800294a:	2031      	movs	r0, #49	@ 0x31
 800294c:	f001 f918 	bl	8003b80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8002950:	2031      	movs	r0, #49	@ 0x31
 8002952:	f001 f931 	bl	8003bb8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDIO_MspInit 1 */

  }

}
 8002956:	bf00      	nop
 8002958:	3728      	adds	r7, #40	@ 0x28
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	40012c00 	.word	0x40012c00
 8002964:	40023800 	.word	0x40023800
 8002968:	40020800 	.word	0x40020800
 800296c:	40020c00 	.word	0x40020c00
 8002970:	200004b0 	.word	0x200004b0
 8002974:	40026458 	.word	0x40026458
 8002978:	20000510 	.word	0x20000510
 800297c:	400264a0 	.word	0x400264a0

08002980 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a15      	ldr	r2, [pc, #84]	@ (80029e4 <HAL_TIM_Base_MspInit+0x64>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d10e      	bne.n	80029b0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002992:	2300      	movs	r3, #0
 8002994:	60fb      	str	r3, [r7, #12]
 8002996:	4b14      	ldr	r3, [pc, #80]	@ (80029e8 <HAL_TIM_Base_MspInit+0x68>)
 8002998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800299a:	4a13      	ldr	r2, [pc, #76]	@ (80029e8 <HAL_TIM_Base_MspInit+0x68>)
 800299c:	f043 0301 	orr.w	r3, r3, #1
 80029a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80029a2:	4b11      	ldr	r3, [pc, #68]	@ (80029e8 <HAL_TIM_Base_MspInit+0x68>)
 80029a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	60fb      	str	r3, [r7, #12]
 80029ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80029ae:	e012      	b.n	80029d6 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029b8:	d10d      	bne.n	80029d6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029ba:	2300      	movs	r3, #0
 80029bc:	60bb      	str	r3, [r7, #8]
 80029be:	4b0a      	ldr	r3, [pc, #40]	@ (80029e8 <HAL_TIM_Base_MspInit+0x68>)
 80029c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c2:	4a09      	ldr	r2, [pc, #36]	@ (80029e8 <HAL_TIM_Base_MspInit+0x68>)
 80029c4:	f043 0301 	orr.w	r3, r3, #1
 80029c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80029ca:	4b07      	ldr	r3, [pc, #28]	@ (80029e8 <HAL_TIM_Base_MspInit+0x68>)
 80029cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	60bb      	str	r3, [r7, #8]
 80029d4:	68bb      	ldr	r3, [r7, #8]
}
 80029d6:	bf00      	nop
 80029d8:	3714      	adds	r7, #20
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	40010000 	.word	0x40010000
 80029e8:	40023800 	.word	0x40023800

080029ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b08c      	sub	sp, #48	@ 0x30
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f4:	f107 031c 	add.w	r3, r7, #28
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	605a      	str	r2, [r3, #4]
 80029fe:	609a      	str	r2, [r3, #8]
 8002a00:	60da      	str	r2, [r3, #12]
 8002a02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a4e      	ldr	r2, [pc, #312]	@ (8002b44 <HAL_UART_MspInit+0x158>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d164      	bne.n	8002ad8 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a0e:	2300      	movs	r3, #0
 8002a10:	61bb      	str	r3, [r7, #24]
 8002a12:	4b4d      	ldr	r3, [pc, #308]	@ (8002b48 <HAL_UART_MspInit+0x15c>)
 8002a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a16:	4a4c      	ldr	r2, [pc, #304]	@ (8002b48 <HAL_UART_MspInit+0x15c>)
 8002a18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a1e:	4b4a      	ldr	r3, [pc, #296]	@ (8002b48 <HAL_UART_MspInit+0x15c>)
 8002a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a26:	61bb      	str	r3, [r7, #24]
 8002a28:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	617b      	str	r3, [r7, #20]
 8002a2e:	4b46      	ldr	r3, [pc, #280]	@ (8002b48 <HAL_UART_MspInit+0x15c>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a32:	4a45      	ldr	r2, [pc, #276]	@ (8002b48 <HAL_UART_MspInit+0x15c>)
 8002a34:	f043 0302 	orr.w	r3, r3, #2
 8002a38:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a3a:	4b43      	ldr	r3, [pc, #268]	@ (8002b48 <HAL_UART_MspInit+0x15c>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	617b      	str	r3, [r7, #20]
 8002a44:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002a46:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a50:	2301      	movs	r3, #1
 8002a52:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a54:	2303      	movs	r3, #3
 8002a56:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002a58:	2307      	movs	r3, #7
 8002a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a5c:	f107 031c 	add.w	r3, r7, #28
 8002a60:	4619      	mov	r1, r3
 8002a62:	483a      	ldr	r0, [pc, #232]	@ (8002b4c <HAL_UART_MspInit+0x160>)
 8002a64:	f002 fdba 	bl	80055dc <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8002a68:	4b39      	ldr	r3, [pc, #228]	@ (8002b50 <HAL_UART_MspInit+0x164>)
 8002a6a:	4a3a      	ldr	r2, [pc, #232]	@ (8002b54 <HAL_UART_MspInit+0x168>)
 8002a6c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8002a6e:	4b38      	ldr	r3, [pc, #224]	@ (8002b50 <HAL_UART_MspInit+0x164>)
 8002a70:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002a74:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a76:	4b36      	ldr	r3, [pc, #216]	@ (8002b50 <HAL_UART_MspInit+0x164>)
 8002a78:	2240      	movs	r2, #64	@ 0x40
 8002a7a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a7c:	4b34      	ldr	r3, [pc, #208]	@ (8002b50 <HAL_UART_MspInit+0x164>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a82:	4b33      	ldr	r3, [pc, #204]	@ (8002b50 <HAL_UART_MspInit+0x164>)
 8002a84:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a88:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a8a:	4b31      	ldr	r3, [pc, #196]	@ (8002b50 <HAL_UART_MspInit+0x164>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a90:	4b2f      	ldr	r3, [pc, #188]	@ (8002b50 <HAL_UART_MspInit+0x164>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002a96:	4b2e      	ldr	r3, [pc, #184]	@ (8002b50 <HAL_UART_MspInit+0x164>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002a9c:	4b2c      	ldr	r3, [pc, #176]	@ (8002b50 <HAL_UART_MspInit+0x164>)
 8002a9e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002aa2:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002aa4:	4b2a      	ldr	r3, [pc, #168]	@ (8002b50 <HAL_UART_MspInit+0x164>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002aaa:	4829      	ldr	r0, [pc, #164]	@ (8002b50 <HAL_UART_MspInit+0x164>)
 8002aac:	f001 f994 	bl	8003dd8 <HAL_DMA_Init>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002ab6:	f7ff fb8f 	bl	80021d8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a24      	ldr	r2, [pc, #144]	@ (8002b50 <HAL_UART_MspInit+0x164>)
 8002abe:	639a      	str	r2, [r3, #56]	@ 0x38
 8002ac0:	4a23      	ldr	r2, [pc, #140]	@ (8002b50 <HAL_UART_MspInit+0x164>)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	2105      	movs	r1, #5
 8002aca:	2027      	movs	r0, #39	@ 0x27
 8002acc:	f001 f858 	bl	8003b80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002ad0:	2027      	movs	r0, #39	@ 0x27
 8002ad2:	f001 f871 	bl	8003bb8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002ad6:	e031      	b.n	8002b3c <HAL_UART_MspInit+0x150>
  else if(huart->Instance==USART6)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a1e      	ldr	r2, [pc, #120]	@ (8002b58 <HAL_UART_MspInit+0x16c>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d12c      	bne.n	8002b3c <HAL_UART_MspInit+0x150>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	613b      	str	r3, [r7, #16]
 8002ae6:	4b18      	ldr	r3, [pc, #96]	@ (8002b48 <HAL_UART_MspInit+0x15c>)
 8002ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aea:	4a17      	ldr	r2, [pc, #92]	@ (8002b48 <HAL_UART_MspInit+0x15c>)
 8002aec:	f043 0320 	orr.w	r3, r3, #32
 8002af0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002af2:	4b15      	ldr	r3, [pc, #84]	@ (8002b48 <HAL_UART_MspInit+0x15c>)
 8002af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002af6:	f003 0320 	and.w	r3, r3, #32
 8002afa:	613b      	str	r3, [r7, #16]
 8002afc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002afe:	2300      	movs	r3, #0
 8002b00:	60fb      	str	r3, [r7, #12]
 8002b02:	4b11      	ldr	r3, [pc, #68]	@ (8002b48 <HAL_UART_MspInit+0x15c>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b06:	4a10      	ldr	r2, [pc, #64]	@ (8002b48 <HAL_UART_MspInit+0x15c>)
 8002b08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8002b48 <HAL_UART_MspInit+0x15c>)
 8002b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b16:	60fb      	str	r3, [r7, #12]
 8002b18:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_USART6_TX_Pin|USART6_RX_Pin;
 8002b1a:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8002b1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b20:	2302      	movs	r3, #2
 8002b22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b24:	2300      	movs	r3, #0
 8002b26:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002b2c:	2308      	movs	r3, #8
 8002b2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b30:	f107 031c 	add.w	r3, r7, #28
 8002b34:	4619      	mov	r1, r3
 8002b36:	4809      	ldr	r0, [pc, #36]	@ (8002b5c <HAL_UART_MspInit+0x170>)
 8002b38:	f002 fd50 	bl	80055dc <HAL_GPIO_Init>
}
 8002b3c:	bf00      	nop
 8002b3e:	3730      	adds	r7, #48	@ 0x30
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40004800 	.word	0x40004800
 8002b48:	40023800 	.word	0x40023800
 8002b4c:	40020400 	.word	0x40020400
 8002b50:	20000690 	.word	0x20000690
 8002b54:	40026058 	.word	0x40026058
 8002b58:	40011400 	.word	0x40011400
 8002b5c:	40021800 	.word	0x40021800

08002b60 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002b66:	1d3b      	adds	r3, r7, #4
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]
 8002b6c:	605a      	str	r2, [r3, #4]
 8002b6e:	609a      	str	r2, [r3, #8]
 8002b70:	60da      	str	r2, [r3, #12]
 8002b72:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002b74:	4b44      	ldr	r3, [pc, #272]	@ (8002c88 <HAL_FMC_MspInit+0x128>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f040 8081 	bne.w	8002c80 <HAL_FMC_MspInit+0x120>
    return;
  }
  FMC_Initialized = 1;
 8002b7e:	4b42      	ldr	r3, [pc, #264]	@ (8002c88 <HAL_FMC_MspInit+0x128>)
 8002b80:	2201      	movs	r2, #1
 8002b82:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002b84:	2300      	movs	r3, #0
 8002b86:	603b      	str	r3, [r7, #0]
 8002b88:	4b40      	ldr	r3, [pc, #256]	@ (8002c8c <HAL_FMC_MspInit+0x12c>)
 8002b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b8c:	4a3f      	ldr	r2, [pc, #252]	@ (8002c8c <HAL_FMC_MspInit+0x12c>)
 8002b8e:	f043 0301 	orr.w	r3, r3, #1
 8002b92:	6393      	str	r3, [r2, #56]	@ 0x38
 8002b94:	4b3d      	ldr	r3, [pc, #244]	@ (8002c8c <HAL_FMC_MspInit+0x12c>)
 8002b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	603b      	str	r3, [r7, #0]
 8002b9e:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|D5_Pin|D6_Pin
 8002ba0:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8002ba4:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D11_Pin|D4_Pin|D7_Pin
                          |D9_Pin|D12_Pin|D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002baa:	2300      	movs	r3, #0
 8002bac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002bb2:	230c      	movs	r3, #12
 8002bb4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bb6:	1d3b      	adds	r3, r7, #4
 8002bb8:	4619      	mov	r1, r3
 8002bba:	4835      	ldr	r0, [pc, #212]	@ (8002c90 <HAL_FMC_MspInit+0x130>)
 8002bbc:	f002 fd0e 	bl	80055dc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A11_Pin|A10_Pin
 8002bc0:	f248 1333 	movw	r3, #33075	@ 0x8133
 8002bc4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002bd2:	230c      	movs	r3, #12
 8002bd4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002bd6:	1d3b      	adds	r3, r7, #4
 8002bd8:	4619      	mov	r1, r3
 8002bda:	482e      	ldr	r0, [pc, #184]	@ (8002c94 <HAL_FMC_MspInit+0x134>)
 8002bdc:	f002 fcfe 	bl	80055dc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|D3_Pin|D1_Pin|D15_Pin
 8002be0:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002be4:	607b      	str	r3, [r7, #4]
                          |D0_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be6:	2302      	movs	r3, #2
 8002be8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bea:	2300      	movs	r3, #0
 8002bec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002bf2:	230c      	movs	r3, #12
 8002bf4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bf6:	1d3b      	adds	r3, r7, #4
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4827      	ldr	r0, [pc, #156]	@ (8002c98 <HAL_FMC_MspInit+0x138>)
 8002bfc:	f002 fcee 	bl	80055dc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 8002c00:	f240 63ff 	movw	r3, #1791	@ 0x6ff
 8002c04:	607b      	str	r3, [r7, #4]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c06:	2302      	movs	r3, #2
 8002c08:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c12:	230c      	movs	r3, #12
 8002c14:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002c16:	1d3b      	adds	r3, r7, #4
 8002c18:	4619      	mov	r1, r3
 8002c1a:	4820      	ldr	r0, [pc, #128]	@ (8002c9c <HAL_FMC_MspInit+0x13c>)
 8002c1c:	f002 fcde 	bl	80055dc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8002c20:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8002c24:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|A6_Pin|A9_Pin
                          |A7_Pin|A8_Pin|SDNMT48LC4M32B2B5_6A_RAS_RAS___Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c26:	2302      	movs	r3, #2
 8002c28:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c32:	230c      	movs	r3, #12
 8002c34:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c36:	1d3b      	adds	r3, r7, #4
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4819      	ldr	r0, [pc, #100]	@ (8002ca0 <HAL_FMC_MspInit+0x140>)
 8002c3c:	f002 fcce 	bl	80055dc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|SDNE0_Pin
 8002c40:	f64f 730c 	movw	r3, #65292	@ 0xff0c
 8002c44:	607b      	str	r3, [r7, #4]
                          |SDCKE0_Pin|D20_Pin|D17_Pin|D19_Pin
                          |D16_Pin|D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c46:	2302      	movs	r3, #2
 8002c48:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c52:	230c      	movs	r3, #12
 8002c54:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002c56:	1d3b      	adds	r3, r7, #4
 8002c58:	4619      	mov	r1, r3
 8002c5a:	4812      	ldr	r0, [pc, #72]	@ (8002ca4 <HAL_FMC_MspInit+0x144>)
 8002c5c:	f002 fcbe 	bl	80055dc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8002c60:	2301      	movs	r3, #1
 8002c62:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c64:	2302      	movs	r3, #2
 8002c66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c70:	230c      	movs	r3, #12
 8002c72:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8002c74:	1d3b      	adds	r3, r7, #4
 8002c76:	4619      	mov	r1, r3
 8002c78:	480b      	ldr	r0, [pc, #44]	@ (8002ca8 <HAL_FMC_MspInit+0x148>)
 8002c7a:	f002 fcaf 	bl	80055dc <HAL_GPIO_Init>
 8002c7e:	e000      	b.n	8002c82 <HAL_FMC_MspInit+0x122>
    return;
 8002c80:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002c82:	3718      	adds	r7, #24
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	20001754 	.word	0x20001754
 8002c8c:	40023800 	.word	0x40023800
 8002c90:	40021000 	.word	0x40021000
 8002c94:	40021800 	.word	0x40021800
 8002c98:	40020c00 	.word	0x40020c00
 8002c9c:	40022000 	.word	0x40022000
 8002ca0:	40021400 	.word	0x40021400
 8002ca4:	40021c00 	.word	0x40021c00
 8002ca8:	40020800 	.word	0x40020800

08002cac <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002cb4:	f7ff ff54 	bl	8002b60 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002cb8:	bf00      	nop
 8002cba:	3708      	adds	r7, #8
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b088      	sub	sp, #32
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a26      	ldr	r2, [pc, #152]	@ (8002d68 <HAL_SAI_MspInit+0xa8>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d146      	bne.n	8002d60 <HAL_SAI_MspInit+0xa0>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8002cd2:	4b26      	ldr	r3, [pc, #152]	@ (8002d6c <HAL_SAI_MspInit+0xac>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d10d      	bne.n	8002cf6 <HAL_SAI_MspInit+0x36>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002cda:	2300      	movs	r3, #0
 8002cdc:	60bb      	str	r3, [r7, #8]
 8002cde:	4b24      	ldr	r3, [pc, #144]	@ (8002d70 <HAL_SAI_MspInit+0xb0>)
 8002ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ce2:	4a23      	ldr	r2, [pc, #140]	@ (8002d70 <HAL_SAI_MspInit+0xb0>)
 8002ce4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002ce8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cea:	4b21      	ldr	r3, [pc, #132]	@ (8002d70 <HAL_SAI_MspInit+0xb0>)
 8002cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cf2:	60bb      	str	r3, [r7, #8]
 8002cf4:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 8002cf6:	4b1d      	ldr	r3, [pc, #116]	@ (8002d6c <HAL_SAI_MspInit+0xac>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	4a1b      	ldr	r2, [pc, #108]	@ (8002d6c <HAL_SAI_MspInit+0xac>)
 8002cfe:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PD6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SCKA_Pin;
 8002d00:	2330      	movs	r3, #48	@ 0x30
 8002d02:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d04:	2302      	movs	r3, #2
 8002d06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002d10:	2306      	movs	r3, #6
 8002d12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d14:	f107 030c 	add.w	r3, r7, #12
 8002d18:	4619      	mov	r1, r3
 8002d1a:	4816      	ldr	r0, [pc, #88]	@ (8002d74 <HAL_SAI_MspInit+0xb4>)
 8002d1c:	f002 fc5e 	bl	80055dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MIC_DATA_Pin;
 8002d20:	2340      	movs	r3, #64	@ 0x40
 8002d22:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d24:	2302      	movs	r3, #2
 8002d26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002d30:	2306      	movs	r3, #6
 8002d32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MIC_DATA_GPIO_Port, &GPIO_InitStruct);
 8002d34:	f107 030c 	add.w	r3, r7, #12
 8002d38:	4619      	mov	r1, r3
 8002d3a:	480f      	ldr	r0, [pc, #60]	@ (8002d78 <HAL_SAI_MspInit+0xb8>)
 8002d3c:	f002 fc4e 	bl	80055dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8002d40:	2380      	movs	r3, #128	@ 0x80
 8002d42:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d44:	2302      	movs	r3, #2
 8002d46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002d50:	2306      	movs	r3, #6
 8002d52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8002d54:	f107 030c 	add.w	r3, r7, #12
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4808      	ldr	r0, [pc, #32]	@ (8002d7c <HAL_SAI_MspInit+0xbc>)
 8002d5c:	f002 fc3e 	bl	80055dc <HAL_GPIO_Init>

    }
}
 8002d60:	bf00      	nop
 8002d62:	3720      	adds	r7, #32
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	40015804 	.word	0x40015804
 8002d6c:	20001758 	.word	0x20001758
 8002d70:	40023800 	.word	0x40023800
 8002d74:	40021000 	.word	0x40021000
 8002d78:	40020c00 	.word	0x40020c00
 8002d7c:	40021800 	.word	0x40021800

08002d80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b08e      	sub	sp, #56	@ 0x38
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002d90:	2300      	movs	r3, #0
 8002d92:	60fb      	str	r3, [r7, #12]
 8002d94:	4b33      	ldr	r3, [pc, #204]	@ (8002e64 <HAL_InitTick+0xe4>)
 8002d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d98:	4a32      	ldr	r2, [pc, #200]	@ (8002e64 <HAL_InitTick+0xe4>)
 8002d9a:	f043 0310 	orr.w	r3, r3, #16
 8002d9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002da0:	4b30      	ldr	r3, [pc, #192]	@ (8002e64 <HAL_InitTick+0xe4>)
 8002da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da4:	f003 0310 	and.w	r3, r3, #16
 8002da8:	60fb      	str	r3, [r7, #12]
 8002daa:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002dac:	f107 0210 	add.w	r2, r7, #16
 8002db0:	f107 0314 	add.w	r3, r7, #20
 8002db4:	4611      	mov	r1, r2
 8002db6:	4618      	mov	r0, r3
 8002db8:	f003 fdcc 	bl	8006954 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002dbc:	6a3b      	ldr	r3, [r7, #32]
 8002dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002dc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d103      	bne.n	8002dce <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002dc6:	f003 fd9d 	bl	8006904 <HAL_RCC_GetPCLK1Freq>
 8002dca:	6378      	str	r0, [r7, #52]	@ 0x34
 8002dcc:	e004      	b.n	8002dd8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002dce:	f003 fd99 	bl	8006904 <HAL_RCC_GetPCLK1Freq>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002dd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dda:	4a23      	ldr	r2, [pc, #140]	@ (8002e68 <HAL_InitTick+0xe8>)
 8002ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8002de0:	0c9b      	lsrs	r3, r3, #18
 8002de2:	3b01      	subs	r3, #1
 8002de4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002de6:	4b21      	ldr	r3, [pc, #132]	@ (8002e6c <HAL_InitTick+0xec>)
 8002de8:	4a21      	ldr	r2, [pc, #132]	@ (8002e70 <HAL_InitTick+0xf0>)
 8002dea:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002dec:	4b1f      	ldr	r3, [pc, #124]	@ (8002e6c <HAL_InitTick+0xec>)
 8002dee:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002df2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002df4:	4a1d      	ldr	r2, [pc, #116]	@ (8002e6c <HAL_InitTick+0xec>)
 8002df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002df8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002dfa:	4b1c      	ldr	r3, [pc, #112]	@ (8002e6c <HAL_InitTick+0xec>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e00:	4b1a      	ldr	r3, [pc, #104]	@ (8002e6c <HAL_InitTick+0xec>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e06:	4b19      	ldr	r3, [pc, #100]	@ (8002e6c <HAL_InitTick+0xec>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002e0c:	4817      	ldr	r0, [pc, #92]	@ (8002e6c <HAL_InitTick+0xec>)
 8002e0e:	f006 f810 	bl	8008e32 <HAL_TIM_Base_Init>
 8002e12:	4603      	mov	r3, r0
 8002e14:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002e18:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d11b      	bne.n	8002e58 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002e20:	4812      	ldr	r0, [pc, #72]	@ (8002e6c <HAL_InitTick+0xec>)
 8002e22:	f006 f8bd 	bl	8008fa0 <HAL_TIM_Base_Start_IT>
 8002e26:	4603      	mov	r3, r0
 8002e28:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002e2c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d111      	bne.n	8002e58 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002e34:	2036      	movs	r0, #54	@ 0x36
 8002e36:	f000 febf 	bl	8003bb8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2b0f      	cmp	r3, #15
 8002e3e:	d808      	bhi.n	8002e52 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002e40:	2200      	movs	r2, #0
 8002e42:	6879      	ldr	r1, [r7, #4]
 8002e44:	2036      	movs	r0, #54	@ 0x36
 8002e46:	f000 fe9b 	bl	8003b80 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e4a:	4a0a      	ldr	r2, [pc, #40]	@ (8002e74 <HAL_InitTick+0xf4>)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6013      	str	r3, [r2, #0]
 8002e50:	e002      	b.n	8002e58 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002e58:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3738      	adds	r7, #56	@ 0x38
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	40023800 	.word	0x40023800
 8002e68:	431bde83 	.word	0x431bde83
 8002e6c:	2000175c 	.word	0x2000175c
 8002e70:	40001000 	.word	0x40001000
 8002e74:	20000004 	.word	0x20000004

08002e78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e7c:	bf00      	nop
 8002e7e:	e7fd      	b.n	8002e7c <NMI_Handler+0x4>

08002e80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e84:	bf00      	nop
 8002e86:	e7fd      	b.n	8002e84 <HardFault_Handler+0x4>

08002e88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e8c:	bf00      	nop
 8002e8e:	e7fd      	b.n	8002e8c <MemManage_Handler+0x4>

08002e90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e94:	bf00      	nop
 8002e96:	e7fd      	b.n	8002e94 <BusFault_Handler+0x4>

08002e98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e9c:	bf00      	nop
 8002e9e:	e7fd      	b.n	8002e9c <UsageFault_Handler+0x4>

08002ea0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ea4:	bf00      	nop
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
	...

08002eb0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002eb4:	4802      	ldr	r0, [pc, #8]	@ (8002ec0 <DMA1_Stream3_IRQHandler+0x10>)
 8002eb6:	f001 f927 	bl	8004108 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002eba:	bf00      	nop
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	20000690 	.word	0x20000690

08002ec4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8002ec8:	4802      	ldr	r0, [pc, #8]	@ (8002ed4 <DMA1_Stream5_IRQHandler+0x10>)
 8002eca:	f001 f91d 	bl	8004108 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002ece:	bf00      	nop
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	2000014c 	.word	0x2000014c

08002ed8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002edc:	4802      	ldr	r0, [pc, #8]	@ (8002ee8 <USART3_IRQHandler+0x10>)
 8002ede:	f006 fd61 	bl	80099a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002ee2:	bf00      	nop
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	20000600 	.word	0x20000600

08002eec <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8002ef0:	4802      	ldr	r0, [pc, #8]	@ (8002efc <SDIO_IRQHandler+0x10>)
 8002ef2:	f004 febf 	bl	8007c74 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8002ef6:	bf00      	nop
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	2000042c 	.word	0x2000042c

08002f00 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8002f04:	4b06      	ldr	r3, [pc, #24]	@ (8002f20 <TIM6_DAC_IRQHandler+0x20>)
 8002f06:	791b      	ldrb	r3, [r3, #4]
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d002      	beq.n	8002f14 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8002f0e:	4804      	ldr	r0, [pc, #16]	@ (8002f20 <TIM6_DAC_IRQHandler+0x20>)
 8002f10:	f000 fe9e 	bl	8003c50 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8002f14:	4803      	ldr	r0, [pc, #12]	@ (8002f24 <TIM6_DAC_IRQHandler+0x24>)
 8002f16:	f006 f8b3 	bl	8009080 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002f1a:	bf00      	nop
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	20000138 	.word	0x20000138
 8002f24:	2000175c 	.word	0x2000175c

08002f28 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002f2c:	4802      	ldr	r0, [pc, #8]	@ (8002f38 <DMA2_Stream0_IRQHandler+0x10>)
 8002f2e:	f001 f8eb 	bl	8004108 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002f32:	bf00      	nop
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	200000d0 	.word	0x200000d0

08002f3c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8002f40:	4802      	ldr	r0, [pc, #8]	@ (8002f4c <DMA2_Stream3_IRQHandler+0x10>)
 8002f42:	f001 f8e1 	bl	8004108 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002f46:	bf00      	nop
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	200004b0 	.word	0x200004b0

08002f50 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8002f54:	4802      	ldr	r0, [pc, #8]	@ (8002f60 <DMA2_Stream6_IRQHandler+0x10>)
 8002f56:	f001 f8d7 	bl	8004108 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002f5a:	bf00      	nop
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	20000510 	.word	0x20000510

08002f64 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002f68:	4802      	ldr	r0, [pc, #8]	@ (8002f74 <LTDC_IRQHandler+0x10>)
 8002f6a:	f002 ff29 	bl	8005dc0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002f6e:	bf00      	nop
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	200002b0 	.word	0x200002b0

08002f78 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002f7c:	4802      	ldr	r0, [pc, #8]	@ (8002f88 <DMA2D_IRQHandler+0x10>)
 8002f7e:	f001 fb82 	bl	8004686 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002f82:	bf00      	nop
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	200001ac 	.word	0x200001ac

08002f8c <DSI_IRQHandler>:

/**
  * @brief This function handles DSI global interrupt.
  */
void DSI_IRQHandler(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8002f90:	4802      	ldr	r0, [pc, #8]	@ (8002f9c <DSI_IRQHandler+0x10>)
 8002f92:	f001 ff58 	bl	8004e46 <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 8002f96:	bf00      	nop
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	200001ec 	.word	0x200001ec

08002fa0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b086      	sub	sp, #24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fac:	2300      	movs	r3, #0
 8002fae:	617b      	str	r3, [r7, #20]
 8002fb0:	e00a      	b.n	8002fc8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002fb2:	f3af 8000 	nop.w
 8002fb6:	4601      	mov	r1, r0
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	1c5a      	adds	r2, r3, #1
 8002fbc:	60ba      	str	r2, [r7, #8]
 8002fbe:	b2ca      	uxtb	r2, r1
 8002fc0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	617b      	str	r3, [r7, #20]
 8002fc8:	697a      	ldr	r2, [r7, #20]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	dbf0      	blt.n	8002fb2 <_read+0x12>
  }

  return len;
 8002fd0:	687b      	ldr	r3, [r7, #4]
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3718      	adds	r7, #24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <_close>:
  }
  return len;
}

int _close(int file)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b083      	sub	sp, #12
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002fe2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr

08002ff2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b083      	sub	sp, #12
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
 8002ffa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003002:	605a      	str	r2, [r3, #4]
  return 0;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr

08003012 <_isatty>:

int _isatty(int file)
{
 8003012:	b480      	push	{r7}
 8003014:	b083      	sub	sp, #12
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800301a:	2301      	movs	r3, #1
}
 800301c:	4618      	mov	r0, r3
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003028:	b480      	push	{r7}
 800302a:	b085      	sub	sp, #20
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3714      	adds	r7, #20
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
	...

08003044 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800304c:	4a14      	ldr	r2, [pc, #80]	@ (80030a0 <_sbrk+0x5c>)
 800304e:	4b15      	ldr	r3, [pc, #84]	@ (80030a4 <_sbrk+0x60>)
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003058:	4b13      	ldr	r3, [pc, #76]	@ (80030a8 <_sbrk+0x64>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d102      	bne.n	8003066 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003060:	4b11      	ldr	r3, [pc, #68]	@ (80030a8 <_sbrk+0x64>)
 8003062:	4a12      	ldr	r2, [pc, #72]	@ (80030ac <_sbrk+0x68>)
 8003064:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003066:	4b10      	ldr	r3, [pc, #64]	@ (80030a8 <_sbrk+0x64>)
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4413      	add	r3, r2
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	429a      	cmp	r2, r3
 8003072:	d207      	bcs.n	8003084 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003074:	f00d fcd8 	bl	8010a28 <__errno>
 8003078:	4603      	mov	r3, r0
 800307a:	220c      	movs	r2, #12
 800307c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800307e:	f04f 33ff 	mov.w	r3, #4294967295
 8003082:	e009      	b.n	8003098 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003084:	4b08      	ldr	r3, [pc, #32]	@ (80030a8 <_sbrk+0x64>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800308a:	4b07      	ldr	r3, [pc, #28]	@ (80030a8 <_sbrk+0x64>)
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4413      	add	r3, r2
 8003092:	4a05      	ldr	r2, [pc, #20]	@ (80030a8 <_sbrk+0x64>)
 8003094:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003096:	68fb      	ldr	r3, [r7, #12]
}
 8003098:	4618      	mov	r0, r3
 800309a:	3718      	adds	r7, #24
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	20050000 	.word	0x20050000
 80030a4:	00000400 	.word	0x00000400
 80030a8:	200017a4 	.word	0x200017a4
 80030ac:	2000a700 	.word	0x2000a700

080030b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030b4:	4b06      	ldr	r3, [pc, #24]	@ (80030d0 <SystemInit+0x20>)
 80030b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030ba:	4a05      	ldr	r2, [pc, #20]	@ (80030d0 <SystemInit+0x20>)
 80030bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80030c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030c4:	bf00      	nop
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	e000ed00 	.word	0xe000ed00

080030d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80030d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800310c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80030d8:	f7ff ffea 	bl	80030b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80030dc:	480c      	ldr	r0, [pc, #48]	@ (8003110 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80030de:	490d      	ldr	r1, [pc, #52]	@ (8003114 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80030e0:	4a0d      	ldr	r2, [pc, #52]	@ (8003118 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80030e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030e4:	e002      	b.n	80030ec <LoopCopyDataInit>

080030e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030ea:	3304      	adds	r3, #4

080030ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030f0:	d3f9      	bcc.n	80030e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030f2:	4a0a      	ldr	r2, [pc, #40]	@ (800311c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80030f4:	4c0a      	ldr	r4, [pc, #40]	@ (8003120 <LoopFillZerobss+0x22>)
  movs r3, #0
 80030f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030f8:	e001      	b.n	80030fe <LoopFillZerobss>

080030fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030fc:	3204      	adds	r2, #4

080030fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003100:	d3fb      	bcc.n	80030fa <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8003102:	f00d fc97 	bl	8010a34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003106:	f7fd fdf1 	bl	8000cec <main>
  bx  lr    
 800310a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800310c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003110:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003114:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8003118:	0802f980 	.word	0x0802f980
  ldr r2, =_sbss
 800311c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8003120:	2000a700 	.word	0x2000a700

08003124 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003124:	e7fe      	b.n	8003124 <ADC_IRQHandler>
	...

08003128 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800312c:	4b0e      	ldr	r3, [pc, #56]	@ (8003168 <HAL_Init+0x40>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a0d      	ldr	r2, [pc, #52]	@ (8003168 <HAL_Init+0x40>)
 8003132:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003136:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003138:	4b0b      	ldr	r3, [pc, #44]	@ (8003168 <HAL_Init+0x40>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a0a      	ldr	r2, [pc, #40]	@ (8003168 <HAL_Init+0x40>)
 800313e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003142:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003144:	4b08      	ldr	r3, [pc, #32]	@ (8003168 <HAL_Init+0x40>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a07      	ldr	r2, [pc, #28]	@ (8003168 <HAL_Init+0x40>)
 800314a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800314e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003150:	2003      	movs	r0, #3
 8003152:	f000 fd0a 	bl	8003b6a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003156:	2005      	movs	r0, #5
 8003158:	f7ff fe12 	bl	8002d80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800315c:	f7ff f842 	bl	80021e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	40023c00 	.word	0x40023c00

0800316c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003170:	4b06      	ldr	r3, [pc, #24]	@ (800318c <HAL_IncTick+0x20>)
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	461a      	mov	r2, r3
 8003176:	4b06      	ldr	r3, [pc, #24]	@ (8003190 <HAL_IncTick+0x24>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4413      	add	r3, r2
 800317c:	4a04      	ldr	r2, [pc, #16]	@ (8003190 <HAL_IncTick+0x24>)
 800317e:	6013      	str	r3, [r2, #0]
}
 8003180:	bf00      	nop
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	20000008 	.word	0x20000008
 8003190:	200017a8 	.word	0x200017a8

08003194 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
  return uwTick;
 8003198:	4b03      	ldr	r3, [pc, #12]	@ (80031a8 <HAL_GetTick+0x14>)
 800319a:	681b      	ldr	r3, [r3, #0]
}
 800319c:	4618      	mov	r0, r3
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	200017a8 	.word	0x200017a8

080031ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031b4:	f7ff ffee 	bl	8003194 <HAL_GetTick>
 80031b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c4:	d005      	beq.n	80031d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031c6:	4b0a      	ldr	r3, [pc, #40]	@ (80031f0 <HAL_Delay+0x44>)
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	461a      	mov	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	4413      	add	r3, r2
 80031d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80031d2:	bf00      	nop
 80031d4:	f7ff ffde 	bl	8003194 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d8f7      	bhi.n	80031d4 <HAL_Delay+0x28>
  {
  }
}
 80031e4:	bf00      	nop
 80031e6:	bf00      	nop
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	20000008 	.word	0x20000008

080031f4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031fc:	2300      	movs	r3, #0
 80031fe:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e033      	b.n	8003272 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320e:	2b00      	cmp	r3, #0
 8003210:	d109      	bne.n	8003226 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f7ff f812 	bl	800223c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800322a:	f003 0310 	and.w	r3, r3, #16
 800322e:	2b00      	cmp	r3, #0
 8003230:	d118      	bne.n	8003264 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003236:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800323a:	f023 0302 	bic.w	r3, r3, #2
 800323e:	f043 0202 	orr.w	r2, r3, #2
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 fa64 	bl	8003714 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003256:	f023 0303 	bic.w	r3, r3, #3
 800325a:	f043 0201 	orr.w	r2, r3, #1
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	641a      	str	r2, [r3, #64]	@ 0x40
 8003262:	e001      	b.n	8003268 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003270:	7bfb      	ldrb	r3, [r7, #15]
}
 8003272:	4618      	mov	r0, r3
 8003274:	3710      	adds	r7, #16
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
	...

0800327c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003288:	2300      	movs	r3, #0
 800328a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003292:	2b01      	cmp	r3, #1
 8003294:	d101      	bne.n	800329a <HAL_ADC_Start_DMA+0x1e>
 8003296:	2302      	movs	r3, #2
 8003298:	e0e9      	b.n	800346e <HAL_ADC_Start_DMA+0x1f2>
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d018      	beq.n	80032e2 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	689a      	ldr	r2, [r3, #8]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f042 0201 	orr.w	r2, r2, #1
 80032be:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80032c0:	4b6d      	ldr	r3, [pc, #436]	@ (8003478 <HAL_ADC_Start_DMA+0x1fc>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a6d      	ldr	r2, [pc, #436]	@ (800347c <HAL_ADC_Start_DMA+0x200>)
 80032c6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ca:	0c9a      	lsrs	r2, r3, #18
 80032cc:	4613      	mov	r3, r2
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	4413      	add	r3, r2
 80032d2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80032d4:	e002      	b.n	80032dc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	3b01      	subs	r3, #1
 80032da:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1f9      	bne.n	80032d6 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032f0:	d107      	bne.n	8003302 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	689a      	ldr	r2, [r3, #8]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003300:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b01      	cmp	r3, #1
 800330e:	f040 80a1 	bne.w	8003454 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003316:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800331a:	f023 0301 	bic.w	r3, r3, #1
 800331e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003330:	2b00      	cmp	r3, #0
 8003332:	d007      	beq.n	8003344 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003338:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800333c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003348:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800334c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003350:	d106      	bne.n	8003360 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003356:	f023 0206 	bic.w	r2, r3, #6
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	645a      	str	r2, [r3, #68]	@ 0x44
 800335e:	e002      	b.n	8003366 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800336e:	4b44      	ldr	r3, [pc, #272]	@ (8003480 <HAL_ADC_Start_DMA+0x204>)
 8003370:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003376:	4a43      	ldr	r2, [pc, #268]	@ (8003484 <HAL_ADC_Start_DMA+0x208>)
 8003378:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800337e:	4a42      	ldr	r2, [pc, #264]	@ (8003488 <HAL_ADC_Start_DMA+0x20c>)
 8003380:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003386:	4a41      	ldr	r2, [pc, #260]	@ (800348c <HAL_ADC_Start_DMA+0x210>)
 8003388:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003392:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	685a      	ldr	r2, [r3, #4]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80033a2:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689a      	ldr	r2, [r3, #8]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033b2:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	334c      	adds	r3, #76	@ 0x4c
 80033be:	4619      	mov	r1, r3
 80033c0:	68ba      	ldr	r2, [r7, #8]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f000 fdb6 	bl	8003f34 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f003 031f 	and.w	r3, r3, #31
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d12a      	bne.n	800342a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a2d      	ldr	r2, [pc, #180]	@ (8003490 <HAL_ADC_Start_DMA+0x214>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d015      	beq.n	800340a <HAL_ADC_Start_DMA+0x18e>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a2c      	ldr	r2, [pc, #176]	@ (8003494 <HAL_ADC_Start_DMA+0x218>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d105      	bne.n	80033f4 <HAL_ADC_Start_DMA+0x178>
 80033e8:	4b25      	ldr	r3, [pc, #148]	@ (8003480 <HAL_ADC_Start_DMA+0x204>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f003 031f 	and.w	r3, r3, #31
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00a      	beq.n	800340a <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a27      	ldr	r2, [pc, #156]	@ (8003498 <HAL_ADC_Start_DMA+0x21c>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d136      	bne.n	800346c <HAL_ADC_Start_DMA+0x1f0>
 80033fe:	4b20      	ldr	r3, [pc, #128]	@ (8003480 <HAL_ADC_Start_DMA+0x204>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f003 0310 	and.w	r3, r3, #16
 8003406:	2b00      	cmp	r3, #0
 8003408:	d130      	bne.n	800346c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d129      	bne.n	800346c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689a      	ldr	r2, [r3, #8]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003426:	609a      	str	r2, [r3, #8]
 8003428:	e020      	b.n	800346c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a18      	ldr	r2, [pc, #96]	@ (8003490 <HAL_ADC_Start_DMA+0x214>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d11b      	bne.n	800346c <HAL_ADC_Start_DMA+0x1f0>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d114      	bne.n	800346c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	689a      	ldr	r2, [r3, #8]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003450:	609a      	str	r2, [r3, #8]
 8003452:	e00b      	b.n	800346c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003458:	f043 0210 	orr.w	r2, r3, #16
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003464:	f043 0201 	orr.w	r2, r3, #1
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3718      	adds	r7, #24
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	20000000 	.word	0x20000000
 800347c:	431bde83 	.word	0x431bde83
 8003480:	40012300 	.word	0x40012300
 8003484:	0800390d 	.word	0x0800390d
 8003488:	080039c7 	.word	0x080039c7
 800348c:	080039e3 	.word	0x080039e3
 8003490:	40012000 	.word	0x40012000
 8003494:	40012100 	.word	0x40012100
 8003498:	40012200 	.word	0x40012200

0800349c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80034ba:	2300      	movs	r3, #0
 80034bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d101      	bne.n	80034cc <HAL_ADC_ConfigChannel+0x1c>
 80034c8:	2302      	movs	r3, #2
 80034ca:	e113      	b.n	80036f4 <HAL_ADC_ConfigChannel+0x244>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2b09      	cmp	r3, #9
 80034da:	d925      	bls.n	8003528 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68d9      	ldr	r1, [r3, #12]
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	461a      	mov	r2, r3
 80034ea:	4613      	mov	r3, r2
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	4413      	add	r3, r2
 80034f0:	3b1e      	subs	r3, #30
 80034f2:	2207      	movs	r2, #7
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	43da      	mvns	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	400a      	ands	r2, r1
 8003500:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68d9      	ldr	r1, [r3, #12]
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	689a      	ldr	r2, [r3, #8]
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	b29b      	uxth	r3, r3
 8003512:	4618      	mov	r0, r3
 8003514:	4603      	mov	r3, r0
 8003516:	005b      	lsls	r3, r3, #1
 8003518:	4403      	add	r3, r0
 800351a:	3b1e      	subs	r3, #30
 800351c:	409a      	lsls	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	430a      	orrs	r2, r1
 8003524:	60da      	str	r2, [r3, #12]
 8003526:	e022      	b.n	800356e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	6919      	ldr	r1, [r3, #16]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	b29b      	uxth	r3, r3
 8003534:	461a      	mov	r2, r3
 8003536:	4613      	mov	r3, r2
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	4413      	add	r3, r2
 800353c:	2207      	movs	r2, #7
 800353e:	fa02 f303 	lsl.w	r3, r2, r3
 8003542:	43da      	mvns	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	400a      	ands	r2, r1
 800354a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6919      	ldr	r1, [r3, #16]
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	689a      	ldr	r2, [r3, #8]
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	b29b      	uxth	r3, r3
 800355c:	4618      	mov	r0, r3
 800355e:	4603      	mov	r3, r0
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	4403      	add	r3, r0
 8003564:	409a      	lsls	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	430a      	orrs	r2, r1
 800356c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	2b06      	cmp	r3, #6
 8003574:	d824      	bhi.n	80035c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685a      	ldr	r2, [r3, #4]
 8003580:	4613      	mov	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4413      	add	r3, r2
 8003586:	3b05      	subs	r3, #5
 8003588:	221f      	movs	r2, #31
 800358a:	fa02 f303 	lsl.w	r3, r2, r3
 800358e:	43da      	mvns	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	400a      	ands	r2, r1
 8003596:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	4618      	mov	r0, r3
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685a      	ldr	r2, [r3, #4]
 80035aa:	4613      	mov	r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	4413      	add	r3, r2
 80035b0:	3b05      	subs	r3, #5
 80035b2:	fa00 f203 	lsl.w	r2, r0, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80035be:	e04c      	b.n	800365a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	2b0c      	cmp	r3, #12
 80035c6:	d824      	bhi.n	8003612 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	685a      	ldr	r2, [r3, #4]
 80035d2:	4613      	mov	r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	4413      	add	r3, r2
 80035d8:	3b23      	subs	r3, #35	@ 0x23
 80035da:	221f      	movs	r2, #31
 80035dc:	fa02 f303 	lsl.w	r3, r2, r3
 80035e0:	43da      	mvns	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	400a      	ands	r2, r1
 80035e8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	4618      	mov	r0, r3
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685a      	ldr	r2, [r3, #4]
 80035fc:	4613      	mov	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4413      	add	r3, r2
 8003602:	3b23      	subs	r3, #35	@ 0x23
 8003604:	fa00 f203 	lsl.w	r2, r0, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	430a      	orrs	r2, r1
 800360e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003610:	e023      	b.n	800365a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685a      	ldr	r2, [r3, #4]
 800361c:	4613      	mov	r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	4413      	add	r3, r2
 8003622:	3b41      	subs	r3, #65	@ 0x41
 8003624:	221f      	movs	r2, #31
 8003626:	fa02 f303 	lsl.w	r3, r2, r3
 800362a:	43da      	mvns	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	400a      	ands	r2, r1
 8003632:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	b29b      	uxth	r3, r3
 8003640:	4618      	mov	r0, r3
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685a      	ldr	r2, [r3, #4]
 8003646:	4613      	mov	r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	4413      	add	r3, r2
 800364c:	3b41      	subs	r3, #65	@ 0x41
 800364e:	fa00 f203 	lsl.w	r2, r0, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	430a      	orrs	r2, r1
 8003658:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800365a:	4b29      	ldr	r3, [pc, #164]	@ (8003700 <HAL_ADC_ConfigChannel+0x250>)
 800365c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a28      	ldr	r2, [pc, #160]	@ (8003704 <HAL_ADC_ConfigChannel+0x254>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d10f      	bne.n	8003688 <HAL_ADC_ConfigChannel+0x1d8>
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2b12      	cmp	r3, #18
 800366e:	d10b      	bne.n	8003688 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a1d      	ldr	r2, [pc, #116]	@ (8003704 <HAL_ADC_ConfigChannel+0x254>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d12b      	bne.n	80036ea <HAL_ADC_ConfigChannel+0x23a>
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a1c      	ldr	r2, [pc, #112]	@ (8003708 <HAL_ADC_ConfigChannel+0x258>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d003      	beq.n	80036a4 <HAL_ADC_ConfigChannel+0x1f4>
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2b11      	cmp	r3, #17
 80036a2:	d122      	bne.n	80036ea <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a11      	ldr	r2, [pc, #68]	@ (8003708 <HAL_ADC_ConfigChannel+0x258>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d111      	bne.n	80036ea <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80036c6:	4b11      	ldr	r3, [pc, #68]	@ (800370c <HAL_ADC_ConfigChannel+0x25c>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a11      	ldr	r2, [pc, #68]	@ (8003710 <HAL_ADC_ConfigChannel+0x260>)
 80036cc:	fba2 2303 	umull	r2, r3, r2, r3
 80036d0:	0c9a      	lsrs	r2, r3, #18
 80036d2:	4613      	mov	r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	4413      	add	r3, r2
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80036dc:	e002      	b.n	80036e4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	3b01      	subs	r3, #1
 80036e2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1f9      	bne.n	80036de <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3714      	adds	r7, #20
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr
 8003700:	40012300 	.word	0x40012300
 8003704:	40012000 	.word	0x40012000
 8003708:	10000012 	.word	0x10000012
 800370c:	20000000 	.word	0x20000000
 8003710:	431bde83 	.word	0x431bde83

08003714 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003714:	b480      	push	{r7}
 8003716:	b085      	sub	sp, #20
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800371c:	4b79      	ldr	r3, [pc, #484]	@ (8003904 <ADC_Init+0x1f0>)
 800371e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	685a      	ldr	r2, [r3, #4]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	431a      	orrs	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	685a      	ldr	r2, [r3, #4]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003748:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	6859      	ldr	r1, [r3, #4]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	021a      	lsls	r2, r3, #8
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	430a      	orrs	r2, r1
 800375c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800376c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	6859      	ldr	r1, [r3, #4]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	430a      	orrs	r2, r1
 800377e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	689a      	ldr	r2, [r3, #8]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800378e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	6899      	ldr	r1, [r3, #8]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	68da      	ldr	r2, [r3, #12]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	430a      	orrs	r2, r1
 80037a0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037a6:	4a58      	ldr	r2, [pc, #352]	@ (8003908 <ADC_Init+0x1f4>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d022      	beq.n	80037f2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689a      	ldr	r2, [r3, #8]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80037ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6899      	ldr	r1, [r3, #8]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	430a      	orrs	r2, r1
 80037cc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	689a      	ldr	r2, [r3, #8]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80037dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	6899      	ldr	r1, [r3, #8]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	430a      	orrs	r2, r1
 80037ee:	609a      	str	r2, [r3, #8]
 80037f0:	e00f      	b.n	8003812 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	689a      	ldr	r2, [r3, #8]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003800:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	689a      	ldr	r2, [r3, #8]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003810:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	689a      	ldr	r2, [r3, #8]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f022 0202 	bic.w	r2, r2, #2
 8003820:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	6899      	ldr	r1, [r3, #8]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	7e1b      	ldrb	r3, [r3, #24]
 800382c:	005a      	lsls	r2, r3, #1
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	430a      	orrs	r2, r1
 8003834:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 3020 	ldrb.w	r3, [r3, #32]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d01b      	beq.n	8003878 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	685a      	ldr	r2, [r3, #4]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800384e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800385e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	6859      	ldr	r1, [r3, #4]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800386a:	3b01      	subs	r3, #1
 800386c:	035a      	lsls	r2, r3, #13
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	430a      	orrs	r2, r1
 8003874:	605a      	str	r2, [r3, #4]
 8003876:	e007      	b.n	8003888 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	685a      	ldr	r2, [r3, #4]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003886:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003896:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	69db      	ldr	r3, [r3, #28]
 80038a2:	3b01      	subs	r3, #1
 80038a4:	051a      	lsls	r2, r3, #20
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	430a      	orrs	r2, r1
 80038ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80038bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	6899      	ldr	r1, [r3, #8]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80038ca:	025a      	lsls	r2, r3, #9
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	430a      	orrs	r2, r1
 80038d2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	689a      	ldr	r2, [r3, #8]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6899      	ldr	r1, [r3, #8]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	029a      	lsls	r2, r3, #10
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	430a      	orrs	r2, r1
 80038f6:	609a      	str	r2, [r3, #8]
}
 80038f8:	bf00      	nop
 80038fa:	3714      	adds	r7, #20
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr
 8003904:	40012300 	.word	0x40012300
 8003908:	0f000001 	.word	0x0f000001

0800390c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003918:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800391e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003922:	2b00      	cmp	r3, #0
 8003924:	d13c      	bne.n	80039a0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800392a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d12b      	bne.n	8003998 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003944:	2b00      	cmp	r3, #0
 8003946:	d127      	bne.n	8003998 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800394e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003952:	2b00      	cmp	r3, #0
 8003954:	d006      	beq.n	8003964 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003960:	2b00      	cmp	r3, #0
 8003962:	d119      	bne.n	8003998 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	685a      	ldr	r2, [r3, #4]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f022 0220 	bic.w	r2, r2, #32
 8003972:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003978:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003984:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d105      	bne.n	8003998 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003990:	f043 0201 	orr.w	r2, r3, #1
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f7fe f987 	bl	8001cac <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800399e:	e00e      	b.n	80039be <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a4:	f003 0310 	and.w	r3, r3, #16
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d003      	beq.n	80039b4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	f7ff fd75 	bl	800349c <HAL_ADC_ErrorCallback>
}
 80039b2:	e004      	b.n	80039be <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	4798      	blx	r3
}
 80039be:	bf00      	nop
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80039c6:	b580      	push	{r7, lr}
 80039c8:	b084      	sub	sp, #16
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039d2:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	f7fe f943 	bl	8001c60 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80039da:	bf00      	nop
 80039dc:	3710      	adds	r7, #16
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b084      	sub	sp, #16
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039ee:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2240      	movs	r2, #64	@ 0x40
 80039f4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039fa:	f043 0204 	orr.w	r2, r3, #4
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003a02:	68f8      	ldr	r0, [r7, #12]
 8003a04:	f7ff fd4a 	bl	800349c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a08:	bf00      	nop
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b085      	sub	sp, #20
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f003 0307 	and.w	r3, r3, #7
 8003a1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a20:	4b0c      	ldr	r3, [pc, #48]	@ (8003a54 <__NVIC_SetPriorityGrouping+0x44>)
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003a3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a42:	4a04      	ldr	r2, [pc, #16]	@ (8003a54 <__NVIC_SetPriorityGrouping+0x44>)
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	60d3      	str	r3, [r2, #12]
}
 8003a48:	bf00      	nop
 8003a4a:	3714      	adds	r7, #20
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr
 8003a54:	e000ed00 	.word	0xe000ed00

08003a58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a5c:	4b04      	ldr	r3, [pc, #16]	@ (8003a70 <__NVIC_GetPriorityGrouping+0x18>)
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	0a1b      	lsrs	r3, r3, #8
 8003a62:	f003 0307 	and.w	r3, r3, #7
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr
 8003a70:	e000ed00 	.word	0xe000ed00

08003a74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	db0b      	blt.n	8003a9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a86:	79fb      	ldrb	r3, [r7, #7]
 8003a88:	f003 021f 	and.w	r2, r3, #31
 8003a8c:	4907      	ldr	r1, [pc, #28]	@ (8003aac <__NVIC_EnableIRQ+0x38>)
 8003a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a92:	095b      	lsrs	r3, r3, #5
 8003a94:	2001      	movs	r0, #1
 8003a96:	fa00 f202 	lsl.w	r2, r0, r2
 8003a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a9e:	bf00      	nop
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	e000e100 	.word	0xe000e100

08003ab0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	6039      	str	r1, [r7, #0]
 8003aba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	db0a      	blt.n	8003ada <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	b2da      	uxtb	r2, r3
 8003ac8:	490c      	ldr	r1, [pc, #48]	@ (8003afc <__NVIC_SetPriority+0x4c>)
 8003aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ace:	0112      	lsls	r2, r2, #4
 8003ad0:	b2d2      	uxtb	r2, r2
 8003ad2:	440b      	add	r3, r1
 8003ad4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ad8:	e00a      	b.n	8003af0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	b2da      	uxtb	r2, r3
 8003ade:	4908      	ldr	r1, [pc, #32]	@ (8003b00 <__NVIC_SetPriority+0x50>)
 8003ae0:	79fb      	ldrb	r3, [r7, #7]
 8003ae2:	f003 030f 	and.w	r3, r3, #15
 8003ae6:	3b04      	subs	r3, #4
 8003ae8:	0112      	lsls	r2, r2, #4
 8003aea:	b2d2      	uxtb	r2, r2
 8003aec:	440b      	add	r3, r1
 8003aee:	761a      	strb	r2, [r3, #24]
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr
 8003afc:	e000e100 	.word	0xe000e100
 8003b00:	e000ed00 	.word	0xe000ed00

08003b04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b089      	sub	sp, #36	@ 0x24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f003 0307 	and.w	r3, r3, #7
 8003b16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	f1c3 0307 	rsb	r3, r3, #7
 8003b1e:	2b04      	cmp	r3, #4
 8003b20:	bf28      	it	cs
 8003b22:	2304      	movcs	r3, #4
 8003b24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	3304      	adds	r3, #4
 8003b2a:	2b06      	cmp	r3, #6
 8003b2c:	d902      	bls.n	8003b34 <NVIC_EncodePriority+0x30>
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	3b03      	subs	r3, #3
 8003b32:	e000      	b.n	8003b36 <NVIC_EncodePriority+0x32>
 8003b34:	2300      	movs	r3, #0
 8003b36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b38:	f04f 32ff 	mov.w	r2, #4294967295
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b42:	43da      	mvns	r2, r3
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	401a      	ands	r2, r3
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b4c:	f04f 31ff 	mov.w	r1, #4294967295
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	fa01 f303 	lsl.w	r3, r1, r3
 8003b56:	43d9      	mvns	r1, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b5c:	4313      	orrs	r3, r2
         );
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3724      	adds	r7, #36	@ 0x24
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr

08003b6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b6a:	b580      	push	{r7, lr}
 8003b6c:	b082      	sub	sp, #8
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f7ff ff4c 	bl	8003a10 <__NVIC_SetPriorityGrouping>
}
 8003b78:	bf00      	nop
 8003b7a:	3708      	adds	r7, #8
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	4603      	mov	r3, r0
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
 8003b8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b92:	f7ff ff61 	bl	8003a58 <__NVIC_GetPriorityGrouping>
 8003b96:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	68b9      	ldr	r1, [r7, #8]
 8003b9c:	6978      	ldr	r0, [r7, #20]
 8003b9e:	f7ff ffb1 	bl	8003b04 <NVIC_EncodePriority>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ba8:	4611      	mov	r1, r2
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7ff ff80 	bl	8003ab0 <__NVIC_SetPriority>
}
 8003bb0:	bf00      	nop
 8003bb2:	3718      	adds	r7, #24
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7ff ff54 	bl	8003a74 <__NVIC_EnableIRQ>
}
 8003bcc:	bf00      	nop
 8003bce:	3708      	adds	r7, #8
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d101      	bne.n	8003be6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e00e      	b.n	8003c04 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	795b      	ldrb	r3, [r3, #5]
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d105      	bne.n	8003bfc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f7fe fb98 	bl	800232c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003c02:	2300      	movs	r3, #0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3708      	adds	r7, #8
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e014      	b.n	8003c48 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	791b      	ldrb	r3, [r3, #4]
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d105      	bne.n	8003c34 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f7fe fb9e 	bl	8002370 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2202      	movs	r2, #2
 8003c38:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3708      	adds	r7, #8
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c66:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d01d      	beq.n	8003cae <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d018      	beq.n	8003cae <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2204      	movs	r2, #4
 8003c80:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	f043 0201 	orr.w	r2, r3, #1
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003c96:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003ca6:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 f827 	bl	8003cfc <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d01d      	beq.n	8003cf4 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d018      	beq.n	8003cf4 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2204      	movs	r2, #4
 8003cc6:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	f043 0202 	orr.w	r2, r3, #2
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003cdc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8003cec:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 f867 	bl	8003dc2 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 8003cf4:	bf00      	nop
 8003cf6:	3710      	adds	r7, #16
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b089      	sub	sp, #36	@ 0x24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d002      	beq.n	8003d2c <HAL_DAC_ConfigChannel+0x1c>
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d101      	bne.n	8003d30 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e042      	b.n	8003db6 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	795b      	ldrb	r3, [r3, #5]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d101      	bne.n	8003d3c <HAL_DAC_ConfigChannel+0x2c>
 8003d38:	2302      	movs	r3, #2
 8003d3a:	e03c      	b.n	8003db6 <HAL_DAC_ConfigChannel+0xa6>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2202      	movs	r2, #2
 8003d46:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f003 0310 	and.w	r3, r3, #16
 8003d56:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003d5a:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8003d5e:	43db      	mvns	r3, r3
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	4013      	ands	r3, r2
 8003d64:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f003 0310 	and.w	r3, r3, #16
 8003d78:	697a      	ldr	r2, [r7, #20]
 8003d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7e:	69ba      	ldr	r2, [r7, #24]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	6819      	ldr	r1, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f003 0310 	and.w	r3, r3, #16
 8003d98:	22c0      	movs	r2, #192	@ 0xc0
 8003d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9e:	43da      	mvns	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	400a      	ands	r2, r1
 8003da6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2201      	movs	r2, #1
 8003dac:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003db4:	7ffb      	ldrb	r3, [r7, #31]
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3724      	adds	r7, #36	@ 0x24
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr

08003dc2 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	b083      	sub	sp, #12
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003dca:	bf00      	nop
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
	...

08003dd8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003de0:	2300      	movs	r3, #0
 8003de2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003de4:	f7ff f9d6 	bl	8003194 <HAL_GetTick>
 8003de8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d101      	bne.n	8003df4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e099      	b.n	8003f28 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2202      	movs	r2, #2
 8003df8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f022 0201 	bic.w	r2, r2, #1
 8003e12:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e14:	e00f      	b.n	8003e36 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e16:	f7ff f9bd 	bl	8003194 <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	2b05      	cmp	r3, #5
 8003e22:	d908      	bls.n	8003e36 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2220      	movs	r2, #32
 8003e28:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2203      	movs	r2, #3
 8003e2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e078      	b.n	8003f28 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0301 	and.w	r3, r3, #1
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d1e8      	bne.n	8003e16 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003e4c:	697a      	ldr	r2, [r7, #20]
 8003e4e:	4b38      	ldr	r3, [pc, #224]	@ (8003f30 <HAL_DMA_Init+0x158>)
 8003e50:	4013      	ands	r3, r2
 8003e52:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685a      	ldr	r2, [r3, #4]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e62:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a1b      	ldr	r3, [r3, #32]
 8003e80:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e82:	697a      	ldr	r2, [r7, #20]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e8c:	2b04      	cmp	r3, #4
 8003e8e:	d107      	bne.n	8003ea0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	697a      	ldr	r2, [r7, #20]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	697a      	ldr	r2, [r7, #20]
 8003ea6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	f023 0307 	bic.w	r3, r3, #7
 8003eb6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ebc:	697a      	ldr	r2, [r7, #20]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec6:	2b04      	cmp	r3, #4
 8003ec8:	d117      	bne.n	8003efa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ece:	697a      	ldr	r2, [r7, #20]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d00e      	beq.n	8003efa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 fb0d 	bl	80044fc <DMA_CheckFifoParam>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d008      	beq.n	8003efa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2240      	movs	r2, #64	@ 0x40
 8003eec:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e016      	b.n	8003f28 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	697a      	ldr	r2, [r7, #20]
 8003f00:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 fac4 	bl	8004490 <DMA_CalcBaseAndBitshift>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f10:	223f      	movs	r2, #63	@ 0x3f
 8003f12:	409a      	lsls	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2201      	movs	r2, #1
 8003f22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3718      	adds	r7, #24
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	f010803f 	.word	0xf010803f

08003f34 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b086      	sub	sp, #24
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	607a      	str	r2, [r7, #4]
 8003f40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f42:	2300      	movs	r3, #0
 8003f44:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f4a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d101      	bne.n	8003f5a <HAL_DMA_Start_IT+0x26>
 8003f56:	2302      	movs	r3, #2
 8003f58:	e040      	b.n	8003fdc <HAL_DMA_Start_IT+0xa8>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d12f      	bne.n	8003fce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2202      	movs	r2, #2
 8003f72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	68b9      	ldr	r1, [r7, #8]
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	f000 fa56 	bl	8004434 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f8c:	223f      	movs	r2, #63	@ 0x3f
 8003f8e:	409a      	lsls	r2, r3
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f042 0216 	orr.w	r2, r2, #22
 8003fa2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d007      	beq.n	8003fbc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f042 0208 	orr.w	r2, r2, #8
 8003fba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f042 0201 	orr.w	r2, r2, #1
 8003fca:	601a      	str	r2, [r3, #0]
 8003fcc:	e005      	b.n	8003fda <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003fd6:	2302      	movs	r3, #2
 8003fd8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003fda:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3718      	adds	r7, #24
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ff0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003ff2:	f7ff f8cf 	bl	8003194 <HAL_GetTick>
 8003ff6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	2b02      	cmp	r3, #2
 8004002:	d008      	beq.n	8004016 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2280      	movs	r2, #128	@ 0x80
 8004008:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e052      	b.n	80040bc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f022 0216 	bic.w	r2, r2, #22
 8004024:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	695a      	ldr	r2, [r3, #20]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004034:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403a:	2b00      	cmp	r3, #0
 800403c:	d103      	bne.n	8004046 <HAL_DMA_Abort+0x62>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004042:	2b00      	cmp	r3, #0
 8004044:	d007      	beq.n	8004056 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f022 0208 	bic.w	r2, r2, #8
 8004054:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f022 0201 	bic.w	r2, r2, #1
 8004064:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004066:	e013      	b.n	8004090 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004068:	f7ff f894 	bl	8003194 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	2b05      	cmp	r3, #5
 8004074:	d90c      	bls.n	8004090 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2220      	movs	r2, #32
 800407a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2203      	movs	r2, #3
 8004080:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e015      	b.n	80040bc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1e4      	bne.n	8004068 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040a2:	223f      	movs	r2, #63	@ 0x3f
 80040a4:	409a      	lsls	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3710      	adds	r7, #16
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d004      	beq.n	80040e2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2280      	movs	r2, #128	@ 0x80
 80040dc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e00c      	b.n	80040fc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2205      	movs	r2, #5
 80040e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f022 0201 	bic.w	r2, r2, #1
 80040f8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80040fa:	2300      	movs	r3, #0
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b086      	sub	sp, #24
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004110:	2300      	movs	r3, #0
 8004112:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004114:	4b8e      	ldr	r3, [pc, #568]	@ (8004350 <HAL_DMA_IRQHandler+0x248>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a8e      	ldr	r2, [pc, #568]	@ (8004354 <HAL_DMA_IRQHandler+0x24c>)
 800411a:	fba2 2303 	umull	r2, r3, r2, r3
 800411e:	0a9b      	lsrs	r3, r3, #10
 8004120:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004126:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004132:	2208      	movs	r2, #8
 8004134:	409a      	lsls	r2, r3
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	4013      	ands	r3, r2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d01a      	beq.n	8004174 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0304 	and.w	r3, r3, #4
 8004148:	2b00      	cmp	r3, #0
 800414a:	d013      	beq.n	8004174 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f022 0204 	bic.w	r2, r2, #4
 800415a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004160:	2208      	movs	r2, #8
 8004162:	409a      	lsls	r2, r3
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800416c:	f043 0201 	orr.w	r2, r3, #1
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004178:	2201      	movs	r2, #1
 800417a:	409a      	lsls	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	4013      	ands	r3, r2
 8004180:	2b00      	cmp	r3, #0
 8004182:	d012      	beq.n	80041aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00b      	beq.n	80041aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004196:	2201      	movs	r2, #1
 8004198:	409a      	lsls	r2, r3
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041a2:	f043 0202 	orr.w	r2, r3, #2
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041ae:	2204      	movs	r2, #4
 80041b0:	409a      	lsls	r2, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	4013      	ands	r3, r2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d012      	beq.n	80041e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0302 	and.w	r3, r3, #2
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00b      	beq.n	80041e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041cc:	2204      	movs	r2, #4
 80041ce:	409a      	lsls	r2, r3
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041d8:	f043 0204 	orr.w	r2, r3, #4
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041e4:	2210      	movs	r2, #16
 80041e6:	409a      	lsls	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	4013      	ands	r3, r2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d043      	beq.n	8004278 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0308 	and.w	r3, r3, #8
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d03c      	beq.n	8004278 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004202:	2210      	movs	r2, #16
 8004204:	409a      	lsls	r2, r3
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d018      	beq.n	800424a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d108      	bne.n	8004238 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800422a:	2b00      	cmp	r3, #0
 800422c:	d024      	beq.n	8004278 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	4798      	blx	r3
 8004236:	e01f      	b.n	8004278 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800423c:	2b00      	cmp	r3, #0
 800423e:	d01b      	beq.n	8004278 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	4798      	blx	r3
 8004248:	e016      	b.n	8004278 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004254:	2b00      	cmp	r3, #0
 8004256:	d107      	bne.n	8004268 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f022 0208 	bic.w	r2, r2, #8
 8004266:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800426c:	2b00      	cmp	r3, #0
 800426e:	d003      	beq.n	8004278 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800427c:	2220      	movs	r2, #32
 800427e:	409a      	lsls	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	4013      	ands	r3, r2
 8004284:	2b00      	cmp	r3, #0
 8004286:	f000 808f 	beq.w	80043a8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0310 	and.w	r3, r3, #16
 8004294:	2b00      	cmp	r3, #0
 8004296:	f000 8087 	beq.w	80043a8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800429e:	2220      	movs	r2, #32
 80042a0:	409a      	lsls	r2, r3
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b05      	cmp	r3, #5
 80042b0:	d136      	bne.n	8004320 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f022 0216 	bic.w	r2, r2, #22
 80042c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	695a      	ldr	r2, [r3, #20]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80042d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d103      	bne.n	80042e2 <HAL_DMA_IRQHandler+0x1da>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d007      	beq.n	80042f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f022 0208 	bic.w	r2, r2, #8
 80042f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042f6:	223f      	movs	r2, #63	@ 0x3f
 80042f8:	409a      	lsls	r2, r3
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2201      	movs	r2, #1
 8004302:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004312:	2b00      	cmp	r3, #0
 8004314:	d07e      	beq.n	8004414 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	4798      	blx	r3
        }
        return;
 800431e:	e079      	b.n	8004414 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d01d      	beq.n	800436a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d10d      	bne.n	8004358 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004340:	2b00      	cmp	r3, #0
 8004342:	d031      	beq.n	80043a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	4798      	blx	r3
 800434c:	e02c      	b.n	80043a8 <HAL_DMA_IRQHandler+0x2a0>
 800434e:	bf00      	nop
 8004350:	20000000 	.word	0x20000000
 8004354:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800435c:	2b00      	cmp	r3, #0
 800435e:	d023      	beq.n	80043a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	4798      	blx	r3
 8004368:	e01e      	b.n	80043a8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004374:	2b00      	cmp	r3, #0
 8004376:	d10f      	bne.n	8004398 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f022 0210 	bic.w	r2, r2, #16
 8004386:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800439c:	2b00      	cmp	r3, #0
 800439e:	d003      	beq.n	80043a8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d032      	beq.n	8004416 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043b4:	f003 0301 	and.w	r3, r3, #1
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d022      	beq.n	8004402 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2205      	movs	r2, #5
 80043c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f022 0201 	bic.w	r2, r2, #1
 80043d2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	3301      	adds	r3, #1
 80043d8:	60bb      	str	r3, [r7, #8]
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d307      	bcc.n	80043f0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1f2      	bne.n	80043d4 <HAL_DMA_IRQHandler+0x2cc>
 80043ee:	e000      	b.n	80043f2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80043f0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004406:	2b00      	cmp	r3, #0
 8004408:	d005      	beq.n	8004416 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	4798      	blx	r3
 8004412:	e000      	b.n	8004416 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004414:	bf00      	nop
    }
  }
}
 8004416:	3718      	adds	r7, #24
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004428:	4618      	mov	r0, r3
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
 8004440:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004450:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	683a      	ldr	r2, [r7, #0]
 8004458:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	2b40      	cmp	r3, #64	@ 0x40
 8004460:	d108      	bne.n	8004474 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68ba      	ldr	r2, [r7, #8]
 8004470:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004472:	e007      	b.n	8004484 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68ba      	ldr	r2, [r7, #8]
 800447a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	60da      	str	r2, [r3, #12]
}
 8004484:	bf00      	nop
 8004486:	3714      	adds	r7, #20
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	b2db      	uxtb	r3, r3
 800449e:	3b10      	subs	r3, #16
 80044a0:	4a14      	ldr	r2, [pc, #80]	@ (80044f4 <DMA_CalcBaseAndBitshift+0x64>)
 80044a2:	fba2 2303 	umull	r2, r3, r2, r3
 80044a6:	091b      	lsrs	r3, r3, #4
 80044a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80044aa:	4a13      	ldr	r2, [pc, #76]	@ (80044f8 <DMA_CalcBaseAndBitshift+0x68>)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	4413      	add	r3, r2
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	461a      	mov	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2b03      	cmp	r3, #3
 80044bc:	d909      	bls.n	80044d2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80044c6:	f023 0303 	bic.w	r3, r3, #3
 80044ca:	1d1a      	adds	r2, r3, #4
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	659a      	str	r2, [r3, #88]	@ 0x58
 80044d0:	e007      	b.n	80044e2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80044da:	f023 0303 	bic.w	r3, r3, #3
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3714      	adds	r7, #20
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	aaaaaaab 	.word	0xaaaaaaab
 80044f8:	080120e8 	.word	0x080120e8

080044fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004504:	2300      	movs	r3, #0
 8004506:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800450c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d11f      	bne.n	8004556 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	2b03      	cmp	r3, #3
 800451a:	d856      	bhi.n	80045ca <DMA_CheckFifoParam+0xce>
 800451c:	a201      	add	r2, pc, #4	@ (adr r2, 8004524 <DMA_CheckFifoParam+0x28>)
 800451e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004522:	bf00      	nop
 8004524:	08004535 	.word	0x08004535
 8004528:	08004547 	.word	0x08004547
 800452c:	08004535 	.word	0x08004535
 8004530:	080045cb 	.word	0x080045cb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004538:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d046      	beq.n	80045ce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004544:	e043      	b.n	80045ce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800454a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800454e:	d140      	bne.n	80045d2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004554:	e03d      	b.n	80045d2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800455e:	d121      	bne.n	80045a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	2b03      	cmp	r3, #3
 8004564:	d837      	bhi.n	80045d6 <DMA_CheckFifoParam+0xda>
 8004566:	a201      	add	r2, pc, #4	@ (adr r2, 800456c <DMA_CheckFifoParam+0x70>)
 8004568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800456c:	0800457d 	.word	0x0800457d
 8004570:	08004583 	.word	0x08004583
 8004574:	0800457d 	.word	0x0800457d
 8004578:	08004595 	.word	0x08004595
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	73fb      	strb	r3, [r7, #15]
      break;
 8004580:	e030      	b.n	80045e4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004586:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d025      	beq.n	80045da <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004592:	e022      	b.n	80045da <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004598:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800459c:	d11f      	bne.n	80045de <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80045a2:	e01c      	b.n	80045de <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d903      	bls.n	80045b2 <DMA_CheckFifoParam+0xb6>
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	2b03      	cmp	r3, #3
 80045ae:	d003      	beq.n	80045b8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80045b0:	e018      	b.n	80045e4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	73fb      	strb	r3, [r7, #15]
      break;
 80045b6:	e015      	b.n	80045e4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d00e      	beq.n	80045e2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	73fb      	strb	r3, [r7, #15]
      break;
 80045c8:	e00b      	b.n	80045e2 <DMA_CheckFifoParam+0xe6>
      break;
 80045ca:	bf00      	nop
 80045cc:	e00a      	b.n	80045e4 <DMA_CheckFifoParam+0xe8>
      break;
 80045ce:	bf00      	nop
 80045d0:	e008      	b.n	80045e4 <DMA_CheckFifoParam+0xe8>
      break;
 80045d2:	bf00      	nop
 80045d4:	e006      	b.n	80045e4 <DMA_CheckFifoParam+0xe8>
      break;
 80045d6:	bf00      	nop
 80045d8:	e004      	b.n	80045e4 <DMA_CheckFifoParam+0xe8>
      break;
 80045da:	bf00      	nop
 80045dc:	e002      	b.n	80045e4 <DMA_CheckFifoParam+0xe8>
      break;   
 80045de:	bf00      	nop
 80045e0:	e000      	b.n	80045e4 <DMA_CheckFifoParam+0xe8>
      break;
 80045e2:	bf00      	nop
    }
  } 
  
  return status; 
 80045e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3714      	adds	r7, #20
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop

080045f4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d101      	bne.n	8004606 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e03b      	b.n	800467e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d106      	bne.n	8004620 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f7fd ff28 	bl	8002470 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2202      	movs	r2, #2
 8004624:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685a      	ldr	r2, [r3, #4]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	430a      	orrs	r2, r1
 800463c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004644:	f023 0107 	bic.w	r1, r3, #7
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689a      	ldr	r2, [r3, #8]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	430a      	orrs	r2, r1
 8004652:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800465a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800465e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	68d1      	ldr	r1, [r2, #12]
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	6812      	ldr	r2, [r2, #0]
 800466a:	430b      	orrs	r3, r1
 800466c:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3708      	adds	r7, #8
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b084      	sub	sp, #16
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f003 0301 	and.w	r3, r3, #1
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d026      	beq.n	80046f6 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d021      	beq.n	80046f6 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80046c0:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046c6:	f043 0201 	orr.w	r2, r3, #1
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2201      	movs	r2, #1
 80046d4:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2204      	movs	r2, #4
 80046da:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d003      	beq.n	80046f6 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f003 0320 	and.w	r3, r3, #32
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d026      	beq.n	800474e <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d021      	beq.n	800474e <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004718:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2220      	movs	r2, #32
 8004720:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004726:	f043 0202 	orr.w	r2, r3, #2
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2204      	movs	r2, #4
 8004732:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d003      	beq.n	800474e <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f003 0308 	and.w	r3, r3, #8
 8004754:	2b00      	cmp	r3, #0
 8004756:	d026      	beq.n	80047a6 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800475e:	2b00      	cmp	r3, #0
 8004760:	d021      	beq.n	80047a6 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004770:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2208      	movs	r2, #8
 8004778:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800477e:	f043 0204 	orr.w	r2, r3, #4
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2204      	movs	r2, #4
 800478a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d003      	beq.n	80047a6 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f003 0304 	and.w	r3, r3, #4
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d013      	beq.n	80047d8 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00e      	beq.n	80047d8 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047c8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2204      	movs	r2, #4
 80047d0:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f853 	bl	800487e <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f003 0302 	and.w	r3, r3, #2
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d024      	beq.n	800482c <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d01f      	beq.n	800482c <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80047fa:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2202      	movs	r2, #2
 8004802:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d003      	beq.n	800482c <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f003 0310 	and.w	r3, r3, #16
 8004832:	2b00      	cmp	r3, #0
 8004834:	d01f      	beq.n	8004876 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d01a      	beq.n	8004876 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800484e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2210      	movs	r2, #16
 8004856:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f000 f80e 	bl	8004892 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004876:	bf00      	nop
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800487e:	b480      	push	{r7}
 8004880:	b083      	sub	sp, #12
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8004886:	bf00      	nop
 8004888:	370c      	adds	r7, #12
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr

08004892 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004892:	b480      	push	{r7}
 8004894:	b083      	sub	sp, #12
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800489a:	bf00      	nop
 800489c:	370c      	adds	r7, #12
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
	...

080048a8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b087      	sub	sp, #28
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d101      	bne.n	80048c8 <HAL_DMA2D_ConfigLayer+0x20>
 80048c4:	2302      	movs	r3, #2
 80048c6:	e079      	b.n	80049bc <HAL_DMA2D_ConfigLayer+0x114>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2202      	movs	r2, #2
 80048d4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	011b      	lsls	r3, r3, #4
 80048dc:	3318      	adds	r3, #24
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	4413      	add	r3, r2
 80048e2:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	685a      	ldr	r2, [r3, #4]
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	041b      	lsls	r3, r3, #16
 80048ee:	4313      	orrs	r3, r2
 80048f0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80048f2:	4b35      	ldr	r3, [pc, #212]	@ (80049c8 <HAL_DMA2D_ConfigLayer+0x120>)
 80048f4:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	2b0a      	cmp	r3, #10
 80048fc:	d003      	beq.n	8004906 <HAL_DMA2D_ConfigLayer+0x5e>
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	2b09      	cmp	r3, #9
 8004904:	d107      	bne.n	8004916 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800490e:	697a      	ldr	r2, [r7, #20]
 8004910:	4313      	orrs	r3, r2
 8004912:	617b      	str	r3, [r7, #20]
 8004914:	e005      	b.n	8004922 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	061b      	lsls	r3, r3, #24
 800491c:	697a      	ldr	r2, [r7, #20]
 800491e:	4313      	orrs	r3, r2
 8004920:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d120      	bne.n	800496a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	43db      	mvns	r3, r3
 8004932:	ea02 0103 	and.w	r1, r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	697a      	ldr	r2, [r7, #20]
 800493c:	430a      	orrs	r2, r1
 800493e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	693a      	ldr	r2, [r7, #16]
 8004946:	6812      	ldr	r2, [r2, #0]
 8004948:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	2b0a      	cmp	r3, #10
 8004950:	d003      	beq.n	800495a <HAL_DMA2D_ConfigLayer+0xb2>
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	2b09      	cmp	r3, #9
 8004958:	d127      	bne.n	80049aa <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	68da      	ldr	r2, [r3, #12]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8004966:	629a      	str	r2, [r3, #40]	@ 0x28
 8004968:	e01f      	b.n	80049aa <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	69da      	ldr	r2, [r3, #28]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	43db      	mvns	r3, r3
 8004974:	ea02 0103 	and.w	r1, r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	697a      	ldr	r2, [r7, #20]
 800497e:	430a      	orrs	r2, r1
 8004980:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	6812      	ldr	r2, [r2, #0]
 800498a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	2b0a      	cmp	r3, #10
 8004992:	d003      	beq.n	800499c <HAL_DMA2D_ConfigLayer+0xf4>
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	2b09      	cmp	r3, #9
 800499a:	d106      	bne.n	80049aa <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	68da      	ldr	r2, [r3, #12]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80049a8:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2201      	movs	r2, #1
 80049ae:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	371c      	adds	r7, #28
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr
 80049c8:	ff03000f 	.word	0xff03000f

080049cc <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b08a      	sub	sp, #40	@ 0x28
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d101      	bne.n	80049e0 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e16e      	b.n	8004cbe <HAL_DSI_Init+0x2f2>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	7c5b      	ldrb	r3, [r3, #17]
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d102      	bne.n	80049f0 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7fd fd68 	bl	80024c0 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2203      	movs	r2, #3
 80049f4:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 80049f6:	2300      	movs	r3, #0
 80049f8:	61bb      	str	r3, [r7, #24]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8004a0a:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8004a16:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a1a:	61bb      	str	r3, [r7, #24]
 8004a1c:	69bb      	ldr	r3, [r7, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a1e:	f7fe fbb9 	bl	8003194 <HAL_GetTick>
 8004a22:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8004a24:	e009      	b.n	8004a3a <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004a26:	f7fe fbb5 	bl	8003194 <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004a34:	d901      	bls.n	8004a3a <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e141      	b.n	8004cbe <HAL_DSI_Init+0x2f2>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8004a42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d0ed      	beq.n	8004a26 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	6812      	ldr	r2, [r2, #0]
 8004a56:	f423 335e 	bic.w	r3, r3, #227328	@ 0x37800
 8004a5a:	f423 73fe 	bic.w	r3, r3, #508	@ 0x1fc
 8004a5e:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8004a76:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8004a7e:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	430a      	orrs	r2, r1
 8004a86:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	617b      	str	r3, [r7, #20]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f042 0201 	orr.w	r2, r2, #1
 8004a9e:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8004aaa:	f003 0301 	and.w	r3, r3, #1
 8004aae:	617b      	str	r3, [r7, #20]
 8004ab0:	697b      	ldr	r3, [r7, #20]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8004ab2:	2001      	movs	r0, #1
 8004ab4:	f7fe fb7a 	bl	80031ac <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ab8:	f7fe fb6c 	bl	8003194 <HAL_GetTick>
 8004abc:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8004abe:	e009      	b.n	8004ad4 <HAL_DSI_Init+0x108>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004ac0:	f7fe fb68 	bl	8003194 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004ace:	d901      	bls.n	8004ad4 <HAL_DSI_Init+0x108>
    {
      return HAL_TIMEOUT;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	e0f4      	b.n	8004cbe <HAL_DSI_Init+0x2f2>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8004adc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d0ed      	beq.n	8004ac0 <HAL_DSI_Init+0xf4>
    }
  }

  __HAL_DSI_ENABLE(hdsi);
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	613b      	str	r3, [r7, #16]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	685a      	ldr	r2, [r3, #4]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f042 0201 	orr.w	r2, r2, #1
 8004af6:	605a      	str	r2, [r3, #4]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f003 0301 	and.w	r3, r3, #1
 8004b02:	613b      	str	r3, [r7, #16]
 8004b04:	693b      	ldr	r3, [r7, #16]

  /************************ Set the DSI clock parameters ************************/
  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	689a      	ldr	r2, [r3, #8]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004b14:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	6899      	ldr	r1, [r3, #8]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	689a      	ldr	r2, [r3, #8]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	430a      	orrs	r2, r1
 8004b26:	609a      	str	r2, [r3, #8]

  /*************************** Set the PHY parameters ***************************/
  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= DSI_PCTLR_DEN;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f042 0202 	orr.w	r2, r2, #2
 8004b38:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  hdsi->Instance->PCTLR |= DSI_PCTLR_CKE;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f042 0204 	orr.w	r2, r2, #4
 8004b4c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0


  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f022 0203 	bic.w	r2, r2, #3
 8004b60:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	68da      	ldr	r2, [r3, #12]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	430a      	orrs	r2, r1
 8004b76:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b7a:	f7fe fb0b 	bl	8003194 <HAL_GetTick>
 8004b7e:	6278      	str	r0, [r7, #36]	@ 0x24
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004b88:	f003 0303 	and.w	r3, r3, #3
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d123      	bne.n	8004bd8 <HAL_DSI_Init+0x20c>
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 8004b90:	e00c      	b.n	8004bac <HAL_DSI_Init+0x1e0>
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004b92:	f7fe faff 	bl	8003194 <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004ba0:	d904      	bls.n	8004bac <HAL_DSI_Init+0x1e0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	741a      	strb	r2, [r3, #16]

        return HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e088      	b.n	8004cbe <HAL_DSI_Init+0x2f2>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004bb4:	f003 0314 	and.w	r3, r3, #20
 8004bb8:	2b14      	cmp	r3, #20
 8004bba:	d1ea      	bne.n	8004b92 <HAL_DSI_Init+0x1c6>
 8004bbc:	e014      	b.n	8004be8 <HAL_DSI_Init+0x21c>
  else
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
                                                                                    DSI_PSR_PSS1 | DSI_PSR_PSSC))
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004bbe:	f7fe fae9 	bl	8003194 <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004bcc:	d904      	bls.n	8004bd8 <HAL_DSI_Init+0x20c>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	741a      	strb	r2, [r3, #16]

        return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e072      	b.n	8004cbe <HAL_DSI_Init+0x2f2>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004be0:	f003 0394 	and.w	r3, r3, #148	@ 0x94
 8004be4:	2b94      	cmp	r3, #148	@ 0x94
 8004be6:	d1ea      	bne.n	8004bbe <HAL_DSI_Init+0x1f2>
  }

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d002      	beq.n	8004bf6 <HAL_DSI_Init+0x22a>
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	e000      	b.n	8004bf8 <HAL_DSI_Init+0x22c>
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	623b      	str	r3, [r7, #32]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8004bfa:	6a3b      	ldr	r3, [r7, #32]
 8004bfc:	4a32      	ldr	r2, [pc, #200]	@ (8004cc8 <HAL_DSI_Init+0x2fc>)
 8004bfe:	fb03 f202 	mul.w	r2, r3, r2
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f003 0303 	and.w	r3, r3, #3
 8004c0a:	409a      	lsls	r2, r3
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 8004c14:	fb01 f303 	mul.w	r3, r1, r3
 8004c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c1c:	61fb      	str	r3, [r7, #28]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f8d3 2418 	ldr.w	r2, [r3, #1048]	@ 0x418
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8004c2e:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	69fa      	ldr	r2, [r7, #28]
 8004c40:	430a      	orrs	r2, r1
 8004c42:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hdsi->ErrorMsk = 0U;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	619a      	str	r2, [r3, #24]

  __HAL_DSI_DISABLE(hdsi);
 8004c60:	2300      	movs	r3, #0
 8004c62:	60fb      	str	r3, [r7, #12]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	685a      	ldr	r2, [r3, #4]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f022 0201 	bic.w	r2, r2, #1
 8004c72:	605a      	str	r2, [r3, #4]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	60fb      	str	r3, [r7, #12]
 8004c80:	68fb      	ldr	r3, [r7, #12]

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f022 0203 	bic.w	r2, r2, #3
 8004c92:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f042 0201 	orr.w	r2, r2, #1
 8004cac:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3728      	adds	r7, #40	@ 0x28
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	003d0900 	.word	0x003d0900

08004ccc <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	7c1b      	ldrb	r3, [r3, #16]
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d101      	bne.n	8004ce2 <HAL_DSI_ConfigErrorMonitor+0x16>
 8004cde:	2302      	movs	r3, #2
 8004ce0:	e0ab      	b.n	8004e3a <HAL_DSI_ConfigErrorMonitor+0x16e>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	683a      	ldr	r2, [r7, #0]
 8004d00:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	f003 0301 	and.w	r3, r3, #1
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00b      	beq.n	8004d24 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	6812      	ldr	r2, [r2, #0]
 8004d18:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8004d1c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8004d20:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d009      	beq.n	8004d42 <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f442 12f8 	orr.w	r2, r2, #2031616	@ 0x1f0000
 8004d3e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	f003 0304 	and.w	r3, r3, #4
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d009      	beq.n	8004d60 <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f042 0201 	orr.w	r2, r2, #1
 8004d5c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	f003 0308 	and.w	r3, r3, #8
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d009      	beq.n	8004d7e <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f042 0202 	orr.w	r2, r2, #2
 8004d7a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	f003 0310 	and.w	r3, r3, #16
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d009      	beq.n	8004d9c <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f042 020c 	orr.w	r2, r2, #12
 8004d98:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	f003 0320 	and.w	r3, r3, #32
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d009      	beq.n	8004dba <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f042 0210 	orr.w	r2, r2, #16
 8004db6:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d009      	beq.n	8004dd8 <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f042 0220 	orr.w	r2, r2, #32
 8004dd4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d009      	beq.n	8004df6 <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004df2:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d009      	beq.n	8004e14 <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004e10:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d009      	beq.n	8004e32 <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f442 52f8 	orr.w	r2, r2, #7936	@ 0x1f00
 8004e2e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	370c      	adds	r7, #12
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr

08004e46 <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 8004e46:	b580      	push	{r7, lr}
 8004e48:	b084      	sub	sp, #16
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8004e56:	f003 0301 	and.w	r3, r3, #1
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00f      	beq.n	8004e7e <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d007      	beq.n	8004e7e <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f000 f8ad 	bl	8004fd8 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8004e86:	f003 0302 	and.w	r3, r3, #2
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00f      	beq.n	8004eae <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8004e96:	f003 0302 	and.w	r3, r3, #2
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d007      	beq.n	8004eae <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2202      	movs	r2, #2
 8004ea4:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 f89f 	bl	8004fec <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	699b      	ldr	r3, [r3, #24]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	f000 808c 	beq.w	8004fd0 <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004ec0:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	4013      	ands	r3, r2
 8004ece:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004ed8:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004ee2:	68ba      	ldr	r2, [r7, #8]
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d005      	beq.n	8004efc <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	695b      	ldr	r3, [r3, #20]
 8004ef4:	f043 0201 	orr.w	r2, r3, #1
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d005      	beq.n	8004f12 <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	f043 0202 	orr.w	r2, r3, #2
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	f003 0301 	and.w	r3, r3, #1
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d005      	beq.n	8004f28 <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	695b      	ldr	r3, [r3, #20]
 8004f20:	f043 0204 	orr.w	r2, r3, #4
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	f003 0302 	and.w	r3, r3, #2
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d005      	beq.n	8004f3e <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	695b      	ldr	r3, [r3, #20]
 8004f36:	f043 0208 	orr.w	r2, r3, #8
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	f003 030c 	and.w	r3, r3, #12
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d005      	beq.n	8004f54 <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	695b      	ldr	r3, [r3, #20]
 8004f4c:	f043 0210 	orr.w	r2, r3, #16
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	f003 0310 	and.w	r3, r3, #16
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d005      	beq.n	8004f6a <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	695b      	ldr	r3, [r3, #20]
 8004f62:	f043 0220 	orr.w	r2, r3, #32
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	f003 0320 	and.w	r3, r3, #32
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d005      	beq.n	8004f80 <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	695b      	ldr	r3, [r3, #20]
 8004f78:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d005      	beq.n	8004f96 <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d005      	beq.n	8004fac <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	695b      	ldr	r3, [r3, #20]
 8004fa4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	f403 53f8 	and.w	r3, r3, #7936	@ 0x1f00
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d005      	beq.n	8004fc2 <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d002      	beq.n	8004fd0 <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 f818 	bl	8005000 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8004fd0:	bf00      	nop
 8004fd2:	3710      	adds	r7, #16
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 8004fe0:	bf00      	nop
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 8004ff4:	bf00      	nop
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	7c1b      	ldrb	r3, [r3, #16]
 8005022:	2b01      	cmp	r3, #1
 8005024:	d101      	bne.n	800502a <HAL_DSI_SetGenericVCID+0x16>
 8005026:	2302      	movs	r3, #2
 8005028:	e016      	b.n	8005058 <HAL_DSI_SetGenericVCID+0x44>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2201      	movs	r2, #1
 800502e:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f022 0203 	bic.w	r2, r2, #3
 800503e:	631a      	str	r2, [r3, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	683a      	ldr	r2, [r7, #0]
 800504c:	430a      	orrs	r2, r1
 800504e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005056:	2300      	movs	r3, #0
}
 8005058:	4618      	mov	r0, r3
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	7c1b      	ldrb	r3, [r3, #16]
 8005072:	2b01      	cmp	r3, #1
 8005074:	d101      	bne.n	800507a <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 8005076:	2302      	movs	r3, #2
 8005078:	e0c5      	b.n	8005206 <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f042 0201 	orr.w	r2, r2, #1
 800508e:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f022 0201 	bic.w	r2, r2, #1
 80050a0:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f042 0201 	orr.w	r2, r2, #1
 80050b4:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68da      	ldr	r2, [r3, #12]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f022 0203 	bic.w	r2, r2, #3
 80050c6:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68d9      	ldr	r1, [r3, #12]
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	430a      	orrs	r2, r1
 80050d8:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	695a      	ldr	r2, [r3, #20]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f022 0207 	bic.w	r2, r2, #7
 80050e8:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	6959      	ldr	r1, [r3, #20]
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	69da      	ldr	r2, [r3, #28]
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	699b      	ldr	r3, [r3, #24]
 80050f8:	431a      	orrs	r2, r3
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	695b      	ldr	r3, [r3, #20]
 80050fe:	431a      	orrs	r2, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	430a      	orrs	r2, r1
 8005106:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	691a      	ldr	r2, [r3, #16]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f022 020f 	bic.w	r2, r2, #15
 8005116:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	6919      	ldr	r1, [r3, #16]
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	685a      	ldr	r2, [r3, #4]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	430a      	orrs	r2, r1
 8005128:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f022 020e 	bic.w	r2, r2, #14
 800513a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	005a      	lsls	r2, r3, #1
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	430a      	orrs	r2, r1
 8005152:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	6812      	ldr	r2, [r2, #0]
 8005160:	0c1b      	lsrs	r3, r3, #16
 8005162:	041b      	lsls	r3, r3, #16
 8005164:	6653      	str	r3, [r2, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	689a      	ldr	r2, [r3, #8]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	430a      	orrs	r2, r1
 8005176:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8005188:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	68da      	ldr	r2, [r3, #12]
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	431a      	orrs	r2, r3
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051a2:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80051a8:	431a      	orrs	r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	430a      	orrs	r2, r1
 80051b0:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f022 0201 	bic.w	r2, r2, #1
 80051c2:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	430a      	orrs	r2, r1
 80051d4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f042 0201 	orr.w	r2, r2, #1
 80051e6:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f042 0202 	orr.w	r2, r2, #2
 80051fa:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	370c      	adds	r7, #12
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
	...

08005214 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	7c1b      	ldrb	r3, [r3, #16]
 8005222:	2b01      	cmp	r3, #1
 8005224:	d101      	bne.n	800522a <HAL_DSI_ConfigCommand+0x16>
 8005226:	2302      	movs	r3, #2
 8005228:	e049      	b.n	80052be <HAL_DSI_ConfigCommand+0xaa>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2201      	movs	r2, #1
 800522e:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	4b24      	ldr	r3, [pc, #144]	@ (80052cc <HAL_DSI_ConfigCommand+0xb8>)
 800523c:	400b      	ands	r3, r1
 800523e:	6693      	str	r3, [r2, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800524e:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8005254:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 800525a:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8005260:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 8005266:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 800526c:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 8005272:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8005278:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 800527e:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 8005284:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                           LPCmd->LPDcsLongWrite      | \
 800528a:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	430a      	orrs	r2, r1
 8005292:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f022 0202 	bic.w	r2, r2, #2
 80052a2:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	430a      	orrs	r2, r1
 80052b4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	370c      	adds	r7, #12
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	fef080ff 	.word	0xfef080ff

080052d0 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	7c1b      	ldrb	r3, [r3, #16]
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d101      	bne.n	80052e6 <HAL_DSI_ConfigFlowControl+0x16>
 80052e2:	2302      	movs	r3, #2
 80052e4:	e016      	b.n	8005314 <HAL_DSI_ConfigFlowControl+0x44>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2201      	movs	r2, #1
 80052ea:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f022 021f 	bic.w	r2, r2, #31
 80052fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	683a      	ldr	r2, [r7, #0]
 8005308:	430a      	orrs	r2, r1
 800530a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005312:	2300      	movs	r3, #0
}
 8005314:	4618      	mov	r0, r3
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8005320:	b480      	push	{r7}
 8005322:	b085      	sub	sp, #20
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	7c1b      	ldrb	r3, [r3, #16]
 800532e:	2b01      	cmp	r3, #1
 8005330:	d101      	bne.n	8005336 <HAL_DSI_ConfigPhyTimer+0x16>
 8005332:	2302      	movs	r3, #2
 8005334:	e058      	b.n	80053e8 <HAL_DSI_ConfigPhyTimer+0xc8>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2201      	movs	r2, #1
 800533a:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	4293      	cmp	r3, r2
 8005346:	bf38      	it	cc
 8005348:	4613      	movcc	r3, r2
 800534a:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 800535c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	041a      	lsls	r2, r3, #16
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	431a      	orrs	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	430a      	orrs	r2, r1
 8005376:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 800538a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f8d3 109c 	ldr.w	r1, [r3, #156]	@ 0x9c
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	691a      	ldr	r2, [r3, #16]
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	041b      	lsls	r3, r3, #16
 80053a0:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80053a8:	431a      	orrs	r2, r3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	430a      	orrs	r2, r1
 80053b0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80053c4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	695b      	ldr	r3, [r3, #20]
 80053d4:	021a      	lsls	r2, r3, #8
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	430a      	orrs	r2, r1
 80053dc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3714      	adds	r7, #20
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	7c1b      	ldrb	r3, [r3, #16]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d101      	bne.n	800540a <HAL_DSI_ConfigHostTimeouts+0x16>
 8005406:	2302      	movs	r3, #2
 8005408:	e0b4      	b.n	8005574 <HAL_DSI_ConfigHostTimeouts+0x180>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2201      	movs	r2, #1
 800540e:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	689a      	ldr	r2, [r3, #8]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800541e:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	6899      	ldr	r1, [r3, #8]
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	021a      	lsls	r2, r3, #8
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	430a      	orrs	r2, r1
 8005432:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	b292      	uxth	r2, r2
 8005440:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	041a      	lsls	r2, r3, #16
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	430a      	orrs	r2, r1
 8005454:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	6812      	ldr	r2, [r2, #0]
 8005460:	0c1b      	lsrs	r3, r3, #16
 8005462:	041b      	lsls	r3, r3, #16
 8005464:	6793      	str	r3, [r2, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	689a      	ldr	r2, [r3, #8]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	430a      	orrs	r2, r1
 8005476:	679a      	str	r2, [r3, #120]	@ 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	6812      	ldr	r2, [r2, #0]
 8005482:	0c1b      	lsrs	r3, r3, #16
 8005484:	041b      	lsls	r3, r3, #16
 8005486:	67d3      	str	r3, [r2, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	68da      	ldr	r2, [r3, #12]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	430a      	orrs	r2, r1
 8005498:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	6812      	ldr	r2, [r2, #0]
 80054a6:	0c1b      	lsrs	r3, r3, #16
 80054a8:	041b      	lsls	r3, r3, #16
 80054aa:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	691a      	ldr	r2, [r3, #16]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	430a      	orrs	r2, r1
 80054c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	6812      	ldr	r2, [r2, #0]
 80054d0:	0c1b      	lsrs	r3, r3, #16
 80054d2:	041b      	lsls	r3, r3, #16
 80054d4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	695a      	ldr	r2, [r3, #20]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	430a      	orrs	r2, r1
 80054ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80054fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	699a      	ldr	r2, [r3, #24]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	430a      	orrs	r2, r1
 8005514:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	6812      	ldr	r2, [r2, #0]
 8005524:	0c1b      	lsrs	r3, r3, #16
 8005526:	041b      	lsls	r3, r3, #16
 8005528:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f8d3 1088 	ldr.w	r1, [r3, #136]	@ 0x88
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	69da      	ldr	r2, [r3, #28]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	430a      	orrs	r2, r1
 800553e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	6812      	ldr	r2, [r2, #0]
 800554e:	0c1b      	lsrs	r3, r3, #16
 8005550:	041b      	lsls	r3, r3, #16
 8005552:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	6a1a      	ldr	r2, [r3, #32]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	430a      	orrs	r2, r1
 8005568:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	7c1b      	ldrb	r3, [r3, #16]
 800558e:	2b01      	cmp	r3, #1
 8005590:	d101      	bne.n	8005596 <HAL_DSI_SetLowPowerRXFilter+0x16>
 8005592:	2302      	movs	r3, #2
 8005594:	e01b      	b.n	80055ce <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2201      	movs	r2, #1
 800559a:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f8d3 241c 	ldr.w	r2, [r3, #1052]	@ 0x41c
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f022 62c0 	bic.w	r2, r2, #100663296	@ 0x6000000
 80055ac:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f8d3 141c 	ldr.w	r1, [r3, #1052]	@ 0x41c
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	065a      	lsls	r2, r3, #25
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	430a      	orrs	r2, r1
 80055c2:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	370c      	adds	r7, #12
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr
	...

080055dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80055dc:	b480      	push	{r7}
 80055de:	b089      	sub	sp, #36	@ 0x24
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80055e6:	2300      	movs	r3, #0
 80055e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80055ea:	2300      	movs	r3, #0
 80055ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80055ee:	2300      	movs	r3, #0
 80055f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80055f2:	2300      	movs	r3, #0
 80055f4:	61fb      	str	r3, [r7, #28]
 80055f6:	e177      	b.n	80058e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80055f8:	2201      	movs	r2, #1
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005600:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	697a      	ldr	r2, [r7, #20]
 8005608:	4013      	ands	r3, r2
 800560a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800560c:	693a      	ldr	r2, [r7, #16]
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	429a      	cmp	r2, r3
 8005612:	f040 8166 	bne.w	80058e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	f003 0303 	and.w	r3, r3, #3
 800561e:	2b01      	cmp	r3, #1
 8005620:	d005      	beq.n	800562e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800562a:	2b02      	cmp	r3, #2
 800562c:	d130      	bne.n	8005690 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	005b      	lsls	r3, r3, #1
 8005638:	2203      	movs	r2, #3
 800563a:	fa02 f303 	lsl.w	r3, r2, r3
 800563e:	43db      	mvns	r3, r3
 8005640:	69ba      	ldr	r2, [r7, #24]
 8005642:	4013      	ands	r3, r2
 8005644:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	68da      	ldr	r2, [r3, #12]
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	005b      	lsls	r3, r3, #1
 800564e:	fa02 f303 	lsl.w	r3, r2, r3
 8005652:	69ba      	ldr	r2, [r7, #24]
 8005654:	4313      	orrs	r3, r2
 8005656:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	69ba      	ldr	r2, [r7, #24]
 800565c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005664:	2201      	movs	r2, #1
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	fa02 f303 	lsl.w	r3, r2, r3
 800566c:	43db      	mvns	r3, r3
 800566e:	69ba      	ldr	r2, [r7, #24]
 8005670:	4013      	ands	r3, r2
 8005672:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	091b      	lsrs	r3, r3, #4
 800567a:	f003 0201 	and.w	r2, r3, #1
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	fa02 f303 	lsl.w	r3, r2, r3
 8005684:	69ba      	ldr	r2, [r7, #24]
 8005686:	4313      	orrs	r3, r2
 8005688:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	69ba      	ldr	r2, [r7, #24]
 800568e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	f003 0303 	and.w	r3, r3, #3
 8005698:	2b03      	cmp	r3, #3
 800569a:	d017      	beq.n	80056cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	005b      	lsls	r3, r3, #1
 80056a6:	2203      	movs	r2, #3
 80056a8:	fa02 f303 	lsl.w	r3, r2, r3
 80056ac:	43db      	mvns	r3, r3
 80056ae:	69ba      	ldr	r2, [r7, #24]
 80056b0:	4013      	ands	r3, r2
 80056b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	689a      	ldr	r2, [r3, #8]
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	005b      	lsls	r3, r3, #1
 80056bc:	fa02 f303 	lsl.w	r3, r2, r3
 80056c0:	69ba      	ldr	r2, [r7, #24]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	69ba      	ldr	r2, [r7, #24]
 80056ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	f003 0303 	and.w	r3, r3, #3
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	d123      	bne.n	8005720 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	08da      	lsrs	r2, r3, #3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	3208      	adds	r2, #8
 80056e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	f003 0307 	and.w	r3, r3, #7
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	220f      	movs	r2, #15
 80056f0:	fa02 f303 	lsl.w	r3, r2, r3
 80056f4:	43db      	mvns	r3, r3
 80056f6:	69ba      	ldr	r2, [r7, #24]
 80056f8:	4013      	ands	r3, r2
 80056fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	691a      	ldr	r2, [r3, #16]
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	f003 0307 	and.w	r3, r3, #7
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	fa02 f303 	lsl.w	r3, r2, r3
 800570c:	69ba      	ldr	r2, [r7, #24]
 800570e:	4313      	orrs	r3, r2
 8005710:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	08da      	lsrs	r2, r3, #3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	3208      	adds	r2, #8
 800571a:	69b9      	ldr	r1, [r7, #24]
 800571c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	005b      	lsls	r3, r3, #1
 800572a:	2203      	movs	r2, #3
 800572c:	fa02 f303 	lsl.w	r3, r2, r3
 8005730:	43db      	mvns	r3, r3
 8005732:	69ba      	ldr	r2, [r7, #24]
 8005734:	4013      	ands	r3, r2
 8005736:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	f003 0203 	and.w	r2, r3, #3
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	005b      	lsls	r3, r3, #1
 8005744:	fa02 f303 	lsl.w	r3, r2, r3
 8005748:	69ba      	ldr	r2, [r7, #24]
 800574a:	4313      	orrs	r3, r2
 800574c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	69ba      	ldr	r2, [r7, #24]
 8005752:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800575c:	2b00      	cmp	r3, #0
 800575e:	f000 80c0 	beq.w	80058e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005762:	2300      	movs	r3, #0
 8005764:	60fb      	str	r3, [r7, #12]
 8005766:	4b66      	ldr	r3, [pc, #408]	@ (8005900 <HAL_GPIO_Init+0x324>)
 8005768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800576a:	4a65      	ldr	r2, [pc, #404]	@ (8005900 <HAL_GPIO_Init+0x324>)
 800576c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005770:	6453      	str	r3, [r2, #68]	@ 0x44
 8005772:	4b63      	ldr	r3, [pc, #396]	@ (8005900 <HAL_GPIO_Init+0x324>)
 8005774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005776:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800577a:	60fb      	str	r3, [r7, #12]
 800577c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800577e:	4a61      	ldr	r2, [pc, #388]	@ (8005904 <HAL_GPIO_Init+0x328>)
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	089b      	lsrs	r3, r3, #2
 8005784:	3302      	adds	r3, #2
 8005786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800578a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	f003 0303 	and.w	r3, r3, #3
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	220f      	movs	r2, #15
 8005796:	fa02 f303 	lsl.w	r3, r2, r3
 800579a:	43db      	mvns	r3, r3
 800579c:	69ba      	ldr	r2, [r7, #24]
 800579e:	4013      	ands	r3, r2
 80057a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a58      	ldr	r2, [pc, #352]	@ (8005908 <HAL_GPIO_Init+0x32c>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d037      	beq.n	800581a <HAL_GPIO_Init+0x23e>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a57      	ldr	r2, [pc, #348]	@ (800590c <HAL_GPIO_Init+0x330>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d031      	beq.n	8005816 <HAL_GPIO_Init+0x23a>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a56      	ldr	r2, [pc, #344]	@ (8005910 <HAL_GPIO_Init+0x334>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d02b      	beq.n	8005812 <HAL_GPIO_Init+0x236>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a55      	ldr	r2, [pc, #340]	@ (8005914 <HAL_GPIO_Init+0x338>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d025      	beq.n	800580e <HAL_GPIO_Init+0x232>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a54      	ldr	r2, [pc, #336]	@ (8005918 <HAL_GPIO_Init+0x33c>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d01f      	beq.n	800580a <HAL_GPIO_Init+0x22e>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a53      	ldr	r2, [pc, #332]	@ (800591c <HAL_GPIO_Init+0x340>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d019      	beq.n	8005806 <HAL_GPIO_Init+0x22a>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a52      	ldr	r2, [pc, #328]	@ (8005920 <HAL_GPIO_Init+0x344>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d013      	beq.n	8005802 <HAL_GPIO_Init+0x226>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a51      	ldr	r2, [pc, #324]	@ (8005924 <HAL_GPIO_Init+0x348>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d00d      	beq.n	80057fe <HAL_GPIO_Init+0x222>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a50      	ldr	r2, [pc, #320]	@ (8005928 <HAL_GPIO_Init+0x34c>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d007      	beq.n	80057fa <HAL_GPIO_Init+0x21e>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a4f      	ldr	r2, [pc, #316]	@ (800592c <HAL_GPIO_Init+0x350>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d101      	bne.n	80057f6 <HAL_GPIO_Init+0x21a>
 80057f2:	2309      	movs	r3, #9
 80057f4:	e012      	b.n	800581c <HAL_GPIO_Init+0x240>
 80057f6:	230a      	movs	r3, #10
 80057f8:	e010      	b.n	800581c <HAL_GPIO_Init+0x240>
 80057fa:	2308      	movs	r3, #8
 80057fc:	e00e      	b.n	800581c <HAL_GPIO_Init+0x240>
 80057fe:	2307      	movs	r3, #7
 8005800:	e00c      	b.n	800581c <HAL_GPIO_Init+0x240>
 8005802:	2306      	movs	r3, #6
 8005804:	e00a      	b.n	800581c <HAL_GPIO_Init+0x240>
 8005806:	2305      	movs	r3, #5
 8005808:	e008      	b.n	800581c <HAL_GPIO_Init+0x240>
 800580a:	2304      	movs	r3, #4
 800580c:	e006      	b.n	800581c <HAL_GPIO_Init+0x240>
 800580e:	2303      	movs	r3, #3
 8005810:	e004      	b.n	800581c <HAL_GPIO_Init+0x240>
 8005812:	2302      	movs	r3, #2
 8005814:	e002      	b.n	800581c <HAL_GPIO_Init+0x240>
 8005816:	2301      	movs	r3, #1
 8005818:	e000      	b.n	800581c <HAL_GPIO_Init+0x240>
 800581a:	2300      	movs	r3, #0
 800581c:	69fa      	ldr	r2, [r7, #28]
 800581e:	f002 0203 	and.w	r2, r2, #3
 8005822:	0092      	lsls	r2, r2, #2
 8005824:	4093      	lsls	r3, r2
 8005826:	69ba      	ldr	r2, [r7, #24]
 8005828:	4313      	orrs	r3, r2
 800582a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800582c:	4935      	ldr	r1, [pc, #212]	@ (8005904 <HAL_GPIO_Init+0x328>)
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	089b      	lsrs	r3, r3, #2
 8005832:	3302      	adds	r3, #2
 8005834:	69ba      	ldr	r2, [r7, #24]
 8005836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800583a:	4b3d      	ldr	r3, [pc, #244]	@ (8005930 <HAL_GPIO_Init+0x354>)
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	43db      	mvns	r3, r3
 8005844:	69ba      	ldr	r2, [r7, #24]
 8005846:	4013      	ands	r3, r2
 8005848:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d003      	beq.n	800585e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005856:	69ba      	ldr	r2, [r7, #24]
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	4313      	orrs	r3, r2
 800585c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800585e:	4a34      	ldr	r2, [pc, #208]	@ (8005930 <HAL_GPIO_Init+0x354>)
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005864:	4b32      	ldr	r3, [pc, #200]	@ (8005930 <HAL_GPIO_Init+0x354>)
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	43db      	mvns	r3, r3
 800586e:	69ba      	ldr	r2, [r7, #24]
 8005870:	4013      	ands	r3, r2
 8005872:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800587c:	2b00      	cmp	r3, #0
 800587e:	d003      	beq.n	8005888 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005880:	69ba      	ldr	r2, [r7, #24]
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	4313      	orrs	r3, r2
 8005886:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005888:	4a29      	ldr	r2, [pc, #164]	@ (8005930 <HAL_GPIO_Init+0x354>)
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800588e:	4b28      	ldr	r3, [pc, #160]	@ (8005930 <HAL_GPIO_Init+0x354>)
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	43db      	mvns	r3, r3
 8005898:	69ba      	ldr	r2, [r7, #24]
 800589a:	4013      	ands	r3, r2
 800589c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d003      	beq.n	80058b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80058aa:	69ba      	ldr	r2, [r7, #24]
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80058b2:	4a1f      	ldr	r2, [pc, #124]	@ (8005930 <HAL_GPIO_Init+0x354>)
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80058b8:	4b1d      	ldr	r3, [pc, #116]	@ (8005930 <HAL_GPIO_Init+0x354>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	43db      	mvns	r3, r3
 80058c2:	69ba      	ldr	r2, [r7, #24]
 80058c4:	4013      	ands	r3, r2
 80058c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d003      	beq.n	80058dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80058d4:	69ba      	ldr	r2, [r7, #24]
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	4313      	orrs	r3, r2
 80058da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80058dc:	4a14      	ldr	r2, [pc, #80]	@ (8005930 <HAL_GPIO_Init+0x354>)
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	3301      	adds	r3, #1
 80058e6:	61fb      	str	r3, [r7, #28]
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	2b0f      	cmp	r3, #15
 80058ec:	f67f ae84 	bls.w	80055f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80058f0:	bf00      	nop
 80058f2:	bf00      	nop
 80058f4:	3724      	adds	r7, #36	@ 0x24
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop
 8005900:	40023800 	.word	0x40023800
 8005904:	40013800 	.word	0x40013800
 8005908:	40020000 	.word	0x40020000
 800590c:	40020400 	.word	0x40020400
 8005910:	40020800 	.word	0x40020800
 8005914:	40020c00 	.word	0x40020c00
 8005918:	40021000 	.word	0x40021000
 800591c:	40021400 	.word	0x40021400
 8005920:	40021800 	.word	0x40021800
 8005924:	40021c00 	.word	0x40021c00
 8005928:	40022000 	.word	0x40022000
 800592c:	40022400 	.word	0x40022400
 8005930:	40013c00 	.word	0x40013c00

08005934 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	460b      	mov	r3, r1
 800593e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	691a      	ldr	r2, [r3, #16]
 8005944:	887b      	ldrh	r3, [r7, #2]
 8005946:	4013      	ands	r3, r2
 8005948:	2b00      	cmp	r3, #0
 800594a:	d002      	beq.n	8005952 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800594c:	2301      	movs	r3, #1
 800594e:	73fb      	strb	r3, [r7, #15]
 8005950:	e001      	b.n	8005956 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005952:	2300      	movs	r3, #0
 8005954:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005956:	7bfb      	ldrb	r3, [r7, #15]
}
 8005958:	4618      	mov	r0, r3
 800595a:	3714      	adds	r7, #20
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	460b      	mov	r3, r1
 800596e:	807b      	strh	r3, [r7, #2]
 8005970:	4613      	mov	r3, r2
 8005972:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005974:	787b      	ldrb	r3, [r7, #1]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d003      	beq.n	8005982 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800597a:	887a      	ldrh	r2, [r7, #2]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005980:	e003      	b.n	800598a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005982:	887b      	ldrh	r3, [r7, #2]
 8005984:	041a      	lsls	r2, r3, #16
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	619a      	str	r2, [r3, #24]
}
 800598a:	bf00      	nop
 800598c:	370c      	adds	r7, #12
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr
	...

08005998 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d101      	bne.n	80059aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e12b      	b.n	8005c02 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d106      	bne.n	80059c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f7fc fdce 	bl	8002560 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2224      	movs	r2, #36	@ 0x24
 80059c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f022 0201 	bic.w	r2, r2, #1
 80059da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80059ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80059fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80059fc:	f000 ff82 	bl	8006904 <HAL_RCC_GetPCLK1Freq>
 8005a00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	4a81      	ldr	r2, [pc, #516]	@ (8005c0c <HAL_I2C_Init+0x274>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d807      	bhi.n	8005a1c <HAL_I2C_Init+0x84>
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	4a80      	ldr	r2, [pc, #512]	@ (8005c10 <HAL_I2C_Init+0x278>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	bf94      	ite	ls
 8005a14:	2301      	movls	r3, #1
 8005a16:	2300      	movhi	r3, #0
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	e006      	b.n	8005a2a <HAL_I2C_Init+0x92>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	4a7d      	ldr	r2, [pc, #500]	@ (8005c14 <HAL_I2C_Init+0x27c>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	bf94      	ite	ls
 8005a24:	2301      	movls	r3, #1
 8005a26:	2300      	movhi	r3, #0
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d001      	beq.n	8005a32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e0e7      	b.n	8005c02 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	4a78      	ldr	r2, [pc, #480]	@ (8005c18 <HAL_I2C_Init+0x280>)
 8005a36:	fba2 2303 	umull	r2, r3, r2, r3
 8005a3a:	0c9b      	lsrs	r3, r3, #18
 8005a3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68ba      	ldr	r2, [r7, #8]
 8005a4e:	430a      	orrs	r2, r1
 8005a50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	6a1b      	ldr	r3, [r3, #32]
 8005a58:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	4a6a      	ldr	r2, [pc, #424]	@ (8005c0c <HAL_I2C_Init+0x274>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d802      	bhi.n	8005a6c <HAL_I2C_Init+0xd4>
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	3301      	adds	r3, #1
 8005a6a:	e009      	b.n	8005a80 <HAL_I2C_Init+0xe8>
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005a72:	fb02 f303 	mul.w	r3, r2, r3
 8005a76:	4a69      	ldr	r2, [pc, #420]	@ (8005c1c <HAL_I2C_Init+0x284>)
 8005a78:	fba2 2303 	umull	r2, r3, r2, r3
 8005a7c:	099b      	lsrs	r3, r3, #6
 8005a7e:	3301      	adds	r3, #1
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	6812      	ldr	r2, [r2, #0]
 8005a84:	430b      	orrs	r3, r1
 8005a86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	69db      	ldr	r3, [r3, #28]
 8005a8e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005a92:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	495c      	ldr	r1, [pc, #368]	@ (8005c0c <HAL_I2C_Init+0x274>)
 8005a9c:	428b      	cmp	r3, r1
 8005a9e:	d819      	bhi.n	8005ad4 <HAL_I2C_Init+0x13c>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	1e59      	subs	r1, r3, #1
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	005b      	lsls	r3, r3, #1
 8005aaa:	fbb1 f3f3 	udiv	r3, r1, r3
 8005aae:	1c59      	adds	r1, r3, #1
 8005ab0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005ab4:	400b      	ands	r3, r1
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00a      	beq.n	8005ad0 <HAL_I2C_Init+0x138>
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	1e59      	subs	r1, r3, #1
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	005b      	lsls	r3, r3, #1
 8005ac4:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ac8:	3301      	adds	r3, #1
 8005aca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ace:	e051      	b.n	8005b74 <HAL_I2C_Init+0x1dc>
 8005ad0:	2304      	movs	r3, #4
 8005ad2:	e04f      	b.n	8005b74 <HAL_I2C_Init+0x1dc>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d111      	bne.n	8005b00 <HAL_I2C_Init+0x168>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	1e58      	subs	r0, r3, #1
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6859      	ldr	r1, [r3, #4]
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	005b      	lsls	r3, r3, #1
 8005ae8:	440b      	add	r3, r1
 8005aea:	fbb0 f3f3 	udiv	r3, r0, r3
 8005aee:	3301      	adds	r3, #1
 8005af0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	bf0c      	ite	eq
 8005af8:	2301      	moveq	r3, #1
 8005afa:	2300      	movne	r3, #0
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	e012      	b.n	8005b26 <HAL_I2C_Init+0x18e>
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	1e58      	subs	r0, r3, #1
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6859      	ldr	r1, [r3, #4]
 8005b08:	460b      	mov	r3, r1
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	440b      	add	r3, r1
 8005b0e:	0099      	lsls	r1, r3, #2
 8005b10:	440b      	add	r3, r1
 8005b12:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b16:	3301      	adds	r3, #1
 8005b18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	bf0c      	ite	eq
 8005b20:	2301      	moveq	r3, #1
 8005b22:	2300      	movne	r3, #0
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d001      	beq.n	8005b2e <HAL_I2C_Init+0x196>
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e022      	b.n	8005b74 <HAL_I2C_Init+0x1dc>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d10e      	bne.n	8005b54 <HAL_I2C_Init+0x1bc>
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	1e58      	subs	r0, r3, #1
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6859      	ldr	r1, [r3, #4]
 8005b3e:	460b      	mov	r3, r1
 8005b40:	005b      	lsls	r3, r3, #1
 8005b42:	440b      	add	r3, r1
 8005b44:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b48:	3301      	adds	r3, #1
 8005b4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b52:	e00f      	b.n	8005b74 <HAL_I2C_Init+0x1dc>
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	1e58      	subs	r0, r3, #1
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6859      	ldr	r1, [r3, #4]
 8005b5c:	460b      	mov	r3, r1
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	440b      	add	r3, r1
 8005b62:	0099      	lsls	r1, r3, #2
 8005b64:	440b      	add	r3, r1
 8005b66:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b70:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005b74:	6879      	ldr	r1, [r7, #4]
 8005b76:	6809      	ldr	r1, [r1, #0]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	69da      	ldr	r2, [r3, #28]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a1b      	ldr	r3, [r3, #32]
 8005b8e:	431a      	orrs	r2, r3
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	430a      	orrs	r2, r1
 8005b96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005ba2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	6911      	ldr	r1, [r2, #16]
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	68d2      	ldr	r2, [r2, #12]
 8005bae:	4311      	orrs	r1, r2
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	6812      	ldr	r2, [r2, #0]
 8005bb4:	430b      	orrs	r3, r1
 8005bb6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	695a      	ldr	r2, [r3, #20]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	699b      	ldr	r3, [r3, #24]
 8005bca:	431a      	orrs	r2, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	430a      	orrs	r2, r1
 8005bd2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f042 0201 	orr.w	r2, r2, #1
 8005be2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2220      	movs	r2, #32
 8005bee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3710      	adds	r7, #16
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	000186a0 	.word	0x000186a0
 8005c10:	001e847f 	.word	0x001e847f
 8005c14:	003d08ff 	.word	0x003d08ff
 8005c18:	431bde83 	.word	0x431bde83
 8005c1c:	10624dd3 	.word	0x10624dd3

08005c20 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d101      	bne.n	8005c32 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e0bf      	b.n	8005db2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d106      	bne.n	8005c4c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f7fc fd08 	bl	800265c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2202      	movs	r2, #2
 8005c50:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	699a      	ldr	r2, [r3, #24]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8005c62:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	6999      	ldr	r1, [r3, #24]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	685a      	ldr	r2, [r3, #4]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005c78:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	430a      	orrs	r2, r1
 8005c86:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	6899      	ldr	r1, [r3, #8]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	4b4a      	ldr	r3, [pc, #296]	@ (8005dbc <HAL_LTDC_Init+0x19c>)
 8005c94:	400b      	ands	r3, r1
 8005c96:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	695b      	ldr	r3, [r3, #20]
 8005c9c:	041b      	lsls	r3, r3, #16
 8005c9e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	6899      	ldr	r1, [r3, #8]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	699a      	ldr	r2, [r3, #24]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	431a      	orrs	r2, r3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	430a      	orrs	r2, r1
 8005cb4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68d9      	ldr	r1, [r3, #12]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	4b3e      	ldr	r3, [pc, #248]	@ (8005dbc <HAL_LTDC_Init+0x19c>)
 8005cc2:	400b      	ands	r3, r1
 8005cc4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	69db      	ldr	r3, [r3, #28]
 8005cca:	041b      	lsls	r3, r3, #16
 8005ccc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68d9      	ldr	r1, [r3, #12]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a1a      	ldr	r2, [r3, #32]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	431a      	orrs	r2, r3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	430a      	orrs	r2, r1
 8005ce2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	6919      	ldr	r1, [r3, #16]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	4b33      	ldr	r3, [pc, #204]	@ (8005dbc <HAL_LTDC_Init+0x19c>)
 8005cf0:	400b      	ands	r3, r1
 8005cf2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cf8:	041b      	lsls	r3, r3, #16
 8005cfa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	6919      	ldr	r1, [r3, #16]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	431a      	orrs	r2, r3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	430a      	orrs	r2, r1
 8005d10:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	6959      	ldr	r1, [r3, #20]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	4b27      	ldr	r3, [pc, #156]	@ (8005dbc <HAL_LTDC_Init+0x19c>)
 8005d1e:	400b      	ands	r3, r1
 8005d20:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d26:	041b      	lsls	r3, r3, #16
 8005d28:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	6959      	ldr	r1, [r3, #20]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	431a      	orrs	r2, r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	430a      	orrs	r2, r1
 8005d3e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005d46:	021b      	lsls	r3, r3, #8
 8005d48:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005d50:	041b      	lsls	r3, r3, #16
 8005d52:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8005d62:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005d6a:	68ba      	ldr	r2, [r7, #8]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8005d76:	431a      	orrs	r2, r3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	430a      	orrs	r2, r1
 8005d7e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f042 0206 	orr.w	r2, r2, #6
 8005d8e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	699a      	ldr	r2, [r3, #24]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f042 0201 	orr.w	r2, r2, #1
 8005d9e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3710      	adds	r7, #16
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	f000f800 	.word	0xf000f800

08005dc0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dce:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dd6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f003 0304 	and.w	r3, r3, #4
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d023      	beq.n	8005e2a <HAL_LTDC_IRQHandler+0x6a>
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	f003 0304 	and.w	r3, r3, #4
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d01e      	beq.n	8005e2a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f022 0204 	bic.w	r2, r2, #4
 8005dfa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2204      	movs	r2, #4
 8005e02:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005e0a:	f043 0201 	orr.w	r2, r3, #1
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2204      	movs	r2, #4
 8005e18:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 f86f 	bl	8005f08 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f003 0302 	and.w	r3, r3, #2
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d023      	beq.n	8005e7c <HAL_LTDC_IRQHandler+0xbc>
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	f003 0302 	and.w	r3, r3, #2
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d01e      	beq.n	8005e7c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f022 0202 	bic.w	r2, r2, #2
 8005e4c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2202      	movs	r2, #2
 8005e54:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005e5c:	f043 0202 	orr.w	r2, r3, #2
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2204      	movs	r2, #4
 8005e6a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 f846 	bl	8005f08 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f003 0301 	and.w	r3, r3, #1
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d01b      	beq.n	8005ebe <HAL_LTDC_IRQHandler+0xfe>
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	f003 0301 	and.w	r3, r3, #1
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d016      	beq.n	8005ebe <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f022 0201 	bic.w	r2, r2, #1
 8005e9e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f000 f82f 	bl	8005f1c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f003 0308 	and.w	r3, r3, #8
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d01b      	beq.n	8005f00 <HAL_LTDC_IRQHandler+0x140>
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	f003 0308 	and.w	r3, r3, #8
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d016      	beq.n	8005f00 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f022 0208 	bic.w	r2, r2, #8
 8005ee0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2208      	movs	r2, #8
 8005ee8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2201      	movs	r2, #1
 8005eee:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 f818 	bl	8005f30 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005f00:	bf00      	nop
 8005f02:	3710      	adds	r7, #16
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005f10:	bf00      	nop
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8005f24:	bf00      	nop
 8005f26:	370c      	adds	r7, #12
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005f38:	bf00      	nop
 8005f3a:	370c      	adds	r7, #12
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005f44:	b5b0      	push	{r4, r5, r7, lr}
 8005f46:	b084      	sub	sp, #16
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	60b9      	str	r1, [r7, #8]
 8005f4e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d101      	bne.n	8005f5e <HAL_LTDC_ConfigLayer+0x1a>
 8005f5a:	2302      	movs	r3, #2
 8005f5c:	e02c      	b.n	8005fb8 <HAL_LTDC_ConfigLayer+0x74>
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2201      	movs	r2, #1
 8005f62:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2202      	movs	r2, #2
 8005f6a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2134      	movs	r1, #52	@ 0x34
 8005f74:	fb01 f303 	mul.w	r3, r1, r3
 8005f78:	4413      	add	r3, r2
 8005f7a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	4614      	mov	r4, r2
 8005f82:	461d      	mov	r5, r3
 8005f84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f90:	682b      	ldr	r3, [r5, #0]
 8005f92:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	68b9      	ldr	r1, [r7, #8]
 8005f98:	68f8      	ldr	r0, [r7, #12]
 8005f9a:	f000 f811 	bl	8005fc0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8005fb6:	2300      	movs	r3, #0
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3710      	adds	r7, #16
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bdb0      	pop	{r4, r5, r7, pc}

08005fc0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b089      	sub	sp, #36	@ 0x24
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	685a      	ldr	r2, [r3, #4]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	0c1b      	lsrs	r3, r3, #16
 8005fd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fdc:	4413      	add	r3, r2
 8005fde:	041b      	lsls	r3, r3, #16
 8005fe0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	01db      	lsls	r3, r3, #7
 8005fec:	4413      	add	r3, r2
 8005fee:	3384      	adds	r3, #132	@ 0x84
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	6812      	ldr	r2, [r2, #0]
 8005ff6:	4611      	mov	r1, r2
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	01d2      	lsls	r2, r2, #7
 8005ffc:	440a      	add	r2, r1
 8005ffe:	3284      	adds	r2, #132	@ 0x84
 8006000:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8006004:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	0c1b      	lsrs	r3, r3, #16
 8006012:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006016:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006018:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4619      	mov	r1, r3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	01db      	lsls	r3, r3, #7
 8006024:	440b      	add	r3, r1
 8006026:	3384      	adds	r3, #132	@ 0x84
 8006028:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800602e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	68da      	ldr	r2, [r3, #12]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800603e:	4413      	add	r3, r2
 8006040:	041b      	lsls	r3, r3, #16
 8006042:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	461a      	mov	r2, r3
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	01db      	lsls	r3, r3, #7
 800604e:	4413      	add	r3, r2
 8006050:	3384      	adds	r3, #132	@ 0x84
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	6812      	ldr	r2, [r2, #0]
 8006058:	4611      	mov	r1, r2
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	01d2      	lsls	r2, r2, #7
 800605e:	440a      	add	r2, r1
 8006060:	3284      	adds	r2, #132	@ 0x84
 8006062:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8006066:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	689a      	ldr	r2, [r3, #8]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006076:	4413      	add	r3, r2
 8006078:	1c5a      	adds	r2, r3, #1
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4619      	mov	r1, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	01db      	lsls	r3, r3, #7
 8006084:	440b      	add	r3, r1
 8006086:	3384      	adds	r3, #132	@ 0x84
 8006088:	4619      	mov	r1, r3
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	4313      	orrs	r3, r2
 800608e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	461a      	mov	r2, r3
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	01db      	lsls	r3, r3, #7
 800609a:	4413      	add	r3, r2
 800609c:	3384      	adds	r3, #132	@ 0x84
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	68fa      	ldr	r2, [r7, #12]
 80060a2:	6812      	ldr	r2, [r2, #0]
 80060a4:	4611      	mov	r1, r2
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	01d2      	lsls	r2, r2, #7
 80060aa:	440a      	add	r2, r1
 80060ac:	3284      	adds	r2, #132	@ 0x84
 80060ae:	f023 0307 	bic.w	r3, r3, #7
 80060b2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	461a      	mov	r2, r3
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	01db      	lsls	r3, r3, #7
 80060be:	4413      	add	r3, r2
 80060c0:	3384      	adds	r3, #132	@ 0x84
 80060c2:	461a      	mov	r2, r3
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80060d0:	021b      	lsls	r3, r3, #8
 80060d2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80060da:	041b      	lsls	r3, r3, #16
 80060dc:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	699b      	ldr	r3, [r3, #24]
 80060e2:	061b      	lsls	r3, r3, #24
 80060e4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	461a      	mov	r2, r3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	01db      	lsls	r3, r3, #7
 80060f0:	4413      	add	r3, r2
 80060f2:	3384      	adds	r3, #132	@ 0x84
 80060f4:	699b      	ldr	r3, [r3, #24]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	461a      	mov	r2, r3
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	01db      	lsls	r3, r3, #7
 8006100:	4413      	add	r3, r2
 8006102:	3384      	adds	r3, #132	@ 0x84
 8006104:	461a      	mov	r2, r3
 8006106:	2300      	movs	r3, #0
 8006108:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006110:	461a      	mov	r2, r3
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	431a      	orrs	r2, r3
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	431a      	orrs	r2, r3
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4619      	mov	r1, r3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	01db      	lsls	r3, r3, #7
 8006124:	440b      	add	r3, r1
 8006126:	3384      	adds	r3, #132	@ 0x84
 8006128:	4619      	mov	r1, r3
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	4313      	orrs	r3, r2
 800612e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	461a      	mov	r2, r3
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	01db      	lsls	r3, r3, #7
 800613a:	4413      	add	r3, r2
 800613c:	3384      	adds	r3, #132	@ 0x84
 800613e:	695b      	ldr	r3, [r3, #20]
 8006140:	68fa      	ldr	r2, [r7, #12]
 8006142:	6812      	ldr	r2, [r2, #0]
 8006144:	4611      	mov	r1, r2
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	01d2      	lsls	r2, r2, #7
 800614a:	440a      	add	r2, r1
 800614c:	3284      	adds	r2, #132	@ 0x84
 800614e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006152:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	461a      	mov	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	01db      	lsls	r3, r3, #7
 800615e:	4413      	add	r3, r2
 8006160:	3384      	adds	r3, #132	@ 0x84
 8006162:	461a      	mov	r2, r3
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	695b      	ldr	r3, [r3, #20]
 8006168:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	461a      	mov	r2, r3
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	01db      	lsls	r3, r3, #7
 8006174:	4413      	add	r3, r2
 8006176:	3384      	adds	r3, #132	@ 0x84
 8006178:	69db      	ldr	r3, [r3, #28]
 800617a:	68fa      	ldr	r2, [r7, #12]
 800617c:	6812      	ldr	r2, [r2, #0]
 800617e:	4611      	mov	r1, r2
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	01d2      	lsls	r2, r2, #7
 8006184:	440a      	add	r2, r1
 8006186:	3284      	adds	r2, #132	@ 0x84
 8006188:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800618c:	f023 0307 	bic.w	r3, r3, #7
 8006190:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	69da      	ldr	r2, [r3, #28]
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	6a1b      	ldr	r3, [r3, #32]
 800619a:	68f9      	ldr	r1, [r7, #12]
 800619c:	6809      	ldr	r1, [r1, #0]
 800619e:	4608      	mov	r0, r1
 80061a0:	6879      	ldr	r1, [r7, #4]
 80061a2:	01c9      	lsls	r1, r1, #7
 80061a4:	4401      	add	r1, r0
 80061a6:	3184      	adds	r1, #132	@ 0x84
 80061a8:	4313      	orrs	r3, r2
 80061aa:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	461a      	mov	r2, r3
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	01db      	lsls	r3, r3, #7
 80061b6:	4413      	add	r3, r2
 80061b8:	3384      	adds	r3, #132	@ 0x84
 80061ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	461a      	mov	r2, r3
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	01db      	lsls	r3, r3, #7
 80061c6:	4413      	add	r3, r2
 80061c8:	3384      	adds	r3, #132	@ 0x84
 80061ca:	461a      	mov	r2, r3
 80061cc:	2300      	movs	r3, #0
 80061ce:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	461a      	mov	r2, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	01db      	lsls	r3, r3, #7
 80061da:	4413      	add	r3, r2
 80061dc:	3384      	adds	r3, #132	@ 0x84
 80061de:	461a      	mov	r2, r3
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e4:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d102      	bne.n	80061f4 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80061ee:	2304      	movs	r3, #4
 80061f0:	61fb      	str	r3, [r7, #28]
 80061f2:	e01b      	b.n	800622c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d102      	bne.n	8006202 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80061fc:	2303      	movs	r3, #3
 80061fe:	61fb      	str	r3, [r7, #28]
 8006200:	e014      	b.n	800622c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	2b04      	cmp	r3, #4
 8006208:	d00b      	beq.n	8006222 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800620e:	2b02      	cmp	r3, #2
 8006210:	d007      	beq.n	8006222 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006216:	2b03      	cmp	r3, #3
 8006218:	d003      	beq.n	8006222 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800621e:	2b07      	cmp	r3, #7
 8006220:	d102      	bne.n	8006228 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8006222:	2302      	movs	r3, #2
 8006224:	61fb      	str	r3, [r7, #28]
 8006226:	e001      	b.n	800622c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8006228:	2301      	movs	r3, #1
 800622a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	461a      	mov	r2, r3
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	01db      	lsls	r3, r3, #7
 8006236:	4413      	add	r3, r2
 8006238:	3384      	adds	r3, #132	@ 0x84
 800623a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	6812      	ldr	r2, [r2, #0]
 8006240:	4611      	mov	r1, r2
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	01d2      	lsls	r2, r2, #7
 8006246:	440a      	add	r2, r1
 8006248:	3284      	adds	r2, #132	@ 0x84
 800624a:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800624e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006254:	69fa      	ldr	r2, [r7, #28]
 8006256:	fb02 f303 	mul.w	r3, r2, r3
 800625a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	6859      	ldr	r1, [r3, #4]
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	1acb      	subs	r3, r1, r3
 8006266:	69f9      	ldr	r1, [r7, #28]
 8006268:	fb01 f303 	mul.w	r3, r1, r3
 800626c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800626e:	68f9      	ldr	r1, [r7, #12]
 8006270:	6809      	ldr	r1, [r1, #0]
 8006272:	4608      	mov	r0, r1
 8006274:	6879      	ldr	r1, [r7, #4]
 8006276:	01c9      	lsls	r1, r1, #7
 8006278:	4401      	add	r1, r0
 800627a:	3184      	adds	r1, #132	@ 0x84
 800627c:	4313      	orrs	r3, r2
 800627e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	461a      	mov	r2, r3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	01db      	lsls	r3, r3, #7
 800628a:	4413      	add	r3, r2
 800628c:	3384      	adds	r3, #132	@ 0x84
 800628e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	6812      	ldr	r2, [r2, #0]
 8006294:	4611      	mov	r1, r2
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	01d2      	lsls	r2, r2, #7
 800629a:	440a      	add	r2, r1
 800629c:	3284      	adds	r2, #132	@ 0x84
 800629e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80062a2:	f023 0307 	bic.w	r3, r3, #7
 80062a6:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	461a      	mov	r2, r3
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	01db      	lsls	r3, r3, #7
 80062b2:	4413      	add	r3, r2
 80062b4:	3384      	adds	r3, #132	@ 0x84
 80062b6:	461a      	mov	r2, r3
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062bc:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	461a      	mov	r2, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	01db      	lsls	r3, r3, #7
 80062c8:	4413      	add	r3, r2
 80062ca:	3384      	adds	r3, #132	@ 0x84
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	6812      	ldr	r2, [r2, #0]
 80062d2:	4611      	mov	r1, r2
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	01d2      	lsls	r2, r2, #7
 80062d8:	440a      	add	r2, r1
 80062da:	3284      	adds	r2, #132	@ 0x84
 80062dc:	f043 0301 	orr.w	r3, r3, #1
 80062e0:	6013      	str	r3, [r2, #0]
}
 80062e2:	bf00      	nop
 80062e4:	3724      	adds	r7, #36	@ 0x24
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr
	...

080062f0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b082      	sub	sp, #8
 80062f4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80062f6:	2300      	movs	r3, #0
 80062f8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80062fa:	2300      	movs	r3, #0
 80062fc:	603b      	str	r3, [r7, #0]
 80062fe:	4b20      	ldr	r3, [pc, #128]	@ (8006380 <HAL_PWREx_EnableOverDrive+0x90>)
 8006300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006302:	4a1f      	ldr	r2, [pc, #124]	@ (8006380 <HAL_PWREx_EnableOverDrive+0x90>)
 8006304:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006308:	6413      	str	r3, [r2, #64]	@ 0x40
 800630a:	4b1d      	ldr	r3, [pc, #116]	@ (8006380 <HAL_PWREx_EnableOverDrive+0x90>)
 800630c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800630e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006312:	603b      	str	r3, [r7, #0]
 8006314:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006316:	4b1b      	ldr	r3, [pc, #108]	@ (8006384 <HAL_PWREx_EnableOverDrive+0x94>)
 8006318:	2201      	movs	r2, #1
 800631a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800631c:	f7fc ff3a 	bl	8003194 <HAL_GetTick>
 8006320:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006322:	e009      	b.n	8006338 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006324:	f7fc ff36 	bl	8003194 <HAL_GetTick>
 8006328:	4602      	mov	r2, r0
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006332:	d901      	bls.n	8006338 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006334:	2303      	movs	r3, #3
 8006336:	e01f      	b.n	8006378 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006338:	4b13      	ldr	r3, [pc, #76]	@ (8006388 <HAL_PWREx_EnableOverDrive+0x98>)
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006340:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006344:	d1ee      	bne.n	8006324 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006346:	4b11      	ldr	r3, [pc, #68]	@ (800638c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006348:	2201      	movs	r2, #1
 800634a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800634c:	f7fc ff22 	bl	8003194 <HAL_GetTick>
 8006350:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006352:	e009      	b.n	8006368 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006354:	f7fc ff1e 	bl	8003194 <HAL_GetTick>
 8006358:	4602      	mov	r2, r0
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	1ad3      	subs	r3, r2, r3
 800635e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006362:	d901      	bls.n	8006368 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006364:	2303      	movs	r3, #3
 8006366:	e007      	b.n	8006378 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006368:	4b07      	ldr	r3, [pc, #28]	@ (8006388 <HAL_PWREx_EnableOverDrive+0x98>)
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006370:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006374:	d1ee      	bne.n	8006354 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	3708      	adds	r7, #8
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}
 8006380:	40023800 	.word	0x40023800
 8006384:	420e0040 	.word	0x420e0040
 8006388:	40007000 	.word	0x40007000
 800638c:	420e0044 	.word	0x420e0044

08006390 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b086      	sub	sp, #24
 8006394:	af02      	add	r7, sp, #8
 8006396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006398:	f7fc fefc 	bl	8003194 <HAL_GetTick>
 800639c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d101      	bne.n	80063a8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	e069      	b.n	800647c <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d10b      	bne.n	80063cc <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f7fc f975 	bl	80026ac <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80063c2:	f241 3188 	movw	r1, #5000	@ 0x1388
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 f85e 	bl	8006488 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	3b01      	subs	r3, #1
 80063dc:	021a      	lsls	r2, r3, #8
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	430a      	orrs	r2, r1
 80063e4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063ea:	9300      	str	r3, [sp, #0]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2200      	movs	r2, #0
 80063f0:	2120      	movs	r1, #32
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 f856 	bl	80064a4 <QSPI_WaitFlagStateUntilTimeout>
 80063f8:	4603      	mov	r3, r0
 80063fa:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80063fc:	7afb      	ldrb	r3, [r7, #11]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d137      	bne.n	8006472 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800640c:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	6852      	ldr	r2, [r2, #4]
 8006414:	0611      	lsls	r1, r2, #24
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	68d2      	ldr	r2, [r2, #12]
 800641a:	4311      	orrs	r1, r2
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	69d2      	ldr	r2, [r2, #28]
 8006420:	4311      	orrs	r1, r2
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	6a12      	ldr	r2, [r2, #32]
 8006426:	4311      	orrs	r1, r2
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	6812      	ldr	r2, [r2, #0]
 800642c:	430b      	orrs	r3, r1
 800642e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	685a      	ldr	r2, [r3, #4]
 8006436:	4b13      	ldr	r3, [pc, #76]	@ (8006484 <HAL_QSPI_Init+0xf4>)
 8006438:	4013      	ands	r3, r2
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	6912      	ldr	r2, [r2, #16]
 800643e:	0411      	lsls	r1, r2, #16
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	6952      	ldr	r2, [r2, #20]
 8006444:	4311      	orrs	r1, r2
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	6992      	ldr	r2, [r2, #24]
 800644a:	4311      	orrs	r1, r2
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	6812      	ldr	r2, [r2, #0]
 8006450:	430b      	orrs	r3, r1
 8006452:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f042 0201 	orr.w	r2, r2, #1
 8006462:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2201      	movs	r2, #1
 800646e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 800647a:	7afb      	ldrb	r3, [r7, #11]
}
 800647c:	4618      	mov	r0, r3
 800647e:	3710      	adds	r7, #16
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}
 8006484:	ffe0f8fe 	.word	0xffe0f8fe

08006488 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	683a      	ldr	r2, [r7, #0]
 8006496:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8006498:	bf00      	nop
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr

080064a4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b084      	sub	sp, #16
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	60b9      	str	r1, [r7, #8]
 80064ae:	603b      	str	r3, [r7, #0]
 80064b0:	4613      	mov	r3, r2
 80064b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80064b4:	e01a      	b.n	80064ec <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064bc:	d016      	beq.n	80064ec <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064be:	f7fc fe69 	bl	8003194 <HAL_GetTick>
 80064c2:	4602      	mov	r2, r0
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	1ad3      	subs	r3, r2, r3
 80064c8:	69ba      	ldr	r2, [r7, #24]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d302      	bcc.n	80064d4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d10b      	bne.n	80064ec <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2204      	movs	r2, #4
 80064d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064e0:	f043 0201 	orr.w	r2, r3, #1
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	e00e      	b.n	800650a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	689a      	ldr	r2, [r3, #8]
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	4013      	ands	r3, r2
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	bf14      	ite	ne
 80064fa:	2301      	movne	r3, #1
 80064fc:	2300      	moveq	r3, #0
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	461a      	mov	r2, r3
 8006502:	79fb      	ldrb	r3, [r7, #7]
 8006504:	429a      	cmp	r2, r3
 8006506:	d1d6      	bne.n	80064b6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006508:	2300      	movs	r3, #0
}
 800650a:	4618      	mov	r0, r3
 800650c:	3710      	adds	r7, #16
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
	...

08006514 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b084      	sub	sp, #16
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d101      	bne.n	8006528 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	e0cc      	b.n	80066c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006528:	4b68      	ldr	r3, [pc, #416]	@ (80066cc <HAL_RCC_ClockConfig+0x1b8>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 030f 	and.w	r3, r3, #15
 8006530:	683a      	ldr	r2, [r7, #0]
 8006532:	429a      	cmp	r2, r3
 8006534:	d90c      	bls.n	8006550 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006536:	4b65      	ldr	r3, [pc, #404]	@ (80066cc <HAL_RCC_ClockConfig+0x1b8>)
 8006538:	683a      	ldr	r2, [r7, #0]
 800653a:	b2d2      	uxtb	r2, r2
 800653c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800653e:	4b63      	ldr	r3, [pc, #396]	@ (80066cc <HAL_RCC_ClockConfig+0x1b8>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f003 030f 	and.w	r3, r3, #15
 8006546:	683a      	ldr	r2, [r7, #0]
 8006548:	429a      	cmp	r2, r3
 800654a:	d001      	beq.n	8006550 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	e0b8      	b.n	80066c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 0302 	and.w	r3, r3, #2
 8006558:	2b00      	cmp	r3, #0
 800655a:	d020      	beq.n	800659e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 0304 	and.w	r3, r3, #4
 8006564:	2b00      	cmp	r3, #0
 8006566:	d005      	beq.n	8006574 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006568:	4b59      	ldr	r3, [pc, #356]	@ (80066d0 <HAL_RCC_ClockConfig+0x1bc>)
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	4a58      	ldr	r2, [pc, #352]	@ (80066d0 <HAL_RCC_ClockConfig+0x1bc>)
 800656e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006572:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f003 0308 	and.w	r3, r3, #8
 800657c:	2b00      	cmp	r3, #0
 800657e:	d005      	beq.n	800658c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006580:	4b53      	ldr	r3, [pc, #332]	@ (80066d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	4a52      	ldr	r2, [pc, #328]	@ (80066d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006586:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800658a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800658c:	4b50      	ldr	r3, [pc, #320]	@ (80066d0 <HAL_RCC_ClockConfig+0x1bc>)
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	494d      	ldr	r1, [pc, #308]	@ (80066d0 <HAL_RCC_ClockConfig+0x1bc>)
 800659a:	4313      	orrs	r3, r2
 800659c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 0301 	and.w	r3, r3, #1
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d044      	beq.n	8006634 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d107      	bne.n	80065c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065b2:	4b47      	ldr	r3, [pc, #284]	@ (80066d0 <HAL_RCC_ClockConfig+0x1bc>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d119      	bne.n	80065f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	e07f      	b.n	80066c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	2b02      	cmp	r3, #2
 80065c8:	d003      	beq.n	80065d2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80065ce:	2b03      	cmp	r3, #3
 80065d0:	d107      	bne.n	80065e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065d2:	4b3f      	ldr	r3, [pc, #252]	@ (80066d0 <HAL_RCC_ClockConfig+0x1bc>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d109      	bne.n	80065f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	e06f      	b.n	80066c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065e2:	4b3b      	ldr	r3, [pc, #236]	@ (80066d0 <HAL_RCC_ClockConfig+0x1bc>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f003 0302 	and.w	r3, r3, #2
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d101      	bne.n	80065f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	e067      	b.n	80066c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80065f2:	4b37      	ldr	r3, [pc, #220]	@ (80066d0 <HAL_RCC_ClockConfig+0x1bc>)
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	f023 0203 	bic.w	r2, r3, #3
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	4934      	ldr	r1, [pc, #208]	@ (80066d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006600:	4313      	orrs	r3, r2
 8006602:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006604:	f7fc fdc6 	bl	8003194 <HAL_GetTick>
 8006608:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800660a:	e00a      	b.n	8006622 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800660c:	f7fc fdc2 	bl	8003194 <HAL_GetTick>
 8006610:	4602      	mov	r2, r0
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	1ad3      	subs	r3, r2, r3
 8006616:	f241 3288 	movw	r2, #5000	@ 0x1388
 800661a:	4293      	cmp	r3, r2
 800661c:	d901      	bls.n	8006622 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800661e:	2303      	movs	r3, #3
 8006620:	e04f      	b.n	80066c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006622:	4b2b      	ldr	r3, [pc, #172]	@ (80066d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	f003 020c 	and.w	r2, r3, #12
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	429a      	cmp	r2, r3
 8006632:	d1eb      	bne.n	800660c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006634:	4b25      	ldr	r3, [pc, #148]	@ (80066cc <HAL_RCC_ClockConfig+0x1b8>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 030f 	and.w	r3, r3, #15
 800663c:	683a      	ldr	r2, [r7, #0]
 800663e:	429a      	cmp	r2, r3
 8006640:	d20c      	bcs.n	800665c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006642:	4b22      	ldr	r3, [pc, #136]	@ (80066cc <HAL_RCC_ClockConfig+0x1b8>)
 8006644:	683a      	ldr	r2, [r7, #0]
 8006646:	b2d2      	uxtb	r2, r2
 8006648:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800664a:	4b20      	ldr	r3, [pc, #128]	@ (80066cc <HAL_RCC_ClockConfig+0x1b8>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f003 030f 	and.w	r3, r3, #15
 8006652:	683a      	ldr	r2, [r7, #0]
 8006654:	429a      	cmp	r2, r3
 8006656:	d001      	beq.n	800665c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	e032      	b.n	80066c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 0304 	and.w	r3, r3, #4
 8006664:	2b00      	cmp	r3, #0
 8006666:	d008      	beq.n	800667a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006668:	4b19      	ldr	r3, [pc, #100]	@ (80066d0 <HAL_RCC_ClockConfig+0x1bc>)
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	4916      	ldr	r1, [pc, #88]	@ (80066d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006676:	4313      	orrs	r3, r2
 8006678:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f003 0308 	and.w	r3, r3, #8
 8006682:	2b00      	cmp	r3, #0
 8006684:	d009      	beq.n	800669a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006686:	4b12      	ldr	r3, [pc, #72]	@ (80066d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	00db      	lsls	r3, r3, #3
 8006694:	490e      	ldr	r1, [pc, #56]	@ (80066d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006696:	4313      	orrs	r3, r2
 8006698:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800669a:	f000 f821 	bl	80066e0 <HAL_RCC_GetSysClockFreq>
 800669e:	4602      	mov	r2, r0
 80066a0:	4b0b      	ldr	r3, [pc, #44]	@ (80066d0 <HAL_RCC_ClockConfig+0x1bc>)
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	091b      	lsrs	r3, r3, #4
 80066a6:	f003 030f 	and.w	r3, r3, #15
 80066aa:	490a      	ldr	r1, [pc, #40]	@ (80066d4 <HAL_RCC_ClockConfig+0x1c0>)
 80066ac:	5ccb      	ldrb	r3, [r1, r3]
 80066ae:	fa22 f303 	lsr.w	r3, r2, r3
 80066b2:	4a09      	ldr	r2, [pc, #36]	@ (80066d8 <HAL_RCC_ClockConfig+0x1c4>)
 80066b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80066b6:	4b09      	ldr	r3, [pc, #36]	@ (80066dc <HAL_RCC_ClockConfig+0x1c8>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4618      	mov	r0, r3
 80066bc:	f7fc fb60 	bl	8002d80 <HAL_InitTick>

  return HAL_OK;
 80066c0:	2300      	movs	r3, #0
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3710      	adds	r7, #16
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}
 80066ca:	bf00      	nop
 80066cc:	40023c00 	.word	0x40023c00
 80066d0:	40023800 	.word	0x40023800
 80066d4:	080120d0 	.word	0x080120d0
 80066d8:	20000000 	.word	0x20000000
 80066dc:	20000004 	.word	0x20000004

080066e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066e4:	b094      	sub	sp, #80	@ 0x50
 80066e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80066e8:	2300      	movs	r3, #0
 80066ea:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80066ec:	2300      	movs	r3, #0
 80066ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80066f0:	2300      	movs	r3, #0
 80066f2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80066f4:	2300      	movs	r3, #0
 80066f6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80066f8:	4b79      	ldr	r3, [pc, #484]	@ (80068e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	f003 030c 	and.w	r3, r3, #12
 8006700:	2b08      	cmp	r3, #8
 8006702:	d00d      	beq.n	8006720 <HAL_RCC_GetSysClockFreq+0x40>
 8006704:	2b08      	cmp	r3, #8
 8006706:	f200 80e1 	bhi.w	80068cc <HAL_RCC_GetSysClockFreq+0x1ec>
 800670a:	2b00      	cmp	r3, #0
 800670c:	d002      	beq.n	8006714 <HAL_RCC_GetSysClockFreq+0x34>
 800670e:	2b04      	cmp	r3, #4
 8006710:	d003      	beq.n	800671a <HAL_RCC_GetSysClockFreq+0x3a>
 8006712:	e0db      	b.n	80068cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006714:	4b73      	ldr	r3, [pc, #460]	@ (80068e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006716:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006718:	e0db      	b.n	80068d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800671a:	4b73      	ldr	r3, [pc, #460]	@ (80068e8 <HAL_RCC_GetSysClockFreq+0x208>)
 800671c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800671e:	e0d8      	b.n	80068d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006720:	4b6f      	ldr	r3, [pc, #444]	@ (80068e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006728:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800672a:	4b6d      	ldr	r3, [pc, #436]	@ (80068e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006732:	2b00      	cmp	r3, #0
 8006734:	d063      	beq.n	80067fe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006736:	4b6a      	ldr	r3, [pc, #424]	@ (80068e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	099b      	lsrs	r3, r3, #6
 800673c:	2200      	movs	r2, #0
 800673e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006740:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006744:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006748:	633b      	str	r3, [r7, #48]	@ 0x30
 800674a:	2300      	movs	r3, #0
 800674c:	637b      	str	r3, [r7, #52]	@ 0x34
 800674e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006752:	4622      	mov	r2, r4
 8006754:	462b      	mov	r3, r5
 8006756:	f04f 0000 	mov.w	r0, #0
 800675a:	f04f 0100 	mov.w	r1, #0
 800675e:	0159      	lsls	r1, r3, #5
 8006760:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006764:	0150      	lsls	r0, r2, #5
 8006766:	4602      	mov	r2, r0
 8006768:	460b      	mov	r3, r1
 800676a:	4621      	mov	r1, r4
 800676c:	1a51      	subs	r1, r2, r1
 800676e:	6139      	str	r1, [r7, #16]
 8006770:	4629      	mov	r1, r5
 8006772:	eb63 0301 	sbc.w	r3, r3, r1
 8006776:	617b      	str	r3, [r7, #20]
 8006778:	f04f 0200 	mov.w	r2, #0
 800677c:	f04f 0300 	mov.w	r3, #0
 8006780:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006784:	4659      	mov	r1, fp
 8006786:	018b      	lsls	r3, r1, #6
 8006788:	4651      	mov	r1, sl
 800678a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800678e:	4651      	mov	r1, sl
 8006790:	018a      	lsls	r2, r1, #6
 8006792:	4651      	mov	r1, sl
 8006794:	ebb2 0801 	subs.w	r8, r2, r1
 8006798:	4659      	mov	r1, fp
 800679a:	eb63 0901 	sbc.w	r9, r3, r1
 800679e:	f04f 0200 	mov.w	r2, #0
 80067a2:	f04f 0300 	mov.w	r3, #0
 80067a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80067aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80067ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80067b2:	4690      	mov	r8, r2
 80067b4:	4699      	mov	r9, r3
 80067b6:	4623      	mov	r3, r4
 80067b8:	eb18 0303 	adds.w	r3, r8, r3
 80067bc:	60bb      	str	r3, [r7, #8]
 80067be:	462b      	mov	r3, r5
 80067c0:	eb49 0303 	adc.w	r3, r9, r3
 80067c4:	60fb      	str	r3, [r7, #12]
 80067c6:	f04f 0200 	mov.w	r2, #0
 80067ca:	f04f 0300 	mov.w	r3, #0
 80067ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80067d2:	4629      	mov	r1, r5
 80067d4:	024b      	lsls	r3, r1, #9
 80067d6:	4621      	mov	r1, r4
 80067d8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80067dc:	4621      	mov	r1, r4
 80067de:	024a      	lsls	r2, r1, #9
 80067e0:	4610      	mov	r0, r2
 80067e2:	4619      	mov	r1, r3
 80067e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067e6:	2200      	movs	r2, #0
 80067e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80067ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80067f0:	f7fa f88c 	bl	800090c <__aeabi_uldivmod>
 80067f4:	4602      	mov	r2, r0
 80067f6:	460b      	mov	r3, r1
 80067f8:	4613      	mov	r3, r2
 80067fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067fc:	e058      	b.n	80068b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067fe:	4b38      	ldr	r3, [pc, #224]	@ (80068e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	099b      	lsrs	r3, r3, #6
 8006804:	2200      	movs	r2, #0
 8006806:	4618      	mov	r0, r3
 8006808:	4611      	mov	r1, r2
 800680a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800680e:	623b      	str	r3, [r7, #32]
 8006810:	2300      	movs	r3, #0
 8006812:	627b      	str	r3, [r7, #36]	@ 0x24
 8006814:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006818:	4642      	mov	r2, r8
 800681a:	464b      	mov	r3, r9
 800681c:	f04f 0000 	mov.w	r0, #0
 8006820:	f04f 0100 	mov.w	r1, #0
 8006824:	0159      	lsls	r1, r3, #5
 8006826:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800682a:	0150      	lsls	r0, r2, #5
 800682c:	4602      	mov	r2, r0
 800682e:	460b      	mov	r3, r1
 8006830:	4641      	mov	r1, r8
 8006832:	ebb2 0a01 	subs.w	sl, r2, r1
 8006836:	4649      	mov	r1, r9
 8006838:	eb63 0b01 	sbc.w	fp, r3, r1
 800683c:	f04f 0200 	mov.w	r2, #0
 8006840:	f04f 0300 	mov.w	r3, #0
 8006844:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006848:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800684c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006850:	ebb2 040a 	subs.w	r4, r2, sl
 8006854:	eb63 050b 	sbc.w	r5, r3, fp
 8006858:	f04f 0200 	mov.w	r2, #0
 800685c:	f04f 0300 	mov.w	r3, #0
 8006860:	00eb      	lsls	r3, r5, #3
 8006862:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006866:	00e2      	lsls	r2, r4, #3
 8006868:	4614      	mov	r4, r2
 800686a:	461d      	mov	r5, r3
 800686c:	4643      	mov	r3, r8
 800686e:	18e3      	adds	r3, r4, r3
 8006870:	603b      	str	r3, [r7, #0]
 8006872:	464b      	mov	r3, r9
 8006874:	eb45 0303 	adc.w	r3, r5, r3
 8006878:	607b      	str	r3, [r7, #4]
 800687a:	f04f 0200 	mov.w	r2, #0
 800687e:	f04f 0300 	mov.w	r3, #0
 8006882:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006886:	4629      	mov	r1, r5
 8006888:	028b      	lsls	r3, r1, #10
 800688a:	4621      	mov	r1, r4
 800688c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006890:	4621      	mov	r1, r4
 8006892:	028a      	lsls	r2, r1, #10
 8006894:	4610      	mov	r0, r2
 8006896:	4619      	mov	r1, r3
 8006898:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800689a:	2200      	movs	r2, #0
 800689c:	61bb      	str	r3, [r7, #24]
 800689e:	61fa      	str	r2, [r7, #28]
 80068a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80068a4:	f7fa f832 	bl	800090c <__aeabi_uldivmod>
 80068a8:	4602      	mov	r2, r0
 80068aa:	460b      	mov	r3, r1
 80068ac:	4613      	mov	r3, r2
 80068ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80068b0:	4b0b      	ldr	r3, [pc, #44]	@ (80068e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	0c1b      	lsrs	r3, r3, #16
 80068b6:	f003 0303 	and.w	r3, r3, #3
 80068ba:	3301      	adds	r3, #1
 80068bc:	005b      	lsls	r3, r3, #1
 80068be:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80068c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80068c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80068c8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80068ca:	e002      	b.n	80068d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80068cc:	4b05      	ldr	r3, [pc, #20]	@ (80068e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80068ce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80068d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80068d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3750      	adds	r7, #80	@ 0x50
 80068d8:	46bd      	mov	sp, r7
 80068da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068de:	bf00      	nop
 80068e0:	40023800 	.word	0x40023800
 80068e4:	00f42400 	.word	0x00f42400
 80068e8:	007a1200 	.word	0x007a1200

080068ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068ec:	b480      	push	{r7}
 80068ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80068f0:	4b03      	ldr	r3, [pc, #12]	@ (8006900 <HAL_RCC_GetHCLKFreq+0x14>)
 80068f2:	681b      	ldr	r3, [r3, #0]
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop
 8006900:	20000000 	.word	0x20000000

08006904 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006908:	f7ff fff0 	bl	80068ec <HAL_RCC_GetHCLKFreq>
 800690c:	4602      	mov	r2, r0
 800690e:	4b05      	ldr	r3, [pc, #20]	@ (8006924 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	0a9b      	lsrs	r3, r3, #10
 8006914:	f003 0307 	and.w	r3, r3, #7
 8006918:	4903      	ldr	r1, [pc, #12]	@ (8006928 <HAL_RCC_GetPCLK1Freq+0x24>)
 800691a:	5ccb      	ldrb	r3, [r1, r3]
 800691c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006920:	4618      	mov	r0, r3
 8006922:	bd80      	pop	{r7, pc}
 8006924:	40023800 	.word	0x40023800
 8006928:	080120e0 	.word	0x080120e0

0800692c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006930:	f7ff ffdc 	bl	80068ec <HAL_RCC_GetHCLKFreq>
 8006934:	4602      	mov	r2, r0
 8006936:	4b05      	ldr	r3, [pc, #20]	@ (800694c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	0b5b      	lsrs	r3, r3, #13
 800693c:	f003 0307 	and.w	r3, r3, #7
 8006940:	4903      	ldr	r1, [pc, #12]	@ (8006950 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006942:	5ccb      	ldrb	r3, [r1, r3]
 8006944:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006948:	4618      	mov	r0, r3
 800694a:	bd80      	pop	{r7, pc}
 800694c:	40023800 	.word	0x40023800
 8006950:	080120e0 	.word	0x080120e0

08006954 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	220f      	movs	r2, #15
 8006962:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006964:	4b12      	ldr	r3, [pc, #72]	@ (80069b0 <HAL_RCC_GetClockConfig+0x5c>)
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	f003 0203 	and.w	r2, r3, #3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006970:	4b0f      	ldr	r3, [pc, #60]	@ (80069b0 <HAL_RCC_GetClockConfig+0x5c>)
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800697c:	4b0c      	ldr	r3, [pc, #48]	@ (80069b0 <HAL_RCC_GetClockConfig+0x5c>)
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006988:	4b09      	ldr	r3, [pc, #36]	@ (80069b0 <HAL_RCC_GetClockConfig+0x5c>)
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	08db      	lsrs	r3, r3, #3
 800698e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006996:	4b07      	ldr	r3, [pc, #28]	@ (80069b4 <HAL_RCC_GetClockConfig+0x60>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f003 020f 	and.w	r2, r3, #15
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	601a      	str	r2, [r3, #0]
}
 80069a2:	bf00      	nop
 80069a4:	370c      	adds	r7, #12
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	40023800 	.word	0x40023800
 80069b4:	40023c00 	.word	0x40023c00

080069b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b088      	sub	sp, #32
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80069c0:	2300      	movs	r3, #0
 80069c2:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 80069c4:	2300      	movs	r3, #0
 80069c6:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 80069c8:	2300      	movs	r3, #0
 80069ca:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 80069cc:	2300      	movs	r3, #0
 80069ce:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 80069d0:	2300      	movs	r3, #0
 80069d2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d00a      	beq.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80069e0:	4b66      	ldr	r3, [pc, #408]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80069e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80069e6:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069ee:	4963      	ldr	r1, [pc, #396]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80069f0:	4313      	orrs	r3, r2
 80069f2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d00a      	beq.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8006a02:	4b5e      	ldr	r3, [pc, #376]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006a04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a08:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a10:	495a      	ldr	r1, [pc, #360]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006a12:	4313      	orrs	r3, r2
 8006a14:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 0301 	and.w	r3, r3, #1
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d10b      	bne.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x84>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d105      	bne.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x84>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d075      	beq.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006a3c:	4b50      	ldr	r3, [pc, #320]	@ (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8006a3e:	2200      	movs	r2, #0
 8006a40:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006a42:	f7fc fba7 	bl	8003194 <HAL_GetTick>
 8006a46:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006a48:	e008      	b.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006a4a:	f7fc fba3 	bl	8003194 <HAL_GetTick>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	1ad3      	subs	r3, r2, r3
 8006a54:	2b02      	cmp	r3, #2
 8006a56:	d901      	bls.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a58:	2303      	movs	r3, #3
 8006a5a:	e1dc      	b.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006a5c:	4b47      	ldr	r3, [pc, #284]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d1f0      	bne.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f003 0301 	and.w	r3, r3, #1
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d009      	beq.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	019a      	lsls	r2, r3, #6
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	071b      	lsls	r3, r3, #28
 8006a80:	493e      	ldr	r1, [pc, #248]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006a82:	4313      	orrs	r3, r2
 8006a84:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f003 0302 	and.w	r3, r3, #2
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d01f      	beq.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006a94:	4b39      	ldr	r3, [pc, #228]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006a96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a9a:	0f1b      	lsrs	r3, r3, #28
 8006a9c:	f003 0307 	and.w	r3, r3, #7
 8006aa0:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	019a      	lsls	r2, r3, #6
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	061b      	lsls	r3, r3, #24
 8006aae:	431a      	orrs	r2, r3
 8006ab0:	69bb      	ldr	r3, [r7, #24]
 8006ab2:	071b      	lsls	r3, r3, #28
 8006ab4:	4931      	ldr	r1, [pc, #196]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006abc:	4b2f      	ldr	r3, [pc, #188]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006abe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ac2:	f023 021f 	bic.w	r2, r3, #31
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a1b      	ldr	r3, [r3, #32]
 8006aca:	3b01      	subs	r3, #1
 8006acc:	492b      	ldr	r1, [pc, #172]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d00d      	beq.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	019a      	lsls	r2, r3, #6
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	061b      	lsls	r3, r3, #24
 8006aec:	431a      	orrs	r2, r3
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	071b      	lsls	r3, r3, #28
 8006af4:	4921      	ldr	r1, [pc, #132]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006af6:	4313      	orrs	r3, r2
 8006af8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006afc:	4b20      	ldr	r3, [pc, #128]	@ (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8006afe:	2201      	movs	r2, #1
 8006b00:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006b02:	f7fc fb47 	bl	8003194 <HAL_GetTick>
 8006b06:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006b08:	e008      	b.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006b0a:	f7fc fb43 	bl	8003194 <HAL_GetTick>
 8006b0e:	4602      	mov	r2, r0
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	1ad3      	subs	r3, r2, r3
 8006b14:	2b02      	cmp	r3, #2
 8006b16:	d901      	bls.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	e17c      	b.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006b1c:	4b17      	ldr	r3, [pc, #92]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d0f0      	beq.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 0304 	and.w	r3, r3, #4
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d112      	bne.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d10c      	bne.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	f000 80ce 	beq.w	8006cea <HAL_RCCEx_PeriphCLKConfig+0x332>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8006b52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b56:	f040 80c8 	bne.w	8006cea <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006b5a:	4b0a      	ldr	r3, [pc, #40]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006b60:	f7fc fb18 	bl	8003194 <HAL_GetTick>
 8006b64:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006b66:	e00f      	b.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006b68:	f7fc fb14 	bl	8003194 <HAL_GetTick>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	1ad3      	subs	r3, r2, r3
 8006b72:	2b02      	cmp	r3, #2
 8006b74:	d908      	bls.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b76:	2303      	movs	r3, #3
 8006b78:	e14d      	b.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8006b7a:	bf00      	nop
 8006b7c:	40023800 	.word	0x40023800
 8006b80:	42470068 	.word	0x42470068
 8006b84:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006b88:	4ba5      	ldr	r3, [pc, #660]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b94:	d0e8      	beq.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f003 0304 	and.w	r3, r3, #4
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d02e      	beq.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8006ba2:	4b9f      	ldr	r3, [pc, #636]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ba8:	0c1b      	lsrs	r3, r3, #16
 8006baa:	f003 0303 	and.w	r3, r3, #3
 8006bae:	3301      	adds	r3, #1
 8006bb0:	005b      	lsls	r3, r3, #1
 8006bb2:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006bb4:	4b9a      	ldr	r3, [pc, #616]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bba:	0f1b      	lsrs	r3, r3, #28
 8006bbc:	f003 0307 	and.w	r3, r3, #7
 8006bc0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	019a      	lsls	r2, r3, #6
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	085b      	lsrs	r3, r3, #1
 8006bcc:	3b01      	subs	r3, #1
 8006bce:	041b      	lsls	r3, r3, #16
 8006bd0:	431a      	orrs	r2, r3
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	699b      	ldr	r3, [r3, #24]
 8006bd6:	061b      	lsls	r3, r3, #24
 8006bd8:	431a      	orrs	r2, r3
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	071b      	lsls	r3, r3, #28
 8006bde:	4990      	ldr	r1, [pc, #576]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006be0:	4313      	orrs	r3, r2
 8006be2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006be6:	4b8e      	ldr	r3, [pc, #568]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006be8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006bec:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bf4:	3b01      	subs	r3, #1
 8006bf6:	021b      	lsls	r3, r3, #8
 8006bf8:	4989      	ldr	r1, [pc, #548]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f003 0308 	and.w	r3, r3, #8
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d02c      	beq.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8006c0c:	4b84      	ldr	r3, [pc, #528]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c12:	0c1b      	lsrs	r3, r3, #16
 8006c14:	f003 0303 	and.w	r3, r3, #3
 8006c18:	3301      	adds	r3, #1
 8006c1a:	005b      	lsls	r3, r3, #1
 8006c1c:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006c1e:	4b80      	ldr	r3, [pc, #512]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c24:	0e1b      	lsrs	r3, r3, #24
 8006c26:	f003 030f 	and.w	r3, r3, #15
 8006c2a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	691b      	ldr	r3, [r3, #16]
 8006c30:	019a      	lsls	r2, r3, #6
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	085b      	lsrs	r3, r3, #1
 8006c36:	3b01      	subs	r3, #1
 8006c38:	041b      	lsls	r3, r3, #16
 8006c3a:	431a      	orrs	r2, r3
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	061b      	lsls	r3, r3, #24
 8006c40:	431a      	orrs	r2, r3
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	69db      	ldr	r3, [r3, #28]
 8006c46:	071b      	lsls	r3, r3, #28
 8006c48:	4975      	ldr	r1, [pc, #468]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006c50:	4b73      	ldr	r3, [pc, #460]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006c52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c56:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c5e:	4970      	ldr	r1, [pc, #448]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006c60:	4313      	orrs	r3, r2
 8006c62:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d024      	beq.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x304>
        (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8006c76:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c7a:	d11f      	bne.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006c7c:	4b68      	ldr	r3, [pc, #416]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c82:	0e1b      	lsrs	r3, r3, #24
 8006c84:	f003 030f 	and.w	r3, r3, #15
 8006c88:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006c8a:	4b65      	ldr	r3, [pc, #404]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c90:	0f1b      	lsrs	r3, r3, #28
 8006c92:	f003 0307 	and.w	r3, r3, #7
 8006c96:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	691b      	ldr	r3, [r3, #16]
 8006c9c:	019a      	lsls	r2, r3, #6
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	695b      	ldr	r3, [r3, #20]
 8006ca2:	085b      	lsrs	r3, r3, #1
 8006ca4:	3b01      	subs	r3, #1
 8006ca6:	041b      	lsls	r3, r3, #16
 8006ca8:	431a      	orrs	r2, r3
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	061b      	lsls	r3, r3, #24
 8006cae:	431a      	orrs	r2, r3
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	071b      	lsls	r3, r3, #28
 8006cb4:	495a      	ldr	r1, [pc, #360]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006cbc:	4b59      	ldr	r3, [pc, #356]	@ (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006cc2:	f7fc fa67 	bl	8003194 <HAL_GetTick>
 8006cc6:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006cc8:	e008      	b.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006cca:	f7fc fa63 	bl	8003194 <HAL_GetTick>
 8006cce:	4602      	mov	r2, r0
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	1ad3      	subs	r3, r2, r3
 8006cd4:	2b02      	cmp	r3, #2
 8006cd6:	d901      	bls.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006cd8:	2303      	movs	r3, #3
 8006cda:	e09c      	b.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006cdc:	4b50      	ldr	r3, [pc, #320]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006ce4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ce8:	d1ef      	bne.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 0320 	and.w	r3, r3, #32
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	f000 8083 	beq.w	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	60bb      	str	r3, [r7, #8]
 8006cfc:	4b48      	ldr	r3, [pc, #288]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d00:	4a47      	ldr	r2, [pc, #284]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006d02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d06:	6413      	str	r3, [r2, #64]	@ 0x40
 8006d08:	4b45      	ldr	r3, [pc, #276]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d10:	60bb      	str	r3, [r7, #8]
 8006d12:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006d14:	4b44      	ldr	r3, [pc, #272]	@ (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a43      	ldr	r2, [pc, #268]	@ (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8006d1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d1e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006d20:	f7fc fa38 	bl	8003194 <HAL_GetTick>
 8006d24:	61f8      	str	r0, [r7, #28]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006d26:	e008      	b.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d28:	f7fc fa34 	bl	8003194 <HAL_GetTick>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	69fb      	ldr	r3, [r7, #28]
 8006d30:	1ad3      	subs	r3, r2, r3
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	d901      	bls.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 8006d36:	2303      	movs	r3, #3
 8006d38:	e06d      	b.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006d3a:	4b3b      	ldr	r3, [pc, #236]	@ (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d0f0      	beq.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006d46:	4b36      	ldr	r3, [pc, #216]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006d48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d4e:	61bb      	str	r3, [r7, #24]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d02f      	beq.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d5e:	69ba      	ldr	r2, [r7, #24]
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d028      	beq.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006d64:	4b2e      	ldr	r3, [pc, #184]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006d66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d6c:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006d6e:	4b2f      	ldr	r3, [pc, #188]	@ (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006d70:	2201      	movs	r2, #1
 8006d72:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006d74:	4b2d      	ldr	r3, [pc, #180]	@ (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006d76:	2200      	movs	r2, #0
 8006d78:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006d7a:	4a29      	ldr	r2, [pc, #164]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006d7c:	69bb      	ldr	r3, [r7, #24]
 8006d7e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006d80:	4b27      	ldr	r3, [pc, #156]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006d82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d84:	f003 0301 	and.w	r3, r3, #1
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d114      	bne.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006d8c:	f7fc fa02 	bl	8003194 <HAL_GetTick>
 8006d90:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d92:	e00a      	b.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d94:	f7fc f9fe 	bl	8003194 <HAL_GetTick>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	1ad3      	subs	r3, r2, r3
 8006d9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d901      	bls.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 8006da6:	2303      	movs	r3, #3
 8006da8:	e035      	b.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006daa:	4b1d      	ldr	r3, [pc, #116]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006dac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dae:	f003 0302 	and.w	r3, r3, #2
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d0ee      	beq.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006dbe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006dc2:	d10d      	bne.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8006dc4:	4b16      	ldr	r3, [pc, #88]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dd0:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006dd4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006dd8:	4911      	ldr	r1, [pc, #68]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	608b      	str	r3, [r1, #8]
 8006dde:	e005      	b.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x434>
 8006de0:	4b0f      	ldr	r3, [pc, #60]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	4a0e      	ldr	r2, [pc, #56]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006de6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006dea:	6093      	str	r3, [r2, #8]
 8006dec:	4b0c      	ldr	r3, [pc, #48]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006dee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006df4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006df8:	4909      	ldr	r1, [pc, #36]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f003 0310 	and.w	r3, r3, #16
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d004      	beq.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8006e10:	4b07      	ldr	r3, [pc, #28]	@ (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 8006e12:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006e14:	2300      	movs	r3, #0
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3720      	adds	r7, #32
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	bf00      	nop
 8006e20:	40023800 	.word	0x40023800
 8006e24:	42470070 	.word	0x42470070
 8006e28:	40007000 	.word	0x40007000
 8006e2c:	42470e40 	.word	0x42470e40
 8006e30:	424711e0 	.word	0x424711e0

08006e34 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b086      	sub	sp, #24
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d101      	bne.n	8006e46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	e273      	b.n	800732e <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f003 0301 	and.w	r3, r3, #1
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d075      	beq.n	8006f3e <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006e52:	4b88      	ldr	r3, [pc, #544]	@ (8007074 <HAL_RCC_OscConfig+0x240>)
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	f003 030c 	and.w	r3, r3, #12
 8006e5a:	2b04      	cmp	r3, #4
 8006e5c:	d00c      	beq.n	8006e78 <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e5e:	4b85      	ldr	r3, [pc, #532]	@ (8007074 <HAL_RCC_OscConfig+0x240>)
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	f003 030c 	and.w	r3, r3, #12
        || \
 8006e66:	2b08      	cmp	r3, #8
 8006e68:	d112      	bne.n	8006e90 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e6a:	4b82      	ldr	r3, [pc, #520]	@ (8007074 <HAL_RCC_OscConfig+0x240>)
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e72:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006e76:	d10b      	bne.n	8006e90 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e78:	4b7e      	ldr	r3, [pc, #504]	@ (8007074 <HAL_RCC_OscConfig+0x240>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d05b      	beq.n	8006f3c <HAL_RCC_OscConfig+0x108>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d157      	bne.n	8006f3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e24e      	b.n	800732e <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e98:	d106      	bne.n	8006ea8 <HAL_RCC_OscConfig+0x74>
 8006e9a:	4b76      	ldr	r3, [pc, #472]	@ (8007074 <HAL_RCC_OscConfig+0x240>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a75      	ldr	r2, [pc, #468]	@ (8007074 <HAL_RCC_OscConfig+0x240>)
 8006ea0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ea4:	6013      	str	r3, [r2, #0]
 8006ea6:	e01d      	b.n	8006ee4 <HAL_RCC_OscConfig+0xb0>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006eb0:	d10c      	bne.n	8006ecc <HAL_RCC_OscConfig+0x98>
 8006eb2:	4b70      	ldr	r3, [pc, #448]	@ (8007074 <HAL_RCC_OscConfig+0x240>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a6f      	ldr	r2, [pc, #444]	@ (8007074 <HAL_RCC_OscConfig+0x240>)
 8006eb8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006ebc:	6013      	str	r3, [r2, #0]
 8006ebe:	4b6d      	ldr	r3, [pc, #436]	@ (8007074 <HAL_RCC_OscConfig+0x240>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a6c      	ldr	r2, [pc, #432]	@ (8007074 <HAL_RCC_OscConfig+0x240>)
 8006ec4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ec8:	6013      	str	r3, [r2, #0]
 8006eca:	e00b      	b.n	8006ee4 <HAL_RCC_OscConfig+0xb0>
 8006ecc:	4b69      	ldr	r3, [pc, #420]	@ (8007074 <HAL_RCC_OscConfig+0x240>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a68      	ldr	r2, [pc, #416]	@ (8007074 <HAL_RCC_OscConfig+0x240>)
 8006ed2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ed6:	6013      	str	r3, [r2, #0]
 8006ed8:	4b66      	ldr	r3, [pc, #408]	@ (8007074 <HAL_RCC_OscConfig+0x240>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a65      	ldr	r2, [pc, #404]	@ (8007074 <HAL_RCC_OscConfig+0x240>)
 8006ede:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006ee2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d013      	beq.n	8006f14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eec:	f7fc f952 	bl	8003194 <HAL_GetTick>
 8006ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ef2:	e008      	b.n	8006f06 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ef4:	f7fc f94e 	bl	8003194 <HAL_GetTick>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	1ad3      	subs	r3, r2, r3
 8006efe:	2b64      	cmp	r3, #100	@ 0x64
 8006f00:	d901      	bls.n	8006f06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006f02:	2303      	movs	r3, #3
 8006f04:	e213      	b.n	800732e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f06:	4b5b      	ldr	r3, [pc, #364]	@ (8007074 <HAL_RCC_OscConfig+0x240>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d0f0      	beq.n	8006ef4 <HAL_RCC_OscConfig+0xc0>
 8006f12:	e014      	b.n	8006f3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f14:	f7fc f93e 	bl	8003194 <HAL_GetTick>
 8006f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f1a:	e008      	b.n	8006f2e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f1c:	f7fc f93a 	bl	8003194 <HAL_GetTick>
 8006f20:	4602      	mov	r2, r0
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	1ad3      	subs	r3, r2, r3
 8006f26:	2b64      	cmp	r3, #100	@ 0x64
 8006f28:	d901      	bls.n	8006f2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006f2a:	2303      	movs	r3, #3
 8006f2c:	e1ff      	b.n	800732e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f2e:	4b51      	ldr	r3, [pc, #324]	@ (8007074 <HAL_RCC_OscConfig+0x240>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d1f0      	bne.n	8006f1c <HAL_RCC_OscConfig+0xe8>
 8006f3a:	e000      	b.n	8006f3e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f003 0302 	and.w	r3, r3, #2
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d063      	beq.n	8007012 <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006f4a:	4b4a      	ldr	r3, [pc, #296]	@ (8007074 <HAL_RCC_OscConfig+0x240>)
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	f003 030c 	and.w	r3, r3, #12
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d00b      	beq.n	8006f6e <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006f56:	4b47      	ldr	r3, [pc, #284]	@ (8007074 <HAL_RCC_OscConfig+0x240>)
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	f003 030c 	and.w	r3, r3, #12
        || \
 8006f5e:	2b08      	cmp	r3, #8
 8006f60:	d11c      	bne.n	8006f9c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006f62:	4b44      	ldr	r3, [pc, #272]	@ (8007074 <HAL_RCC_OscConfig+0x240>)
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d116      	bne.n	8006f9c <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f6e:	4b41      	ldr	r3, [pc, #260]	@ (8007074 <HAL_RCC_OscConfig+0x240>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 0302 	and.w	r3, r3, #2
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d005      	beq.n	8006f86 <HAL_RCC_OscConfig+0x152>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d001      	beq.n	8006f86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	e1d3      	b.n	800732e <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f86:	4b3b      	ldr	r3, [pc, #236]	@ (8007074 <HAL_RCC_OscConfig+0x240>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	691b      	ldr	r3, [r3, #16]
 8006f92:	00db      	lsls	r3, r3, #3
 8006f94:	4937      	ldr	r1, [pc, #220]	@ (8007074 <HAL_RCC_OscConfig+0x240>)
 8006f96:	4313      	orrs	r3, r2
 8006f98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f9a:	e03a      	b.n	8007012 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	68db      	ldr	r3, [r3, #12]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d020      	beq.n	8006fe6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006fa4:	4b34      	ldr	r3, [pc, #208]	@ (8007078 <HAL_RCC_OscConfig+0x244>)
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006faa:	f7fc f8f3 	bl	8003194 <HAL_GetTick>
 8006fae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fb0:	e008      	b.n	8006fc4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006fb2:	f7fc f8ef 	bl	8003194 <HAL_GetTick>
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	1ad3      	subs	r3, r2, r3
 8006fbc:	2b02      	cmp	r3, #2
 8006fbe:	d901      	bls.n	8006fc4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006fc0:	2303      	movs	r3, #3
 8006fc2:	e1b4      	b.n	800732e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fc4:	4b2b      	ldr	r3, [pc, #172]	@ (8007074 <HAL_RCC_OscConfig+0x240>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f003 0302 	and.w	r3, r3, #2
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d0f0      	beq.n	8006fb2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fd0:	4b28      	ldr	r3, [pc, #160]	@ (8007074 <HAL_RCC_OscConfig+0x240>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	00db      	lsls	r3, r3, #3
 8006fde:	4925      	ldr	r1, [pc, #148]	@ (8007074 <HAL_RCC_OscConfig+0x240>)
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	600b      	str	r3, [r1, #0]
 8006fe4:	e015      	b.n	8007012 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006fe6:	4b24      	ldr	r3, [pc, #144]	@ (8007078 <HAL_RCC_OscConfig+0x244>)
 8006fe8:	2200      	movs	r2, #0
 8006fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fec:	f7fc f8d2 	bl	8003194 <HAL_GetTick>
 8006ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ff2:	e008      	b.n	8007006 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ff4:	f7fc f8ce 	bl	8003194 <HAL_GetTick>
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	1ad3      	subs	r3, r2, r3
 8006ffe:	2b02      	cmp	r3, #2
 8007000:	d901      	bls.n	8007006 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007002:	2303      	movs	r3, #3
 8007004:	e193      	b.n	800732e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007006:	4b1b      	ldr	r3, [pc, #108]	@ (8007074 <HAL_RCC_OscConfig+0x240>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f003 0302 	and.w	r3, r3, #2
 800700e:	2b00      	cmp	r3, #0
 8007010:	d1f0      	bne.n	8006ff4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f003 0308 	and.w	r3, r3, #8
 800701a:	2b00      	cmp	r3, #0
 800701c:	d036      	beq.n	800708c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	695b      	ldr	r3, [r3, #20]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d016      	beq.n	8007054 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007026:	4b15      	ldr	r3, [pc, #84]	@ (800707c <HAL_RCC_OscConfig+0x248>)
 8007028:	2201      	movs	r2, #1
 800702a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800702c:	f7fc f8b2 	bl	8003194 <HAL_GetTick>
 8007030:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007032:	e008      	b.n	8007046 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007034:	f7fc f8ae 	bl	8003194 <HAL_GetTick>
 8007038:	4602      	mov	r2, r0
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	1ad3      	subs	r3, r2, r3
 800703e:	2b02      	cmp	r3, #2
 8007040:	d901      	bls.n	8007046 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007042:	2303      	movs	r3, #3
 8007044:	e173      	b.n	800732e <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007046:	4b0b      	ldr	r3, [pc, #44]	@ (8007074 <HAL_RCC_OscConfig+0x240>)
 8007048:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800704a:	f003 0302 	and.w	r3, r3, #2
 800704e:	2b00      	cmp	r3, #0
 8007050:	d0f0      	beq.n	8007034 <HAL_RCC_OscConfig+0x200>
 8007052:	e01b      	b.n	800708c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007054:	4b09      	ldr	r3, [pc, #36]	@ (800707c <HAL_RCC_OscConfig+0x248>)
 8007056:	2200      	movs	r2, #0
 8007058:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800705a:	f7fc f89b 	bl	8003194 <HAL_GetTick>
 800705e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007060:	e00e      	b.n	8007080 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007062:	f7fc f897 	bl	8003194 <HAL_GetTick>
 8007066:	4602      	mov	r2, r0
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	1ad3      	subs	r3, r2, r3
 800706c:	2b02      	cmp	r3, #2
 800706e:	d907      	bls.n	8007080 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007070:	2303      	movs	r3, #3
 8007072:	e15c      	b.n	800732e <HAL_RCC_OscConfig+0x4fa>
 8007074:	40023800 	.word	0x40023800
 8007078:	42470000 	.word	0x42470000
 800707c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007080:	4b8a      	ldr	r3, [pc, #552]	@ (80072ac <HAL_RCC_OscConfig+0x478>)
 8007082:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007084:	f003 0302 	and.w	r3, r3, #2
 8007088:	2b00      	cmp	r3, #0
 800708a:	d1ea      	bne.n	8007062 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f003 0304 	and.w	r3, r3, #4
 8007094:	2b00      	cmp	r3, #0
 8007096:	f000 8097 	beq.w	80071c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800709a:	2300      	movs	r3, #0
 800709c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800709e:	4b83      	ldr	r3, [pc, #524]	@ (80072ac <HAL_RCC_OscConfig+0x478>)
 80070a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d10f      	bne.n	80070ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070aa:	2300      	movs	r3, #0
 80070ac:	60bb      	str	r3, [r7, #8]
 80070ae:	4b7f      	ldr	r3, [pc, #508]	@ (80072ac <HAL_RCC_OscConfig+0x478>)
 80070b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070b2:	4a7e      	ldr	r2, [pc, #504]	@ (80072ac <HAL_RCC_OscConfig+0x478>)
 80070b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80070ba:	4b7c      	ldr	r3, [pc, #496]	@ (80072ac <HAL_RCC_OscConfig+0x478>)
 80070bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070c2:	60bb      	str	r3, [r7, #8]
 80070c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80070c6:	2301      	movs	r3, #1
 80070c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070ca:	4b79      	ldr	r3, [pc, #484]	@ (80072b0 <HAL_RCC_OscConfig+0x47c>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d118      	bne.n	8007108 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80070d6:	4b76      	ldr	r3, [pc, #472]	@ (80072b0 <HAL_RCC_OscConfig+0x47c>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a75      	ldr	r2, [pc, #468]	@ (80072b0 <HAL_RCC_OscConfig+0x47c>)
 80070dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80070e2:	f7fc f857 	bl	8003194 <HAL_GetTick>
 80070e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070e8:	e008      	b.n	80070fc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070ea:	f7fc f853 	bl	8003194 <HAL_GetTick>
 80070ee:	4602      	mov	r2, r0
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	1ad3      	subs	r3, r2, r3
 80070f4:	2b02      	cmp	r3, #2
 80070f6:	d901      	bls.n	80070fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80070f8:	2303      	movs	r3, #3
 80070fa:	e118      	b.n	800732e <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070fc:	4b6c      	ldr	r3, [pc, #432]	@ (80072b0 <HAL_RCC_OscConfig+0x47c>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007104:	2b00      	cmp	r3, #0
 8007106:	d0f0      	beq.n	80070ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	2b01      	cmp	r3, #1
 800710e:	d106      	bne.n	800711e <HAL_RCC_OscConfig+0x2ea>
 8007110:	4b66      	ldr	r3, [pc, #408]	@ (80072ac <HAL_RCC_OscConfig+0x478>)
 8007112:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007114:	4a65      	ldr	r2, [pc, #404]	@ (80072ac <HAL_RCC_OscConfig+0x478>)
 8007116:	f043 0301 	orr.w	r3, r3, #1
 800711a:	6713      	str	r3, [r2, #112]	@ 0x70
 800711c:	e01c      	b.n	8007158 <HAL_RCC_OscConfig+0x324>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	2b05      	cmp	r3, #5
 8007124:	d10c      	bne.n	8007140 <HAL_RCC_OscConfig+0x30c>
 8007126:	4b61      	ldr	r3, [pc, #388]	@ (80072ac <HAL_RCC_OscConfig+0x478>)
 8007128:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800712a:	4a60      	ldr	r2, [pc, #384]	@ (80072ac <HAL_RCC_OscConfig+0x478>)
 800712c:	f043 0304 	orr.w	r3, r3, #4
 8007130:	6713      	str	r3, [r2, #112]	@ 0x70
 8007132:	4b5e      	ldr	r3, [pc, #376]	@ (80072ac <HAL_RCC_OscConfig+0x478>)
 8007134:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007136:	4a5d      	ldr	r2, [pc, #372]	@ (80072ac <HAL_RCC_OscConfig+0x478>)
 8007138:	f043 0301 	orr.w	r3, r3, #1
 800713c:	6713      	str	r3, [r2, #112]	@ 0x70
 800713e:	e00b      	b.n	8007158 <HAL_RCC_OscConfig+0x324>
 8007140:	4b5a      	ldr	r3, [pc, #360]	@ (80072ac <HAL_RCC_OscConfig+0x478>)
 8007142:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007144:	4a59      	ldr	r2, [pc, #356]	@ (80072ac <HAL_RCC_OscConfig+0x478>)
 8007146:	f023 0301 	bic.w	r3, r3, #1
 800714a:	6713      	str	r3, [r2, #112]	@ 0x70
 800714c:	4b57      	ldr	r3, [pc, #348]	@ (80072ac <HAL_RCC_OscConfig+0x478>)
 800714e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007150:	4a56      	ldr	r2, [pc, #344]	@ (80072ac <HAL_RCC_OscConfig+0x478>)
 8007152:	f023 0304 	bic.w	r3, r3, #4
 8007156:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d015      	beq.n	800718c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007160:	f7fc f818 	bl	8003194 <HAL_GetTick>
 8007164:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007166:	e00a      	b.n	800717e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007168:	f7fc f814 	bl	8003194 <HAL_GetTick>
 800716c:	4602      	mov	r2, r0
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	1ad3      	subs	r3, r2, r3
 8007172:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007176:	4293      	cmp	r3, r2
 8007178:	d901      	bls.n	800717e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800717a:	2303      	movs	r3, #3
 800717c:	e0d7      	b.n	800732e <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800717e:	4b4b      	ldr	r3, [pc, #300]	@ (80072ac <HAL_RCC_OscConfig+0x478>)
 8007180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007182:	f003 0302 	and.w	r3, r3, #2
 8007186:	2b00      	cmp	r3, #0
 8007188:	d0ee      	beq.n	8007168 <HAL_RCC_OscConfig+0x334>
 800718a:	e014      	b.n	80071b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800718c:	f7fc f802 	bl	8003194 <HAL_GetTick>
 8007190:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007192:	e00a      	b.n	80071aa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007194:	f7fb fffe 	bl	8003194 <HAL_GetTick>
 8007198:	4602      	mov	r2, r0
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	1ad3      	subs	r3, r2, r3
 800719e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d901      	bls.n	80071aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80071a6:	2303      	movs	r3, #3
 80071a8:	e0c1      	b.n	800732e <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071aa:	4b40      	ldr	r3, [pc, #256]	@ (80072ac <HAL_RCC_OscConfig+0x478>)
 80071ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071ae:	f003 0302 	and.w	r3, r3, #2
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d1ee      	bne.n	8007194 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80071b6:	7dfb      	ldrb	r3, [r7, #23]
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d105      	bne.n	80071c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80071bc:	4b3b      	ldr	r3, [pc, #236]	@ (80072ac <HAL_RCC_OscConfig+0x478>)
 80071be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071c0:	4a3a      	ldr	r2, [pc, #232]	@ (80072ac <HAL_RCC_OscConfig+0x478>)
 80071c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80071c6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	699b      	ldr	r3, [r3, #24]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	f000 80ad 	beq.w	800732c <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80071d2:	4b36      	ldr	r3, [pc, #216]	@ (80072ac <HAL_RCC_OscConfig+0x478>)
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	f003 030c 	and.w	r3, r3, #12
 80071da:	2b08      	cmp	r3, #8
 80071dc:	d060      	beq.n	80072a0 <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	699b      	ldr	r3, [r3, #24]
 80071e2:	2b02      	cmp	r3, #2
 80071e4:	d145      	bne.n	8007272 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071e6:	4b33      	ldr	r3, [pc, #204]	@ (80072b4 <HAL_RCC_OscConfig+0x480>)
 80071e8:	2200      	movs	r2, #0
 80071ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071ec:	f7fb ffd2 	bl	8003194 <HAL_GetTick>
 80071f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071f2:	e008      	b.n	8007206 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071f4:	f7fb ffce 	bl	8003194 <HAL_GetTick>
 80071f8:	4602      	mov	r2, r0
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	1ad3      	subs	r3, r2, r3
 80071fe:	2b02      	cmp	r3, #2
 8007200:	d901      	bls.n	8007206 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007202:	2303      	movs	r3, #3
 8007204:	e093      	b.n	800732e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007206:	4b29      	ldr	r3, [pc, #164]	@ (80072ac <HAL_RCC_OscConfig+0x478>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800720e:	2b00      	cmp	r3, #0
 8007210:	d1f0      	bne.n	80071f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	69da      	ldr	r2, [r3, #28]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6a1b      	ldr	r3, [r3, #32]
 800721a:	431a      	orrs	r2, r3
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007220:	019b      	lsls	r3, r3, #6
 8007222:	431a      	orrs	r2, r3
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007228:	085b      	lsrs	r3, r3, #1
 800722a:	3b01      	subs	r3, #1
 800722c:	041b      	lsls	r3, r3, #16
 800722e:	431a      	orrs	r2, r3
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007234:	061b      	lsls	r3, r3, #24
 8007236:	431a      	orrs	r2, r3
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800723c:	071b      	lsls	r3, r3, #28
 800723e:	491b      	ldr	r1, [pc, #108]	@ (80072ac <HAL_RCC_OscConfig+0x478>)
 8007240:	4313      	orrs	r3, r2
 8007242:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007244:	4b1b      	ldr	r3, [pc, #108]	@ (80072b4 <HAL_RCC_OscConfig+0x480>)
 8007246:	2201      	movs	r2, #1
 8007248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800724a:	f7fb ffa3 	bl	8003194 <HAL_GetTick>
 800724e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007250:	e008      	b.n	8007264 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007252:	f7fb ff9f 	bl	8003194 <HAL_GetTick>
 8007256:	4602      	mov	r2, r0
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	1ad3      	subs	r3, r2, r3
 800725c:	2b02      	cmp	r3, #2
 800725e:	d901      	bls.n	8007264 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8007260:	2303      	movs	r3, #3
 8007262:	e064      	b.n	800732e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007264:	4b11      	ldr	r3, [pc, #68]	@ (80072ac <HAL_RCC_OscConfig+0x478>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800726c:	2b00      	cmp	r3, #0
 800726e:	d0f0      	beq.n	8007252 <HAL_RCC_OscConfig+0x41e>
 8007270:	e05c      	b.n	800732c <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007272:	4b10      	ldr	r3, [pc, #64]	@ (80072b4 <HAL_RCC_OscConfig+0x480>)
 8007274:	2200      	movs	r2, #0
 8007276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007278:	f7fb ff8c 	bl	8003194 <HAL_GetTick>
 800727c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800727e:	e008      	b.n	8007292 <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007280:	f7fb ff88 	bl	8003194 <HAL_GetTick>
 8007284:	4602      	mov	r2, r0
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	1ad3      	subs	r3, r2, r3
 800728a:	2b02      	cmp	r3, #2
 800728c:	d901      	bls.n	8007292 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800728e:	2303      	movs	r3, #3
 8007290:	e04d      	b.n	800732e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007292:	4b06      	ldr	r3, [pc, #24]	@ (80072ac <HAL_RCC_OscConfig+0x478>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800729a:	2b00      	cmp	r3, #0
 800729c:	d1f0      	bne.n	8007280 <HAL_RCC_OscConfig+0x44c>
 800729e:	e045      	b.n	800732c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	699b      	ldr	r3, [r3, #24]
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d107      	bne.n	80072b8 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	e040      	b.n	800732e <HAL_RCC_OscConfig+0x4fa>
 80072ac:	40023800 	.word	0x40023800
 80072b0:	40007000 	.word	0x40007000
 80072b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80072b8:	4b1f      	ldr	r3, [pc, #124]	@ (8007338 <HAL_RCC_OscConfig+0x504>)
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	699b      	ldr	r3, [r3, #24]
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d030      	beq.n	8007328 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d129      	bne.n	8007328 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072de:	429a      	cmp	r2, r3
 80072e0:	d122      	bne.n	8007328 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80072e2:	68fa      	ldr	r2, [r7, #12]
 80072e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80072e8:	4013      	ands	r3, r2
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80072ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d119      	bne.n	8007328 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072fe:	085b      	lsrs	r3, r3, #1
 8007300:	3b01      	subs	r3, #1
 8007302:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007304:	429a      	cmp	r2, r3
 8007306:	d10f      	bne.n	8007328 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007312:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007314:	429a      	cmp	r2, r3
 8007316:	d107      	bne.n	8007328 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007322:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007324:	429a      	cmp	r2, r3
 8007326:	d001      	beq.n	800732c <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007328:	2301      	movs	r3, #1
 800732a:	e000      	b.n	800732e <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 800732c:	2300      	movs	r3, #0
}
 800732e:	4618      	mov	r0, r3
 8007330:	3718      	adds	r7, #24
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}
 8007336:	bf00      	nop
 8007338:	40023800 	.word	0x40023800

0800733c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b086      	sub	sp, #24
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0U;
 8007344:	2300      	movs	r3, #0
 8007346:	60fb      	str	r3, [r7, #12]

  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t freq = 0U;
 8007348:	2300      	movs	r3, #0
 800734a:	60bb      	str	r3, [r7, #8]

  /* This variable is used to compute CKSTR bits of SAI CR1 according to
     ClockStrobing and AudioMode fields */
  uint32_t ckstr_bits = 0U;
 800734c:	2300      	movs	r3, #0
 800734e:	617b      	str	r3, [r7, #20]
  uint32_t syncen_bits = 0U;
 8007350:	2300      	movs	r3, #0
 8007352:	613b      	str	r3, [r7, #16]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d101      	bne.n	800735e <HAL_SAI_Init+0x22>
  {
    return HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	e10c      	b.n	8007578 <HAL_SAI_Init+0x23c>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007364:	b2db      	uxtb	r3, r3
 8007366:	2b00      	cmp	r3, #0
 8007368:	d106      	bne.n	8007378 <HAL_SAI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2200      	movs	r2, #0
 800736e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f7fb fca4 	bl	8002cc0 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2202      	movs	r2, #2
 800737c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 f903 	bl	800758c <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  SAI_BlockSynchroConfig(hsai);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 f938 	bl	80075fc <SAI_BlockSynchroConfig>

  /* Configure Master Clock using the following formula :
     MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
     FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
     MCKDIV[3:0] = SAI_CK_x / FS * 512 */
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6a1b      	ldr	r3, [r3, #32]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d030      	beq.n	80073f6 <HAL_SAI_Init+0xba>
  {
    /* Get SAI clock source based on Source clock selection from RCC */
    freq = SAI_GetInputClock(hsai);
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 f957 	bl	8007648 <SAI_GetInputClock>
 800739a:	60b8      	str	r0, [r7, #8]

    /* (saiclocksource x 10) to keep Significant digits */
    tmpregisterGCR = (((freq * 10U) / ((hsai->Init.AudioFrequency) * 512U)));
 800739c:	68ba      	ldr	r2, [r7, #8]
 800739e:	4613      	mov	r3, r2
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	4413      	add	r3, r2
 80073a4:	005b      	lsls	r3, r3, #1
 80073a6:	461a      	mov	r2, r3
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6a1b      	ldr	r3, [r3, #32]
 80073ac:	025b      	lsls	r3, r3, #9
 80073ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80073b2:	60fb      	str	r3, [r7, #12]

    hsai->Init.Mckdiv = tmpregisterGCR / 10U;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	4a72      	ldr	r2, [pc, #456]	@ (8007580 <HAL_SAI_Init+0x244>)
 80073b8:	fba2 2303 	umull	r2, r3, r2, r3
 80073bc:	08da      	lsrs	r2, r3, #3
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpregisterGCR % 10U) > 8U)
 80073c2:	68f9      	ldr	r1, [r7, #12]
 80073c4:	4b6e      	ldr	r3, [pc, #440]	@ (8007580 <HAL_SAI_Init+0x244>)
 80073c6:	fba3 2301 	umull	r2, r3, r3, r1
 80073ca:	08da      	lsrs	r2, r3, #3
 80073cc:	4613      	mov	r3, r2
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	4413      	add	r3, r2
 80073d2:	005b      	lsls	r3, r3, #1
 80073d4:	1aca      	subs	r2, r1, r3
 80073d6:	2a08      	cmp	r2, #8
 80073d8:	d904      	bls.n	80073e4 <HAL_SAI_Init+0xa8>
    {
      hsai->Init.Mckdiv += 1U;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073de:	1c5a      	adds	r2, r3, #1
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073e8:	2b04      	cmp	r3, #4
 80073ea:	d104      	bne.n	80073f6 <HAL_SAI_Init+0xba>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073f0:	085a      	lsrs	r2, r3, #1
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according to ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d003      	beq.n	8007406 <HAL_SAI_Init+0xca>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	2b02      	cmp	r3, #2
 8007404:	d109      	bne.n	800741a <HAL_SAI_Init+0xde>
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800740a:	2b01      	cmp	r3, #1
 800740c:	d101      	bne.n	8007412 <HAL_SAI_Init+0xd6>
 800740e:	2300      	movs	r3, #0
 8007410:	e001      	b.n	8007416 <HAL_SAI_Init+0xda>
 8007412:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007416:	617b      	str	r3, [r7, #20]
 8007418:	e008      	b.n	800742c <HAL_SAI_Init+0xf0>
  }
  else
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800741e:	2b01      	cmp	r3, #1
 8007420:	d102      	bne.n	8007428 <HAL_SAI_Init+0xec>
 8007422:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007426:	e000      	b.n	800742a <HAL_SAI_Init+0xee>
 8007428:	2300      	movs	r3, #0
 800742a:	617b      	str	r3, [r7, #20]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  switch (hsai->Init.Synchro)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	2b03      	cmp	r3, #3
 8007432:	d811      	bhi.n	8007458 <HAL_SAI_Init+0x11c>
 8007434:	2b02      	cmp	r3, #2
 8007436:	d20b      	bcs.n	8007450 <HAL_SAI_Init+0x114>
 8007438:	2b00      	cmp	r3, #0
 800743a:	d002      	beq.n	8007442 <HAL_SAI_Init+0x106>
 800743c:	2b01      	cmp	r3, #1
 800743e:	d003      	beq.n	8007448 <HAL_SAI_Init+0x10c>
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
    }
    break;
    default:
      break;
 8007440:	e00a      	b.n	8007458 <HAL_SAI_Init+0x11c>
      syncen_bits = 0U;
 8007442:	2300      	movs	r3, #0
 8007444:	613b      	str	r3, [r7, #16]
    break;
 8007446:	e008      	b.n	800745a <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8007448:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800744c:	613b      	str	r3, [r7, #16]
    break;
 800744e:	e004      	b.n	800745a <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007450:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007454:	613b      	str	r3, [r7, #16]
    break;
 8007456:	e000      	b.n	800745a <HAL_SAI_Init+0x11e>
      break;
 8007458:	bf00      	nop
  }

  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	6819      	ldr	r1, [r3, #0]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	4b47      	ldr	r3, [pc, #284]	@ (8007584 <HAL_SAI_Init+0x248>)
 8007466:	400b      	ands	r3, r1
 8007468:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	6819      	ldr	r1, [r3, #0]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	685a      	ldr	r2, [r3, #4]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007478:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800747e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007484:	431a      	orrs	r2, r3
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          ckstr_bits | syncen_bits |                             \
 8007492:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	691b      	ldr	r3, [r3, #16]
 8007498:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800749e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074a4:	051b      	lsls	r3, r3, #20
 80074a6:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	430a      	orrs	r2, r1
 80074ae:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	6812      	ldr	r2, [r2, #0]
 80074ba:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80074be:	f023 030f 	bic.w	r3, r3, #15
 80074c2:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	6859      	ldr	r1, [r3, #4]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	699a      	ldr	r2, [r3, #24]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074d2:	431a      	orrs	r2, r3
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074d8:	431a      	orrs	r2, r3
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	430a      	orrs	r2, r1
 80074e0:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	6899      	ldr	r1, [r3, #8]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681a      	ldr	r2, [r3, #0]
 80074ec:	4b26      	ldr	r3, [pc, #152]	@ (8007588 <HAL_SAI_Init+0x24c>)
 80074ee:	400b      	ands	r3, r1
 80074f0:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	6899      	ldr	r1, [r3, #8]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074fc:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset     |
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007502:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSOffset     |
 8007508:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                           hsai->FrameInit.FSDefinition |
 800750e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8U));
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007514:	3b01      	subs	r3, #1
 8007516:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8007518:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	430a      	orrs	r2, r1
 8007520:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= ~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ | \
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	68d9      	ldr	r1, [r3, #12]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8007530:	400b      	ands	r3, r1
 8007532:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN);

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	68d9      	ldr	r1, [r3, #12]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007542:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007548:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 800754a:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007550:	3b01      	subs	r3, #1
 8007552:	021b      	lsls	r3, r3, #8
 8007554:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	430a      	orrs	r2, r1
 800755c:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2201      	movs	r2, #1
 800756a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8007576:	2300      	movs	r3, #0
}
 8007578:	4618      	mov	r0, r3
 800757a:	3718      	adds	r7, #24
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}
 8007580:	cccccccd 	.word	0xcccccccd
 8007584:	ff05c010 	.word	0xff05c010
 8007588:	fff88000 	.word	0xfff88000

0800758c <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800758c:	b480      	push	{r7}
 800758e:	b085      	sub	sp, #20
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8007594:	4b17      	ldr	r3, [pc, #92]	@ (80075f4 <SAI_Disable+0x68>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a17      	ldr	r2, [pc, #92]	@ (80075f8 <SAI_Disable+0x6c>)
 800759a:	fba2 2303 	umull	r2, r3, r2, r3
 800759e:	0b1b      	lsrs	r3, r3, #12
 80075a0:	009b      	lsls	r3, r3, #2
 80075a2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80075a4:	2300      	movs	r3, #0
 80075a6:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80075b6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0U)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	1e5a      	subs	r2, r3, #1
 80075bc:	60fa      	str	r2, [r7, #12]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d10a      	bne.n	80075d8 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075c8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      status = HAL_TIMEOUT;
 80075d2:	2303      	movs	r3, #3
 80075d4:	72fb      	strb	r3, [r7, #11]
      break;
 80075d6:	e006      	b.n	80075e6 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d1e8      	bne.n	80075b8 <SAI_Disable+0x2c>

  return status;
 80075e6:	7afb      	ldrb	r3, [r7, #11]
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3714      	adds	r7, #20
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr
 80075f4:	20000000 	.word	0x20000000
 80075f8:	95cbec1b 	.word	0x95cbec1b

080075fc <SAI_BlockSynchroConfig>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval SAI Clock Input
  */
void SAI_BlockSynchroConfig(const SAI_HandleTypeDef *hsai)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b085      	sub	sp, #20
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  }
#endif /* STM32F446xx */
#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || \
    defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	68db      	ldr	r3, [r3, #12]
 8007608:	2b02      	cmp	r3, #2
 800760a:	d00c      	beq.n	8007626 <SAI_BlockSynchroConfig+0x2a>
 800760c:	2b02      	cmp	r3, #2
 800760e:	d80d      	bhi.n	800762c <SAI_BlockSynchroConfig+0x30>
 8007610:	2b00      	cmp	r3, #0
 8007612:	d002      	beq.n	800761a <SAI_BlockSynchroConfig+0x1e>
 8007614:	2b01      	cmp	r3, #1
 8007616:	d003      	beq.n	8007620 <SAI_BlockSynchroConfig+0x24>
 8007618:	e008      	b.n	800762c <SAI_BlockSynchroConfig+0x30>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0U;
 800761a:	2300      	movs	r3, #0
 800761c:	60fb      	str	r3, [r7, #12]
      break;
 800761e:	e008      	b.n	8007632 <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007620:	2310      	movs	r3, #16
 8007622:	60fb      	str	r3, [r7, #12]
      break;
 8007624:	e005      	b.n	8007632 <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007626:	2320      	movs	r3, #32
 8007628:	60fb      	str	r3, [r7, #12]
      break;
 800762a:	e002      	b.n	8007632 <SAI_BlockSynchroConfig+0x36>
    default:
      tmpregisterGCR = 0U;
 800762c:	2300      	movs	r3, #0
 800762e:	60fb      	str	r3, [r7, #12]
      break;
 8007630:	bf00      	nop
  }
  SAI1->GCR = tmpregisterGCR;
 8007632:	4a04      	ldr	r2, [pc, #16]	@ (8007644 <SAI_BlockSynchroConfig+0x48>)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	6013      	str	r3, [r2, #0]
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
}
 8007638:	bf00      	nop
 800763a:	3714      	adds	r7, #20
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr
 8007644:	40015800 	.word	0x40015800

08007648 <SAI_GetInputClock>:
* @param  hsai pointer to a SAI_HandleTypeDef structure that contains
*               the configuration information for SAI module.
* @retval SAI Clock Input
*/
uint32_t SAI_GetInputClock(const SAI_HandleTypeDef *hsai)
{
 8007648:	b480      	push	{r7}
 800764a:	b087      	sub	sp, #28
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t saiclocksource = 0U;
 8007650:	2300      	movs	r3, #0
 8007652:	617b      	str	r3, [r7, #20]
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
  }
#endif /* STM32F446xx */
#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || \
  defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t vcoinput = 0U, tmpreg = 0U;
 8007654:	2300      	movs	r3, #0
 8007656:	613b      	str	r3, [r7, #16]
 8007658:	2300      	movs	r3, #0
 800765a:	60fb      	str	r3, [r7, #12]

  /* Check the SAI Block parameters */
  assert_param(IS_SAI_CLK_SOURCE(hsai->Init.ClockSource));

  /* SAI Block clock source selection */
  if (hsai->Instance == SAI1_Block_A)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a46      	ldr	r2, [pc, #280]	@ (800777c <SAI_GetInputClock+0x134>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d10b      	bne.n	800767e <SAI_GetInputClock+0x36>
  {
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(hsai->Init.ClockSource);
 8007666:	4b46      	ldr	r3, [pc, #280]	@ (8007780 <SAI_GetInputClock+0x138>)
 8007668:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800766c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	69db      	ldr	r3, [r3, #28]
 8007674:	4942      	ldr	r1, [pc, #264]	@ (8007780 <SAI_GetInputClock+0x138>)
 8007676:	4313      	orrs	r3, r2
 8007678:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
 800767c:	e00b      	b.n	8007696 <SAI_GetInputClock+0x4e>
  }
  else
  {
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG((uint32_t)(hsai->Init.ClockSource << 2U));
 800767e:	4b40      	ldr	r3, [pc, #256]	@ (8007780 <SAI_GetInputClock+0x138>)
 8007680:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007684:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	69db      	ldr	r3, [r3, #28]
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	493c      	ldr	r1, [pc, #240]	@ (8007780 <SAI_GetInputClock+0x138>)
 8007690:	4313      	orrs	r3, r2
 8007692:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /* VCO Input Clock value calculation */
  if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007696:	4b3a      	ldr	r3, [pc, #232]	@ (8007780 <SAI_GetInputClock+0x138>)
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d108      	bne.n	80076b4 <SAI_GetInputClock+0x6c>
  {
    /* In Case the PLL Source is HSI (Internal Clock) */
    vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80076a2:	4b37      	ldr	r3, [pc, #220]	@ (8007780 <SAI_GetInputClock+0x138>)
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80076aa:	4a36      	ldr	r2, [pc, #216]	@ (8007784 <SAI_GetInputClock+0x13c>)
 80076ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80076b0:	613b      	str	r3, [r7, #16]
 80076b2:	e007      	b.n	80076c4 <SAI_GetInputClock+0x7c>
  }
  else
  {
    /* In Case the PLL Source is HSE (External Clock) */
    vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80076b4:	4b32      	ldr	r3, [pc, #200]	@ (8007780 <SAI_GetInputClock+0x138>)
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80076bc:	4a32      	ldr	r2, [pc, #200]	@ (8007788 <SAI_GetInputClock+0x140>)
 80076be:	fbb2 f3f3 	udiv	r3, r2, r3
 80076c2:	613b      	str	r3, [r7, #16]
  {
    saiclocksource = EXTERNAL_CLOCK_VALUE;
  }
#else
  /* SAI_CLK_x : SAI Block Clock configuration for different clock sources selected */
  if (hsai->Init.ClockSource == SAI_CLKSOURCE_PLLSAI)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	69db      	ldr	r3, [r3, #28]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d121      	bne.n	8007710 <SAI_GetInputClock+0xc8>
  {
    /* Configure the PLLI2S division factor */
    /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
    /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
    tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 80076cc:	4b2c      	ldr	r3, [pc, #176]	@ (8007780 <SAI_GetInputClock+0x138>)
 80076ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076d2:	0e1b      	lsrs	r3, r3, #24
 80076d4:	f003 030f 	and.w	r3, r3, #15
 80076d8:	60fb      	str	r3, [r7, #12]
    saiclocksource = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U)) / (tmpreg);
 80076da:	4b29      	ldr	r3, [pc, #164]	@ (8007780 <SAI_GetInputClock+0x138>)
 80076dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076e0:	099b      	lsrs	r3, r3, #6
 80076e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076e6:	693a      	ldr	r2, [r7, #16]
 80076e8:	fb03 f202 	mul.w	r2, r3, r2
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80076f2:	617b      	str	r3, [r7, #20]

    /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
    tmpreg = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 80076f4:	4b22      	ldr	r3, [pc, #136]	@ (8007780 <SAI_GetInputClock+0x138>)
 80076f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80076fa:	0a1b      	lsrs	r3, r3, #8
 80076fc:	f003 031f 	and.w	r3, r3, #31
 8007700:	3301      	adds	r3, #1
 8007702:	60fb      	str	r3, [r7, #12]
    saiclocksource = saiclocksource / (tmpreg);
 8007704:	697a      	ldr	r2, [r7, #20]
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	fbb2 f3f3 	udiv	r3, r2, r3
 800770c:	617b      	str	r3, [r7, #20]
 800770e:	e02d      	b.n	800776c <SAI_GetInputClock+0x124>

  }
  else if (hsai->Init.ClockSource == SAI_CLKSOURCE_PLLI2S)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	69db      	ldr	r3, [r3, #28]
 8007714:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007718:	d120      	bne.n	800775c <SAI_GetInputClock+0x114>
  {
    /* Configure the PLLI2S division factor */
    /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
    /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
    tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 800771a:	4b19      	ldr	r3, [pc, #100]	@ (8007780 <SAI_GetInputClock+0x138>)
 800771c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007720:	0e1b      	lsrs	r3, r3, #24
 8007722:	f003 030f 	and.w	r3, r3, #15
 8007726:	60fb      	str	r3, [r7, #12]
    saiclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 8007728:	4b15      	ldr	r3, [pc, #84]	@ (8007780 <SAI_GetInputClock+0x138>)
 800772a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800772e:	099b      	lsrs	r3, r3, #6
 8007730:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007734:	693a      	ldr	r2, [r7, #16]
 8007736:	fb03 f202 	mul.w	r2, r3, r2
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007740:	617b      	str	r3, [r7, #20]

    /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
    tmpreg = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 8007742:	4b0f      	ldr	r3, [pc, #60]	@ (8007780 <SAI_GetInputClock+0x138>)
 8007744:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007748:	f003 031f 	and.w	r3, r3, #31
 800774c:	3301      	adds	r3, #1
 800774e:	60fb      	str	r3, [r7, #12]
    saiclocksource = saiclocksource / (tmpreg);
 8007750:	697a      	ldr	r2, [r7, #20]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	fbb2 f3f3 	udiv	r3, r2, r3
 8007758:	617b      	str	r3, [r7, #20]
 800775a:	e007      	b.n	800776c <SAI_GetInputClock+0x124>
  }
  else /* sConfig->ClockSource == SAI_CLKSource_Ext */
  {
    /* Enable the External Clock selection */
    __HAL_RCC_I2S_CONFIG(RCC_I2SCLKSOURCE_EXT);
 800775c:	4b08      	ldr	r3, [pc, #32]	@ (8007780 <SAI_GetInputClock+0x138>)
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	4a07      	ldr	r2, [pc, #28]	@ (8007780 <SAI_GetInputClock+0x138>)
 8007762:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007766:	6093      	str	r3, [r2, #8]

    saiclocksource = EXTERNAL_CLOCK_VALUE;
 8007768:	4b08      	ldr	r3, [pc, #32]	@ (800778c <SAI_GetInputClock+0x144>)
 800776a:	617b      	str	r3, [r7, #20]
  }
#endif /* STM32F413xx || STM32F423xx */
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
  /* the return result is the value of SAI clock */
  return saiclocksource;
 800776c:	697b      	ldr	r3, [r7, #20]
}
 800776e:	4618      	mov	r0, r3
 8007770:	371c      	adds	r7, #28
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr
 800777a:	bf00      	nop
 800777c:	40015804 	.word	0x40015804
 8007780:	40023800 	.word	0x40023800
 8007784:	00f42400 	.word	0x00f42400
 8007788:	007a1200 	.word	0x007a1200
 800778c:	00bb8000 	.word	0x00bb8000

08007790 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b082      	sub	sp, #8
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d101      	bne.n	80077a2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800779e:	2301      	movs	r3, #1
 80077a0:	e022      	b.n	80077e8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d105      	bne.n	80077ba <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2200      	movs	r2, #0
 80077b2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f7fa fff3 	bl	80027a0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2203      	movs	r2, #3
 80077be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 f814 	bl	80077f0 <HAL_SD_InitCard>
 80077c8:	4603      	mov	r3, r0
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d001      	beq.n	80077d2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80077ce:	2301      	movs	r3, #1
 80077d0:	e00a      	b.n	80077e8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2201      	movs	r2, #1
 80077e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80077e6:	2300      	movs	r3, #0
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3708      	adds	r7, #8
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80077f0:	b5b0      	push	{r4, r5, r7, lr}
 80077f2:	b08e      	sub	sp, #56	@ 0x38
 80077f4:	af04      	add	r7, sp, #16
 80077f6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80077f8:	2300      	movs	r3, #0
 80077fa:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80077fc:	2300      	movs	r3, #0
 80077fe:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007800:	2300      	movs	r3, #0
 8007802:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8007804:	2300      	movs	r3, #0
 8007806:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8007808:	2300      	movs	r3, #0
 800780a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800780c:	2376      	movs	r3, #118	@ 0x76
 800780e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681d      	ldr	r5, [r3, #0]
 8007814:	466c      	mov	r4, sp
 8007816:	f107 0314 	add.w	r3, r7, #20
 800781a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800781e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007822:	f107 0308 	add.w	r3, r7, #8
 8007826:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007828:	4628      	mov	r0, r5
 800782a:	f003 f8a7 	bl	800a97c <SDIO_Init>
 800782e:	4603      	mov	r3, r0
 8007830:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8007834:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007838:	2b00      	cmp	r3, #0
 800783a:	d001      	beq.n	8007840 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800783c:	2301      	movs	r3, #1
 800783e:	e04f      	b.n	80078e0 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8007840:	4b29      	ldr	r3, [pc, #164]	@ (80078e8 <HAL_SD_InitCard+0xf8>)
 8007842:	2200      	movs	r2, #0
 8007844:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4618      	mov	r0, r3
 800784c:	f003 f8df 	bl	800aa0e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8007850:	4b25      	ldr	r3, [pc, #148]	@ (80078e8 <HAL_SD_InitCard+0xf8>)
 8007852:	2201      	movs	r2, #1
 8007854:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8007856:	2002      	movs	r0, #2
 8007858:	f7fb fca8 	bl	80031ac <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 ffef 	bl	8008840 <SD_PowerON>
 8007862:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007864:	6a3b      	ldr	r3, [r7, #32]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d00b      	beq.n	8007882 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2201      	movs	r2, #1
 800786e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007876:	6a3b      	ldr	r3, [r7, #32]
 8007878:	431a      	orrs	r2, r3
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	e02e      	b.n	80078e0 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 ff0e 	bl	80086a4 <SD_InitCard>
 8007888:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800788a:	6a3b      	ldr	r3, [r7, #32]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d00b      	beq.n	80078a8 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2201      	movs	r2, #1
 8007894:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800789c:	6a3b      	ldr	r3, [r7, #32]
 800789e:	431a      	orrs	r2, r3
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	e01b      	b.n	80078e0 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80078b0:	4618      	mov	r0, r3
 80078b2:	f003 f93e 	bl	800ab32 <SDMMC_CmdBlockLength>
 80078b6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80078b8:	6a3b      	ldr	r3, [r7, #32]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d00f      	beq.n	80078de <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a0a      	ldr	r2, [pc, #40]	@ (80078ec <HAL_SD_InitCard+0xfc>)
 80078c4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80078ca:	6a3b      	ldr	r3, [r7, #32]
 80078cc:	431a      	orrs	r2, r3
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2201      	movs	r2, #1
 80078d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80078da:	2301      	movs	r3, #1
 80078dc:	e000      	b.n	80078e0 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80078de:	2300      	movs	r3, #0
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3728      	adds	r7, #40	@ 0x28
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bdb0      	pop	{r4, r5, r7, pc}
 80078e8:	422580a0 	.word	0x422580a0
 80078ec:	004005ff 	.word	0x004005ff

080078f0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b08c      	sub	sp, #48	@ 0x30
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	60b9      	str	r1, [r7, #8]
 80078fa:	607a      	str	r2, [r7, #4]
 80078fc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d107      	bne.n	8007918 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800790c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	e0be      	b.n	8007a96 <HAL_SD_ReadBlocks_DMA+0x1a6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800791e:	b2db      	uxtb	r3, r3
 8007920:	2b01      	cmp	r3, #1
 8007922:	f040 80b7 	bne.w	8007a94 <HAL_SD_ReadBlocks_DMA+0x1a4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2200      	movs	r2, #0
 800792a:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800792c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	441a      	add	r2, r3
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007936:	429a      	cmp	r2, r3
 8007938:	d907      	bls.n	800794a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800793e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8007946:	2301      	movs	r3, #1
 8007948:	e0a5      	b.n	8007a96 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2203      	movs	r2, #3
 800794e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	2200      	movs	r2, #0
 8007958:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8007968:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800796e:	4a4c      	ldr	r2, [pc, #304]	@ (8007aa0 <HAL_SD_ReadBlocks_DMA+0x1b0>)
 8007970:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007976:	4a4b      	ldr	r2, [pc, #300]	@ (8007aa4 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8007978:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800797e:	2200      	movs	r2, #0
 8007980:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007986:	2200      	movs	r2, #0
 8007988:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800799a:	689a      	ldr	r2, [r3, #8]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	430a      	orrs	r2, r1
 80079a4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	3380      	adds	r3, #128	@ 0x80
 80079b0:	4619      	mov	r1, r3
 80079b2:	68ba      	ldr	r2, [r7, #8]
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	025b      	lsls	r3, r3, #9
 80079b8:	089b      	lsrs	r3, r3, #2
 80079ba:	f7fc fabb 	bl	8003f34 <HAL_DMA_Start_IT>
 80079be:	4603      	mov	r3, r0
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d017      	beq.n	80079f4 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 80079d2:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a33      	ldr	r2, [pc, #204]	@ (8007aa8 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80079da:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079e0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2201      	movs	r2, #1
 80079ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80079f0:	2301      	movs	r3, #1
 80079f2:	e050      	b.n	8007a96 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80079f4:	4b2d      	ldr	r3, [pc, #180]	@ (8007aac <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80079f6:	2201      	movs	r2, #1
 80079f8:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d002      	beq.n	8007a08 <HAL_SD_ReadBlocks_DMA+0x118>
      {
        add *= 512U;
 8007a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a04:	025b      	lsls	r3, r3, #9
 8007a06:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007a08:	f04f 33ff 	mov.w	r3, #4294967295
 8007a0c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	025b      	lsls	r3, r3, #9
 8007a12:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007a14:	2390      	movs	r3, #144	@ 0x90
 8007a16:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007a18:	2302      	movs	r3, #2
 8007a1a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8007a20:	2301      	movs	r3, #1
 8007a22:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f107 0210 	add.w	r2, r7, #16
 8007a2c:	4611      	mov	r1, r2
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f003 f853 	bl	800aada <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	d90a      	bls.n	8007a50 <HAL_SD_ReadBlocks_DMA+0x160>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2282      	movs	r2, #130	@ 0x82
 8007a3e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a46:	4618      	mov	r0, r3
 8007a48:	f003 f8b7 	bl	800abba <SDMMC_CmdReadMultiBlock>
 8007a4c:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8007a4e:	e009      	b.n	8007a64 <HAL_SD_ReadBlocks_DMA+0x174>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2281      	movs	r2, #129	@ 0x81
 8007a54:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f003 f88a 	bl	800ab76 <SDMMC_CmdReadSingleBlock>
 8007a62:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8007a64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d012      	beq.n	8007a90 <HAL_SD_ReadBlocks_DMA+0x1a0>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a0e      	ldr	r2, [pc, #56]	@ (8007aa8 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8007a70:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a78:	431a      	orrs	r2, r3
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2201      	movs	r2, #1
 8007a82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	e002      	b.n	8007a96 <HAL_SD_ReadBlocks_DMA+0x1a6>
      }

      return HAL_OK;
 8007a90:	2300      	movs	r3, #0
 8007a92:	e000      	b.n	8007a96 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_BUSY;
 8007a94:	2302      	movs	r3, #2
  }
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3730      	adds	r7, #48	@ 0x30
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	080084b3 	.word	0x080084b3
 8007aa4:	08008525 	.word	0x08008525
 8007aa8:	004005ff 	.word	0x004005ff
 8007aac:	4225858c 	.word	0x4225858c

08007ab0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b08c      	sub	sp, #48	@ 0x30
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	60b9      	str	r1, [r7, #8]
 8007aba:	607a      	str	r2, [r7, #4]
 8007abc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d107      	bne.n	8007ad8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007acc:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	e0c1      	b.n	8007c5c <HAL_SD_WriteBlocks_DMA+0x1ac>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007ade:	b2db      	uxtb	r3, r3
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	f040 80ba 	bne.w	8007c5a <HAL_SD_WriteBlocks_DMA+0x1aa>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007aec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	441a      	add	r2, r3
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d907      	bls.n	8007b0a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007afe:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	e0a8      	b.n	8007c5c <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2203      	movs	r2, #3
 8007b0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	2200      	movs	r2, #0
 8007b18:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f042 021a 	orr.w	r2, r2, #26
 8007b28:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b2e:	4a4d      	ldr	r2, [pc, #308]	@ (8007c64 <HAL_SD_WriteBlocks_DMA+0x1b4>)
 8007b30:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b36:	4a4c      	ldr	r2, [pc, #304]	@ (8007c68 <HAL_SD_WriteBlocks_DMA+0x1b8>)
 8007b38:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b3e:	2200      	movs	r2, #0
 8007b40:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d002      	beq.n	8007b50 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8007b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b4c:	025b      	lsls	r3, r3, #9
 8007b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	d90a      	bls.n	8007b6c <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	22a0      	movs	r2, #160	@ 0xa0
 8007b5a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b62:	4618      	mov	r0, r3
 8007b64:	f003 f86d 	bl	800ac42 <SDMMC_CmdWriteMultiBlock>
 8007b68:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8007b6a:	e009      	b.n	8007b80 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2290      	movs	r2, #144	@ 0x90
 8007b70:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f003 f840 	bl	800abfe <SDMMC_CmdWriteSingleBlock>
 8007b7e:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d012      	beq.n	8007bac <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a38      	ldr	r2, [pc, #224]	@ (8007c6c <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8007b8c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b94:	431a      	orrs	r2, r3
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007ba8:	2301      	movs	r3, #1
 8007baa:	e057      	b.n	8007c5c <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8007bac:	4b30      	ldr	r3, [pc, #192]	@ (8007c70 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8007bae:	2201      	movs	r2, #1
 8007bb0:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bb6:	2240      	movs	r2, #64	@ 0x40
 8007bb8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bca:	689a      	ldr	r2, [r3, #8]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	430a      	orrs	r2, r1
 8007bd4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007bda:	68b9      	ldr	r1, [r7, #8]
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	3380      	adds	r3, #128	@ 0x80
 8007be2:	461a      	mov	r2, r3
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	025b      	lsls	r3, r3, #9
 8007be8:	089b      	lsrs	r3, r3, #2
 8007bea:	f7fc f9a3 	bl	8003f34 <HAL_DMA_Start_IT>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d01a      	beq.n	8007c2a <HAL_SD_WriteBlocks_DMA+0x17a>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f022 021a 	bic.w	r2, r2, #26
 8007c02:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a18      	ldr	r2, [pc, #96]	@ (8007c6c <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8007c0a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c10:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2200      	movs	r2, #0
 8007c24:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007c26:	2301      	movs	r3, #1
 8007c28:	e018      	b.n	8007c5c <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8007c2e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	025b      	lsls	r3, r3, #9
 8007c34:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007c36:	2390      	movs	r3, #144	@ 0x90
 8007c38:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8007c42:	2301      	movs	r3, #1
 8007c44:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f107 0210 	add.w	r2, r7, #16
 8007c4e:	4611      	mov	r1, r2
 8007c50:	4618      	mov	r0, r3
 8007c52:	f002 ff42 	bl	800aada <SDIO_ConfigData>

      return HAL_OK;
 8007c56:	2300      	movs	r3, #0
 8007c58:	e000      	b.n	8007c5c <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
  }
  else
  {
    return HAL_BUSY;
 8007c5a:	2302      	movs	r3, #2
  }
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3730      	adds	r7, #48	@ 0x30
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}
 8007c64:	08008489 	.word	0x08008489
 8007c68:	08008525 	.word	0x08008525
 8007c6c:	004005ff 	.word	0x004005ff
 8007c70:	4225858c 	.word	0x4225858c

08007c74 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b084      	sub	sp, #16
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c80:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d008      	beq.n	8007ca2 <HAL_SD_IRQHandler+0x2e>
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f003 0308 	and.w	r3, r3, #8
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d003      	beq.n	8007ca2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 ffef 	bl	8008c7e <SD_Read_IT>
 8007ca0:	e155      	b.n	8007f4e <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ca8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	f000 808f 	beq.w	8007dd0 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007cba:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cc2:	687a      	ldr	r2, [r7, #4]
 8007cc4:	6812      	ldr	r2, [r2, #0]
 8007cc6:	f423 4341 	bic.w	r3, r3, #49408	@ 0xc100
 8007cca:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8007cce:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f022 0201 	bic.w	r2, r2, #1
 8007cde:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f003 0308 	and.w	r3, r3, #8
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d039      	beq.n	8007d5e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	f003 0302 	and.w	r3, r3, #2
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d104      	bne.n	8007cfe <HAL_SD_IRQHandler+0x8a>
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f003 0320 	and.w	r3, r3, #32
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d011      	beq.n	8007d22 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4618      	mov	r0, r3
 8007d04:	f002 ffc0 	bl	800ac88 <SDMMC_CmdStopTransfer>
 8007d08:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d008      	beq.n	8007d22 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	431a      	orrs	r2, r3
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f000 f91f 	bl	8007f60 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f240 523a 	movw	r2, #1338	@ 0x53a
 8007d2a:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2200      	movs	r2, #0
 8007d38:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f003 0301 	and.w	r3, r3, #1
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d104      	bne.n	8007d4e <HAL_SD_IRQHandler+0xda>
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f003 0302 	and.w	r3, r3, #2
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d003      	beq.n	8007d56 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f003 fc26 	bl	800b5a0 <HAL_SD_RxCpltCallback>
 8007d54:	e0fb      	b.n	8007f4e <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f003 fc18 	bl	800b58c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007d5c:	e0f7      	b.n	8007f4e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	f000 80f2 	beq.w	8007f4e <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f003 0320 	and.w	r3, r3, #32
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d011      	beq.n	8007d98 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f002 ff85 	bl	800ac88 <SDMMC_CmdStopTransfer>
 8007d7e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d008      	beq.n	8007d98 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	431a      	orrs	r2, r3
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f000 f8e4 	bl	8007f60 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f003 0301 	and.w	r3, r3, #1
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	f040 80d5 	bne.w	8007f4e <HAL_SD_IRQHandler+0x2da>
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f003 0302 	and.w	r3, r3, #2
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	f040 80cf 	bne.w	8007f4e <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f022 0208 	bic.w	r2, r2, #8
 8007dbe:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f003 fbdf 	bl	800b58c <HAL_SD_TxCpltCallback>
}
 8007dce:	e0be      	b.n	8007f4e <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d008      	beq.n	8007df0 <HAL_SD_IRQHandler+0x17c>
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	f003 0308 	and.w	r3, r3, #8
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d003      	beq.n	8007df0 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 ff99 	bl	8008d20 <SD_Write_IT>
 8007dee:	e0ae      	b.n	8007f4e <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007df6:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	f000 80a7 	beq.w	8007f4e <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e06:	f003 0302 	and.w	r3, r3, #2
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d005      	beq.n	8007e1a <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e12:	f043 0202 	orr.w	r2, r3, #2
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e20:	f003 0308 	and.w	r3, r3, #8
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d005      	beq.n	8007e34 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e2c:	f043 0208 	orr.w	r2, r3, #8
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e3a:	f003 0320 	and.w	r3, r3, #32
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d005      	beq.n	8007e4e <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e46:	f043 0220 	orr.w	r2, r3, #32
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e54:	f003 0310 	and.w	r3, r3, #16
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d005      	beq.n	8007e68 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e60:	f043 0210 	orr.w	r2, r3, #16
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f240 523a 	movw	r2, #1338	@ 0x53a
 8007e70:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8007e80:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4618      	mov	r0, r3
 8007e88:	f002 fefe 	bl	800ac88 <SDMMC_CmdStopTransfer>
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e92:	431a      	orrs	r2, r3
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f003 0308 	and.w	r3, r3, #8
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d00a      	beq.n	8007eb8 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2200      	movs	r2, #0
 8007eae:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 f855 	bl	8007f60 <HAL_SD_ErrorCallback>
}
 8007eb6:	e04a      	b.n	8007f4e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d045      	beq.n	8007f4e <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	f003 0310 	and.w	r3, r3, #16
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d104      	bne.n	8007ed6 <HAL_SD_IRQHandler+0x262>
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f003 0320 	and.w	r3, r3, #32
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d011      	beq.n	8007efa <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007eda:	4a1f      	ldr	r2, [pc, #124]	@ (8007f58 <HAL_SD_IRQHandler+0x2e4>)
 8007edc:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f7fc f8ee 	bl	80040c4 <HAL_DMA_Abort_IT>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d02f      	beq.n	8007f4e <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f000 fb68 	bl	80085c8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007ef8:	e029      	b.n	8007f4e <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f003 0301 	and.w	r3, r3, #1
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d104      	bne.n	8007f0e <HAL_SD_IRQHandler+0x29a>
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f003 0302 	and.w	r3, r3, #2
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d011      	beq.n	8007f32 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f12:	4a12      	ldr	r2, [pc, #72]	@ (8007f5c <HAL_SD_IRQHandler+0x2e8>)
 8007f14:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f7fc f8d2 	bl	80040c4 <HAL_DMA_Abort_IT>
 8007f20:	4603      	mov	r3, r0
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d013      	beq.n	8007f4e <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f000 fb83 	bl	8008636 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007f30:	e00d      	b.n	8007f4e <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2200      	movs	r2, #0
 8007f44:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f003 fb16 	bl	800b578 <HAL_SD_AbortCallback>
}
 8007f4c:	e7ff      	b.n	8007f4e <HAL_SD_IRQHandler+0x2da>
 8007f4e:	bf00      	nop
 8007f50:	3710      	adds	r7, #16
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
 8007f56:	bf00      	nop
 8007f58:	080085c9 	.word	0x080085c9
 8007f5c:	08008637 	.word	0x08008637

08007f60 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b083      	sub	sp, #12
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007f68:	bf00      	nop
 8007f6a:	370c      	adds	r7, #12
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr

08007f74 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b083      	sub	sp, #12
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f82:	0f9b      	lsrs	r3, r3, #30
 8007f84:	b2da      	uxtb	r2, r3
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f8e:	0e9b      	lsrs	r3, r3, #26
 8007f90:	b2db      	uxtb	r3, r3
 8007f92:	f003 030f 	and.w	r3, r3, #15
 8007f96:	b2da      	uxtb	r2, r3
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007fa0:	0e1b      	lsrs	r3, r3, #24
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	f003 0303 	and.w	r3, r3, #3
 8007fa8:	b2da      	uxtb	r2, r3
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007fb2:	0c1b      	lsrs	r3, r3, #16
 8007fb4:	b2da      	uxtb	r2, r3
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007fbe:	0a1b      	lsrs	r3, r3, #8
 8007fc0:	b2da      	uxtb	r2, r3
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007fca:	b2da      	uxtb	r2, r3
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007fd4:	0d1b      	lsrs	r3, r3, #20
 8007fd6:	b29a      	uxth	r2, r3
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007fe0:	0c1b      	lsrs	r3, r3, #16
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	f003 030f 	and.w	r3, r3, #15
 8007fe8:	b2da      	uxtb	r2, r3
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007ff2:	0bdb      	lsrs	r3, r3, #15
 8007ff4:	b2db      	uxtb	r3, r3
 8007ff6:	f003 0301 	and.w	r3, r3, #1
 8007ffa:	b2da      	uxtb	r2, r3
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008004:	0b9b      	lsrs	r3, r3, #14
 8008006:	b2db      	uxtb	r3, r3
 8008008:	f003 0301 	and.w	r3, r3, #1
 800800c:	b2da      	uxtb	r2, r3
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008016:	0b5b      	lsrs	r3, r3, #13
 8008018:	b2db      	uxtb	r3, r3
 800801a:	f003 0301 	and.w	r3, r3, #1
 800801e:	b2da      	uxtb	r2, r3
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008028:	0b1b      	lsrs	r3, r3, #12
 800802a:	b2db      	uxtb	r3, r3
 800802c:	f003 0301 	and.w	r3, r3, #1
 8008030:	b2da      	uxtb	r2, r3
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	2200      	movs	r2, #0
 800803a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008040:	2b00      	cmp	r3, #0
 8008042:	d163      	bne.n	800810c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008048:	009a      	lsls	r2, r3, #2
 800804a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800804e:	4013      	ands	r3, r2
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8008054:	0f92      	lsrs	r2, r2, #30
 8008056:	431a      	orrs	r2, r3
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008060:	0edb      	lsrs	r3, r3, #27
 8008062:	b2db      	uxtb	r3, r3
 8008064:	f003 0307 	and.w	r3, r3, #7
 8008068:	b2da      	uxtb	r2, r3
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008072:	0e1b      	lsrs	r3, r3, #24
 8008074:	b2db      	uxtb	r3, r3
 8008076:	f003 0307 	and.w	r3, r3, #7
 800807a:	b2da      	uxtb	r2, r3
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008084:	0d5b      	lsrs	r3, r3, #21
 8008086:	b2db      	uxtb	r3, r3
 8008088:	f003 0307 	and.w	r3, r3, #7
 800808c:	b2da      	uxtb	r2, r3
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008096:	0c9b      	lsrs	r3, r3, #18
 8008098:	b2db      	uxtb	r3, r3
 800809a:	f003 0307 	and.w	r3, r3, #7
 800809e:	b2da      	uxtb	r2, r3
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080a8:	0bdb      	lsrs	r3, r3, #15
 80080aa:	b2db      	uxtb	r3, r3
 80080ac:	f003 0307 	and.w	r3, r3, #7
 80080b0:	b2da      	uxtb	r2, r3
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	691b      	ldr	r3, [r3, #16]
 80080ba:	1c5a      	adds	r2, r3, #1
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	7e1b      	ldrb	r3, [r3, #24]
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	f003 0307 	and.w	r3, r3, #7
 80080ca:	3302      	adds	r3, #2
 80080cc:	2201      	movs	r2, #1
 80080ce:	fa02 f303 	lsl.w	r3, r2, r3
 80080d2:	687a      	ldr	r2, [r7, #4]
 80080d4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80080d6:	fb03 f202 	mul.w	r2, r3, r2
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	7a1b      	ldrb	r3, [r3, #8]
 80080e2:	b2db      	uxtb	r3, r3
 80080e4:	f003 030f 	and.w	r3, r3, #15
 80080e8:	2201      	movs	r2, #1
 80080ea:	409a      	lsls	r2, r3
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80080f8:	0a52      	lsrs	r2, r2, #9
 80080fa:	fb03 f202 	mul.w	r2, r3, r2
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008108:	661a      	str	r2, [r3, #96]	@ 0x60
 800810a:	e031      	b.n	8008170 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008110:	2b01      	cmp	r3, #1
 8008112:	d11d      	bne.n	8008150 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008118:	041b      	lsls	r3, r3, #16
 800811a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008122:	0c1b      	lsrs	r3, r3, #16
 8008124:	431a      	orrs	r2, r3
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	691b      	ldr	r3, [r3, #16]
 800812e:	3301      	adds	r3, #1
 8008130:	029a      	lsls	r2, r3, #10
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008144:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	661a      	str	r2, [r3, #96]	@ 0x60
 800814e:	e00f      	b.n	8008170 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a58      	ldr	r2, [pc, #352]	@ (80082b8 <HAL_SD_GetCardCSD+0x344>)
 8008156:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800815c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2201      	movs	r2, #1
 8008168:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800816c:	2301      	movs	r3, #1
 800816e:	e09d      	b.n	80082ac <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008174:	0b9b      	lsrs	r3, r3, #14
 8008176:	b2db      	uxtb	r3, r3
 8008178:	f003 0301 	and.w	r3, r3, #1
 800817c:	b2da      	uxtb	r2, r3
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008186:	09db      	lsrs	r3, r3, #7
 8008188:	b2db      	uxtb	r3, r3
 800818a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800818e:	b2da      	uxtb	r2, r3
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008198:	b2db      	uxtb	r3, r3
 800819a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800819e:	b2da      	uxtb	r2, r3
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081a8:	0fdb      	lsrs	r3, r3, #31
 80081aa:	b2da      	uxtb	r2, r3
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081b4:	0f5b      	lsrs	r3, r3, #29
 80081b6:	b2db      	uxtb	r3, r3
 80081b8:	f003 0303 	and.w	r3, r3, #3
 80081bc:	b2da      	uxtb	r2, r3
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081c6:	0e9b      	lsrs	r3, r3, #26
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	f003 0307 	and.w	r3, r3, #7
 80081ce:	b2da      	uxtb	r2, r3
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081d8:	0d9b      	lsrs	r3, r3, #22
 80081da:	b2db      	uxtb	r3, r3
 80081dc:	f003 030f 	and.w	r3, r3, #15
 80081e0:	b2da      	uxtb	r2, r3
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081ea:	0d5b      	lsrs	r3, r3, #21
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	f003 0301 	and.w	r3, r3, #1
 80081f2:	b2da      	uxtb	r2, r3
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	2200      	movs	r2, #0
 80081fe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008206:	0c1b      	lsrs	r3, r3, #16
 8008208:	b2db      	uxtb	r3, r3
 800820a:	f003 0301 	and.w	r3, r3, #1
 800820e:	b2da      	uxtb	r2, r3
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800821a:	0bdb      	lsrs	r3, r3, #15
 800821c:	b2db      	uxtb	r3, r3
 800821e:	f003 0301 	and.w	r3, r3, #1
 8008222:	b2da      	uxtb	r2, r3
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800822e:	0b9b      	lsrs	r3, r3, #14
 8008230:	b2db      	uxtb	r3, r3
 8008232:	f003 0301 	and.w	r3, r3, #1
 8008236:	b2da      	uxtb	r2, r3
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008242:	0b5b      	lsrs	r3, r3, #13
 8008244:	b2db      	uxtb	r3, r3
 8008246:	f003 0301 	and.w	r3, r3, #1
 800824a:	b2da      	uxtb	r2, r3
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008256:	0b1b      	lsrs	r3, r3, #12
 8008258:	b2db      	uxtb	r3, r3
 800825a:	f003 0301 	and.w	r3, r3, #1
 800825e:	b2da      	uxtb	r2, r3
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800826a:	0a9b      	lsrs	r3, r3, #10
 800826c:	b2db      	uxtb	r3, r3
 800826e:	f003 0303 	and.w	r3, r3, #3
 8008272:	b2da      	uxtb	r2, r3
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800827e:	0a1b      	lsrs	r3, r3, #8
 8008280:	b2db      	uxtb	r3, r3
 8008282:	f003 0303 	and.w	r3, r3, #3
 8008286:	b2da      	uxtb	r2, r3
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008292:	085b      	lsrs	r3, r3, #1
 8008294:	b2db      	uxtb	r3, r3
 8008296:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800829a:	b2da      	uxtb	r2, r3
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	2201      	movs	r2, #1
 80082a6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80082aa:	2300      	movs	r3, #0
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	370c      	adds	r7, #12
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr
 80082b8:	004005ff 	.word	0x004005ff

080082bc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80082bc:	b480      	push	{r7}
 80082be:	b083      	sub	sp, #12
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008306:	2300      	movs	r3, #0
}
 8008308:	4618      	mov	r0, r3
 800830a:	370c      	adds	r7, #12
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr

08008314 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008314:	b5b0      	push	{r4, r5, r7, lr}
 8008316:	b08e      	sub	sp, #56	@ 0x38
 8008318:	af04      	add	r7, sp, #16
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800831e:	2300      	movs	r3, #0
 8008320:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2203      	movs	r2, #3
 8008328:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008330:	2b03      	cmp	r3, #3
 8008332:	d02e      	beq.n	8008392 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800833a:	d106      	bne.n	800834a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008340:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	639a      	str	r2, [r3, #56]	@ 0x38
 8008348:	e029      	b.n	800839e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008350:	d10a      	bne.n	8008368 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 fb2a 	bl	80089ac <SD_WideBus_Enable>
 8008358:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800835e:	6a3b      	ldr	r3, [r7, #32]
 8008360:	431a      	orrs	r2, r3
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	639a      	str	r2, [r3, #56]	@ 0x38
 8008366:	e01a      	b.n	800839e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d10a      	bne.n	8008384 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 fb67 	bl	8008a42 <SD_WideBus_Disable>
 8008374:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800837a:	6a3b      	ldr	r3, [r7, #32]
 800837c:	431a      	orrs	r2, r3
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	639a      	str	r2, [r3, #56]	@ 0x38
 8008382:	e00c      	b.n	800839e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008388:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	639a      	str	r2, [r3, #56]	@ 0x38
 8008390:	e005      	b.n	800839e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008396:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d00b      	beq.n	80083be <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a26      	ldr	r2, [pc, #152]	@ (8008444 <HAL_SD_ConfigWideBusOperation+0x130>)
 80083ac:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2201      	movs	r2, #1
 80083b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 80083b6:	2301      	movs	r3, #1
 80083b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80083bc:	e01f      	b.n	80083fe <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	689b      	ldr	r3, [r3, #8]
 80083c8:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	68db      	ldr	r3, [r3, #12]
 80083ce:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	695b      	ldr	r3, [r3, #20]
 80083d8:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	699b      	ldr	r3, [r3, #24]
 80083de:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681d      	ldr	r5, [r3, #0]
 80083e4:	466c      	mov	r4, sp
 80083e6:	f107 0314 	add.w	r3, r7, #20
 80083ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80083ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80083f2:	f107 0308 	add.w	r3, r7, #8
 80083f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80083f8:	4628      	mov	r0, r5
 80083fa:	f002 fabf 	bl	800a97c <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008406:	4618      	mov	r0, r3
 8008408:	f002 fb93 	bl	800ab32 <SDMMC_CmdBlockLength>
 800840c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800840e:	6a3b      	ldr	r3, [r7, #32]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d00c      	beq.n	800842e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a0a      	ldr	r2, [pc, #40]	@ (8008444 <HAL_SD_ConfigWideBusOperation+0x130>)
 800841a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008420:	6a3b      	ldr	r3, [r7, #32]
 8008422:	431a      	orrs	r2, r3
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8008428:	2301      	movs	r3, #1
 800842a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2201      	movs	r2, #1
 8008432:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8008436:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800843a:	4618      	mov	r0, r3
 800843c:	3728      	adds	r7, #40	@ 0x28
 800843e:	46bd      	mov	sp, r7
 8008440:	bdb0      	pop	{r4, r5, r7, pc}
 8008442:	bf00      	nop
 8008444:	004005ff 	.word	0x004005ff

08008448 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b086      	sub	sp, #24
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008450:	2300      	movs	r3, #0
 8008452:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008454:	f107 030c 	add.w	r3, r7, #12
 8008458:	4619      	mov	r1, r3
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 fa7e 	bl	800895c <SD_SendStatus>
 8008460:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d005      	beq.n	8008474 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	431a      	orrs	r2, r3
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	0a5b      	lsrs	r3, r3, #9
 8008478:	f003 030f 	and.w	r3, r3, #15
 800847c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800847e:	693b      	ldr	r3, [r7, #16]
}
 8008480:	4618      	mov	r0, r3
 8008482:	3718      	adds	r7, #24
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008488:	b480      	push	{r7}
 800848a:	b085      	sub	sp, #20
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008494:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80084a4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80084a6:	bf00      	nop
 80084a8:	3714      	adds	r7, #20
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr

080084b2 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b084      	sub	sp, #16
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084be:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084c4:	2b82      	cmp	r3, #130	@ 0x82
 80084c6:	d111      	bne.n	80084ec <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4618      	mov	r0, r3
 80084ce:	f002 fbdb 	bl	800ac88 <SDMMC_CmdStopTransfer>
 80084d2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d008      	beq.n	80084ec <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	431a      	orrs	r2, r3
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80084e6:	68f8      	ldr	r0, [r7, #12]
 80084e8:	f7ff fd3a 	bl	8007f60 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f022 0208 	bic.w	r2, r2, #8
 80084fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008504:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2201      	movs	r2, #1
 800850a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2200      	movs	r2, #0
 8008512:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8008514:	68f8      	ldr	r0, [r7, #12]
 8008516:	f003 f843 	bl	800b5a0 <HAL_SD_RxCpltCallback>
#endif
}
 800851a:	bf00      	nop
 800851c:	3710      	adds	r7, #16
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
	...

08008524 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b086      	sub	sp, #24
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008530:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f7fb ff72 	bl	800441c <HAL_DMA_GetError>
 8008538:	4603      	mov	r3, r0
 800853a:	2b02      	cmp	r3, #2
 800853c:	d03e      	beq.n	80085bc <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008542:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008544:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800854a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800854c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	2b01      	cmp	r3, #1
 8008552:	d002      	beq.n	800855a <SD_DMAError+0x36>
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	2b01      	cmp	r3, #1
 8008558:	d12d      	bne.n	80085b6 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4a19      	ldr	r2, [pc, #100]	@ (80085c4 <SD_DMAError+0xa0>)
 8008560:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8008570:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008576:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800857e:	6978      	ldr	r0, [r7, #20]
 8008580:	f7ff ff62 	bl	8008448 <HAL_SD_GetCardState>
 8008584:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	2b06      	cmp	r3, #6
 800858a:	d002      	beq.n	8008592 <SD_DMAError+0x6e>
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	2b05      	cmp	r3, #5
 8008590:	d10a      	bne.n	80085a8 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4618      	mov	r0, r3
 8008598:	f002 fb76 	bl	800ac88 <SDMMC_CmdStopTransfer>
 800859c:	4602      	mov	r2, r0
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085a2:	431a      	orrs	r2, r3
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	2201      	movs	r2, #1
 80085ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	2200      	movs	r2, #0
 80085b4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80085b6:	6978      	ldr	r0, [r7, #20]
 80085b8:	f7ff fcd2 	bl	8007f60 <HAL_SD_ErrorCallback>
#endif
  }
}
 80085bc:	bf00      	nop
 80085be:	3718      	adds	r7, #24
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}
 80085c4:	004005ff 	.word	0x004005ff

080085c8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b084      	sub	sp, #16
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085d4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f240 523a 	movw	r2, #1338	@ 0x53a
 80085de:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80085e0:	68f8      	ldr	r0, [r7, #12]
 80085e2:	f7ff ff31 	bl	8008448 <HAL_SD_GetCardState>
 80085e6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2201      	movs	r2, #1
 80085ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2200      	movs	r2, #0
 80085f4:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	2b06      	cmp	r3, #6
 80085fa:	d002      	beq.n	8008602 <SD_DMATxAbort+0x3a>
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	2b05      	cmp	r3, #5
 8008600:	d10a      	bne.n	8008618 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4618      	mov	r0, r3
 8008608:	f002 fb3e 	bl	800ac88 <SDMMC_CmdStopTransfer>
 800860c:	4602      	mov	r2, r0
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008612:	431a      	orrs	r2, r3
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800861c:	2b00      	cmp	r3, #0
 800861e:	d103      	bne.n	8008628 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008620:	68f8      	ldr	r0, [r7, #12]
 8008622:	f002 ffa9 	bl	800b578 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008626:	e002      	b.n	800862e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008628:	68f8      	ldr	r0, [r7, #12]
 800862a:	f7ff fc99 	bl	8007f60 <HAL_SD_ErrorCallback>
}
 800862e:	bf00      	nop
 8008630:	3710      	adds	r7, #16
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}

08008636 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8008636:	b580      	push	{r7, lr}
 8008638:	b084      	sub	sp, #16
 800863a:	af00      	add	r7, sp, #0
 800863c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008642:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f240 523a 	movw	r2, #1338	@ 0x53a
 800864c:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800864e:	68f8      	ldr	r0, [r7, #12]
 8008650:	f7ff fefa 	bl	8008448 <HAL_SD_GetCardState>
 8008654:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2201      	movs	r2, #1
 800865a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2200      	movs	r2, #0
 8008662:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	2b06      	cmp	r3, #6
 8008668:	d002      	beq.n	8008670 <SD_DMARxAbort+0x3a>
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	2b05      	cmp	r3, #5
 800866e:	d10a      	bne.n	8008686 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4618      	mov	r0, r3
 8008676:	f002 fb07 	bl	800ac88 <SDMMC_CmdStopTransfer>
 800867a:	4602      	mov	r2, r0
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008680:	431a      	orrs	r2, r3
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800868a:	2b00      	cmp	r3, #0
 800868c:	d103      	bne.n	8008696 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800868e:	68f8      	ldr	r0, [r7, #12]
 8008690:	f002 ff72 	bl	800b578 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008694:	e002      	b.n	800869c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008696:	68f8      	ldr	r0, [r7, #12]
 8008698:	f7ff fc62 	bl	8007f60 <HAL_SD_ErrorCallback>
}
 800869c:	bf00      	nop
 800869e:	3710      	adds	r7, #16
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80086a4:	b5b0      	push	{r4, r5, r7, lr}
 80086a6:	b094      	sub	sp, #80	@ 0x50
 80086a8:	af04      	add	r7, sp, #16
 80086aa:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80086ac:	2301      	movs	r3, #1
 80086ae:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4618      	mov	r0, r3
 80086b6:	f002 f9b8 	bl	800aa2a <SDIO_GetPowerState>
 80086ba:	4603      	mov	r3, r0
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d102      	bne.n	80086c6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80086c0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80086c4:	e0b8      	b.n	8008838 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086ca:	2b03      	cmp	r3, #3
 80086cc:	d02f      	beq.n	800872e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4618      	mov	r0, r3
 80086d4:	f002 fbe2 	bl	800ae9c <SDMMC_CmdSendCID>
 80086d8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80086da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d001      	beq.n	80086e4 <SD_InitCard+0x40>
    {
      return errorstate;
 80086e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086e2:	e0a9      	b.n	8008838 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	2100      	movs	r1, #0
 80086ea:	4618      	mov	r0, r3
 80086ec:	f002 f9e2 	bl	800aab4 <SDIO_GetResponse>
 80086f0:	4602      	mov	r2, r0
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	2104      	movs	r1, #4
 80086fc:	4618      	mov	r0, r3
 80086fe:	f002 f9d9 	bl	800aab4 <SDIO_GetResponse>
 8008702:	4602      	mov	r2, r0
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	2108      	movs	r1, #8
 800870e:	4618      	mov	r0, r3
 8008710:	f002 f9d0 	bl	800aab4 <SDIO_GetResponse>
 8008714:	4602      	mov	r2, r0
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	210c      	movs	r1, #12
 8008720:	4618      	mov	r0, r3
 8008722:	f002 f9c7 	bl	800aab4 <SDIO_GetResponse>
 8008726:	4602      	mov	r2, r0
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008732:	2b03      	cmp	r3, #3
 8008734:	d00d      	beq.n	8008752 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f107 020e 	add.w	r2, r7, #14
 800873e:	4611      	mov	r1, r2
 8008740:	4618      	mov	r0, r3
 8008742:	f002 fbe8 	bl	800af16 <SDMMC_CmdSetRelAdd>
 8008746:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008748:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800874a:	2b00      	cmp	r3, #0
 800874c:	d001      	beq.n	8008752 <SD_InitCard+0xae>
    {
      return errorstate;
 800874e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008750:	e072      	b.n	8008838 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008756:	2b03      	cmp	r3, #3
 8008758:	d036      	beq.n	80087c8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800875a:	89fb      	ldrh	r3, [r7, #14]
 800875c:	461a      	mov	r2, r3
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681a      	ldr	r2, [r3, #0]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800876a:	041b      	lsls	r3, r3, #16
 800876c:	4619      	mov	r1, r3
 800876e:	4610      	mov	r0, r2
 8008770:	f002 fbb2 	bl	800aed8 <SDMMC_CmdSendCSD>
 8008774:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008776:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008778:	2b00      	cmp	r3, #0
 800877a:	d001      	beq.n	8008780 <SD_InitCard+0xdc>
    {
      return errorstate;
 800877c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800877e:	e05b      	b.n	8008838 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	2100      	movs	r1, #0
 8008786:	4618      	mov	r0, r3
 8008788:	f002 f994 	bl	800aab4 <SDIO_GetResponse>
 800878c:	4602      	mov	r2, r0
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	2104      	movs	r1, #4
 8008798:	4618      	mov	r0, r3
 800879a:	f002 f98b 	bl	800aab4 <SDIO_GetResponse>
 800879e:	4602      	mov	r2, r0
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	2108      	movs	r1, #8
 80087aa:	4618      	mov	r0, r3
 80087ac:	f002 f982 	bl	800aab4 <SDIO_GetResponse>
 80087b0:	4602      	mov	r2, r0
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	210c      	movs	r1, #12
 80087bc:	4618      	mov	r0, r3
 80087be:	f002 f979 	bl	800aab4 <SDIO_GetResponse>
 80087c2:	4602      	mov	r2, r0
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	2104      	movs	r1, #4
 80087ce:	4618      	mov	r0, r3
 80087d0:	f002 f970 	bl	800aab4 <SDIO_GetResponse>
 80087d4:	4603      	mov	r3, r0
 80087d6:	0d1a      	lsrs	r2, r3, #20
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80087dc:	f107 0310 	add.w	r3, r7, #16
 80087e0:	4619      	mov	r1, r3
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f7ff fbc6 	bl	8007f74 <HAL_SD_GetCardCSD>
 80087e8:	4603      	mov	r3, r0
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d002      	beq.n	80087f4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80087ee:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80087f2:	e021      	b.n	8008838 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6819      	ldr	r1, [r3, #0]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087fc:	041b      	lsls	r3, r3, #16
 80087fe:	2200      	movs	r2, #0
 8008800:	461c      	mov	r4, r3
 8008802:	4615      	mov	r5, r2
 8008804:	4622      	mov	r2, r4
 8008806:	462b      	mov	r3, r5
 8008808:	4608      	mov	r0, r1
 800880a:	f002 fa5f 	bl	800accc <SDMMC_CmdSelDesel>
 800880e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008810:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008812:	2b00      	cmp	r3, #0
 8008814:	d001      	beq.n	800881a <SD_InitCard+0x176>
  {
    return errorstate;
 8008816:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008818:	e00e      	b.n	8008838 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681d      	ldr	r5, [r3, #0]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	466c      	mov	r4, sp
 8008822:	f103 0210 	add.w	r2, r3, #16
 8008826:	ca07      	ldmia	r2, {r0, r1, r2}
 8008828:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800882c:	3304      	adds	r3, #4
 800882e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008830:	4628      	mov	r0, r5
 8008832:	f002 f8a3 	bl	800a97c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008836:	2300      	movs	r3, #0
}
 8008838:	4618      	mov	r0, r3
 800883a:	3740      	adds	r7, #64	@ 0x40
 800883c:	46bd      	mov	sp, r7
 800883e:	bdb0      	pop	{r4, r5, r7, pc}

08008840 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b086      	sub	sp, #24
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008848:	2300      	movs	r3, #0
 800884a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800884c:	2300      	movs	r3, #0
 800884e:	617b      	str	r3, [r7, #20]
 8008850:	2300      	movs	r3, #0
 8008852:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4618      	mov	r0, r3
 800885a:	f002 fa5a 	bl	800ad12 <SDMMC_CmdGoIdleState>
 800885e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d001      	beq.n	800886a <SD_PowerON+0x2a>
  {
    return errorstate;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	e072      	b.n	8008950 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4618      	mov	r0, r3
 8008870:	f002 fa6d 	bl	800ad4e <SDMMC_CmdOperCond>
 8008874:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d00d      	beq.n	8008898 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2200      	movs	r2, #0
 8008880:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4618      	mov	r0, r3
 8008888:	f002 fa43 	bl	800ad12 <SDMMC_CmdGoIdleState>
 800888c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d004      	beq.n	800889e <SD_PowerON+0x5e>
    {
      return errorstate;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	e05b      	b.n	8008950 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2201      	movs	r2, #1
 800889c:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80088a2:	2b01      	cmp	r3, #1
 80088a4:	d137      	bne.n	8008916 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	2100      	movs	r1, #0
 80088ac:	4618      	mov	r0, r3
 80088ae:	f002 fa6d 	bl	800ad8c <SDMMC_CmdAppCommand>
 80088b2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d02d      	beq.n	8008916 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80088ba:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80088be:	e047      	b.n	8008950 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	2100      	movs	r1, #0
 80088c6:	4618      	mov	r0, r3
 80088c8:	f002 fa60 	bl	800ad8c <SDMMC_CmdAppCommand>
 80088cc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d001      	beq.n	80088d8 <SD_PowerON+0x98>
    {
      return errorstate;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	e03b      	b.n	8008950 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	491e      	ldr	r1, [pc, #120]	@ (8008958 <SD_PowerON+0x118>)
 80088de:	4618      	mov	r0, r3
 80088e0:	f002 fa76 	bl	800add0 <SDMMC_CmdAppOperCommand>
 80088e4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d002      	beq.n	80088f2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80088ec:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80088f0:	e02e      	b.n	8008950 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	2100      	movs	r1, #0
 80088f8:	4618      	mov	r0, r3
 80088fa:	f002 f8db 	bl	800aab4 <SDIO_GetResponse>
 80088fe:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	0fdb      	lsrs	r3, r3, #31
 8008904:	2b01      	cmp	r3, #1
 8008906:	d101      	bne.n	800890c <SD_PowerON+0xcc>
 8008908:	2301      	movs	r3, #1
 800890a:	e000      	b.n	800890e <SD_PowerON+0xce>
 800890c:	2300      	movs	r3, #0
 800890e:	613b      	str	r3, [r7, #16]

    count++;
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	3301      	adds	r3, #1
 8008914:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800891c:	4293      	cmp	r3, r2
 800891e:	d802      	bhi.n	8008926 <SD_PowerON+0xe6>
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d0cc      	beq.n	80088c0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800892c:	4293      	cmp	r3, r2
 800892e:	d902      	bls.n	8008936 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008930:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008934:	e00c      	b.n	8008950 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800893c:	2b00      	cmp	r3, #0
 800893e:	d003      	beq.n	8008948 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2201      	movs	r2, #1
 8008944:	645a      	str	r2, [r3, #68]	@ 0x44
 8008946:	e002      	b.n	800894e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2200      	movs	r2, #0
 800894c:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800894e:	2300      	movs	r3, #0
}
 8008950:	4618      	mov	r0, r3
 8008952:	3718      	adds	r7, #24
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}
 8008958:	c1100000 	.word	0xc1100000

0800895c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b084      	sub	sp, #16
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d102      	bne.n	8008972 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800896c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008970:	e018      	b.n	80089a4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681a      	ldr	r2, [r3, #0]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800897a:	041b      	lsls	r3, r3, #16
 800897c:	4619      	mov	r1, r3
 800897e:	4610      	mov	r0, r2
 8008980:	f002 faea 	bl	800af58 <SDMMC_CmdSendStatus>
 8008984:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d001      	beq.n	8008990 <SD_SendStatus+0x34>
  {
    return errorstate;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	e009      	b.n	80089a4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	2100      	movs	r1, #0
 8008996:	4618      	mov	r0, r3
 8008998:	f002 f88c 	bl	800aab4 <SDIO_GetResponse>
 800899c:	4602      	mov	r2, r0
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80089a2:	2300      	movs	r3, #0
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3710      	adds	r7, #16
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b086      	sub	sp, #24
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80089b4:	2300      	movs	r3, #0
 80089b6:	60fb      	str	r3, [r7, #12]
 80089b8:	2300      	movs	r3, #0
 80089ba:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	2100      	movs	r1, #0
 80089c2:	4618      	mov	r0, r3
 80089c4:	f002 f876 	bl	800aab4 <SDIO_GetResponse>
 80089c8:	4603      	mov	r3, r0
 80089ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80089d2:	d102      	bne.n	80089da <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80089d4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80089d8:	e02f      	b.n	8008a3a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80089da:	f107 030c 	add.w	r3, r7, #12
 80089de:	4619      	mov	r1, r3
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f000 f879 	bl	8008ad8 <SD_FindSCR>
 80089e6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d001      	beq.n	80089f2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	e023      	b.n	8008a3a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d01c      	beq.n	8008a36 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681a      	ldr	r2, [r3, #0]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a04:	041b      	lsls	r3, r3, #16
 8008a06:	4619      	mov	r1, r3
 8008a08:	4610      	mov	r0, r2
 8008a0a:	f002 f9bf 	bl	800ad8c <SDMMC_CmdAppCommand>
 8008a0e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d001      	beq.n	8008a1a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	e00f      	b.n	8008a3a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	2102      	movs	r1, #2
 8008a20:	4618      	mov	r0, r3
 8008a22:	f002 f9f8 	bl	800ae16 <SDMMC_CmdBusWidth>
 8008a26:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d001      	beq.n	8008a32 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	e003      	b.n	8008a3a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008a32:	2300      	movs	r3, #0
 8008a34:	e001      	b.n	8008a3a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008a36:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3718      	adds	r7, #24
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}

08008a42 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008a42:	b580      	push	{r7, lr}
 8008a44:	b086      	sub	sp, #24
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	60fb      	str	r3, [r7, #12]
 8008a4e:	2300      	movs	r3, #0
 8008a50:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	2100      	movs	r1, #0
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f002 f82b 	bl	800aab4 <SDIO_GetResponse>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a64:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008a68:	d102      	bne.n	8008a70 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008a6a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008a6e:	e02f      	b.n	8008ad0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008a70:	f107 030c 	add.w	r3, r7, #12
 8008a74:	4619      	mov	r1, r3
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 f82e 	bl	8008ad8 <SD_FindSCR>
 8008a7c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d001      	beq.n	8008a88 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	e023      	b.n	8008ad0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d01c      	beq.n	8008acc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a9a:	041b      	lsls	r3, r3, #16
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	4610      	mov	r0, r2
 8008aa0:	f002 f974 	bl	800ad8c <SDMMC_CmdAppCommand>
 8008aa4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d001      	beq.n	8008ab0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	e00f      	b.n	8008ad0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	2100      	movs	r1, #0
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f002 f9ad 	bl	800ae16 <SDMMC_CmdBusWidth>
 8008abc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d001      	beq.n	8008ac8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	e003      	b.n	8008ad0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	e001      	b.n	8008ad0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008acc:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3718      	adds	r7, #24
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008ad8:	b590      	push	{r4, r7, lr}
 8008ada:	b08f      	sub	sp, #60	@ 0x3c
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008ae2:	f7fa fb57 	bl	8003194 <HAL_GetTick>
 8008ae6:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8008aec:	2300      	movs	r3, #0
 8008aee:	60bb      	str	r3, [r7, #8]
 8008af0:	2300      	movs	r3, #0
 8008af2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	2108      	movs	r1, #8
 8008afe:	4618      	mov	r0, r3
 8008b00:	f002 f817 	bl	800ab32 <SDMMC_CmdBlockLength>
 8008b04:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d001      	beq.n	8008b10 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b0e:	e0b2      	b.n	8008c76 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681a      	ldr	r2, [r3, #0]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b18:	041b      	lsls	r3, r3, #16
 8008b1a:	4619      	mov	r1, r3
 8008b1c:	4610      	mov	r0, r2
 8008b1e:	f002 f935 	bl	800ad8c <SDMMC_CmdAppCommand>
 8008b22:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d001      	beq.n	8008b2e <SD_FindSCR+0x56>
  {
    return errorstate;
 8008b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b2c:	e0a3      	b.n	8008c76 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8008b32:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008b34:	2308      	movs	r3, #8
 8008b36:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8008b38:	2330      	movs	r3, #48	@ 0x30
 8008b3a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008b3c:	2302      	movs	r3, #2
 8008b3e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008b40:	2300      	movs	r3, #0
 8008b42:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8008b44:	2301      	movs	r3, #1
 8008b46:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f107 0210 	add.w	r2, r7, #16
 8008b50:	4611      	mov	r1, r2
 8008b52:	4618      	mov	r0, r3
 8008b54:	f001 ffc1 	bl	800aada <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	f002 f97c 	bl	800ae5a <SDMMC_CmdSendSCR>
 8008b62:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d02a      	beq.n	8008bc0 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8008b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b6c:	e083      	b.n	8008c76 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d00f      	beq.n	8008b9c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6819      	ldr	r1, [r3, #0]
 8008b80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b82:	009b      	lsls	r3, r3, #2
 8008b84:	f107 0208 	add.w	r2, r7, #8
 8008b88:	18d4      	adds	r4, r2, r3
 8008b8a:	4608      	mov	r0, r1
 8008b8c:	f001 ff21 	bl	800a9d2 <SDIO_ReadFIFO>
 8008b90:	4603      	mov	r3, r0
 8008b92:	6023      	str	r3, [r4, #0]
      index++;
 8008b94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b96:	3301      	adds	r3, #1
 8008b98:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b9a:	e006      	b.n	8008baa <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ba2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d012      	beq.n	8008bd0 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8008baa:	f7fa faf3 	bl	8003194 <HAL_GetTick>
 8008bae:	4602      	mov	r2, r0
 8008bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bb2:	1ad3      	subs	r3, r2, r3
 8008bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bb8:	d102      	bne.n	8008bc0 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008bba:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008bbe:	e05a      	b.n	8008c76 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bc6:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d0cf      	beq.n	8008b6e <SD_FindSCR+0x96>
 8008bce:	e000      	b.n	8008bd2 <SD_FindSCR+0xfa>
      break;
 8008bd0:	bf00      	nop
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bd8:	f003 0308 	and.w	r3, r3, #8
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d005      	beq.n	8008bec <SD_FindSCR+0x114>
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	2208      	movs	r2, #8
 8008be6:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008be8:	2308      	movs	r3, #8
 8008bea:	e044      	b.n	8008c76 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bf2:	f003 0302 	and.w	r3, r3, #2
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d005      	beq.n	8008c06 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	2202      	movs	r2, #2
 8008c00:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008c02:	2302      	movs	r3, #2
 8008c04:	e037      	b.n	8008c76 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c0c:	f003 0320 	and.w	r3, r3, #32
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d005      	beq.n	8008c20 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	2220      	movs	r2, #32
 8008c1a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008c1c:	2320      	movs	r3, #32
 8008c1e:	e02a      	b.n	8008c76 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008c28:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	061a      	lsls	r2, r3, #24
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	021b      	lsls	r3, r3, #8
 8008c32:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008c36:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	0a1b      	lsrs	r3, r3, #8
 8008c3c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008c40:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	0e1b      	lsrs	r3, r3, #24
 8008c46:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008c48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c4a:	601a      	str	r2, [r3, #0]
    scr++;
 8008c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c4e:	3304      	adds	r3, #4
 8008c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	061a      	lsls	r2, r3, #24
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	021b      	lsls	r3, r3, #8
 8008c5a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008c5e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	0a1b      	lsrs	r3, r3, #8
 8008c64:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008c68:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	0e1b      	lsrs	r3, r3, #24
 8008c6e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c72:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008c74:	2300      	movs	r3, #0
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	373c      	adds	r7, #60	@ 0x3c
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd90      	pop	{r4, r7, pc}

08008c7e <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8008c7e:	b580      	push	{r7, lr}
 8008c80:	b086      	sub	sp, #24
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c8a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c90:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d03f      	beq.n	8008d18 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8008c98:	2300      	movs	r3, #0
 8008c9a:	617b      	str	r3, [r7, #20]
 8008c9c:	e033      	b.n	8008d06 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f001 fe95 	bl	800a9d2 <SDIO_ReadFIFO>
 8008ca8:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	b2da      	uxtb	r2, r3
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	3301      	adds	r3, #1
 8008cb6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	3b01      	subs	r3, #1
 8008cbc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	0a1b      	lsrs	r3, r3, #8
 8008cc2:	b2da      	uxtb	r2, r3
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	3301      	adds	r3, #1
 8008ccc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	3b01      	subs	r3, #1
 8008cd2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	0c1b      	lsrs	r3, r3, #16
 8008cd8:	b2da      	uxtb	r2, r3
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	3301      	adds	r3, #1
 8008ce2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	3b01      	subs	r3, #1
 8008ce8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	0e1b      	lsrs	r3, r3, #24
 8008cee:	b2da      	uxtb	r2, r3
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	3301      	adds	r3, #1
 8008cf8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	3b01      	subs	r3, #1
 8008cfe:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	3301      	adds	r3, #1
 8008d04:	617b      	str	r3, [r7, #20]
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	2b07      	cmp	r3, #7
 8008d0a:	d9c8      	bls.n	8008c9e <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	68fa      	ldr	r2, [r7, #12]
 8008d10:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	693a      	ldr	r2, [r7, #16]
 8008d16:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 8008d18:	bf00      	nop
 8008d1a:	3718      	adds	r7, #24
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}

08008d20 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b086      	sub	sp, #24
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6a1b      	ldr	r3, [r3, #32]
 8008d2c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d32:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d043      	beq.n	8008dc2 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	617b      	str	r3, [r7, #20]
 8008d3e:	e037      	b.n	8008db0 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	781b      	ldrb	r3, [r3, #0]
 8008d44:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	3301      	adds	r3, #1
 8008d4a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	3b01      	subs	r3, #1
 8008d50:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	781b      	ldrb	r3, [r3, #0]
 8008d56:	021a      	lsls	r2, r3, #8
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	3301      	adds	r3, #1
 8008d62:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	3b01      	subs	r3, #1
 8008d68:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	781b      	ldrb	r3, [r3, #0]
 8008d6e:	041a      	lsls	r2, r3, #16
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	4313      	orrs	r3, r2
 8008d74:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	3301      	adds	r3, #1
 8008d7a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	3b01      	subs	r3, #1
 8008d80:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	061a      	lsls	r2, r3, #24
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	3301      	adds	r3, #1
 8008d92:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	3b01      	subs	r3, #1
 8008d98:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f107 0208 	add.w	r2, r7, #8
 8008da2:	4611      	mov	r1, r2
 8008da4:	4618      	mov	r0, r3
 8008da6:	f001 fe21 	bl	800a9ec <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	3301      	adds	r3, #1
 8008dae:	617b      	str	r3, [r7, #20]
 8008db0:	697b      	ldr	r3, [r7, #20]
 8008db2:	2b07      	cmp	r3, #7
 8008db4:	d9c4      	bls.n	8008d40 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	68fa      	ldr	r2, [r7, #12]
 8008dba:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	693a      	ldr	r2, [r7, #16]
 8008dc0:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8008dc2:	bf00      	nop
 8008dc4:	3718      	adds	r7, #24
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}

08008dca <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8008dca:	b580      	push	{r7, lr}
 8008dcc:	b082      	sub	sp, #8
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]
 8008dd2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d101      	bne.n	8008dde <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	e025      	b.n	8008e2a <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008de4:	b2db      	uxtb	r3, r3
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d106      	bne.n	8008df8 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2200      	movs	r2, #0
 8008dee:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f7f9 ff5a 	bl	8002cac <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2202      	movs	r2, #2
 8008dfc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681a      	ldr	r2, [r3, #0]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	3304      	adds	r3, #4
 8008e08:	4619      	mov	r1, r3
 8008e0a:	4610      	mov	r0, r2
 8008e0c:	f001 fcf0 	bl	800a7f0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6818      	ldr	r0, [r3, #0]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	685b      	ldr	r3, [r3, #4]
 8008e18:	461a      	mov	r2, r3
 8008e1a:	6839      	ldr	r1, [r7, #0]
 8008e1c:	f001 fd45 	bl	800a8aa <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2201      	movs	r2, #1
 8008e24:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8008e28:	2300      	movs	r3, #0
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3708      	adds	r7, #8
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}

08008e32 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008e32:	b580      	push	{r7, lr}
 8008e34:	b082      	sub	sp, #8
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d101      	bne.n	8008e44 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008e40:	2301      	movs	r3, #1
 8008e42:	e041      	b.n	8008ec8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e4a:	b2db      	uxtb	r3, r3
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d106      	bne.n	8008e5e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2200      	movs	r2, #0
 8008e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f7f9 fd91 	bl	8002980 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2202      	movs	r2, #2
 8008e62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681a      	ldr	r2, [r3, #0]
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	3304      	adds	r3, #4
 8008e6e:	4619      	mov	r1, r3
 8008e70:	4610      	mov	r0, r2
 8008e72:	f000 fae5 	bl	8009440 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2201      	movs	r2, #1
 8008e7a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2201      	movs	r2, #1
 8008e82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2201      	movs	r2, #1
 8008e8a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2201      	movs	r2, #1
 8008e92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2201      	movs	r2, #1
 8008e9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2201      	movs	r2, #1
 8008ea2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2201      	movs	r2, #1
 8008eba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008ec6:	2300      	movs	r3, #0
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3708      	adds	r7, #8
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b085      	sub	sp, #20
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008ede:	b2db      	uxtb	r3, r3
 8008ee0:	2b01      	cmp	r3, #1
 8008ee2:	d001      	beq.n	8008ee8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	e046      	b.n	8008f76 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2202      	movs	r2, #2
 8008eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4a23      	ldr	r2, [pc, #140]	@ (8008f84 <HAL_TIM_Base_Start+0xb4>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d022      	beq.n	8008f40 <HAL_TIM_Base_Start+0x70>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f02:	d01d      	beq.n	8008f40 <HAL_TIM_Base_Start+0x70>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4a1f      	ldr	r2, [pc, #124]	@ (8008f88 <HAL_TIM_Base_Start+0xb8>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d018      	beq.n	8008f40 <HAL_TIM_Base_Start+0x70>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	4a1e      	ldr	r2, [pc, #120]	@ (8008f8c <HAL_TIM_Base_Start+0xbc>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d013      	beq.n	8008f40 <HAL_TIM_Base_Start+0x70>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4a1c      	ldr	r2, [pc, #112]	@ (8008f90 <HAL_TIM_Base_Start+0xc0>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d00e      	beq.n	8008f40 <HAL_TIM_Base_Start+0x70>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	4a1b      	ldr	r2, [pc, #108]	@ (8008f94 <HAL_TIM_Base_Start+0xc4>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d009      	beq.n	8008f40 <HAL_TIM_Base_Start+0x70>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4a19      	ldr	r2, [pc, #100]	@ (8008f98 <HAL_TIM_Base_Start+0xc8>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d004      	beq.n	8008f40 <HAL_TIM_Base_Start+0x70>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4a18      	ldr	r2, [pc, #96]	@ (8008f9c <HAL_TIM_Base_Start+0xcc>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d111      	bne.n	8008f64 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	689b      	ldr	r3, [r3, #8]
 8008f46:	f003 0307 	and.w	r3, r3, #7
 8008f4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	2b06      	cmp	r3, #6
 8008f50:	d010      	beq.n	8008f74 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	681a      	ldr	r2, [r3, #0]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f042 0201 	orr.w	r2, r2, #1
 8008f60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f62:	e007      	b.n	8008f74 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	681a      	ldr	r2, [r3, #0]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f042 0201 	orr.w	r2, r2, #1
 8008f72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008f74:	2300      	movs	r3, #0
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3714      	adds	r7, #20
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr
 8008f82:	bf00      	nop
 8008f84:	40010000 	.word	0x40010000
 8008f88:	40000400 	.word	0x40000400
 8008f8c:	40000800 	.word	0x40000800
 8008f90:	40000c00 	.word	0x40000c00
 8008f94:	40010400 	.word	0x40010400
 8008f98:	40014000 	.word	0x40014000
 8008f9c:	40001800 	.word	0x40001800

08008fa0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b085      	sub	sp, #20
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008fae:	b2db      	uxtb	r3, r3
 8008fb0:	2b01      	cmp	r3, #1
 8008fb2:	d001      	beq.n	8008fb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	e04e      	b.n	8009056 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2202      	movs	r2, #2
 8008fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	68da      	ldr	r2, [r3, #12]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f042 0201 	orr.w	r2, r2, #1
 8008fce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4a23      	ldr	r2, [pc, #140]	@ (8009064 <HAL_TIM_Base_Start_IT+0xc4>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d022      	beq.n	8009020 <HAL_TIM_Base_Start_IT+0x80>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008fe2:	d01d      	beq.n	8009020 <HAL_TIM_Base_Start_IT+0x80>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4a1f      	ldr	r2, [pc, #124]	@ (8009068 <HAL_TIM_Base_Start_IT+0xc8>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d018      	beq.n	8009020 <HAL_TIM_Base_Start_IT+0x80>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4a1e      	ldr	r2, [pc, #120]	@ (800906c <HAL_TIM_Base_Start_IT+0xcc>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d013      	beq.n	8009020 <HAL_TIM_Base_Start_IT+0x80>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4a1c      	ldr	r2, [pc, #112]	@ (8009070 <HAL_TIM_Base_Start_IT+0xd0>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d00e      	beq.n	8009020 <HAL_TIM_Base_Start_IT+0x80>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	4a1b      	ldr	r2, [pc, #108]	@ (8009074 <HAL_TIM_Base_Start_IT+0xd4>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d009      	beq.n	8009020 <HAL_TIM_Base_Start_IT+0x80>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4a19      	ldr	r2, [pc, #100]	@ (8009078 <HAL_TIM_Base_Start_IT+0xd8>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d004      	beq.n	8009020 <HAL_TIM_Base_Start_IT+0x80>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4a18      	ldr	r2, [pc, #96]	@ (800907c <HAL_TIM_Base_Start_IT+0xdc>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d111      	bne.n	8009044 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	689b      	ldr	r3, [r3, #8]
 8009026:	f003 0307 	and.w	r3, r3, #7
 800902a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2b06      	cmp	r3, #6
 8009030:	d010      	beq.n	8009054 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	681a      	ldr	r2, [r3, #0]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f042 0201 	orr.w	r2, r2, #1
 8009040:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009042:	e007      	b.n	8009054 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	681a      	ldr	r2, [r3, #0]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f042 0201 	orr.w	r2, r2, #1
 8009052:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009054:	2300      	movs	r3, #0
}
 8009056:	4618      	mov	r0, r3
 8009058:	3714      	adds	r7, #20
 800905a:	46bd      	mov	sp, r7
 800905c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009060:	4770      	bx	lr
 8009062:	bf00      	nop
 8009064:	40010000 	.word	0x40010000
 8009068:	40000400 	.word	0x40000400
 800906c:	40000800 	.word	0x40000800
 8009070:	40000c00 	.word	0x40000c00
 8009074:	40010400 	.word	0x40010400
 8009078:	40014000 	.word	0x40014000
 800907c:	40001800 	.word	0x40001800

08009080 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b084      	sub	sp, #16
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	68db      	ldr	r3, [r3, #12]
 800908e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	691b      	ldr	r3, [r3, #16]
 8009096:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	f003 0302 	and.w	r3, r3, #2
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d020      	beq.n	80090e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	f003 0302 	and.w	r3, r3, #2
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d01b      	beq.n	80090e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f06f 0202 	mvn.w	r2, #2
 80090b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2201      	movs	r2, #1
 80090ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	699b      	ldr	r3, [r3, #24]
 80090c2:	f003 0303 	and.w	r3, r3, #3
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d003      	beq.n	80090d2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f000 f999 	bl	8009402 <HAL_TIM_IC_CaptureCallback>
 80090d0:	e005      	b.n	80090de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 f98b 	bl	80093ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f000 f99c 	bl	8009416 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2200      	movs	r2, #0
 80090e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	f003 0304 	and.w	r3, r3, #4
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d020      	beq.n	8009130 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	f003 0304 	and.w	r3, r3, #4
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d01b      	beq.n	8009130 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f06f 0204 	mvn.w	r2, #4
 8009100:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2202      	movs	r2, #2
 8009106:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	699b      	ldr	r3, [r3, #24]
 800910e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009112:	2b00      	cmp	r3, #0
 8009114:	d003      	beq.n	800911e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 f973 	bl	8009402 <HAL_TIM_IC_CaptureCallback>
 800911c:	e005      	b.n	800912a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f000 f965 	bl	80093ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f000 f976 	bl	8009416 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2200      	movs	r2, #0
 800912e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	f003 0308 	and.w	r3, r3, #8
 8009136:	2b00      	cmp	r3, #0
 8009138:	d020      	beq.n	800917c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f003 0308 	and.w	r3, r3, #8
 8009140:	2b00      	cmp	r3, #0
 8009142:	d01b      	beq.n	800917c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f06f 0208 	mvn.w	r2, #8
 800914c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2204      	movs	r2, #4
 8009152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	69db      	ldr	r3, [r3, #28]
 800915a:	f003 0303 	and.w	r3, r3, #3
 800915e:	2b00      	cmp	r3, #0
 8009160:	d003      	beq.n	800916a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f000 f94d 	bl	8009402 <HAL_TIM_IC_CaptureCallback>
 8009168:	e005      	b.n	8009176 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f000 f93f 	bl	80093ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f000 f950 	bl	8009416 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2200      	movs	r2, #0
 800917a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	f003 0310 	and.w	r3, r3, #16
 8009182:	2b00      	cmp	r3, #0
 8009184:	d020      	beq.n	80091c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	f003 0310 	and.w	r3, r3, #16
 800918c:	2b00      	cmp	r3, #0
 800918e:	d01b      	beq.n	80091c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f06f 0210 	mvn.w	r2, #16
 8009198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2208      	movs	r2, #8
 800919e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	69db      	ldr	r3, [r3, #28]
 80091a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d003      	beq.n	80091b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f000 f927 	bl	8009402 <HAL_TIM_IC_CaptureCallback>
 80091b4:	e005      	b.n	80091c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f000 f919 	bl	80093ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 f92a 	bl	8009416 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2200      	movs	r2, #0
 80091c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	f003 0301 	and.w	r3, r3, #1
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d00c      	beq.n	80091ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	f003 0301 	and.w	r3, r3, #1
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d007      	beq.n	80091ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f06f 0201 	mvn.w	r2, #1
 80091e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f7f8 ffe4 	bl	80021b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d00c      	beq.n	8009210 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d007      	beq.n	8009210 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 fae4 	bl	80097d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009216:	2b00      	cmp	r3, #0
 8009218:	d00c      	beq.n	8009234 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009220:	2b00      	cmp	r3, #0
 8009222:	d007      	beq.n	8009234 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800922c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f000 f8fb 	bl	800942a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	f003 0320 	and.w	r3, r3, #32
 800923a:	2b00      	cmp	r3, #0
 800923c:	d00c      	beq.n	8009258 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	f003 0320 	and.w	r3, r3, #32
 8009244:	2b00      	cmp	r3, #0
 8009246:	d007      	beq.n	8009258 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f06f 0220 	mvn.w	r2, #32
 8009250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f000 fab6 	bl	80097c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009258:	bf00      	nop
 800925a:	3710      	adds	r7, #16
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}

08009260 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b084      	sub	sp, #16
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
 8009268:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800926a:	2300      	movs	r3, #0
 800926c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009274:	2b01      	cmp	r3, #1
 8009276:	d101      	bne.n	800927c <HAL_TIM_ConfigClockSource+0x1c>
 8009278:	2302      	movs	r3, #2
 800927a:	e0b4      	b.n	80093e6 <HAL_TIM_ConfigClockSource+0x186>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2201      	movs	r2, #1
 8009280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2202      	movs	r2, #2
 8009288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	689b      	ldr	r3, [r3, #8]
 8009292:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800929a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80092a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	68ba      	ldr	r2, [r7, #8]
 80092aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092b4:	d03e      	beq.n	8009334 <HAL_TIM_ConfigClockSource+0xd4>
 80092b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092ba:	f200 8087 	bhi.w	80093cc <HAL_TIM_ConfigClockSource+0x16c>
 80092be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092c2:	f000 8086 	beq.w	80093d2 <HAL_TIM_ConfigClockSource+0x172>
 80092c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092ca:	d87f      	bhi.n	80093cc <HAL_TIM_ConfigClockSource+0x16c>
 80092cc:	2b70      	cmp	r3, #112	@ 0x70
 80092ce:	d01a      	beq.n	8009306 <HAL_TIM_ConfigClockSource+0xa6>
 80092d0:	2b70      	cmp	r3, #112	@ 0x70
 80092d2:	d87b      	bhi.n	80093cc <HAL_TIM_ConfigClockSource+0x16c>
 80092d4:	2b60      	cmp	r3, #96	@ 0x60
 80092d6:	d050      	beq.n	800937a <HAL_TIM_ConfigClockSource+0x11a>
 80092d8:	2b60      	cmp	r3, #96	@ 0x60
 80092da:	d877      	bhi.n	80093cc <HAL_TIM_ConfigClockSource+0x16c>
 80092dc:	2b50      	cmp	r3, #80	@ 0x50
 80092de:	d03c      	beq.n	800935a <HAL_TIM_ConfigClockSource+0xfa>
 80092e0:	2b50      	cmp	r3, #80	@ 0x50
 80092e2:	d873      	bhi.n	80093cc <HAL_TIM_ConfigClockSource+0x16c>
 80092e4:	2b40      	cmp	r3, #64	@ 0x40
 80092e6:	d058      	beq.n	800939a <HAL_TIM_ConfigClockSource+0x13a>
 80092e8:	2b40      	cmp	r3, #64	@ 0x40
 80092ea:	d86f      	bhi.n	80093cc <HAL_TIM_ConfigClockSource+0x16c>
 80092ec:	2b30      	cmp	r3, #48	@ 0x30
 80092ee:	d064      	beq.n	80093ba <HAL_TIM_ConfigClockSource+0x15a>
 80092f0:	2b30      	cmp	r3, #48	@ 0x30
 80092f2:	d86b      	bhi.n	80093cc <HAL_TIM_ConfigClockSource+0x16c>
 80092f4:	2b20      	cmp	r3, #32
 80092f6:	d060      	beq.n	80093ba <HAL_TIM_ConfigClockSource+0x15a>
 80092f8:	2b20      	cmp	r3, #32
 80092fa:	d867      	bhi.n	80093cc <HAL_TIM_ConfigClockSource+0x16c>
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d05c      	beq.n	80093ba <HAL_TIM_ConfigClockSource+0x15a>
 8009300:	2b10      	cmp	r3, #16
 8009302:	d05a      	beq.n	80093ba <HAL_TIM_ConfigClockSource+0x15a>
 8009304:	e062      	b.n	80093cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009316:	f000 f9b9 	bl	800968c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	689b      	ldr	r3, [r3, #8]
 8009320:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009328:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	68ba      	ldr	r2, [r7, #8]
 8009330:	609a      	str	r2, [r3, #8]
      break;
 8009332:	e04f      	b.n	80093d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009344:	f000 f9a2 	bl	800968c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	689a      	ldr	r2, [r3, #8]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009356:	609a      	str	r2, [r3, #8]
      break;
 8009358:	e03c      	b.n	80093d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009366:	461a      	mov	r2, r3
 8009368:	f000 f916 	bl	8009598 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	2150      	movs	r1, #80	@ 0x50
 8009372:	4618      	mov	r0, r3
 8009374:	f000 f96f 	bl	8009656 <TIM_ITRx_SetConfig>
      break;
 8009378:	e02c      	b.n	80093d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009386:	461a      	mov	r2, r3
 8009388:	f000 f935 	bl	80095f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	2160      	movs	r1, #96	@ 0x60
 8009392:	4618      	mov	r0, r3
 8009394:	f000 f95f 	bl	8009656 <TIM_ITRx_SetConfig>
      break;
 8009398:	e01c      	b.n	80093d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80093a6:	461a      	mov	r2, r3
 80093a8:	f000 f8f6 	bl	8009598 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	2140      	movs	r1, #64	@ 0x40
 80093b2:	4618      	mov	r0, r3
 80093b4:	f000 f94f 	bl	8009656 <TIM_ITRx_SetConfig>
      break;
 80093b8:	e00c      	b.n	80093d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681a      	ldr	r2, [r3, #0]
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	4619      	mov	r1, r3
 80093c4:	4610      	mov	r0, r2
 80093c6:	f000 f946 	bl	8009656 <TIM_ITRx_SetConfig>
      break;
 80093ca:	e003      	b.n	80093d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80093cc:	2301      	movs	r3, #1
 80093ce:	73fb      	strb	r3, [r7, #15]
      break;
 80093d0:	e000      	b.n	80093d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80093d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2201      	movs	r2, #1
 80093d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2200      	movs	r2, #0
 80093e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80093e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3710      	adds	r7, #16
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}

080093ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80093ee:	b480      	push	{r7}
 80093f0:	b083      	sub	sp, #12
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80093f6:	bf00      	nop
 80093f8:	370c      	adds	r7, #12
 80093fa:	46bd      	mov	sp, r7
 80093fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009400:	4770      	bx	lr

08009402 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009402:	b480      	push	{r7}
 8009404:	b083      	sub	sp, #12
 8009406:	af00      	add	r7, sp, #0
 8009408:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800940a:	bf00      	nop
 800940c:	370c      	adds	r7, #12
 800940e:	46bd      	mov	sp, r7
 8009410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009414:	4770      	bx	lr

08009416 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009416:	b480      	push	{r7}
 8009418:	b083      	sub	sp, #12
 800941a:	af00      	add	r7, sp, #0
 800941c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800941e:	bf00      	nop
 8009420:	370c      	adds	r7, #12
 8009422:	46bd      	mov	sp, r7
 8009424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009428:	4770      	bx	lr

0800942a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800942a:	b480      	push	{r7}
 800942c:	b083      	sub	sp, #12
 800942e:	af00      	add	r7, sp, #0
 8009430:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009432:	bf00      	nop
 8009434:	370c      	adds	r7, #12
 8009436:	46bd      	mov	sp, r7
 8009438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943c:	4770      	bx	lr
	...

08009440 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009440:	b480      	push	{r7}
 8009442:	b085      	sub	sp, #20
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	4a46      	ldr	r2, [pc, #280]	@ (800956c <TIM_Base_SetConfig+0x12c>)
 8009454:	4293      	cmp	r3, r2
 8009456:	d013      	beq.n	8009480 <TIM_Base_SetConfig+0x40>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800945e:	d00f      	beq.n	8009480 <TIM_Base_SetConfig+0x40>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	4a43      	ldr	r2, [pc, #268]	@ (8009570 <TIM_Base_SetConfig+0x130>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d00b      	beq.n	8009480 <TIM_Base_SetConfig+0x40>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	4a42      	ldr	r2, [pc, #264]	@ (8009574 <TIM_Base_SetConfig+0x134>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d007      	beq.n	8009480 <TIM_Base_SetConfig+0x40>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	4a41      	ldr	r2, [pc, #260]	@ (8009578 <TIM_Base_SetConfig+0x138>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d003      	beq.n	8009480 <TIM_Base_SetConfig+0x40>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	4a40      	ldr	r2, [pc, #256]	@ (800957c <TIM_Base_SetConfig+0x13c>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d108      	bne.n	8009492 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009486:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	685b      	ldr	r3, [r3, #4]
 800948c:	68fa      	ldr	r2, [r7, #12]
 800948e:	4313      	orrs	r3, r2
 8009490:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	4a35      	ldr	r2, [pc, #212]	@ (800956c <TIM_Base_SetConfig+0x12c>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d02b      	beq.n	80094f2 <TIM_Base_SetConfig+0xb2>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094a0:	d027      	beq.n	80094f2 <TIM_Base_SetConfig+0xb2>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	4a32      	ldr	r2, [pc, #200]	@ (8009570 <TIM_Base_SetConfig+0x130>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d023      	beq.n	80094f2 <TIM_Base_SetConfig+0xb2>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	4a31      	ldr	r2, [pc, #196]	@ (8009574 <TIM_Base_SetConfig+0x134>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d01f      	beq.n	80094f2 <TIM_Base_SetConfig+0xb2>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	4a30      	ldr	r2, [pc, #192]	@ (8009578 <TIM_Base_SetConfig+0x138>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d01b      	beq.n	80094f2 <TIM_Base_SetConfig+0xb2>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	4a2f      	ldr	r2, [pc, #188]	@ (800957c <TIM_Base_SetConfig+0x13c>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d017      	beq.n	80094f2 <TIM_Base_SetConfig+0xb2>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	4a2e      	ldr	r2, [pc, #184]	@ (8009580 <TIM_Base_SetConfig+0x140>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d013      	beq.n	80094f2 <TIM_Base_SetConfig+0xb2>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	4a2d      	ldr	r2, [pc, #180]	@ (8009584 <TIM_Base_SetConfig+0x144>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d00f      	beq.n	80094f2 <TIM_Base_SetConfig+0xb2>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	4a2c      	ldr	r2, [pc, #176]	@ (8009588 <TIM_Base_SetConfig+0x148>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d00b      	beq.n	80094f2 <TIM_Base_SetConfig+0xb2>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	4a2b      	ldr	r2, [pc, #172]	@ (800958c <TIM_Base_SetConfig+0x14c>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d007      	beq.n	80094f2 <TIM_Base_SetConfig+0xb2>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	4a2a      	ldr	r2, [pc, #168]	@ (8009590 <TIM_Base_SetConfig+0x150>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d003      	beq.n	80094f2 <TIM_Base_SetConfig+0xb2>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	4a29      	ldr	r2, [pc, #164]	@ (8009594 <TIM_Base_SetConfig+0x154>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d108      	bne.n	8009504 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80094f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	68db      	ldr	r3, [r3, #12]
 80094fe:	68fa      	ldr	r2, [r7, #12]
 8009500:	4313      	orrs	r3, r2
 8009502:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	695b      	ldr	r3, [r3, #20]
 800950e:	4313      	orrs	r3, r2
 8009510:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	68fa      	ldr	r2, [r7, #12]
 8009516:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	689a      	ldr	r2, [r3, #8]
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	681a      	ldr	r2, [r3, #0]
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	4a10      	ldr	r2, [pc, #64]	@ (800956c <TIM_Base_SetConfig+0x12c>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d003      	beq.n	8009538 <TIM_Base_SetConfig+0xf8>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	4a12      	ldr	r2, [pc, #72]	@ (800957c <TIM_Base_SetConfig+0x13c>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d103      	bne.n	8009540 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	691a      	ldr	r2, [r3, #16]
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2201      	movs	r2, #1
 8009544:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	691b      	ldr	r3, [r3, #16]
 800954a:	f003 0301 	and.w	r3, r3, #1
 800954e:	2b01      	cmp	r3, #1
 8009550:	d105      	bne.n	800955e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	691b      	ldr	r3, [r3, #16]
 8009556:	f023 0201 	bic.w	r2, r3, #1
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	611a      	str	r2, [r3, #16]
  }
}
 800955e:	bf00      	nop
 8009560:	3714      	adds	r7, #20
 8009562:	46bd      	mov	sp, r7
 8009564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009568:	4770      	bx	lr
 800956a:	bf00      	nop
 800956c:	40010000 	.word	0x40010000
 8009570:	40000400 	.word	0x40000400
 8009574:	40000800 	.word	0x40000800
 8009578:	40000c00 	.word	0x40000c00
 800957c:	40010400 	.word	0x40010400
 8009580:	40014000 	.word	0x40014000
 8009584:	40014400 	.word	0x40014400
 8009588:	40014800 	.word	0x40014800
 800958c:	40001800 	.word	0x40001800
 8009590:	40001c00 	.word	0x40001c00
 8009594:	40002000 	.word	0x40002000

08009598 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009598:	b480      	push	{r7}
 800959a:	b087      	sub	sp, #28
 800959c:	af00      	add	r7, sp, #0
 800959e:	60f8      	str	r0, [r7, #12]
 80095a0:	60b9      	str	r1, [r7, #8]
 80095a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	6a1b      	ldr	r3, [r3, #32]
 80095a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	6a1b      	ldr	r3, [r3, #32]
 80095ae:	f023 0201 	bic.w	r2, r3, #1
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	699b      	ldr	r3, [r3, #24]
 80095ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80095c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	011b      	lsls	r3, r3, #4
 80095c8:	693a      	ldr	r2, [r7, #16]
 80095ca:	4313      	orrs	r3, r2
 80095cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	f023 030a 	bic.w	r3, r3, #10
 80095d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80095d6:	697a      	ldr	r2, [r7, #20]
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	4313      	orrs	r3, r2
 80095dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	693a      	ldr	r2, [r7, #16]
 80095e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	697a      	ldr	r2, [r7, #20]
 80095e8:	621a      	str	r2, [r3, #32]
}
 80095ea:	bf00      	nop
 80095ec:	371c      	adds	r7, #28
 80095ee:	46bd      	mov	sp, r7
 80095f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f4:	4770      	bx	lr

080095f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80095f6:	b480      	push	{r7}
 80095f8:	b087      	sub	sp, #28
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	60f8      	str	r0, [r7, #12]
 80095fe:	60b9      	str	r1, [r7, #8]
 8009600:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	6a1b      	ldr	r3, [r3, #32]
 8009606:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	6a1b      	ldr	r3, [r3, #32]
 800960c:	f023 0210 	bic.w	r2, r3, #16
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	699b      	ldr	r3, [r3, #24]
 8009618:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009620:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	031b      	lsls	r3, r3, #12
 8009626:	693a      	ldr	r2, [r7, #16]
 8009628:	4313      	orrs	r3, r2
 800962a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009632:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	011b      	lsls	r3, r3, #4
 8009638:	697a      	ldr	r2, [r7, #20]
 800963a:	4313      	orrs	r3, r2
 800963c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	693a      	ldr	r2, [r7, #16]
 8009642:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	697a      	ldr	r2, [r7, #20]
 8009648:	621a      	str	r2, [r3, #32]
}
 800964a:	bf00      	nop
 800964c:	371c      	adds	r7, #28
 800964e:	46bd      	mov	sp, r7
 8009650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009654:	4770      	bx	lr

08009656 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009656:	b480      	push	{r7}
 8009658:	b085      	sub	sp, #20
 800965a:	af00      	add	r7, sp, #0
 800965c:	6078      	str	r0, [r7, #4]
 800965e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	689b      	ldr	r3, [r3, #8]
 8009664:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800966c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800966e:	683a      	ldr	r2, [r7, #0]
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	4313      	orrs	r3, r2
 8009674:	f043 0307 	orr.w	r3, r3, #7
 8009678:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	68fa      	ldr	r2, [r7, #12]
 800967e:	609a      	str	r2, [r3, #8]
}
 8009680:	bf00      	nop
 8009682:	3714      	adds	r7, #20
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr

0800968c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800968c:	b480      	push	{r7}
 800968e:	b087      	sub	sp, #28
 8009690:	af00      	add	r7, sp, #0
 8009692:	60f8      	str	r0, [r7, #12]
 8009694:	60b9      	str	r1, [r7, #8]
 8009696:	607a      	str	r2, [r7, #4]
 8009698:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	689b      	ldr	r3, [r3, #8]
 800969e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80096a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	021a      	lsls	r2, r3, #8
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	431a      	orrs	r2, r3
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	4313      	orrs	r3, r2
 80096b4:	697a      	ldr	r2, [r7, #20]
 80096b6:	4313      	orrs	r3, r2
 80096b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	697a      	ldr	r2, [r7, #20]
 80096be:	609a      	str	r2, [r3, #8]
}
 80096c0:	bf00      	nop
 80096c2:	371c      	adds	r7, #28
 80096c4:	46bd      	mov	sp, r7
 80096c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ca:	4770      	bx	lr

080096cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b085      	sub	sp, #20
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80096dc:	2b01      	cmp	r3, #1
 80096de:	d101      	bne.n	80096e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80096e0:	2302      	movs	r3, #2
 80096e2:	e05a      	b.n	800979a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2201      	movs	r2, #1
 80096e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2202      	movs	r2, #2
 80096f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	685b      	ldr	r3, [r3, #4]
 80096fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	689b      	ldr	r3, [r3, #8]
 8009702:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800970a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	68fa      	ldr	r2, [r7, #12]
 8009712:	4313      	orrs	r3, r2
 8009714:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	68fa      	ldr	r2, [r7, #12]
 800971c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	4a21      	ldr	r2, [pc, #132]	@ (80097a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d022      	beq.n	800976e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009730:	d01d      	beq.n	800976e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	4a1d      	ldr	r2, [pc, #116]	@ (80097ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009738:	4293      	cmp	r3, r2
 800973a:	d018      	beq.n	800976e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	4a1b      	ldr	r2, [pc, #108]	@ (80097b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009742:	4293      	cmp	r3, r2
 8009744:	d013      	beq.n	800976e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	4a1a      	ldr	r2, [pc, #104]	@ (80097b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800974c:	4293      	cmp	r3, r2
 800974e:	d00e      	beq.n	800976e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4a18      	ldr	r2, [pc, #96]	@ (80097b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d009      	beq.n	800976e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	4a17      	ldr	r2, [pc, #92]	@ (80097bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009760:	4293      	cmp	r3, r2
 8009762:	d004      	beq.n	800976e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	4a15      	ldr	r2, [pc, #84]	@ (80097c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800976a:	4293      	cmp	r3, r2
 800976c:	d10c      	bne.n	8009788 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009774:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	685b      	ldr	r3, [r3, #4]
 800977a:	68ba      	ldr	r2, [r7, #8]
 800977c:	4313      	orrs	r3, r2
 800977e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	68ba      	ldr	r2, [r7, #8]
 8009786:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2201      	movs	r2, #1
 800978c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2200      	movs	r2, #0
 8009794:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009798:	2300      	movs	r3, #0
}
 800979a:	4618      	mov	r0, r3
 800979c:	3714      	adds	r7, #20
 800979e:	46bd      	mov	sp, r7
 80097a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a4:	4770      	bx	lr
 80097a6:	bf00      	nop
 80097a8:	40010000 	.word	0x40010000
 80097ac:	40000400 	.word	0x40000400
 80097b0:	40000800 	.word	0x40000800
 80097b4:	40000c00 	.word	0x40000c00
 80097b8:	40010400 	.word	0x40010400
 80097bc:	40014000 	.word	0x40014000
 80097c0:	40001800 	.word	0x40001800

080097c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b083      	sub	sp, #12
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80097cc:	bf00      	nop
 80097ce:	370c      	adds	r7, #12
 80097d0:	46bd      	mov	sp, r7
 80097d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d6:	4770      	bx	lr

080097d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80097d8:	b480      	push	{r7}
 80097da:	b083      	sub	sp, #12
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80097e0:	bf00      	nop
 80097e2:	370c      	adds	r7, #12
 80097e4:	46bd      	mov	sp, r7
 80097e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ea:	4770      	bx	lr

080097ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b082      	sub	sp, #8
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d101      	bne.n	80097fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80097fa:	2301      	movs	r3, #1
 80097fc:	e042      	b.n	8009884 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009804:	b2db      	uxtb	r3, r3
 8009806:	2b00      	cmp	r3, #0
 8009808:	d106      	bne.n	8009818 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2200      	movs	r2, #0
 800980e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f7f9 f8ea 	bl	80029ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2224      	movs	r2, #36	@ 0x24
 800981c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	68da      	ldr	r2, [r3, #12]
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800982e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f000 fd69 	bl	800a308 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	691a      	ldr	r2, [r3, #16]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009844:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	695a      	ldr	r2, [r3, #20]
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009854:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	68da      	ldr	r2, [r3, #12]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009864:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2200      	movs	r2, #0
 800986a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2220      	movs	r2, #32
 8009870:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2220      	movs	r2, #32
 8009878:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2200      	movs	r2, #0
 8009880:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009882:	2300      	movs	r3, #0
}
 8009884:	4618      	mov	r0, r3
 8009886:	3708      	adds	r7, #8
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}

0800988c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b08a      	sub	sp, #40	@ 0x28
 8009890:	af02      	add	r7, sp, #8
 8009892:	60f8      	str	r0, [r7, #12]
 8009894:	60b9      	str	r1, [r7, #8]
 8009896:	603b      	str	r3, [r7, #0]
 8009898:	4613      	mov	r3, r2
 800989a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800989c:	2300      	movs	r3, #0
 800989e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80098a6:	b2db      	uxtb	r3, r3
 80098a8:	2b20      	cmp	r3, #32
 80098aa:	d175      	bne.n	8009998 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d002      	beq.n	80098b8 <HAL_UART_Transmit+0x2c>
 80098b2:	88fb      	ldrh	r3, [r7, #6]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d101      	bne.n	80098bc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80098b8:	2301      	movs	r3, #1
 80098ba:	e06e      	b.n	800999a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	2200      	movs	r2, #0
 80098c0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2221      	movs	r2, #33	@ 0x21
 80098c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80098ca:	f7f9 fc63 	bl	8003194 <HAL_GetTick>
 80098ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	88fa      	ldrh	r2, [r7, #6]
 80098d4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	88fa      	ldrh	r2, [r7, #6]
 80098da:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	689b      	ldr	r3, [r3, #8]
 80098e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098e4:	d108      	bne.n	80098f8 <HAL_UART_Transmit+0x6c>
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	691b      	ldr	r3, [r3, #16]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d104      	bne.n	80098f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80098ee:	2300      	movs	r3, #0
 80098f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	61bb      	str	r3, [r7, #24]
 80098f6:	e003      	b.n	8009900 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80098fc:	2300      	movs	r3, #0
 80098fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009900:	e02e      	b.n	8009960 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	9300      	str	r3, [sp, #0]
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	2200      	movs	r2, #0
 800990a:	2180      	movs	r1, #128	@ 0x80
 800990c:	68f8      	ldr	r0, [r7, #12]
 800990e:	f000 fb05 	bl	8009f1c <UART_WaitOnFlagUntilTimeout>
 8009912:	4603      	mov	r3, r0
 8009914:	2b00      	cmp	r3, #0
 8009916:	d005      	beq.n	8009924 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	2220      	movs	r2, #32
 800991c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8009920:	2303      	movs	r3, #3
 8009922:	e03a      	b.n	800999a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8009924:	69fb      	ldr	r3, [r7, #28]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d10b      	bne.n	8009942 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800992a:	69bb      	ldr	r3, [r7, #24]
 800992c:	881b      	ldrh	r3, [r3, #0]
 800992e:	461a      	mov	r2, r3
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009938:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800993a:	69bb      	ldr	r3, [r7, #24]
 800993c:	3302      	adds	r3, #2
 800993e:	61bb      	str	r3, [r7, #24]
 8009940:	e007      	b.n	8009952 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009942:	69fb      	ldr	r3, [r7, #28]
 8009944:	781a      	ldrb	r2, [r3, #0]
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800994c:	69fb      	ldr	r3, [r7, #28]
 800994e:	3301      	adds	r3, #1
 8009950:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009956:	b29b      	uxth	r3, r3
 8009958:	3b01      	subs	r3, #1
 800995a:	b29a      	uxth	r2, r3
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009964:	b29b      	uxth	r3, r3
 8009966:	2b00      	cmp	r3, #0
 8009968:	d1cb      	bne.n	8009902 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	9300      	str	r3, [sp, #0]
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	2200      	movs	r2, #0
 8009972:	2140      	movs	r1, #64	@ 0x40
 8009974:	68f8      	ldr	r0, [r7, #12]
 8009976:	f000 fad1 	bl	8009f1c <UART_WaitOnFlagUntilTimeout>
 800997a:	4603      	mov	r3, r0
 800997c:	2b00      	cmp	r3, #0
 800997e:	d005      	beq.n	800998c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	2220      	movs	r2, #32
 8009984:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8009988:	2303      	movs	r3, #3
 800998a:	e006      	b.n	800999a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	2220      	movs	r2, #32
 8009990:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8009994:	2300      	movs	r3, #0
 8009996:	e000      	b.n	800999a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009998:	2302      	movs	r3, #2
  }
}
 800999a:	4618      	mov	r0, r3
 800999c:	3720      	adds	r7, #32
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}
	...

080099a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b0ba      	sub	sp, #232	@ 0xe8
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	68db      	ldr	r3, [r3, #12]
 80099bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	695b      	ldr	r3, [r3, #20]
 80099c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80099ca:	2300      	movs	r3, #0
 80099cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80099d0:	2300      	movs	r3, #0
 80099d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80099d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099da:	f003 030f 	and.w	r3, r3, #15
 80099de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80099e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d10f      	bne.n	8009a0a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80099ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099ee:	f003 0320 	and.w	r3, r3, #32
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d009      	beq.n	8009a0a <HAL_UART_IRQHandler+0x66>
 80099f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099fa:	f003 0320 	and.w	r3, r3, #32
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d003      	beq.n	8009a0a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f000 fbc2 	bl	800a18c <UART_Receive_IT>
      return;
 8009a08:	e25b      	b.n	8009ec2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009a0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	f000 80de 	beq.w	8009bd0 <HAL_UART_IRQHandler+0x22c>
 8009a14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009a18:	f003 0301 	and.w	r3, r3, #1
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d106      	bne.n	8009a2e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a24:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	f000 80d1 	beq.w	8009bd0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a32:	f003 0301 	and.w	r3, r3, #1
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d00b      	beq.n	8009a52 <HAL_UART_IRQHandler+0xae>
 8009a3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d005      	beq.n	8009a52 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a4a:	f043 0201 	orr.w	r2, r3, #1
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a56:	f003 0304 	and.w	r3, r3, #4
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d00b      	beq.n	8009a76 <HAL_UART_IRQHandler+0xd2>
 8009a5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009a62:	f003 0301 	and.w	r3, r3, #1
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d005      	beq.n	8009a76 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a6e:	f043 0202 	orr.w	r2, r3, #2
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a7a:	f003 0302 	and.w	r3, r3, #2
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d00b      	beq.n	8009a9a <HAL_UART_IRQHandler+0xf6>
 8009a82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009a86:	f003 0301 	and.w	r3, r3, #1
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d005      	beq.n	8009a9a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a92:	f043 0204 	orr.w	r2, r3, #4
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a9e:	f003 0308 	and.w	r3, r3, #8
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d011      	beq.n	8009aca <HAL_UART_IRQHandler+0x126>
 8009aa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009aaa:	f003 0320 	and.w	r3, r3, #32
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d105      	bne.n	8009abe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009ab2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009ab6:	f003 0301 	and.w	r3, r3, #1
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d005      	beq.n	8009aca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ac2:	f043 0208 	orr.w	r2, r3, #8
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	f000 81f2 	beq.w	8009eb8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009ad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ad8:	f003 0320 	and.w	r3, r3, #32
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d008      	beq.n	8009af2 <HAL_UART_IRQHandler+0x14e>
 8009ae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ae4:	f003 0320 	and.w	r3, r3, #32
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d002      	beq.n	8009af2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f000 fb4d 	bl	800a18c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	695b      	ldr	r3, [r3, #20]
 8009af8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009afc:	2b40      	cmp	r3, #64	@ 0x40
 8009afe:	bf0c      	ite	eq
 8009b00:	2301      	moveq	r3, #1
 8009b02:	2300      	movne	r3, #0
 8009b04:	b2db      	uxtb	r3, r3
 8009b06:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b0e:	f003 0308 	and.w	r3, r3, #8
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d103      	bne.n	8009b1e <HAL_UART_IRQHandler+0x17a>
 8009b16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d04f      	beq.n	8009bbe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f000 fa55 	bl	8009fce <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	695b      	ldr	r3, [r3, #20]
 8009b2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b2e:	2b40      	cmp	r3, #64	@ 0x40
 8009b30:	d141      	bne.n	8009bb6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	3314      	adds	r3, #20
 8009b38:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009b40:	e853 3f00 	ldrex	r3, [r3]
 8009b44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009b48:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009b4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	3314      	adds	r3, #20
 8009b5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009b5e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009b62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009b6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009b6e:	e841 2300 	strex	r3, r2, [r1]
 8009b72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009b76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d1d9      	bne.n	8009b32 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d013      	beq.n	8009bae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b8a:	4a7e      	ldr	r2, [pc, #504]	@ (8009d84 <HAL_UART_IRQHandler+0x3e0>)
 8009b8c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b92:	4618      	mov	r0, r3
 8009b94:	f7fa fa96 	bl	80040c4 <HAL_DMA_Abort_IT>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d016      	beq.n	8009bcc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ba2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ba4:	687a      	ldr	r2, [r7, #4]
 8009ba6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009ba8:	4610      	mov	r0, r2
 8009baa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bac:	e00e      	b.n	8009bcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f000 f99e 	bl	8009ef0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bb4:	e00a      	b.n	8009bcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f000 f99a 	bl	8009ef0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bbc:	e006      	b.n	8009bcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f000 f996 	bl	8009ef0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8009bca:	e175      	b.n	8009eb8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bcc:	bf00      	nop
    return;
 8009bce:	e173      	b.n	8009eb8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bd4:	2b01      	cmp	r3, #1
 8009bd6:	f040 814f 	bne.w	8009e78 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009bde:	f003 0310 	and.w	r3, r3, #16
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	f000 8148 	beq.w	8009e78 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009be8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009bec:	f003 0310 	and.w	r3, r3, #16
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	f000 8141 	beq.w	8009e78 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	60bb      	str	r3, [r7, #8]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	60bb      	str	r3, [r7, #8]
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	685b      	ldr	r3, [r3, #4]
 8009c08:	60bb      	str	r3, [r7, #8]
 8009c0a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	695b      	ldr	r3, [r3, #20]
 8009c12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c16:	2b40      	cmp	r3, #64	@ 0x40
 8009c18:	f040 80b6 	bne.w	8009d88 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009c28:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	f000 8145 	beq.w	8009ebc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009c36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009c3a:	429a      	cmp	r2, r3
 8009c3c:	f080 813e 	bcs.w	8009ebc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009c46:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c4c:	69db      	ldr	r3, [r3, #28]
 8009c4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c52:	f000 8088 	beq.w	8009d66 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	330c      	adds	r3, #12
 8009c5c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c60:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009c64:	e853 3f00 	ldrex	r3, [r3]
 8009c68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009c6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009c70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009c74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	330c      	adds	r3, #12
 8009c7e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009c82:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009c86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009c8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009c92:	e841 2300 	strex	r3, r2, [r1]
 8009c96:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009c9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d1d9      	bne.n	8009c56 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	3314      	adds	r3, #20
 8009ca8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009caa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009cac:	e853 3f00 	ldrex	r3, [r3]
 8009cb0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009cb2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009cb4:	f023 0301 	bic.w	r3, r3, #1
 8009cb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	3314      	adds	r3, #20
 8009cc2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009cc6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009cca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ccc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009cce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009cd2:	e841 2300 	strex	r3, r2, [r1]
 8009cd6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009cd8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d1e1      	bne.n	8009ca2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	3314      	adds	r3, #20
 8009ce4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009ce8:	e853 3f00 	ldrex	r3, [r3]
 8009cec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009cee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009cf0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009cf4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	3314      	adds	r3, #20
 8009cfe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009d02:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009d04:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d06:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009d08:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009d0a:	e841 2300 	strex	r3, r2, [r1]
 8009d0e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009d10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d1e3      	bne.n	8009cde <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2220      	movs	r2, #32
 8009d1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2200      	movs	r2, #0
 8009d22:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	330c      	adds	r3, #12
 8009d2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d2e:	e853 3f00 	ldrex	r3, [r3]
 8009d32:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009d34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009d36:	f023 0310 	bic.w	r3, r3, #16
 8009d3a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	330c      	adds	r3, #12
 8009d44:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009d48:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009d4a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d4c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009d4e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009d50:	e841 2300 	strex	r3, r2, [r1]
 8009d54:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009d56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d1e3      	bne.n	8009d24 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d60:	4618      	mov	r0, r3
 8009d62:	f7fa f93f 	bl	8003fe4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2202      	movs	r2, #2
 8009d6a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009d74:	b29b      	uxth	r3, r3
 8009d76:	1ad3      	subs	r3, r2, r3
 8009d78:	b29b      	uxth	r3, r3
 8009d7a:	4619      	mov	r1, r3
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f000 f8c1 	bl	8009f04 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009d82:	e09b      	b.n	8009ebc <HAL_UART_IRQHandler+0x518>
 8009d84:	0800a095 	.word	0x0800a095
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009d90:	b29b      	uxth	r3, r3
 8009d92:	1ad3      	subs	r3, r2, r3
 8009d94:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009d9c:	b29b      	uxth	r3, r3
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	f000 808e 	beq.w	8009ec0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009da4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	f000 8089 	beq.w	8009ec0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	330c      	adds	r3, #12
 8009db4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009db8:	e853 3f00 	ldrex	r3, [r3]
 8009dbc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009dbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dc0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009dc4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	330c      	adds	r3, #12
 8009dce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009dd2:	647a      	str	r2, [r7, #68]	@ 0x44
 8009dd4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dd6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009dd8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009dda:	e841 2300 	strex	r3, r2, [r1]
 8009dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009de0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d1e3      	bne.n	8009dae <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	3314      	adds	r3, #20
 8009dec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009df0:	e853 3f00 	ldrex	r3, [r3]
 8009df4:	623b      	str	r3, [r7, #32]
   return(result);
 8009df6:	6a3b      	ldr	r3, [r7, #32]
 8009df8:	f023 0301 	bic.w	r3, r3, #1
 8009dfc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	3314      	adds	r3, #20
 8009e06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009e0a:	633a      	str	r2, [r7, #48]	@ 0x30
 8009e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009e10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e12:	e841 2300 	strex	r3, r2, [r1]
 8009e16:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d1e3      	bne.n	8009de6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2220      	movs	r2, #32
 8009e22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	330c      	adds	r3, #12
 8009e32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	e853 3f00 	ldrex	r3, [r3]
 8009e3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	f023 0310 	bic.w	r3, r3, #16
 8009e42:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	330c      	adds	r3, #12
 8009e4c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009e50:	61fa      	str	r2, [r7, #28]
 8009e52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e54:	69b9      	ldr	r1, [r7, #24]
 8009e56:	69fa      	ldr	r2, [r7, #28]
 8009e58:	e841 2300 	strex	r3, r2, [r1]
 8009e5c:	617b      	str	r3, [r7, #20]
   return(result);
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d1e3      	bne.n	8009e2c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2202      	movs	r2, #2
 8009e68:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009e6a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009e6e:	4619      	mov	r1, r3
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f000 f847 	bl	8009f04 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009e76:	e023      	b.n	8009ec0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009e78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d009      	beq.n	8009e98 <HAL_UART_IRQHandler+0x4f4>
 8009e84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d003      	beq.n	8009e98 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f000 f913 	bl	800a0bc <UART_Transmit_IT>
    return;
 8009e96:	e014      	b.n	8009ec2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009e98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d00e      	beq.n	8009ec2 <HAL_UART_IRQHandler+0x51e>
 8009ea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ea8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d008      	beq.n	8009ec2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f000 f953 	bl	800a15c <UART_EndTransmit_IT>
    return;
 8009eb6:	e004      	b.n	8009ec2 <HAL_UART_IRQHandler+0x51e>
    return;
 8009eb8:	bf00      	nop
 8009eba:	e002      	b.n	8009ec2 <HAL_UART_IRQHandler+0x51e>
      return;
 8009ebc:	bf00      	nop
 8009ebe:	e000      	b.n	8009ec2 <HAL_UART_IRQHandler+0x51e>
      return;
 8009ec0:	bf00      	nop
  }
}
 8009ec2:	37e8      	adds	r7, #232	@ 0xe8
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}

08009ec8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b083      	sub	sp, #12
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009ed0:	bf00      	nop
 8009ed2:	370c      	adds	r7, #12
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eda:	4770      	bx	lr

08009edc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b083      	sub	sp, #12
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009ee4:	bf00      	nop
 8009ee6:	370c      	adds	r7, #12
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eee:	4770      	bx	lr

08009ef0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b083      	sub	sp, #12
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009ef8:	bf00      	nop
 8009efa:	370c      	adds	r7, #12
 8009efc:	46bd      	mov	sp, r7
 8009efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f02:	4770      	bx	lr

08009f04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009f04:	b480      	push	{r7}
 8009f06:	b083      	sub	sp, #12
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
 8009f0c:	460b      	mov	r3, r1
 8009f0e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009f10:	bf00      	nop
 8009f12:	370c      	adds	r7, #12
 8009f14:	46bd      	mov	sp, r7
 8009f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1a:	4770      	bx	lr

08009f1c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b086      	sub	sp, #24
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	60f8      	str	r0, [r7, #12]
 8009f24:	60b9      	str	r1, [r7, #8]
 8009f26:	603b      	str	r3, [r7, #0]
 8009f28:	4613      	mov	r3, r2
 8009f2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f2c:	e03b      	b.n	8009fa6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f2e:	6a3b      	ldr	r3, [r7, #32]
 8009f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f34:	d037      	beq.n	8009fa6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f36:	f7f9 f92d 	bl	8003194 <HAL_GetTick>
 8009f3a:	4602      	mov	r2, r0
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	1ad3      	subs	r3, r2, r3
 8009f40:	6a3a      	ldr	r2, [r7, #32]
 8009f42:	429a      	cmp	r2, r3
 8009f44:	d302      	bcc.n	8009f4c <UART_WaitOnFlagUntilTimeout+0x30>
 8009f46:	6a3b      	ldr	r3, [r7, #32]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d101      	bne.n	8009f50 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009f4c:	2303      	movs	r3, #3
 8009f4e:	e03a      	b.n	8009fc6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	68db      	ldr	r3, [r3, #12]
 8009f56:	f003 0304 	and.w	r3, r3, #4
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d023      	beq.n	8009fa6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	2b80      	cmp	r3, #128	@ 0x80
 8009f62:	d020      	beq.n	8009fa6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	2b40      	cmp	r3, #64	@ 0x40
 8009f68:	d01d      	beq.n	8009fa6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f003 0308 	and.w	r3, r3, #8
 8009f74:	2b08      	cmp	r3, #8
 8009f76:	d116      	bne.n	8009fa6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009f78:	2300      	movs	r3, #0
 8009f7a:	617b      	str	r3, [r7, #20]
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	617b      	str	r3, [r7, #20]
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	685b      	ldr	r3, [r3, #4]
 8009f8a:	617b      	str	r3, [r7, #20]
 8009f8c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009f8e:	68f8      	ldr	r0, [r7, #12]
 8009f90:	f000 f81d 	bl	8009fce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2208      	movs	r2, #8
 8009f98:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	e00f      	b.n	8009fc6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	681a      	ldr	r2, [r3, #0]
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	4013      	ands	r3, r2
 8009fb0:	68ba      	ldr	r2, [r7, #8]
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	bf0c      	ite	eq
 8009fb6:	2301      	moveq	r3, #1
 8009fb8:	2300      	movne	r3, #0
 8009fba:	b2db      	uxtb	r3, r3
 8009fbc:	461a      	mov	r2, r3
 8009fbe:	79fb      	ldrb	r3, [r7, #7]
 8009fc0:	429a      	cmp	r2, r3
 8009fc2:	d0b4      	beq.n	8009f2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009fc4:	2300      	movs	r3, #0
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3718      	adds	r7, #24
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}

08009fce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009fce:	b480      	push	{r7}
 8009fd0:	b095      	sub	sp, #84	@ 0x54
 8009fd2:	af00      	add	r7, sp, #0
 8009fd4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	330c      	adds	r3, #12
 8009fdc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fe0:	e853 3f00 	ldrex	r3, [r3]
 8009fe4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fe8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009fec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	330c      	adds	r3, #12
 8009ff4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009ff6:	643a      	str	r2, [r7, #64]	@ 0x40
 8009ff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ffa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009ffc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009ffe:	e841 2300 	strex	r3, r2, [r1]
 800a002:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a006:	2b00      	cmp	r3, #0
 800a008:	d1e5      	bne.n	8009fd6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	3314      	adds	r3, #20
 800a010:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a012:	6a3b      	ldr	r3, [r7, #32]
 800a014:	e853 3f00 	ldrex	r3, [r3]
 800a018:	61fb      	str	r3, [r7, #28]
   return(result);
 800a01a:	69fb      	ldr	r3, [r7, #28]
 800a01c:	f023 0301 	bic.w	r3, r3, #1
 800a020:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	3314      	adds	r3, #20
 800a028:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a02a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a02c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a02e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a030:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a032:	e841 2300 	strex	r3, r2, [r1]
 800a036:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d1e5      	bne.n	800a00a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a042:	2b01      	cmp	r3, #1
 800a044:	d119      	bne.n	800a07a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	330c      	adds	r3, #12
 800a04c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	e853 3f00 	ldrex	r3, [r3]
 800a054:	60bb      	str	r3, [r7, #8]
   return(result);
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	f023 0310 	bic.w	r3, r3, #16
 800a05c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	330c      	adds	r3, #12
 800a064:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a066:	61ba      	str	r2, [r7, #24]
 800a068:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a06a:	6979      	ldr	r1, [r7, #20]
 800a06c:	69ba      	ldr	r2, [r7, #24]
 800a06e:	e841 2300 	strex	r3, r2, [r1]
 800a072:	613b      	str	r3, [r7, #16]
   return(result);
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d1e5      	bne.n	800a046 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2220      	movs	r2, #32
 800a07e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2200      	movs	r2, #0
 800a086:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a088:	bf00      	nop
 800a08a:	3754      	adds	r7, #84	@ 0x54
 800a08c:	46bd      	mov	sp, r7
 800a08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a092:	4770      	bx	lr

0800a094 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b084      	sub	sp, #16
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a0ae:	68f8      	ldr	r0, [r7, #12]
 800a0b0:	f7ff ff1e 	bl	8009ef0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a0b4:	bf00      	nop
 800a0b6:	3710      	adds	r7, #16
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}

0800a0bc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b085      	sub	sp, #20
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a0ca:	b2db      	uxtb	r3, r3
 800a0cc:	2b21      	cmp	r3, #33	@ 0x21
 800a0ce:	d13e      	bne.n	800a14e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	689b      	ldr	r3, [r3, #8]
 800a0d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a0d8:	d114      	bne.n	800a104 <UART_Transmit_IT+0x48>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	691b      	ldr	r3, [r3, #16]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d110      	bne.n	800a104 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6a1b      	ldr	r3, [r3, #32]
 800a0e6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	881b      	ldrh	r3, [r3, #0]
 800a0ec:	461a      	mov	r2, r3
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a0f6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6a1b      	ldr	r3, [r3, #32]
 800a0fc:	1c9a      	adds	r2, r3, #2
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	621a      	str	r2, [r3, #32]
 800a102:	e008      	b.n	800a116 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6a1b      	ldr	r3, [r3, #32]
 800a108:	1c59      	adds	r1, r3, #1
 800a10a:	687a      	ldr	r2, [r7, #4]
 800a10c:	6211      	str	r1, [r2, #32]
 800a10e:	781a      	ldrb	r2, [r3, #0]
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a11a:	b29b      	uxth	r3, r3
 800a11c:	3b01      	subs	r3, #1
 800a11e:	b29b      	uxth	r3, r3
 800a120:	687a      	ldr	r2, [r7, #4]
 800a122:	4619      	mov	r1, r3
 800a124:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a126:	2b00      	cmp	r3, #0
 800a128:	d10f      	bne.n	800a14a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	68da      	ldr	r2, [r3, #12]
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a138:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	68da      	ldr	r2, [r3, #12]
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a148:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a14a:	2300      	movs	r3, #0
 800a14c:	e000      	b.n	800a150 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a14e:	2302      	movs	r3, #2
  }
}
 800a150:	4618      	mov	r0, r3
 800a152:	3714      	adds	r7, #20
 800a154:	46bd      	mov	sp, r7
 800a156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15a:	4770      	bx	lr

0800a15c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b082      	sub	sp, #8
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	68da      	ldr	r2, [r3, #12]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a172:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2220      	movs	r2, #32
 800a178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f7ff fea3 	bl	8009ec8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a182:	2300      	movs	r3, #0
}
 800a184:	4618      	mov	r0, r3
 800a186:	3708      	adds	r7, #8
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}

0800a18c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b08c      	sub	sp, #48	@ 0x30
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a19a:	b2db      	uxtb	r3, r3
 800a19c:	2b22      	cmp	r3, #34	@ 0x22
 800a19e:	f040 80ae 	bne.w	800a2fe <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	689b      	ldr	r3, [r3, #8]
 800a1a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a1aa:	d117      	bne.n	800a1dc <UART_Receive_IT+0x50>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	691b      	ldr	r3, [r3, #16]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d113      	bne.n	800a1dc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1bc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	685b      	ldr	r3, [r3, #4]
 800a1c4:	b29b      	uxth	r3, r3
 800a1c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1ca:	b29a      	uxth	r2, r3
 800a1cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1ce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1d4:	1c9a      	adds	r2, r3, #2
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	629a      	str	r2, [r3, #40]	@ 0x28
 800a1da:	e026      	b.n	800a22a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	689b      	ldr	r3, [r3, #8]
 800a1ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a1ee:	d007      	beq.n	800a200 <UART_Receive_IT+0x74>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	689b      	ldr	r3, [r3, #8]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d10a      	bne.n	800a20e <UART_Receive_IT+0x82>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	691b      	ldr	r3, [r3, #16]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d106      	bne.n	800a20e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	685b      	ldr	r3, [r3, #4]
 800a206:	b2da      	uxtb	r2, r3
 800a208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a20a:	701a      	strb	r2, [r3, #0]
 800a20c:	e008      	b.n	800a220 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	685b      	ldr	r3, [r3, #4]
 800a214:	b2db      	uxtb	r3, r3
 800a216:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a21a:	b2da      	uxtb	r2, r3
 800a21c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a21e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a224:	1c5a      	adds	r2, r3, #1
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a22e:	b29b      	uxth	r3, r3
 800a230:	3b01      	subs	r3, #1
 800a232:	b29b      	uxth	r3, r3
 800a234:	687a      	ldr	r2, [r7, #4]
 800a236:	4619      	mov	r1, r3
 800a238:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d15d      	bne.n	800a2fa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	68da      	ldr	r2, [r3, #12]
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f022 0220 	bic.w	r2, r2, #32
 800a24c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	68da      	ldr	r2, [r3, #12]
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a25c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	695a      	ldr	r2, [r3, #20]
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f022 0201 	bic.w	r2, r2, #1
 800a26c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2220      	movs	r2, #32
 800a272:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2200      	movs	r2, #0
 800a27a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a280:	2b01      	cmp	r3, #1
 800a282:	d135      	bne.n	800a2f0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2200      	movs	r2, #0
 800a288:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	330c      	adds	r3, #12
 800a290:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	e853 3f00 	ldrex	r3, [r3]
 800a298:	613b      	str	r3, [r7, #16]
   return(result);
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	f023 0310 	bic.w	r3, r3, #16
 800a2a0:	627b      	str	r3, [r7, #36]	@ 0x24
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	330c      	adds	r3, #12
 800a2a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a2aa:	623a      	str	r2, [r7, #32]
 800a2ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2ae:	69f9      	ldr	r1, [r7, #28]
 800a2b0:	6a3a      	ldr	r2, [r7, #32]
 800a2b2:	e841 2300 	strex	r3, r2, [r1]
 800a2b6:	61bb      	str	r3, [r7, #24]
   return(result);
 800a2b8:	69bb      	ldr	r3, [r7, #24]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d1e5      	bne.n	800a28a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f003 0310 	and.w	r3, r3, #16
 800a2c8:	2b10      	cmp	r3, #16
 800a2ca:	d10a      	bne.n	800a2e2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	60fb      	str	r3, [r7, #12]
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	60fb      	str	r3, [r7, #12]
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	685b      	ldr	r3, [r3, #4]
 800a2de:	60fb      	str	r3, [r7, #12]
 800a2e0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a2e6:	4619      	mov	r1, r3
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f7ff fe0b 	bl	8009f04 <HAL_UARTEx_RxEventCallback>
 800a2ee:	e002      	b.n	800a2f6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f7ff fdf3 	bl	8009edc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	e002      	b.n	800a300 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	e000      	b.n	800a300 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a2fe:	2302      	movs	r3, #2
  }
}
 800a300:	4618      	mov	r0, r3
 800a302:	3730      	adds	r7, #48	@ 0x30
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}

0800a308 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a308:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a30c:	b0c0      	sub	sp, #256	@ 0x100
 800a30e:	af00      	add	r7, sp, #0
 800a310:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	691b      	ldr	r3, [r3, #16]
 800a31c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a324:	68d9      	ldr	r1, [r3, #12]
 800a326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a32a:	681a      	ldr	r2, [r3, #0]
 800a32c:	ea40 0301 	orr.w	r3, r0, r1
 800a330:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a336:	689a      	ldr	r2, [r3, #8]
 800a338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a33c:	691b      	ldr	r3, [r3, #16]
 800a33e:	431a      	orrs	r2, r3
 800a340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a344:	695b      	ldr	r3, [r3, #20]
 800a346:	431a      	orrs	r2, r3
 800a348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a34c:	69db      	ldr	r3, [r3, #28]
 800a34e:	4313      	orrs	r3, r2
 800a350:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	68db      	ldr	r3, [r3, #12]
 800a35c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a360:	f021 010c 	bic.w	r1, r1, #12
 800a364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a368:	681a      	ldr	r2, [r3, #0]
 800a36a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a36e:	430b      	orrs	r3, r1
 800a370:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	695b      	ldr	r3, [r3, #20]
 800a37a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a37e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a382:	6999      	ldr	r1, [r3, #24]
 800a384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a388:	681a      	ldr	r2, [r3, #0]
 800a38a:	ea40 0301 	orr.w	r3, r0, r1
 800a38e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a394:	681a      	ldr	r2, [r3, #0]
 800a396:	4b8f      	ldr	r3, [pc, #572]	@ (800a5d4 <UART_SetConfig+0x2cc>)
 800a398:	429a      	cmp	r2, r3
 800a39a:	d005      	beq.n	800a3a8 <UART_SetConfig+0xa0>
 800a39c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a3a0:	681a      	ldr	r2, [r3, #0]
 800a3a2:	4b8d      	ldr	r3, [pc, #564]	@ (800a5d8 <UART_SetConfig+0x2d0>)
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	d104      	bne.n	800a3b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a3a8:	f7fc fac0 	bl	800692c <HAL_RCC_GetPCLK2Freq>
 800a3ac:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a3b0:	e003      	b.n	800a3ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a3b2:	f7fc faa7 	bl	8006904 <HAL_RCC_GetPCLK1Freq>
 800a3b6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a3ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a3be:	69db      	ldr	r3, [r3, #28]
 800a3c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a3c4:	f040 810c 	bne.w	800a5e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a3c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a3d2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a3d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a3da:	4622      	mov	r2, r4
 800a3dc:	462b      	mov	r3, r5
 800a3de:	1891      	adds	r1, r2, r2
 800a3e0:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a3e2:	415b      	adcs	r3, r3
 800a3e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a3e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a3ea:	4621      	mov	r1, r4
 800a3ec:	eb12 0801 	adds.w	r8, r2, r1
 800a3f0:	4629      	mov	r1, r5
 800a3f2:	eb43 0901 	adc.w	r9, r3, r1
 800a3f6:	f04f 0200 	mov.w	r2, #0
 800a3fa:	f04f 0300 	mov.w	r3, #0
 800a3fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a402:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a406:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a40a:	4690      	mov	r8, r2
 800a40c:	4699      	mov	r9, r3
 800a40e:	4623      	mov	r3, r4
 800a410:	eb18 0303 	adds.w	r3, r8, r3
 800a414:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a418:	462b      	mov	r3, r5
 800a41a:	eb49 0303 	adc.w	r3, r9, r3
 800a41e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a426:	685b      	ldr	r3, [r3, #4]
 800a428:	2200      	movs	r2, #0
 800a42a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a42e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a432:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a436:	460b      	mov	r3, r1
 800a438:	18db      	adds	r3, r3, r3
 800a43a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a43c:	4613      	mov	r3, r2
 800a43e:	eb42 0303 	adc.w	r3, r2, r3
 800a442:	657b      	str	r3, [r7, #84]	@ 0x54
 800a444:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a448:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a44c:	f7f6 fa5e 	bl	800090c <__aeabi_uldivmod>
 800a450:	4602      	mov	r2, r0
 800a452:	460b      	mov	r3, r1
 800a454:	4b61      	ldr	r3, [pc, #388]	@ (800a5dc <UART_SetConfig+0x2d4>)
 800a456:	fba3 2302 	umull	r2, r3, r3, r2
 800a45a:	095b      	lsrs	r3, r3, #5
 800a45c:	011c      	lsls	r4, r3, #4
 800a45e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a462:	2200      	movs	r2, #0
 800a464:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a468:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a46c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a470:	4642      	mov	r2, r8
 800a472:	464b      	mov	r3, r9
 800a474:	1891      	adds	r1, r2, r2
 800a476:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a478:	415b      	adcs	r3, r3
 800a47a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a47c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a480:	4641      	mov	r1, r8
 800a482:	eb12 0a01 	adds.w	sl, r2, r1
 800a486:	4649      	mov	r1, r9
 800a488:	eb43 0b01 	adc.w	fp, r3, r1
 800a48c:	f04f 0200 	mov.w	r2, #0
 800a490:	f04f 0300 	mov.w	r3, #0
 800a494:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a498:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a49c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a4a0:	4692      	mov	sl, r2
 800a4a2:	469b      	mov	fp, r3
 800a4a4:	4643      	mov	r3, r8
 800a4a6:	eb1a 0303 	adds.w	r3, sl, r3
 800a4aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a4ae:	464b      	mov	r3, r9
 800a4b0:	eb4b 0303 	adc.w	r3, fp, r3
 800a4b4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a4b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a4bc:	685b      	ldr	r3, [r3, #4]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a4c4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a4c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a4cc:	460b      	mov	r3, r1
 800a4ce:	18db      	adds	r3, r3, r3
 800a4d0:	643b      	str	r3, [r7, #64]	@ 0x40
 800a4d2:	4613      	mov	r3, r2
 800a4d4:	eb42 0303 	adc.w	r3, r2, r3
 800a4d8:	647b      	str	r3, [r7, #68]	@ 0x44
 800a4da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a4de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a4e2:	f7f6 fa13 	bl	800090c <__aeabi_uldivmod>
 800a4e6:	4602      	mov	r2, r0
 800a4e8:	460b      	mov	r3, r1
 800a4ea:	4611      	mov	r1, r2
 800a4ec:	4b3b      	ldr	r3, [pc, #236]	@ (800a5dc <UART_SetConfig+0x2d4>)
 800a4ee:	fba3 2301 	umull	r2, r3, r3, r1
 800a4f2:	095b      	lsrs	r3, r3, #5
 800a4f4:	2264      	movs	r2, #100	@ 0x64
 800a4f6:	fb02 f303 	mul.w	r3, r2, r3
 800a4fa:	1acb      	subs	r3, r1, r3
 800a4fc:	00db      	lsls	r3, r3, #3
 800a4fe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a502:	4b36      	ldr	r3, [pc, #216]	@ (800a5dc <UART_SetConfig+0x2d4>)
 800a504:	fba3 2302 	umull	r2, r3, r3, r2
 800a508:	095b      	lsrs	r3, r3, #5
 800a50a:	005b      	lsls	r3, r3, #1
 800a50c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a510:	441c      	add	r4, r3
 800a512:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a516:	2200      	movs	r2, #0
 800a518:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a51c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a520:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a524:	4642      	mov	r2, r8
 800a526:	464b      	mov	r3, r9
 800a528:	1891      	adds	r1, r2, r2
 800a52a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a52c:	415b      	adcs	r3, r3
 800a52e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a530:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a534:	4641      	mov	r1, r8
 800a536:	1851      	adds	r1, r2, r1
 800a538:	6339      	str	r1, [r7, #48]	@ 0x30
 800a53a:	4649      	mov	r1, r9
 800a53c:	414b      	adcs	r3, r1
 800a53e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a540:	f04f 0200 	mov.w	r2, #0
 800a544:	f04f 0300 	mov.w	r3, #0
 800a548:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a54c:	4659      	mov	r1, fp
 800a54e:	00cb      	lsls	r3, r1, #3
 800a550:	4651      	mov	r1, sl
 800a552:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a556:	4651      	mov	r1, sl
 800a558:	00ca      	lsls	r2, r1, #3
 800a55a:	4610      	mov	r0, r2
 800a55c:	4619      	mov	r1, r3
 800a55e:	4603      	mov	r3, r0
 800a560:	4642      	mov	r2, r8
 800a562:	189b      	adds	r3, r3, r2
 800a564:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a568:	464b      	mov	r3, r9
 800a56a:	460a      	mov	r2, r1
 800a56c:	eb42 0303 	adc.w	r3, r2, r3
 800a570:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a578:	685b      	ldr	r3, [r3, #4]
 800a57a:	2200      	movs	r2, #0
 800a57c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a580:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a584:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a588:	460b      	mov	r3, r1
 800a58a:	18db      	adds	r3, r3, r3
 800a58c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a58e:	4613      	mov	r3, r2
 800a590:	eb42 0303 	adc.w	r3, r2, r3
 800a594:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a596:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a59a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a59e:	f7f6 f9b5 	bl	800090c <__aeabi_uldivmod>
 800a5a2:	4602      	mov	r2, r0
 800a5a4:	460b      	mov	r3, r1
 800a5a6:	4b0d      	ldr	r3, [pc, #52]	@ (800a5dc <UART_SetConfig+0x2d4>)
 800a5a8:	fba3 1302 	umull	r1, r3, r3, r2
 800a5ac:	095b      	lsrs	r3, r3, #5
 800a5ae:	2164      	movs	r1, #100	@ 0x64
 800a5b0:	fb01 f303 	mul.w	r3, r1, r3
 800a5b4:	1ad3      	subs	r3, r2, r3
 800a5b6:	00db      	lsls	r3, r3, #3
 800a5b8:	3332      	adds	r3, #50	@ 0x32
 800a5ba:	4a08      	ldr	r2, [pc, #32]	@ (800a5dc <UART_SetConfig+0x2d4>)
 800a5bc:	fba2 2303 	umull	r2, r3, r2, r3
 800a5c0:	095b      	lsrs	r3, r3, #5
 800a5c2:	f003 0207 	and.w	r2, r3, #7
 800a5c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	4422      	add	r2, r4
 800a5ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a5d0:	e106      	b.n	800a7e0 <UART_SetConfig+0x4d8>
 800a5d2:	bf00      	nop
 800a5d4:	40011000 	.word	0x40011000
 800a5d8:	40011400 	.word	0x40011400
 800a5dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a5e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a5ea:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a5ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a5f2:	4642      	mov	r2, r8
 800a5f4:	464b      	mov	r3, r9
 800a5f6:	1891      	adds	r1, r2, r2
 800a5f8:	6239      	str	r1, [r7, #32]
 800a5fa:	415b      	adcs	r3, r3
 800a5fc:	627b      	str	r3, [r7, #36]	@ 0x24
 800a5fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a602:	4641      	mov	r1, r8
 800a604:	1854      	adds	r4, r2, r1
 800a606:	4649      	mov	r1, r9
 800a608:	eb43 0501 	adc.w	r5, r3, r1
 800a60c:	f04f 0200 	mov.w	r2, #0
 800a610:	f04f 0300 	mov.w	r3, #0
 800a614:	00eb      	lsls	r3, r5, #3
 800a616:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a61a:	00e2      	lsls	r2, r4, #3
 800a61c:	4614      	mov	r4, r2
 800a61e:	461d      	mov	r5, r3
 800a620:	4643      	mov	r3, r8
 800a622:	18e3      	adds	r3, r4, r3
 800a624:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a628:	464b      	mov	r3, r9
 800a62a:	eb45 0303 	adc.w	r3, r5, r3
 800a62e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a636:	685b      	ldr	r3, [r3, #4]
 800a638:	2200      	movs	r2, #0
 800a63a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a63e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a642:	f04f 0200 	mov.w	r2, #0
 800a646:	f04f 0300 	mov.w	r3, #0
 800a64a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a64e:	4629      	mov	r1, r5
 800a650:	008b      	lsls	r3, r1, #2
 800a652:	4621      	mov	r1, r4
 800a654:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a658:	4621      	mov	r1, r4
 800a65a:	008a      	lsls	r2, r1, #2
 800a65c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a660:	f7f6 f954 	bl	800090c <__aeabi_uldivmod>
 800a664:	4602      	mov	r2, r0
 800a666:	460b      	mov	r3, r1
 800a668:	4b60      	ldr	r3, [pc, #384]	@ (800a7ec <UART_SetConfig+0x4e4>)
 800a66a:	fba3 2302 	umull	r2, r3, r3, r2
 800a66e:	095b      	lsrs	r3, r3, #5
 800a670:	011c      	lsls	r4, r3, #4
 800a672:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a676:	2200      	movs	r2, #0
 800a678:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a67c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a680:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a684:	4642      	mov	r2, r8
 800a686:	464b      	mov	r3, r9
 800a688:	1891      	adds	r1, r2, r2
 800a68a:	61b9      	str	r1, [r7, #24]
 800a68c:	415b      	adcs	r3, r3
 800a68e:	61fb      	str	r3, [r7, #28]
 800a690:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a694:	4641      	mov	r1, r8
 800a696:	1851      	adds	r1, r2, r1
 800a698:	6139      	str	r1, [r7, #16]
 800a69a:	4649      	mov	r1, r9
 800a69c:	414b      	adcs	r3, r1
 800a69e:	617b      	str	r3, [r7, #20]
 800a6a0:	f04f 0200 	mov.w	r2, #0
 800a6a4:	f04f 0300 	mov.w	r3, #0
 800a6a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a6ac:	4659      	mov	r1, fp
 800a6ae:	00cb      	lsls	r3, r1, #3
 800a6b0:	4651      	mov	r1, sl
 800a6b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a6b6:	4651      	mov	r1, sl
 800a6b8:	00ca      	lsls	r2, r1, #3
 800a6ba:	4610      	mov	r0, r2
 800a6bc:	4619      	mov	r1, r3
 800a6be:	4603      	mov	r3, r0
 800a6c0:	4642      	mov	r2, r8
 800a6c2:	189b      	adds	r3, r3, r2
 800a6c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a6c8:	464b      	mov	r3, r9
 800a6ca:	460a      	mov	r2, r1
 800a6cc:	eb42 0303 	adc.w	r3, r2, r3
 800a6d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a6d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a6d8:	685b      	ldr	r3, [r3, #4]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a6de:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a6e0:	f04f 0200 	mov.w	r2, #0
 800a6e4:	f04f 0300 	mov.w	r3, #0
 800a6e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a6ec:	4649      	mov	r1, r9
 800a6ee:	008b      	lsls	r3, r1, #2
 800a6f0:	4641      	mov	r1, r8
 800a6f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a6f6:	4641      	mov	r1, r8
 800a6f8:	008a      	lsls	r2, r1, #2
 800a6fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a6fe:	f7f6 f905 	bl	800090c <__aeabi_uldivmod>
 800a702:	4602      	mov	r2, r0
 800a704:	460b      	mov	r3, r1
 800a706:	4611      	mov	r1, r2
 800a708:	4b38      	ldr	r3, [pc, #224]	@ (800a7ec <UART_SetConfig+0x4e4>)
 800a70a:	fba3 2301 	umull	r2, r3, r3, r1
 800a70e:	095b      	lsrs	r3, r3, #5
 800a710:	2264      	movs	r2, #100	@ 0x64
 800a712:	fb02 f303 	mul.w	r3, r2, r3
 800a716:	1acb      	subs	r3, r1, r3
 800a718:	011b      	lsls	r3, r3, #4
 800a71a:	3332      	adds	r3, #50	@ 0x32
 800a71c:	4a33      	ldr	r2, [pc, #204]	@ (800a7ec <UART_SetConfig+0x4e4>)
 800a71e:	fba2 2303 	umull	r2, r3, r2, r3
 800a722:	095b      	lsrs	r3, r3, #5
 800a724:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a728:	441c      	add	r4, r3
 800a72a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a72e:	2200      	movs	r2, #0
 800a730:	673b      	str	r3, [r7, #112]	@ 0x70
 800a732:	677a      	str	r2, [r7, #116]	@ 0x74
 800a734:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a738:	4642      	mov	r2, r8
 800a73a:	464b      	mov	r3, r9
 800a73c:	1891      	adds	r1, r2, r2
 800a73e:	60b9      	str	r1, [r7, #8]
 800a740:	415b      	adcs	r3, r3
 800a742:	60fb      	str	r3, [r7, #12]
 800a744:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a748:	4641      	mov	r1, r8
 800a74a:	1851      	adds	r1, r2, r1
 800a74c:	6039      	str	r1, [r7, #0]
 800a74e:	4649      	mov	r1, r9
 800a750:	414b      	adcs	r3, r1
 800a752:	607b      	str	r3, [r7, #4]
 800a754:	f04f 0200 	mov.w	r2, #0
 800a758:	f04f 0300 	mov.w	r3, #0
 800a75c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a760:	4659      	mov	r1, fp
 800a762:	00cb      	lsls	r3, r1, #3
 800a764:	4651      	mov	r1, sl
 800a766:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a76a:	4651      	mov	r1, sl
 800a76c:	00ca      	lsls	r2, r1, #3
 800a76e:	4610      	mov	r0, r2
 800a770:	4619      	mov	r1, r3
 800a772:	4603      	mov	r3, r0
 800a774:	4642      	mov	r2, r8
 800a776:	189b      	adds	r3, r3, r2
 800a778:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a77a:	464b      	mov	r3, r9
 800a77c:	460a      	mov	r2, r1
 800a77e:	eb42 0303 	adc.w	r3, r2, r3
 800a782:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a788:	685b      	ldr	r3, [r3, #4]
 800a78a:	2200      	movs	r2, #0
 800a78c:	663b      	str	r3, [r7, #96]	@ 0x60
 800a78e:	667a      	str	r2, [r7, #100]	@ 0x64
 800a790:	f04f 0200 	mov.w	r2, #0
 800a794:	f04f 0300 	mov.w	r3, #0
 800a798:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a79c:	4649      	mov	r1, r9
 800a79e:	008b      	lsls	r3, r1, #2
 800a7a0:	4641      	mov	r1, r8
 800a7a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a7a6:	4641      	mov	r1, r8
 800a7a8:	008a      	lsls	r2, r1, #2
 800a7aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a7ae:	f7f6 f8ad 	bl	800090c <__aeabi_uldivmod>
 800a7b2:	4602      	mov	r2, r0
 800a7b4:	460b      	mov	r3, r1
 800a7b6:	4b0d      	ldr	r3, [pc, #52]	@ (800a7ec <UART_SetConfig+0x4e4>)
 800a7b8:	fba3 1302 	umull	r1, r3, r3, r2
 800a7bc:	095b      	lsrs	r3, r3, #5
 800a7be:	2164      	movs	r1, #100	@ 0x64
 800a7c0:	fb01 f303 	mul.w	r3, r1, r3
 800a7c4:	1ad3      	subs	r3, r2, r3
 800a7c6:	011b      	lsls	r3, r3, #4
 800a7c8:	3332      	adds	r3, #50	@ 0x32
 800a7ca:	4a08      	ldr	r2, [pc, #32]	@ (800a7ec <UART_SetConfig+0x4e4>)
 800a7cc:	fba2 2303 	umull	r2, r3, r2, r3
 800a7d0:	095b      	lsrs	r3, r3, #5
 800a7d2:	f003 020f 	and.w	r2, r3, #15
 800a7d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	4422      	add	r2, r4
 800a7de:	609a      	str	r2, [r3, #8]
}
 800a7e0:	bf00      	nop
 800a7e2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a7ec:	51eb851f 	.word	0x51eb851f

0800a7f0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b083      	sub	sp, #12
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
 800a7f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d123      	bne.n	800a84a <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800a80a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a80e:	683a      	ldr	r2, [r7, #0]
 800a810:	6851      	ldr	r1, [r2, #4]
 800a812:	683a      	ldr	r2, [r7, #0]
 800a814:	6892      	ldr	r2, [r2, #8]
 800a816:	4311      	orrs	r1, r2
 800a818:	683a      	ldr	r2, [r7, #0]
 800a81a:	68d2      	ldr	r2, [r2, #12]
 800a81c:	4311      	orrs	r1, r2
 800a81e:	683a      	ldr	r2, [r7, #0]
 800a820:	6912      	ldr	r2, [r2, #16]
 800a822:	4311      	orrs	r1, r2
 800a824:	683a      	ldr	r2, [r7, #0]
 800a826:	6952      	ldr	r2, [r2, #20]
 800a828:	4311      	orrs	r1, r2
 800a82a:	683a      	ldr	r2, [r7, #0]
 800a82c:	6992      	ldr	r2, [r2, #24]
 800a82e:	4311      	orrs	r1, r2
 800a830:	683a      	ldr	r2, [r7, #0]
 800a832:	69d2      	ldr	r2, [r2, #28]
 800a834:	4311      	orrs	r1, r2
 800a836:	683a      	ldr	r2, [r7, #0]
 800a838:	6a12      	ldr	r2, [r2, #32]
 800a83a:	4311      	orrs	r1, r2
 800a83c:	683a      	ldr	r2, [r7, #0]
 800a83e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a840:	430a      	orrs	r2, r1
 800a842:	431a      	orrs	r2, r3
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	601a      	str	r2, [r3, #0]
 800a848:	e028      	b.n	800a89c <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	69d9      	ldr	r1, [r3, #28]
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	6a1b      	ldr	r3, [r3, #32]
 800a85a:	4319      	orrs	r1, r3
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a860:	430b      	orrs	r3, r1
 800a862:	431a      	orrs	r2, r3
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	685b      	ldr	r3, [r3, #4]
 800a86c:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800a870:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a874:	683a      	ldr	r2, [r7, #0]
 800a876:	6851      	ldr	r1, [r2, #4]
 800a878:	683a      	ldr	r2, [r7, #0]
 800a87a:	6892      	ldr	r2, [r2, #8]
 800a87c:	4311      	orrs	r1, r2
 800a87e:	683a      	ldr	r2, [r7, #0]
 800a880:	68d2      	ldr	r2, [r2, #12]
 800a882:	4311      	orrs	r1, r2
 800a884:	683a      	ldr	r2, [r7, #0]
 800a886:	6912      	ldr	r2, [r2, #16]
 800a888:	4311      	orrs	r1, r2
 800a88a:	683a      	ldr	r2, [r7, #0]
 800a88c:	6952      	ldr	r2, [r2, #20]
 800a88e:	4311      	orrs	r1, r2
 800a890:	683a      	ldr	r2, [r7, #0]
 800a892:	6992      	ldr	r2, [r2, #24]
 800a894:	430a      	orrs	r2, r1
 800a896:	431a      	orrs	r2, r3
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800a89c:	2300      	movs	r3, #0
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	370c      	adds	r7, #12
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a8:	4770      	bx	lr

0800a8aa <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a8aa:	b480      	push	{r7}
 800a8ac:	b085      	sub	sp, #20
 800a8ae:	af00      	add	r7, sp, #0
 800a8b0:	60f8      	str	r0, [r7, #12]
 800a8b2:	60b9      	str	r1, [r7, #8]
 800a8b4:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d128      	bne.n	800a90e <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	689b      	ldr	r3, [r3, #8]
 800a8c0:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	1e59      	subs	r1, r3, #1
 800a8ca:	68bb      	ldr	r3, [r7, #8]
 800a8cc:	685b      	ldr	r3, [r3, #4]
 800a8ce:	3b01      	subs	r3, #1
 800a8d0:	011b      	lsls	r3, r3, #4
 800a8d2:	4319      	orrs	r1, r3
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	689b      	ldr	r3, [r3, #8]
 800a8d8:	3b01      	subs	r3, #1
 800a8da:	021b      	lsls	r3, r3, #8
 800a8dc:	4319      	orrs	r1, r3
 800a8de:	68bb      	ldr	r3, [r7, #8]
 800a8e0:	68db      	ldr	r3, [r3, #12]
 800a8e2:	3b01      	subs	r3, #1
 800a8e4:	031b      	lsls	r3, r3, #12
 800a8e6:	4319      	orrs	r1, r3
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	691b      	ldr	r3, [r3, #16]
 800a8ec:	3b01      	subs	r3, #1
 800a8ee:	041b      	lsls	r3, r3, #16
 800a8f0:	4319      	orrs	r1, r3
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	695b      	ldr	r3, [r3, #20]
 800a8f6:	3b01      	subs	r3, #1
 800a8f8:	051b      	lsls	r3, r3, #20
 800a8fa:	4319      	orrs	r1, r3
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	699b      	ldr	r3, [r3, #24]
 800a900:	3b01      	subs	r3, #1
 800a902:	061b      	lsls	r3, r3, #24
 800a904:	430b      	orrs	r3, r1
 800a906:	431a      	orrs	r2, r3
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	609a      	str	r2, [r3, #8]
 800a90c:	e02f      	b.n	800a96e <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	689b      	ldr	r3, [r3, #8]
 800a912:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a916:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a91a:	68ba      	ldr	r2, [r7, #8]
 800a91c:	68d2      	ldr	r2, [r2, #12]
 800a91e:	3a01      	subs	r2, #1
 800a920:	0311      	lsls	r1, r2, #12
 800a922:	68ba      	ldr	r2, [r7, #8]
 800a924:	6952      	ldr	r2, [r2, #20]
 800a926:	3a01      	subs	r2, #1
 800a928:	0512      	lsls	r2, r2, #20
 800a92a:	430a      	orrs	r2, r1
 800a92c:	431a      	orrs	r2, r3
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	68db      	ldr	r3, [r3, #12]
 800a936:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	1e59      	subs	r1, r3, #1
 800a940:	68bb      	ldr	r3, [r7, #8]
 800a942:	685b      	ldr	r3, [r3, #4]
 800a944:	3b01      	subs	r3, #1
 800a946:	011b      	lsls	r3, r3, #4
 800a948:	4319      	orrs	r1, r3
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	689b      	ldr	r3, [r3, #8]
 800a94e:	3b01      	subs	r3, #1
 800a950:	021b      	lsls	r3, r3, #8
 800a952:	4319      	orrs	r1, r3
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	691b      	ldr	r3, [r3, #16]
 800a958:	3b01      	subs	r3, #1
 800a95a:	041b      	lsls	r3, r3, #16
 800a95c:	4319      	orrs	r1, r3
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	699b      	ldr	r3, [r3, #24]
 800a962:	3b01      	subs	r3, #1
 800a964:	061b      	lsls	r3, r3, #24
 800a966:	430b      	orrs	r3, r1
 800a968:	431a      	orrs	r2, r3
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800a96e:	2300      	movs	r3, #0
}
 800a970:	4618      	mov	r0, r3
 800a972:	3714      	adds	r7, #20
 800a974:	46bd      	mov	sp, r7
 800a976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97a:	4770      	bx	lr

0800a97c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800a97c:	b084      	sub	sp, #16
 800a97e:	b480      	push	{r7}
 800a980:	b085      	sub	sp, #20
 800a982:	af00      	add	r7, sp, #0
 800a984:	6078      	str	r0, [r7, #4]
 800a986:	f107 001c 	add.w	r0, r7, #28
 800a98a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a98e:	2300      	movs	r3, #0
 800a990:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a992:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a994:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a996:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800a99a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a99c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800a99e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a9a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800a9a2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a9a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800a9a6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a9a8:	68fa      	ldr	r2, [r7, #12]
 800a9aa:	4313      	orrs	r3, r2
 800a9ac:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	685b      	ldr	r3, [r3, #4]
 800a9b2:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800a9b6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a9ba:	68fa      	ldr	r2, [r7, #12]
 800a9bc:	431a      	orrs	r2, r3
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a9c2:	2300      	movs	r3, #0
}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	3714      	adds	r7, #20
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	b004      	add	sp, #16
 800a9d0:	4770      	bx	lr

0800a9d2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800a9d2:	b480      	push	{r7}
 800a9d4:	b083      	sub	sp, #12
 800a9d6:	af00      	add	r7, sp, #0
 800a9d8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	370c      	adds	r7, #12
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ea:	4770      	bx	lr

0800a9ec <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800a9ec:	b480      	push	{r7}
 800a9ee:	b083      	sub	sp, #12
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
 800a9f4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	681a      	ldr	r2, [r3, #0]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800aa00:	2300      	movs	r3, #0
}
 800aa02:	4618      	mov	r0, r3
 800aa04:	370c      	adds	r7, #12
 800aa06:	46bd      	mov	sp, r7
 800aa08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0c:	4770      	bx	lr

0800aa0e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800aa0e:	b480      	push	{r7}
 800aa10:	b083      	sub	sp, #12
 800aa12:	af00      	add	r7, sp, #0
 800aa14:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2203      	movs	r2, #3
 800aa1a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800aa1c:	2300      	movs	r3, #0
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	370c      	adds	r7, #12
 800aa22:	46bd      	mov	sp, r7
 800aa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa28:	4770      	bx	lr

0800aa2a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800aa2a:	b480      	push	{r7}
 800aa2c:	b083      	sub	sp, #12
 800aa2e:	af00      	add	r7, sp, #0
 800aa30:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f003 0303 	and.w	r3, r3, #3
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	370c      	adds	r7, #12
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa44:	4770      	bx	lr

0800aa46 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800aa46:	b480      	push	{r7}
 800aa48:	b085      	sub	sp, #20
 800aa4a:	af00      	add	r7, sp, #0
 800aa4c:	6078      	str	r0, [r7, #4]
 800aa4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800aa50:	2300      	movs	r3, #0
 800aa52:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	681a      	ldr	r2, [r3, #0]
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800aa64:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800aa6a:	431a      	orrs	r2, r3
                       Command->CPSM);
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800aa70:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800aa72:	68fa      	ldr	r2, [r7, #12]
 800aa74:	4313      	orrs	r3, r2
 800aa76:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	68db      	ldr	r3, [r3, #12]
 800aa7c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800aa80:	f023 030f 	bic.w	r3, r3, #15
 800aa84:	68fa      	ldr	r2, [r7, #12]
 800aa86:	431a      	orrs	r2, r3
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800aa8c:	2300      	movs	r3, #0
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3714      	adds	r7, #20
 800aa92:	46bd      	mov	sp, r7
 800aa94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa98:	4770      	bx	lr

0800aa9a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800aa9a:	b480      	push	{r7}
 800aa9c:	b083      	sub	sp, #12
 800aa9e:	af00      	add	r7, sp, #0
 800aaa0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	691b      	ldr	r3, [r3, #16]
 800aaa6:	b2db      	uxtb	r3, r3
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	370c      	adds	r7, #12
 800aaac:	46bd      	mov	sp, r7
 800aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab2:	4770      	bx	lr

0800aab4 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800aab4:	b480      	push	{r7}
 800aab6:	b085      	sub	sp, #20
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
 800aabc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	3314      	adds	r3, #20
 800aac2:	461a      	mov	r2, r3
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	4413      	add	r3, r2
 800aac8:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	681b      	ldr	r3, [r3, #0]
}  
 800aace:	4618      	mov	r0, r3
 800aad0:	3714      	adds	r7, #20
 800aad2:	46bd      	mov	sp, r7
 800aad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad8:	4770      	bx	lr

0800aada <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800aada:	b480      	push	{r7}
 800aadc:	b085      	sub	sp, #20
 800aade:	af00      	add	r7, sp, #0
 800aae0:	6078      	str	r0, [r7, #4]
 800aae2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800aae4:	2300      	movs	r3, #0
 800aae6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	681a      	ldr	r2, [r3, #0]
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	685a      	ldr	r2, [r3, #4]
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ab00:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800ab06:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800ab0c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ab0e:	68fa      	ldr	r2, [r7, #12]
 800ab10:	4313      	orrs	r3, r2
 800ab12:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab18:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	431a      	orrs	r2, r3
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800ab24:	2300      	movs	r3, #0

}
 800ab26:	4618      	mov	r0, r3
 800ab28:	3714      	adds	r7, #20
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab30:	4770      	bx	lr

0800ab32 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800ab32:	b580      	push	{r7, lr}
 800ab34:	b088      	sub	sp, #32
 800ab36:	af00      	add	r7, sp, #0
 800ab38:	6078      	str	r0, [r7, #4]
 800ab3a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ab40:	2310      	movs	r3, #16
 800ab42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ab44:	2340      	movs	r3, #64	@ 0x40
 800ab46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ab48:	2300      	movs	r3, #0
 800ab4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ab4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ab50:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ab52:	f107 0308 	add.w	r3, r7, #8
 800ab56:	4619      	mov	r1, r3
 800ab58:	6878      	ldr	r0, [r7, #4]
 800ab5a:	f7ff ff74 	bl	800aa46 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800ab5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ab62:	2110      	movs	r1, #16
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f000 fa19 	bl	800af9c <SDMMC_GetCmdResp1>
 800ab6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab6c:	69fb      	ldr	r3, [r7, #28]
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	3720      	adds	r7, #32
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bd80      	pop	{r7, pc}

0800ab76 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800ab76:	b580      	push	{r7, lr}
 800ab78:	b088      	sub	sp, #32
 800ab7a:	af00      	add	r7, sp, #0
 800ab7c:	6078      	str	r0, [r7, #4]
 800ab7e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ab84:	2311      	movs	r3, #17
 800ab86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ab88:	2340      	movs	r3, #64	@ 0x40
 800ab8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ab90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ab94:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ab96:	f107 0308 	add.w	r3, r7, #8
 800ab9a:	4619      	mov	r1, r3
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f7ff ff52 	bl	800aa46 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800aba2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aba6:	2111      	movs	r1, #17
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f000 f9f7 	bl	800af9c <SDMMC_GetCmdResp1>
 800abae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800abb0:	69fb      	ldr	r3, [r7, #28]
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	3720      	adds	r7, #32
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}

0800abba <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800abba:	b580      	push	{r7, lr}
 800abbc:	b088      	sub	sp, #32
 800abbe:	af00      	add	r7, sp, #0
 800abc0:	6078      	str	r0, [r7, #4]
 800abc2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800abc8:	2312      	movs	r3, #18
 800abca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800abcc:	2340      	movs	r3, #64	@ 0x40
 800abce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800abd0:	2300      	movs	r3, #0
 800abd2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800abd4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800abd8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800abda:	f107 0308 	add.w	r3, r7, #8
 800abde:	4619      	mov	r1, r3
 800abe0:	6878      	ldr	r0, [r7, #4]
 800abe2:	f7ff ff30 	bl	800aa46 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800abe6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800abea:	2112      	movs	r1, #18
 800abec:	6878      	ldr	r0, [r7, #4]
 800abee:	f000 f9d5 	bl	800af9c <SDMMC_GetCmdResp1>
 800abf2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800abf4:	69fb      	ldr	r3, [r7, #28]
}
 800abf6:	4618      	mov	r0, r3
 800abf8:	3720      	adds	r7, #32
 800abfa:	46bd      	mov	sp, r7
 800abfc:	bd80      	pop	{r7, pc}

0800abfe <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800abfe:	b580      	push	{r7, lr}
 800ac00:	b088      	sub	sp, #32
 800ac02:	af00      	add	r7, sp, #0
 800ac04:	6078      	str	r0, [r7, #4]
 800ac06:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ac0c:	2318      	movs	r3, #24
 800ac0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ac10:	2340      	movs	r3, #64	@ 0x40
 800ac12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ac14:	2300      	movs	r3, #0
 800ac16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ac18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ac1c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ac1e:	f107 0308 	add.w	r3, r7, #8
 800ac22:	4619      	mov	r1, r3
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	f7ff ff0e 	bl	800aa46 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800ac2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac2e:	2118      	movs	r1, #24
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f000 f9b3 	bl	800af9c <SDMMC_GetCmdResp1>
 800ac36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac38:	69fb      	ldr	r3, [r7, #28]
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3720      	adds	r7, #32
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}

0800ac42 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800ac42:	b580      	push	{r7, lr}
 800ac44:	b088      	sub	sp, #32
 800ac46:	af00      	add	r7, sp, #0
 800ac48:	6078      	str	r0, [r7, #4]
 800ac4a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ac50:	2319      	movs	r3, #25
 800ac52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ac54:	2340      	movs	r3, #64	@ 0x40
 800ac56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ac58:	2300      	movs	r3, #0
 800ac5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ac5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ac60:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ac62:	f107 0308 	add.w	r3, r7, #8
 800ac66:	4619      	mov	r1, r3
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	f7ff feec 	bl	800aa46 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800ac6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac72:	2119      	movs	r1, #25
 800ac74:	6878      	ldr	r0, [r7, #4]
 800ac76:	f000 f991 	bl	800af9c <SDMMC_GetCmdResp1>
 800ac7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac7c:	69fb      	ldr	r3, [r7, #28]
}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	3720      	adds	r7, #32
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}
	...

0800ac88 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b088      	sub	sp, #32
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ac90:	2300      	movs	r3, #0
 800ac92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ac94:	230c      	movs	r3, #12
 800ac96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ac98:	2340      	movs	r3, #64	@ 0x40
 800ac9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aca0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aca4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aca6:	f107 0308 	add.w	r3, r7, #8
 800acaa:	4619      	mov	r1, r3
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f7ff feca 	bl	800aa46 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800acb2:	4a05      	ldr	r2, [pc, #20]	@ (800acc8 <SDMMC_CmdStopTransfer+0x40>)
 800acb4:	210c      	movs	r1, #12
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f000 f970 	bl	800af9c <SDMMC_GetCmdResp1>
 800acbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800acbe:	69fb      	ldr	r3, [r7, #28]
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	3720      	adds	r7, #32
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}
 800acc8:	05f5e100 	.word	0x05f5e100

0800accc <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b08a      	sub	sp, #40	@ 0x28
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	60f8      	str	r0, [r7, #12]
 800acd4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800acdc:	2307      	movs	r3, #7
 800acde:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ace0:	2340      	movs	r3, #64	@ 0x40
 800ace2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ace4:	2300      	movs	r3, #0
 800ace6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ace8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800acec:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800acee:	f107 0310 	add.w	r3, r7, #16
 800acf2:	4619      	mov	r1, r3
 800acf4:	68f8      	ldr	r0, [r7, #12]
 800acf6:	f7ff fea6 	bl	800aa46 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800acfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800acfe:	2107      	movs	r1, #7
 800ad00:	68f8      	ldr	r0, [r7, #12]
 800ad02:	f000 f94b 	bl	800af9c <SDMMC_GetCmdResp1>
 800ad06:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800ad08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	3728      	adds	r7, #40	@ 0x28
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}

0800ad12 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800ad12:	b580      	push	{r7, lr}
 800ad14:	b088      	sub	sp, #32
 800ad16:	af00      	add	r7, sp, #0
 800ad18:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800ad22:	2300      	movs	r3, #0
 800ad24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ad26:	2300      	movs	r3, #0
 800ad28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ad2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ad2e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ad30:	f107 0308 	add.w	r3, r7, #8
 800ad34:	4619      	mov	r1, r3
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f7ff fe85 	bl	800aa46 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f000 fb65 	bl	800b40c <SDMMC_GetCmdError>
 800ad42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad44:	69fb      	ldr	r3, [r7, #28]
}
 800ad46:	4618      	mov	r0, r3
 800ad48:	3720      	adds	r7, #32
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}

0800ad4e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800ad4e:	b580      	push	{r7, lr}
 800ad50:	b088      	sub	sp, #32
 800ad52:	af00      	add	r7, sp, #0
 800ad54:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ad56:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800ad5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ad5c:	2308      	movs	r3, #8
 800ad5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ad60:	2340      	movs	r3, #64	@ 0x40
 800ad62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ad64:	2300      	movs	r3, #0
 800ad66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ad68:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ad6c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ad6e:	f107 0308 	add.w	r3, r7, #8
 800ad72:	4619      	mov	r1, r3
 800ad74:	6878      	ldr	r0, [r7, #4]
 800ad76:	f7ff fe66 	bl	800aa46 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f000 faf8 	bl	800b370 <SDMMC_GetCmdResp7>
 800ad80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad82:	69fb      	ldr	r3, [r7, #28]
}
 800ad84:	4618      	mov	r0, r3
 800ad86:	3720      	adds	r7, #32
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}

0800ad8c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b088      	sub	sp, #32
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
 800ad94:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ad9a:	2337      	movs	r3, #55	@ 0x37
 800ad9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ad9e:	2340      	movs	r3, #64	@ 0x40
 800ada0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ada2:	2300      	movs	r3, #0
 800ada4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ada6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800adaa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800adac:	f107 0308 	add.w	r3, r7, #8
 800adb0:	4619      	mov	r1, r3
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f7ff fe47 	bl	800aa46 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800adb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800adbc:	2137      	movs	r1, #55	@ 0x37
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	f000 f8ec 	bl	800af9c <SDMMC_GetCmdResp1>
 800adc4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800adc6:	69fb      	ldr	r3, [r7, #28]
}
 800adc8:	4618      	mov	r0, r3
 800adca:	3720      	adds	r7, #32
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}

0800add0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b088      	sub	sp, #32
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
 800add8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ade0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ade4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ade6:	2329      	movs	r3, #41	@ 0x29
 800ade8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800adea:	2340      	movs	r3, #64	@ 0x40
 800adec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800adee:	2300      	movs	r3, #0
 800adf0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800adf2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800adf6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800adf8:	f107 0308 	add.w	r3, r7, #8
 800adfc:	4619      	mov	r1, r3
 800adfe:	6878      	ldr	r0, [r7, #4]
 800ae00:	f7ff fe21 	bl	800aa46 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800ae04:	6878      	ldr	r0, [r7, #4]
 800ae06:	f000 f9ff 	bl	800b208 <SDMMC_GetCmdResp3>
 800ae0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae0c:	69fb      	ldr	r3, [r7, #28]
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3720      	adds	r7, #32
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}

0800ae16 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800ae16:	b580      	push	{r7, lr}
 800ae18:	b088      	sub	sp, #32
 800ae1a:	af00      	add	r7, sp, #0
 800ae1c:	6078      	str	r0, [r7, #4]
 800ae1e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800ae24:	2306      	movs	r3, #6
 800ae26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ae28:	2340      	movs	r3, #64	@ 0x40
 800ae2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ae30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ae34:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ae36:	f107 0308 	add.w	r3, r7, #8
 800ae3a:	4619      	mov	r1, r3
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f7ff fe02 	bl	800aa46 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800ae42:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ae46:	2106      	movs	r1, #6
 800ae48:	6878      	ldr	r0, [r7, #4]
 800ae4a:	f000 f8a7 	bl	800af9c <SDMMC_GetCmdResp1>
 800ae4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae50:	69fb      	ldr	r3, [r7, #28]
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	3720      	adds	r7, #32
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}

0800ae5a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800ae5a:	b580      	push	{r7, lr}
 800ae5c:	b088      	sub	sp, #32
 800ae5e:	af00      	add	r7, sp, #0
 800ae60:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800ae62:	2300      	movs	r3, #0
 800ae64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800ae66:	2333      	movs	r3, #51	@ 0x33
 800ae68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ae6a:	2340      	movs	r3, #64	@ 0x40
 800ae6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ae72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ae76:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ae78:	f107 0308 	add.w	r3, r7, #8
 800ae7c:	4619      	mov	r1, r3
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f7ff fde1 	bl	800aa46 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800ae84:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ae88:	2133      	movs	r1, #51	@ 0x33
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	f000 f886 	bl	800af9c <SDMMC_GetCmdResp1>
 800ae90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae92:	69fb      	ldr	r3, [r7, #28]
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	3720      	adds	r7, #32
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}

0800ae9c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b088      	sub	sp, #32
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800aea4:	2300      	movs	r3, #0
 800aea6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800aea8:	2302      	movs	r3, #2
 800aeaa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800aeac:	23c0      	movs	r3, #192	@ 0xc0
 800aeae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aeb4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aeb8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aeba:	f107 0308 	add.w	r3, r7, #8
 800aebe:	4619      	mov	r1, r3
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f7ff fdc0 	bl	800aa46 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f000 f956 	bl	800b178 <SDMMC_GetCmdResp2>
 800aecc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aece:	69fb      	ldr	r3, [r7, #28]
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	3720      	adds	r7, #32
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}

0800aed8 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b088      	sub	sp, #32
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
 800aee0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800aee6:	2309      	movs	r3, #9
 800aee8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800aeea:	23c0      	movs	r3, #192	@ 0xc0
 800aeec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aeee:	2300      	movs	r3, #0
 800aef0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aef2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aef6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aef8:	f107 0308 	add.w	r3, r7, #8
 800aefc:	4619      	mov	r1, r3
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f7ff fda1 	bl	800aa46 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	f000 f937 	bl	800b178 <SDMMC_GetCmdResp2>
 800af0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af0c:	69fb      	ldr	r3, [r7, #28]
}
 800af0e:	4618      	mov	r0, r3
 800af10:	3720      	adds	r7, #32
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}

0800af16 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800af16:	b580      	push	{r7, lr}
 800af18:	b088      	sub	sp, #32
 800af1a:	af00      	add	r7, sp, #0
 800af1c:	6078      	str	r0, [r7, #4]
 800af1e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800af20:	2300      	movs	r3, #0
 800af22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800af24:	2303      	movs	r3, #3
 800af26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800af28:	2340      	movs	r3, #64	@ 0x40
 800af2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800af2c:	2300      	movs	r3, #0
 800af2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800af30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800af34:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800af36:	f107 0308 	add.w	r3, r7, #8
 800af3a:	4619      	mov	r1, r3
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f7ff fd82 	bl	800aa46 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800af42:	683a      	ldr	r2, [r7, #0]
 800af44:	2103      	movs	r1, #3
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f000 f99c 	bl	800b284 <SDMMC_GetCmdResp6>
 800af4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af4e:	69fb      	ldr	r3, [r7, #28]
}
 800af50:	4618      	mov	r0, r3
 800af52:	3720      	adds	r7, #32
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}

0800af58 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b088      	sub	sp, #32
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
 800af60:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800af66:	230d      	movs	r3, #13
 800af68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800af6a:	2340      	movs	r3, #64	@ 0x40
 800af6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800af6e:	2300      	movs	r3, #0
 800af70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800af72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800af76:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800af78:	f107 0308 	add.w	r3, r7, #8
 800af7c:	4619      	mov	r1, r3
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f7ff fd61 	bl	800aa46 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800af84:	f241 3288 	movw	r2, #5000	@ 0x1388
 800af88:	210d      	movs	r1, #13
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f000 f806 	bl	800af9c <SDMMC_GetCmdResp1>
 800af90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af92:	69fb      	ldr	r3, [r7, #28]
}
 800af94:	4618      	mov	r0, r3
 800af96:	3720      	adds	r7, #32
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}

0800af9c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b088      	sub	sp, #32
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	60f8      	str	r0, [r7, #12]
 800afa4:	460b      	mov	r3, r1
 800afa6:	607a      	str	r2, [r7, #4]
 800afa8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800afaa:	4b70      	ldr	r3, [pc, #448]	@ (800b16c <SDMMC_GetCmdResp1+0x1d0>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	4a70      	ldr	r2, [pc, #448]	@ (800b170 <SDMMC_GetCmdResp1+0x1d4>)
 800afb0:	fba2 2303 	umull	r2, r3, r2, r3
 800afb4:	0a5a      	lsrs	r2, r3, #9
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	fb02 f303 	mul.w	r3, r2, r3
 800afbc:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800afbe:	69fb      	ldr	r3, [r7, #28]
 800afc0:	1e5a      	subs	r2, r3, #1
 800afc2:	61fa      	str	r2, [r7, #28]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d102      	bne.n	800afce <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800afc8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800afcc:	e0c9      	b.n	800b162 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afd2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800afd4:	69bb      	ldr	r3, [r7, #24]
 800afd6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d0ef      	beq.n	800afbe <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800afde:	69bb      	ldr	r3, [r7, #24]
 800afe0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d1ea      	bne.n	800afbe <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afec:	f003 0304 	and.w	r3, r3, #4
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d004      	beq.n	800affe <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	2204      	movs	r2, #4
 800aff8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800affa:	2304      	movs	r3, #4
 800affc:	e0b1      	b.n	800b162 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b002:	f003 0301 	and.w	r3, r3, #1
 800b006:	2b00      	cmp	r3, #0
 800b008:	d004      	beq.n	800b014 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	2201      	movs	r2, #1
 800b00e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b010:	2301      	movs	r3, #1
 800b012:	e0a6      	b.n	800b162 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	22c5      	movs	r2, #197	@ 0xc5
 800b018:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b01a:	68f8      	ldr	r0, [r7, #12]
 800b01c:	f7ff fd3d 	bl	800aa9a <SDIO_GetCommandResponse>
 800b020:	4603      	mov	r3, r0
 800b022:	461a      	mov	r2, r3
 800b024:	7afb      	ldrb	r3, [r7, #11]
 800b026:	4293      	cmp	r3, r2
 800b028:	d001      	beq.n	800b02e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b02a:	2301      	movs	r3, #1
 800b02c:	e099      	b.n	800b162 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b02e:	2100      	movs	r1, #0
 800b030:	68f8      	ldr	r0, [r7, #12]
 800b032:	f7ff fd3f 	bl	800aab4 <SDIO_GetResponse>
 800b036:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b038:	697a      	ldr	r2, [r7, #20]
 800b03a:	4b4e      	ldr	r3, [pc, #312]	@ (800b174 <SDMMC_GetCmdResp1+0x1d8>)
 800b03c:	4013      	ands	r3, r2
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d101      	bne.n	800b046 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b042:	2300      	movs	r3, #0
 800b044:	e08d      	b.n	800b162 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b046:	697b      	ldr	r3, [r7, #20]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	da02      	bge.n	800b052 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b04c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b050:	e087      	b.n	800b162 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b052:	697b      	ldr	r3, [r7, #20]
 800b054:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d001      	beq.n	800b060 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b05c:	2340      	movs	r3, #64	@ 0x40
 800b05e:	e080      	b.n	800b162 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b060:	697b      	ldr	r3, [r7, #20]
 800b062:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b066:	2b00      	cmp	r3, #0
 800b068:	d001      	beq.n	800b06e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b06a:	2380      	movs	r3, #128	@ 0x80
 800b06c:	e079      	b.n	800b162 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b06e:	697b      	ldr	r3, [r7, #20]
 800b070:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b074:	2b00      	cmp	r3, #0
 800b076:	d002      	beq.n	800b07e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b078:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b07c:	e071      	b.n	800b162 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b084:	2b00      	cmp	r3, #0
 800b086:	d002      	beq.n	800b08e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b088:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b08c:	e069      	b.n	800b162 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b094:	2b00      	cmp	r3, #0
 800b096:	d002      	beq.n	800b09e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b098:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b09c:	e061      	b.n	800b162 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b09e:	697b      	ldr	r3, [r7, #20]
 800b0a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d002      	beq.n	800b0ae <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b0a8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b0ac:	e059      	b.n	800b162 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d002      	beq.n	800b0be <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b0b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b0bc:	e051      	b.n	800b162 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b0be:	697b      	ldr	r3, [r7, #20]
 800b0c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d002      	beq.n	800b0ce <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b0c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b0cc:	e049      	b.n	800b162 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d002      	beq.n	800b0de <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b0d8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b0dc:	e041      	b.n	800b162 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d002      	beq.n	800b0ee <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b0e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b0ec:	e039      	b.n	800b162 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b0ee:	697b      	ldr	r3, [r7, #20]
 800b0f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d002      	beq.n	800b0fe <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b0f8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800b0fc:	e031      	b.n	800b162 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b104:	2b00      	cmp	r3, #0
 800b106:	d002      	beq.n	800b10e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b108:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800b10c:	e029      	b.n	800b162 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b10e:	697b      	ldr	r3, [r7, #20]
 800b110:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b114:	2b00      	cmp	r3, #0
 800b116:	d002      	beq.n	800b11e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b118:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b11c:	e021      	b.n	800b162 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b11e:	697b      	ldr	r3, [r7, #20]
 800b120:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b124:	2b00      	cmp	r3, #0
 800b126:	d002      	beq.n	800b12e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b128:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800b12c:	e019      	b.n	800b162 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b134:	2b00      	cmp	r3, #0
 800b136:	d002      	beq.n	800b13e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b138:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800b13c:	e011      	b.n	800b162 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b13e:	697b      	ldr	r3, [r7, #20]
 800b140:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b144:	2b00      	cmp	r3, #0
 800b146:	d002      	beq.n	800b14e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b148:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800b14c:	e009      	b.n	800b162 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b14e:	697b      	ldr	r3, [r7, #20]
 800b150:	f003 0308 	and.w	r3, r3, #8
 800b154:	2b00      	cmp	r3, #0
 800b156:	d002      	beq.n	800b15e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b158:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800b15c:	e001      	b.n	800b162 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b15e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800b162:	4618      	mov	r0, r3
 800b164:	3720      	adds	r7, #32
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}
 800b16a:	bf00      	nop
 800b16c:	20000000 	.word	0x20000000
 800b170:	10624dd3 	.word	0x10624dd3
 800b174:	fdffe008 	.word	0xfdffe008

0800b178 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800b178:	b480      	push	{r7}
 800b17a:	b085      	sub	sp, #20
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b180:	4b1f      	ldr	r3, [pc, #124]	@ (800b200 <SDMMC_GetCmdResp2+0x88>)
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	4a1f      	ldr	r2, [pc, #124]	@ (800b204 <SDMMC_GetCmdResp2+0x8c>)
 800b186:	fba2 2303 	umull	r2, r3, r2, r3
 800b18a:	0a5b      	lsrs	r3, r3, #9
 800b18c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b190:	fb02 f303 	mul.w	r3, r2, r3
 800b194:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	1e5a      	subs	r2, r3, #1
 800b19a:	60fa      	str	r2, [r7, #12]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d102      	bne.n	800b1a6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b1a0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b1a4:	e026      	b.n	800b1f4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1aa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b1ac:	68bb      	ldr	r3, [r7, #8]
 800b1ae:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d0ef      	beq.n	800b196 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d1ea      	bne.n	800b196 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1c4:	f003 0304 	and.w	r3, r3, #4
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d004      	beq.n	800b1d6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2204      	movs	r2, #4
 800b1d0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b1d2:	2304      	movs	r3, #4
 800b1d4:	e00e      	b.n	800b1f4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1da:	f003 0301 	and.w	r3, r3, #1
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d004      	beq.n	800b1ec <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2201      	movs	r2, #1
 800b1e6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	e003      	b.n	800b1f4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	22c5      	movs	r2, #197	@ 0xc5
 800b1f0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800b1f2:	2300      	movs	r3, #0
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	3714      	adds	r7, #20
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fe:	4770      	bx	lr
 800b200:	20000000 	.word	0x20000000
 800b204:	10624dd3 	.word	0x10624dd3

0800b208 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800b208:	b480      	push	{r7}
 800b20a:	b085      	sub	sp, #20
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b210:	4b1a      	ldr	r3, [pc, #104]	@ (800b27c <SDMMC_GetCmdResp3+0x74>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	4a1a      	ldr	r2, [pc, #104]	@ (800b280 <SDMMC_GetCmdResp3+0x78>)
 800b216:	fba2 2303 	umull	r2, r3, r2, r3
 800b21a:	0a5b      	lsrs	r3, r3, #9
 800b21c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b220:	fb02 f303 	mul.w	r3, r2, r3
 800b224:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	1e5a      	subs	r2, r3, #1
 800b22a:	60fa      	str	r2, [r7, #12]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d102      	bne.n	800b236 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b230:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b234:	e01b      	b.n	800b26e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b23a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b23c:	68bb      	ldr	r3, [r7, #8]
 800b23e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b242:	2b00      	cmp	r3, #0
 800b244:	d0ef      	beq.n	800b226 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b246:	68bb      	ldr	r3, [r7, #8]
 800b248:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d1ea      	bne.n	800b226 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b254:	f003 0304 	and.w	r3, r3, #4
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d004      	beq.n	800b266 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2204      	movs	r2, #4
 800b260:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b262:	2304      	movs	r3, #4
 800b264:	e003      	b.n	800b26e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	22c5      	movs	r2, #197	@ 0xc5
 800b26a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b26c:	2300      	movs	r3, #0
}
 800b26e:	4618      	mov	r0, r3
 800b270:	3714      	adds	r7, #20
 800b272:	46bd      	mov	sp, r7
 800b274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b278:	4770      	bx	lr
 800b27a:	bf00      	nop
 800b27c:	20000000 	.word	0x20000000
 800b280:	10624dd3 	.word	0x10624dd3

0800b284 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b088      	sub	sp, #32
 800b288:	af00      	add	r7, sp, #0
 800b28a:	60f8      	str	r0, [r7, #12]
 800b28c:	460b      	mov	r3, r1
 800b28e:	607a      	str	r2, [r7, #4]
 800b290:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b292:	4b35      	ldr	r3, [pc, #212]	@ (800b368 <SDMMC_GetCmdResp6+0xe4>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	4a35      	ldr	r2, [pc, #212]	@ (800b36c <SDMMC_GetCmdResp6+0xe8>)
 800b298:	fba2 2303 	umull	r2, r3, r2, r3
 800b29c:	0a5b      	lsrs	r3, r3, #9
 800b29e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b2a2:	fb02 f303 	mul.w	r3, r2, r3
 800b2a6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b2a8:	69fb      	ldr	r3, [r7, #28]
 800b2aa:	1e5a      	subs	r2, r3, #1
 800b2ac:	61fa      	str	r2, [r7, #28]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d102      	bne.n	800b2b8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b2b2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b2b6:	e052      	b.n	800b35e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b2bc:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b2be:	69bb      	ldr	r3, [r7, #24]
 800b2c0:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d0ef      	beq.n	800b2a8 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b2c8:	69bb      	ldr	r3, [r7, #24]
 800b2ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d1ea      	bne.n	800b2a8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b2d6:	f003 0304 	and.w	r3, r3, #4
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d004      	beq.n	800b2e8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	2204      	movs	r2, #4
 800b2e2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b2e4:	2304      	movs	r3, #4
 800b2e6:	e03a      	b.n	800b35e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b2ec:	f003 0301 	and.w	r3, r3, #1
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d004      	beq.n	800b2fe <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	2201      	movs	r2, #1
 800b2f8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b2fa:	2301      	movs	r3, #1
 800b2fc:	e02f      	b.n	800b35e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b2fe:	68f8      	ldr	r0, [r7, #12]
 800b300:	f7ff fbcb 	bl	800aa9a <SDIO_GetCommandResponse>
 800b304:	4603      	mov	r3, r0
 800b306:	461a      	mov	r2, r3
 800b308:	7afb      	ldrb	r3, [r7, #11]
 800b30a:	4293      	cmp	r3, r2
 800b30c:	d001      	beq.n	800b312 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b30e:	2301      	movs	r3, #1
 800b310:	e025      	b.n	800b35e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	22c5      	movs	r2, #197	@ 0xc5
 800b316:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b318:	2100      	movs	r1, #0
 800b31a:	68f8      	ldr	r0, [r7, #12]
 800b31c:	f7ff fbca 	bl	800aab4 <SDIO_GetResponse>
 800b320:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d106      	bne.n	800b33a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b32c:	697b      	ldr	r3, [r7, #20]
 800b32e:	0c1b      	lsrs	r3, r3, #16
 800b330:	b29a      	uxth	r2, r3
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b336:	2300      	movs	r3, #0
 800b338:	e011      	b.n	800b35e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b340:	2b00      	cmp	r3, #0
 800b342:	d002      	beq.n	800b34a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b344:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b348:	e009      	b.n	800b35e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b34a:	697b      	ldr	r3, [r7, #20]
 800b34c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b350:	2b00      	cmp	r3, #0
 800b352:	d002      	beq.n	800b35a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b354:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b358:	e001      	b.n	800b35e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b35a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800b35e:	4618      	mov	r0, r3
 800b360:	3720      	adds	r7, #32
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}
 800b366:	bf00      	nop
 800b368:	20000000 	.word	0x20000000
 800b36c:	10624dd3 	.word	0x10624dd3

0800b370 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800b370:	b480      	push	{r7}
 800b372:	b085      	sub	sp, #20
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b378:	4b22      	ldr	r3, [pc, #136]	@ (800b404 <SDMMC_GetCmdResp7+0x94>)
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	4a22      	ldr	r2, [pc, #136]	@ (800b408 <SDMMC_GetCmdResp7+0x98>)
 800b37e:	fba2 2303 	umull	r2, r3, r2, r3
 800b382:	0a5b      	lsrs	r3, r3, #9
 800b384:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b388:	fb02 f303 	mul.w	r3, r2, r3
 800b38c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	1e5a      	subs	r2, r3, #1
 800b392:	60fa      	str	r2, [r7, #12]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d102      	bne.n	800b39e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b398:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b39c:	e02c      	b.n	800b3f8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b3a2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b3a4:	68bb      	ldr	r3, [r7, #8]
 800b3a6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d0ef      	beq.n	800b38e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b3ae:	68bb      	ldr	r3, [r7, #8]
 800b3b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d1ea      	bne.n	800b38e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b3bc:	f003 0304 	and.w	r3, r3, #4
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d004      	beq.n	800b3ce <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2204      	movs	r2, #4
 800b3c8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b3ca:	2304      	movs	r3, #4
 800b3cc:	e014      	b.n	800b3f8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b3d2:	f003 0301 	and.w	r3, r3, #1
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d004      	beq.n	800b3e4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2201      	movs	r2, #1
 800b3de:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	e009      	b.n	800b3f8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b3e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d002      	beq.n	800b3f6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2240      	movs	r2, #64	@ 0x40
 800b3f4:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b3f6:	2300      	movs	r3, #0
  
}
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	3714      	adds	r7, #20
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b402:	4770      	bx	lr
 800b404:	20000000 	.word	0x20000000
 800b408:	10624dd3 	.word	0x10624dd3

0800b40c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800b40c:	b480      	push	{r7}
 800b40e:	b085      	sub	sp, #20
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b414:	4b11      	ldr	r3, [pc, #68]	@ (800b45c <SDMMC_GetCmdError+0x50>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	4a11      	ldr	r2, [pc, #68]	@ (800b460 <SDMMC_GetCmdError+0x54>)
 800b41a:	fba2 2303 	umull	r2, r3, r2, r3
 800b41e:	0a5b      	lsrs	r3, r3, #9
 800b420:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b424:	fb02 f303 	mul.w	r3, r2, r3
 800b428:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	1e5a      	subs	r2, r3, #1
 800b42e:	60fa      	str	r2, [r7, #12]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d102      	bne.n	800b43a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b434:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b438:	e009      	b.n	800b44e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b43e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b442:	2b00      	cmp	r3, #0
 800b444:	d0f1      	beq.n	800b42a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	22c5      	movs	r2, #197	@ 0xc5
 800b44a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800b44c:	2300      	movs	r3, #0
}
 800b44e:	4618      	mov	r0, r3
 800b450:	3714      	adds	r7, #20
 800b452:	46bd      	mov	sp, r7
 800b454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b458:	4770      	bx	lr
 800b45a:	bf00      	nop
 800b45c:	20000000 	.word	0x20000000
 800b460:	10624dd3 	.word	0x10624dd3

0800b464 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b468:	4904      	ldr	r1, [pc, #16]	@ (800b47c <MX_FATFS_Init+0x18>)
 800b46a:	4805      	ldr	r0, [pc, #20]	@ (800b480 <MX_FATFS_Init+0x1c>)
 800b46c:	f000 fab8 	bl	800b9e0 <FATFS_LinkDriver>
 800b470:	4603      	mov	r3, r0
 800b472:	461a      	mov	r2, r3
 800b474:	4b03      	ldr	r3, [pc, #12]	@ (800b484 <MX_FATFS_Init+0x20>)
 800b476:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b478:	bf00      	nop
 800b47a:	bd80      	pop	{r7, pc}
 800b47c:	200017b0 	.word	0x200017b0
 800b480:	080120f0 	.word	0x080120f0
 800b484:	200017ac 	.word	0x200017ac

0800b488 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b082      	sub	sp, #8
 800b48c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b48e:	2300      	movs	r3, #0
 800b490:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b492:	f000 f896 	bl	800b5c2 <BSP_SD_IsDetected>
 800b496:	4603      	mov	r3, r0
 800b498:	2b01      	cmp	r3, #1
 800b49a:	d001      	beq.n	800b4a0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800b49c:	2301      	movs	r3, #1
 800b49e:	e012      	b.n	800b4c6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800b4a0:	480b      	ldr	r0, [pc, #44]	@ (800b4d0 <BSP_SD_Init+0x48>)
 800b4a2:	f7fc f975 	bl	8007790 <HAL_SD_Init>
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800b4aa:	79fb      	ldrb	r3, [r7, #7]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d109      	bne.n	800b4c4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800b4b0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800b4b4:	4806      	ldr	r0, [pc, #24]	@ (800b4d0 <BSP_SD_Init+0x48>)
 800b4b6:	f7fc ff2d 	bl	8008314 <HAL_SD_ConfigWideBusOperation>
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d001      	beq.n	800b4c4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800b4c0:	2301      	movs	r3, #1
 800b4c2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800b4c4:	79fb      	ldrb	r3, [r7, #7]
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	3708      	adds	r7, #8
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}
 800b4ce:	bf00      	nop
 800b4d0:	2000042c 	.word	0x2000042c

0800b4d4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b086      	sub	sp, #24
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	60f8      	str	r0, [r7, #12]
 800b4dc:	60b9      	str	r1, [r7, #8]
 800b4de:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	68ba      	ldr	r2, [r7, #8]
 800b4e8:	68f9      	ldr	r1, [r7, #12]
 800b4ea:	4806      	ldr	r0, [pc, #24]	@ (800b504 <BSP_SD_ReadBlocks_DMA+0x30>)
 800b4ec:	f7fc fa00 	bl	80078f0 <HAL_SD_ReadBlocks_DMA>
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d001      	beq.n	800b4fa <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b4fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3718      	adds	r7, #24
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}
 800b504:	2000042c 	.word	0x2000042c

0800b508 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b086      	sub	sp, #24
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	60f8      	str	r0, [r7, #12]
 800b510:	60b9      	str	r1, [r7, #8]
 800b512:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b514:	2300      	movs	r3, #0
 800b516:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	68ba      	ldr	r2, [r7, #8]
 800b51c:	68f9      	ldr	r1, [r7, #12]
 800b51e:	4806      	ldr	r0, [pc, #24]	@ (800b538 <BSP_SD_WriteBlocks_DMA+0x30>)
 800b520:	f7fc fac6 	bl	8007ab0 <HAL_SD_WriteBlocks_DMA>
 800b524:	4603      	mov	r3, r0
 800b526:	2b00      	cmp	r3, #0
 800b528:	d001      	beq.n	800b52e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b52a:	2301      	movs	r3, #1
 800b52c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b52e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b530:	4618      	mov	r0, r3
 800b532:	3718      	adds	r7, #24
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}
 800b538:	2000042c 	.word	0x2000042c

0800b53c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b540:	4805      	ldr	r0, [pc, #20]	@ (800b558 <BSP_SD_GetCardState+0x1c>)
 800b542:	f7fc ff81 	bl	8008448 <HAL_SD_GetCardState>
 800b546:	4603      	mov	r3, r0
 800b548:	2b04      	cmp	r3, #4
 800b54a:	bf14      	ite	ne
 800b54c:	2301      	movne	r3, #1
 800b54e:	2300      	moveq	r3, #0
 800b550:	b2db      	uxtb	r3, r3
}
 800b552:	4618      	mov	r0, r3
 800b554:	bd80      	pop	{r7, pc}
 800b556:	bf00      	nop
 800b558:	2000042c 	.word	0x2000042c

0800b55c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b082      	sub	sp, #8
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800b564:	6879      	ldr	r1, [r7, #4]
 800b566:	4803      	ldr	r0, [pc, #12]	@ (800b574 <BSP_SD_GetCardInfo+0x18>)
 800b568:	f7fc fea8 	bl	80082bc <HAL_SD_GetCardInfo>
}
 800b56c:	bf00      	nop
 800b56e:	3708      	adds	r7, #8
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}
 800b574:	2000042c 	.word	0x2000042c

0800b578 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b082      	sub	sp, #8
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800b580:	f000 f818 	bl	800b5b4 <BSP_SD_AbortCallback>
}
 800b584:	bf00      	nop
 800b586:	3708      	adds	r7, #8
 800b588:	46bd      	mov	sp, r7
 800b58a:	bd80      	pop	{r7, pc}

0800b58c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b082      	sub	sp, #8
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800b594:	f000 f9b4 	bl	800b900 <BSP_SD_WriteCpltCallback>
}
 800b598:	bf00      	nop
 800b59a:	3708      	adds	r7, #8
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bd80      	pop	{r7, pc}

0800b5a0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b082      	sub	sp, #8
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800b5a8:	f000 f9bc 	bl	800b924 <BSP_SD_ReadCpltCallback>
}
 800b5ac:	bf00      	nop
 800b5ae:	3708      	adds	r7, #8
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}

0800b5b4 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	af00      	add	r7, sp, #0

}
 800b5b8:	bf00      	nop
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c0:	4770      	bx	lr

0800b5c2 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b5c2:	b580      	push	{r7, lr}
 800b5c4:	b082      	sub	sp, #8
 800b5c6:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b5c8:	2301      	movs	r3, #1
 800b5ca:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800b5cc:	f000 f80c 	bl	800b5e8 <BSP_PlatformIsDetected>
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d101      	bne.n	800b5da <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800b5da:	79fb      	ldrb	r3, [r7, #7]
 800b5dc:	b2db      	uxtb	r3, r3
}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	3708      	adds	r7, #8
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bd80      	pop	{r7, pc}
	...

0800b5e8 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b082      	sub	sp, #8
 800b5ec:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800b5f2:	2104      	movs	r1, #4
 800b5f4:	4806      	ldr	r0, [pc, #24]	@ (800b610 <BSP_PlatformIsDetected+0x28>)
 800b5f6:	f7fa f99d 	bl	8005934 <HAL_GPIO_ReadPin>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d001      	beq.n	800b604 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800b600:	2300      	movs	r3, #0
 800b602:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800b604:	79fb      	ldrb	r3, [r7, #7]
}
 800b606:	4618      	mov	r0, r3
 800b608:	3708      	adds	r7, #8
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}
 800b60e:	bf00      	nop
 800b610:	40021800 	.word	0x40021800

0800b614 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b084      	sub	sp, #16
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800b61c:	f000 faa0 	bl	800bb60 <osKernelGetTickCount>
 800b620:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800b622:	e006      	b.n	800b632 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b624:	f7ff ff8a 	bl	800b53c <BSP_SD_GetCardState>
 800b628:	4603      	mov	r3, r0
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d101      	bne.n	800b632 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800b62e:	2300      	movs	r3, #0
 800b630:	e009      	b.n	800b646 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800b632:	f000 fa95 	bl	800bb60 <osKernelGetTickCount>
 800b636:	4602      	mov	r2, r0
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	1ad3      	subs	r3, r2, r3
 800b63c:	687a      	ldr	r2, [r7, #4]
 800b63e:	429a      	cmp	r2, r3
 800b640:	d8f0      	bhi.n	800b624 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800b642:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b646:	4618      	mov	r0, r3
 800b648:	3710      	adds	r7, #16
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}
	...

0800b650 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b082      	sub	sp, #8
 800b654:	af00      	add	r7, sp, #0
 800b656:	4603      	mov	r3, r0
 800b658:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b65a:	4b0b      	ldr	r3, [pc, #44]	@ (800b688 <SD_CheckStatus+0x38>)
 800b65c:	2201      	movs	r2, #1
 800b65e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b660:	f7ff ff6c 	bl	800b53c <BSP_SD_GetCardState>
 800b664:	4603      	mov	r3, r0
 800b666:	2b00      	cmp	r3, #0
 800b668:	d107      	bne.n	800b67a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b66a:	4b07      	ldr	r3, [pc, #28]	@ (800b688 <SD_CheckStatus+0x38>)
 800b66c:	781b      	ldrb	r3, [r3, #0]
 800b66e:	b2db      	uxtb	r3, r3
 800b670:	f023 0301 	bic.w	r3, r3, #1
 800b674:	b2da      	uxtb	r2, r3
 800b676:	4b04      	ldr	r3, [pc, #16]	@ (800b688 <SD_CheckStatus+0x38>)
 800b678:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b67a:	4b03      	ldr	r3, [pc, #12]	@ (800b688 <SD_CheckStatus+0x38>)
 800b67c:	781b      	ldrb	r3, [r3, #0]
 800b67e:	b2db      	uxtb	r3, r3
}
 800b680:	4618      	mov	r0, r3
 800b682:	3708      	adds	r7, #8
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}
 800b688:	20000009 	.word	0x20000009

0800b68c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b082      	sub	sp, #8
 800b690:	af00      	add	r7, sp, #0
 800b692:	4603      	mov	r3, r0
 800b694:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800b696:	4b1c      	ldr	r3, [pc, #112]	@ (800b708 <SD_initialize+0x7c>)
 800b698:	2201      	movs	r2, #1
 800b69a:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800b69c:	f000 fa18 	bl	800bad0 <osKernelGetState>
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	2b02      	cmp	r3, #2
 800b6a4:	d129      	bne.n	800b6fa <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800b6a6:	f7ff feef 	bl	800b488 <BSP_SD_Init>
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d107      	bne.n	800b6c0 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800b6b0:	79fb      	ldrb	r3, [r7, #7]
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	f7ff ffcc 	bl	800b650 <SD_CheckStatus>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	461a      	mov	r2, r3
 800b6bc:	4b12      	ldr	r3, [pc, #72]	@ (800b708 <SD_initialize+0x7c>)
 800b6be:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800b6c0:	4b11      	ldr	r3, [pc, #68]	@ (800b708 <SD_initialize+0x7c>)
 800b6c2:	781b      	ldrb	r3, [r3, #0]
 800b6c4:	b2db      	uxtb	r3, r3
 800b6c6:	2b01      	cmp	r3, #1
 800b6c8:	d017      	beq.n	800b6fa <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800b6ca:	4b10      	ldr	r3, [pc, #64]	@ (800b70c <SD_initialize+0x80>)
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d107      	bne.n	800b6e2 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	2102      	movs	r1, #2
 800b6d6:	200a      	movs	r0, #10
 800b6d8:	f000 fc24 	bl	800bf24 <osMessageQueueNew>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	4a0b      	ldr	r2, [pc, #44]	@ (800b70c <SD_initialize+0x80>)
 800b6e0:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 800b6e2:	4b0a      	ldr	r3, [pc, #40]	@ (800b70c <SD_initialize+0x80>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d107      	bne.n	800b6fa <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800b6ea:	4b07      	ldr	r3, [pc, #28]	@ (800b708 <SD_initialize+0x7c>)
 800b6ec:	781b      	ldrb	r3, [r3, #0]
 800b6ee:	b2db      	uxtb	r3, r3
 800b6f0:	f043 0301 	orr.w	r3, r3, #1
 800b6f4:	b2da      	uxtb	r2, r3
 800b6f6:	4b04      	ldr	r3, [pc, #16]	@ (800b708 <SD_initialize+0x7c>)
 800b6f8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800b6fa:	4b03      	ldr	r3, [pc, #12]	@ (800b708 <SD_initialize+0x7c>)
 800b6fc:	781b      	ldrb	r3, [r3, #0]
 800b6fe:	b2db      	uxtb	r3, r3
}
 800b700:	4618      	mov	r0, r3
 800b702:	3708      	adds	r7, #8
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}
 800b708:	20000009 	.word	0x20000009
 800b70c:	200017b4 	.word	0x200017b4

0800b710 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b082      	sub	sp, #8
 800b714:	af00      	add	r7, sp, #0
 800b716:	4603      	mov	r3, r0
 800b718:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b71a:	79fb      	ldrb	r3, [r7, #7]
 800b71c:	4618      	mov	r0, r3
 800b71e:	f7ff ff97 	bl	800b650 <SD_CheckStatus>
 800b722:	4603      	mov	r3, r0
}
 800b724:	4618      	mov	r0, r3
 800b726:	3708      	adds	r7, #8
 800b728:	46bd      	mov	sp, r7
 800b72a:	bd80      	pop	{r7, pc}

0800b72c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b088      	sub	sp, #32
 800b730:	af00      	add	r7, sp, #0
 800b732:	60b9      	str	r1, [r7, #8]
 800b734:	607a      	str	r2, [r7, #4]
 800b736:	603b      	str	r3, [r7, #0]
 800b738:	4603      	mov	r3, r0
 800b73a:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800b73c:	2301      	movs	r3, #1
 800b73e:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b740:	f247 5030 	movw	r0, #30000	@ 0x7530
 800b744:	f7ff ff66 	bl	800b614 <SD_CheckStatusWithTimeout>
 800b748:	4603      	mov	r3, r0
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	da01      	bge.n	800b752 <SD_read+0x26>
  {
    return res;
 800b74e:	7ffb      	ldrb	r3, [r7, #31]
 800b750:	e02f      	b.n	800b7b2 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800b752:	683a      	ldr	r2, [r7, #0]
 800b754:	6879      	ldr	r1, [r7, #4]
 800b756:	68b8      	ldr	r0, [r7, #8]
 800b758:	f7ff febc 	bl	800b4d4 <BSP_SD_ReadBlocks_DMA>
 800b75c:	4603      	mov	r3, r0
 800b75e:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800b760:	7fbb      	ldrb	r3, [r7, #30]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d124      	bne.n	800b7b0 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800b766:	4b15      	ldr	r3, [pc, #84]	@ (800b7bc <SD_read+0x90>)
 800b768:	6818      	ldr	r0, [r3, #0]
 800b76a:	f107 0112 	add.w	r1, r7, #18
 800b76e:	f247 5330 	movw	r3, #30000	@ 0x7530
 800b772:	2200      	movs	r2, #0
 800b774:	f000 fcaa 	bl	800c0cc <osMessageQueueGet>
 800b778:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800b77a:	69bb      	ldr	r3, [r7, #24]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d117      	bne.n	800b7b0 <SD_read+0x84>
 800b780:	8a7b      	ldrh	r3, [r7, #18]
 800b782:	2b01      	cmp	r3, #1
 800b784:	d114      	bne.n	800b7b0 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800b786:	f000 f9eb 	bl	800bb60 <osKernelGetTickCount>
 800b78a:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800b78c:	e007      	b.n	800b79e <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b78e:	f7ff fed5 	bl	800b53c <BSP_SD_GetCardState>
 800b792:	4603      	mov	r3, r0
 800b794:	2b00      	cmp	r3, #0
 800b796:	d102      	bne.n	800b79e <SD_read+0x72>
              {
                res = RES_OK;
 800b798:	2300      	movs	r3, #0
 800b79a:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800b79c:	e008      	b.n	800b7b0 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800b79e:	f000 f9df 	bl	800bb60 <osKernelGetTickCount>
 800b7a2:	4602      	mov	r2, r0
 800b7a4:	697b      	ldr	r3, [r7, #20]
 800b7a6:	1ad3      	subs	r3, r2, r3
 800b7a8:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b7ac:	4293      	cmp	r3, r2
 800b7ae:	d9ee      	bls.n	800b78e <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800b7b0:	7ffb      	ldrb	r3, [r7, #31]
}
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	3720      	adds	r7, #32
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bd80      	pop	{r7, pc}
 800b7ba:	bf00      	nop
 800b7bc:	200017b4 	.word	0x200017b4

0800b7c0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b088      	sub	sp, #32
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	60b9      	str	r1, [r7, #8]
 800b7c8:	607a      	str	r2, [r7, #4]
 800b7ca:	603b      	str	r3, [r7, #0]
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b7d0:	2301      	movs	r3, #1
 800b7d2:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b7d4:	f247 5030 	movw	r0, #30000	@ 0x7530
 800b7d8:	f7ff ff1c 	bl	800b614 <SD_CheckStatusWithTimeout>
 800b7dc:	4603      	mov	r3, r0
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	da01      	bge.n	800b7e6 <SD_write+0x26>
  {
    return res;
 800b7e2:	7ffb      	ldrb	r3, [r7, #31]
 800b7e4:	e02d      	b.n	800b842 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800b7e6:	683a      	ldr	r2, [r7, #0]
 800b7e8:	6879      	ldr	r1, [r7, #4]
 800b7ea:	68b8      	ldr	r0, [r7, #8]
 800b7ec:	f7ff fe8c 	bl	800b508 <BSP_SD_WriteBlocks_DMA>
 800b7f0:	4603      	mov	r3, r0
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d124      	bne.n	800b840 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800b7f6:	4b15      	ldr	r3, [pc, #84]	@ (800b84c <SD_write+0x8c>)
 800b7f8:	6818      	ldr	r0, [r3, #0]
 800b7fa:	f107 0112 	add.w	r1, r7, #18
 800b7fe:	f247 5330 	movw	r3, #30000	@ 0x7530
 800b802:	2200      	movs	r2, #0
 800b804:	f000 fc62 	bl	800c0cc <osMessageQueueGet>
 800b808:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800b80a:	69bb      	ldr	r3, [r7, #24]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d117      	bne.n	800b840 <SD_write+0x80>
 800b810:	8a7b      	ldrh	r3, [r7, #18]
 800b812:	2b02      	cmp	r3, #2
 800b814:	d114      	bne.n	800b840 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800b816:	f000 f9a3 	bl	800bb60 <osKernelGetTickCount>
 800b81a:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800b81c:	e007      	b.n	800b82e <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b81e:	f7ff fe8d 	bl	800b53c <BSP_SD_GetCardState>
 800b822:	4603      	mov	r3, r0
 800b824:	2b00      	cmp	r3, #0
 800b826:	d102      	bne.n	800b82e <SD_write+0x6e>
          {
            res = RES_OK;
 800b828:	2300      	movs	r3, #0
 800b82a:	77fb      	strb	r3, [r7, #31]
            break;
 800b82c:	e008      	b.n	800b840 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800b82e:	f000 f997 	bl	800bb60 <osKernelGetTickCount>
 800b832:	4602      	mov	r2, r0
 800b834:	697b      	ldr	r3, [r7, #20]
 800b836:	1ad3      	subs	r3, r2, r3
 800b838:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b83c:	4293      	cmp	r3, r2
 800b83e:	d9ee      	bls.n	800b81e <SD_write+0x5e>
    }

  }
#endif

  return res;
 800b840:	7ffb      	ldrb	r3, [r7, #31]
}
 800b842:	4618      	mov	r0, r3
 800b844:	3720      	adds	r7, #32
 800b846:	46bd      	mov	sp, r7
 800b848:	bd80      	pop	{r7, pc}
 800b84a:	bf00      	nop
 800b84c:	200017b4 	.word	0x200017b4

0800b850 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b08c      	sub	sp, #48	@ 0x30
 800b854:	af00      	add	r7, sp, #0
 800b856:	4603      	mov	r3, r0
 800b858:	603a      	str	r2, [r7, #0]
 800b85a:	71fb      	strb	r3, [r7, #7]
 800b85c:	460b      	mov	r3, r1
 800b85e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b860:	2301      	movs	r3, #1
 800b862:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b866:	4b25      	ldr	r3, [pc, #148]	@ (800b8fc <SD_ioctl+0xac>)
 800b868:	781b      	ldrb	r3, [r3, #0]
 800b86a:	b2db      	uxtb	r3, r3
 800b86c:	f003 0301 	and.w	r3, r3, #1
 800b870:	2b00      	cmp	r3, #0
 800b872:	d001      	beq.n	800b878 <SD_ioctl+0x28>
 800b874:	2303      	movs	r3, #3
 800b876:	e03c      	b.n	800b8f2 <SD_ioctl+0xa2>

  switch (cmd)
 800b878:	79bb      	ldrb	r3, [r7, #6]
 800b87a:	2b03      	cmp	r3, #3
 800b87c:	d834      	bhi.n	800b8e8 <SD_ioctl+0x98>
 800b87e:	a201      	add	r2, pc, #4	@ (adr r2, 800b884 <SD_ioctl+0x34>)
 800b880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b884:	0800b895 	.word	0x0800b895
 800b888:	0800b89d 	.word	0x0800b89d
 800b88c:	0800b8b5 	.word	0x0800b8b5
 800b890:	0800b8cf 	.word	0x0800b8cf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b894:	2300      	movs	r3, #0
 800b896:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b89a:	e028      	b.n	800b8ee <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b89c:	f107 030c 	add.w	r3, r7, #12
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	f7ff fe5b 	bl	800b55c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b8a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b8b2:	e01c      	b.n	800b8ee <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b8b4:	f107 030c 	add.w	r3, r7, #12
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	f7ff fe4f 	bl	800b55c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b8be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8c0:	b29a      	uxth	r2, r3
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b8cc:	e00f      	b.n	800b8ee <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b8ce:	f107 030c 	add.w	r3, r7, #12
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	f7ff fe42 	bl	800b55c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b8d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8da:	0a5a      	lsrs	r2, r3, #9
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b8e6:	e002      	b.n	800b8ee <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b8e8:	2304      	movs	r3, #4
 800b8ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800b8ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	3730      	adds	r7, #48	@ 0x30
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bd80      	pop	{r7, pc}
 800b8fa:	bf00      	nop
 800b8fc:	20000009 	.word	0x20000009

0800b900 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b082      	sub	sp, #8
 800b904:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800b906:	2302      	movs	r3, #2
 800b908:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
 800b90a:	4b05      	ldr	r3, [pc, #20]	@ (800b920 <BSP_SD_WriteCpltCallback+0x20>)
 800b90c:	6818      	ldr	r0, [r3, #0]
 800b90e:	1db9      	adds	r1, r7, #6
 800b910:	2300      	movs	r3, #0
 800b912:	2200      	movs	r2, #0
 800b914:	f000 fb7a 	bl	800c00c <osMessageQueuePut>
#endif
}
 800b918:	bf00      	nop
 800b91a:	3708      	adds	r7, #8
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}
 800b920:	200017b4 	.word	0x200017b4

0800b924 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b082      	sub	sp, #8
 800b928:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800b92a:	2301      	movs	r3, #1
 800b92c:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
 800b92e:	4b05      	ldr	r3, [pc, #20]	@ (800b944 <BSP_SD_ReadCpltCallback+0x20>)
 800b930:	6818      	ldr	r0, [r3, #0]
 800b932:	1db9      	adds	r1, r7, #6
 800b934:	2300      	movs	r3, #0
 800b936:	2200      	movs	r2, #0
 800b938:	f000 fb68 	bl	800c00c <osMessageQueuePut>
#endif
}
 800b93c:	bf00      	nop
 800b93e:	3708      	adds	r7, #8
 800b940:	46bd      	mov	sp, r7
 800b942:	bd80      	pop	{r7, pc}
 800b944:	200017b4 	.word	0x200017b4

0800b948 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b948:	b480      	push	{r7}
 800b94a:	b087      	sub	sp, #28
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	60f8      	str	r0, [r7, #12]
 800b950:	60b9      	str	r1, [r7, #8]
 800b952:	4613      	mov	r3, r2
 800b954:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b956:	2301      	movs	r3, #1
 800b958:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b95a:	2300      	movs	r3, #0
 800b95c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b95e:	4b1f      	ldr	r3, [pc, #124]	@ (800b9dc <FATFS_LinkDriverEx+0x94>)
 800b960:	7a5b      	ldrb	r3, [r3, #9]
 800b962:	b2db      	uxtb	r3, r3
 800b964:	2b00      	cmp	r3, #0
 800b966:	d131      	bne.n	800b9cc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b968:	4b1c      	ldr	r3, [pc, #112]	@ (800b9dc <FATFS_LinkDriverEx+0x94>)
 800b96a:	7a5b      	ldrb	r3, [r3, #9]
 800b96c:	b2db      	uxtb	r3, r3
 800b96e:	461a      	mov	r2, r3
 800b970:	4b1a      	ldr	r3, [pc, #104]	@ (800b9dc <FATFS_LinkDriverEx+0x94>)
 800b972:	2100      	movs	r1, #0
 800b974:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b976:	4b19      	ldr	r3, [pc, #100]	@ (800b9dc <FATFS_LinkDriverEx+0x94>)
 800b978:	7a5b      	ldrb	r3, [r3, #9]
 800b97a:	b2db      	uxtb	r3, r3
 800b97c:	4a17      	ldr	r2, [pc, #92]	@ (800b9dc <FATFS_LinkDriverEx+0x94>)
 800b97e:	009b      	lsls	r3, r3, #2
 800b980:	4413      	add	r3, r2
 800b982:	68fa      	ldr	r2, [r7, #12]
 800b984:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b986:	4b15      	ldr	r3, [pc, #84]	@ (800b9dc <FATFS_LinkDriverEx+0x94>)
 800b988:	7a5b      	ldrb	r3, [r3, #9]
 800b98a:	b2db      	uxtb	r3, r3
 800b98c:	461a      	mov	r2, r3
 800b98e:	4b13      	ldr	r3, [pc, #76]	@ (800b9dc <FATFS_LinkDriverEx+0x94>)
 800b990:	4413      	add	r3, r2
 800b992:	79fa      	ldrb	r2, [r7, #7]
 800b994:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b996:	4b11      	ldr	r3, [pc, #68]	@ (800b9dc <FATFS_LinkDriverEx+0x94>)
 800b998:	7a5b      	ldrb	r3, [r3, #9]
 800b99a:	b2db      	uxtb	r3, r3
 800b99c:	1c5a      	adds	r2, r3, #1
 800b99e:	b2d1      	uxtb	r1, r2
 800b9a0:	4a0e      	ldr	r2, [pc, #56]	@ (800b9dc <FATFS_LinkDriverEx+0x94>)
 800b9a2:	7251      	strb	r1, [r2, #9]
 800b9a4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b9a6:	7dbb      	ldrb	r3, [r7, #22]
 800b9a8:	3330      	adds	r3, #48	@ 0x30
 800b9aa:	b2da      	uxtb	r2, r3
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b9b0:	68bb      	ldr	r3, [r7, #8]
 800b9b2:	3301      	adds	r3, #1
 800b9b4:	223a      	movs	r2, #58	@ 0x3a
 800b9b6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b9b8:	68bb      	ldr	r3, [r7, #8]
 800b9ba:	3302      	adds	r3, #2
 800b9bc:	222f      	movs	r2, #47	@ 0x2f
 800b9be:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b9c0:	68bb      	ldr	r3, [r7, #8]
 800b9c2:	3303      	adds	r3, #3
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b9cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	371c      	adds	r7, #28
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d8:	4770      	bx	lr
 800b9da:	bf00      	nop
 800b9dc:	200017b8 	.word	0x200017b8

0800b9e0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b082      	sub	sp, #8
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
 800b9e8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	6839      	ldr	r1, [r7, #0]
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f7ff ffaa 	bl	800b948 <FATFS_LinkDriverEx>
 800b9f4:	4603      	mov	r3, r0
}
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	3708      	adds	r7, #8
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}
	...

0800ba00 <__NVIC_SetPriority>:
{
 800ba00:	b480      	push	{r7}
 800ba02:	b083      	sub	sp, #12
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	4603      	mov	r3, r0
 800ba08:	6039      	str	r1, [r7, #0]
 800ba0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ba0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	db0a      	blt.n	800ba2a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	b2da      	uxtb	r2, r3
 800ba18:	490c      	ldr	r1, [pc, #48]	@ (800ba4c <__NVIC_SetPriority+0x4c>)
 800ba1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ba1e:	0112      	lsls	r2, r2, #4
 800ba20:	b2d2      	uxtb	r2, r2
 800ba22:	440b      	add	r3, r1
 800ba24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800ba28:	e00a      	b.n	800ba40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	b2da      	uxtb	r2, r3
 800ba2e:	4908      	ldr	r1, [pc, #32]	@ (800ba50 <__NVIC_SetPriority+0x50>)
 800ba30:	79fb      	ldrb	r3, [r7, #7]
 800ba32:	f003 030f 	and.w	r3, r3, #15
 800ba36:	3b04      	subs	r3, #4
 800ba38:	0112      	lsls	r2, r2, #4
 800ba3a:	b2d2      	uxtb	r2, r2
 800ba3c:	440b      	add	r3, r1
 800ba3e:	761a      	strb	r2, [r3, #24]
}
 800ba40:	bf00      	nop
 800ba42:	370c      	adds	r7, #12
 800ba44:	46bd      	mov	sp, r7
 800ba46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4a:	4770      	bx	lr
 800ba4c:	e000e100 	.word	0xe000e100
 800ba50:	e000ed00 	.word	0xe000ed00

0800ba54 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ba54:	b580      	push	{r7, lr}
 800ba56:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ba58:	4b05      	ldr	r3, [pc, #20]	@ (800ba70 <SysTick_Handler+0x1c>)
 800ba5a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ba5c:	f002 fb3a 	bl	800e0d4 <xTaskGetSchedulerState>
 800ba60:	4603      	mov	r3, r0
 800ba62:	2b01      	cmp	r3, #1
 800ba64:	d001      	beq.n	800ba6a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ba66:	f003 fa2f 	bl	800eec8 <xPortSysTickHandler>
  }
}
 800ba6a:	bf00      	nop
 800ba6c:	bd80      	pop	{r7, pc}
 800ba6e:	bf00      	nop
 800ba70:	e000e010 	.word	0xe000e010

0800ba74 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ba74:	b580      	push	{r7, lr}
 800ba76:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ba78:	2100      	movs	r1, #0
 800ba7a:	f06f 0004 	mvn.w	r0, #4
 800ba7e:	f7ff ffbf 	bl	800ba00 <__NVIC_SetPriority>
#endif
}
 800ba82:	bf00      	nop
 800ba84:	bd80      	pop	{r7, pc}
	...

0800ba88 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ba88:	b480      	push	{r7}
 800ba8a:	b083      	sub	sp, #12
 800ba8c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba8e:	f3ef 8305 	mrs	r3, IPSR
 800ba92:	603b      	str	r3, [r7, #0]
  return(result);
 800ba94:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d003      	beq.n	800baa2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ba9a:	f06f 0305 	mvn.w	r3, #5
 800ba9e:	607b      	str	r3, [r7, #4]
 800baa0:	e00c      	b.n	800babc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800baa2:	4b0a      	ldr	r3, [pc, #40]	@ (800bacc <osKernelInitialize+0x44>)
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d105      	bne.n	800bab6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800baaa:	4b08      	ldr	r3, [pc, #32]	@ (800bacc <osKernelInitialize+0x44>)
 800baac:	2201      	movs	r2, #1
 800baae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800bab0:	2300      	movs	r3, #0
 800bab2:	607b      	str	r3, [r7, #4]
 800bab4:	e002      	b.n	800babc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800bab6:	f04f 33ff 	mov.w	r3, #4294967295
 800baba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800babc:	687b      	ldr	r3, [r7, #4]
}
 800babe:	4618      	mov	r0, r3
 800bac0:	370c      	adds	r7, #12
 800bac2:	46bd      	mov	sp, r7
 800bac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac8:	4770      	bx	lr
 800baca:	bf00      	nop
 800bacc:	200017c4 	.word	0x200017c4

0800bad0 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b082      	sub	sp, #8
 800bad4:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800bad6:	f002 fafd 	bl	800e0d4 <xTaskGetSchedulerState>
 800bada:	4603      	mov	r3, r0
 800badc:	2b00      	cmp	r3, #0
 800bade:	d004      	beq.n	800baea <osKernelGetState+0x1a>
 800bae0:	2b02      	cmp	r3, #2
 800bae2:	d105      	bne.n	800baf0 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800bae4:	2302      	movs	r3, #2
 800bae6:	607b      	str	r3, [r7, #4]
      break;
 800bae8:	e00c      	b.n	800bb04 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800baea:	2303      	movs	r3, #3
 800baec:	607b      	str	r3, [r7, #4]
      break;
 800baee:	e009      	b.n	800bb04 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800baf0:	4b07      	ldr	r3, [pc, #28]	@ (800bb10 <osKernelGetState+0x40>)
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	2b01      	cmp	r3, #1
 800baf6:	d102      	bne.n	800bafe <osKernelGetState+0x2e>
        state = osKernelReady;
 800baf8:	2301      	movs	r3, #1
 800bafa:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800bafc:	e001      	b.n	800bb02 <osKernelGetState+0x32>
        state = osKernelInactive;
 800bafe:	2300      	movs	r3, #0
 800bb00:	607b      	str	r3, [r7, #4]
      break;
 800bb02:	bf00      	nop
  }

  return (state);
 800bb04:	687b      	ldr	r3, [r7, #4]
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	3708      	adds	r7, #8
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}
 800bb0e:	bf00      	nop
 800bb10:	200017c4 	.word	0x200017c4

0800bb14 <osKernelStart>:

osStatus_t osKernelStart (void) {
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b082      	sub	sp, #8
 800bb18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bb1a:	f3ef 8305 	mrs	r3, IPSR
 800bb1e:	603b      	str	r3, [r7, #0]
  return(result);
 800bb20:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d003      	beq.n	800bb2e <osKernelStart+0x1a>
    stat = osErrorISR;
 800bb26:	f06f 0305 	mvn.w	r3, #5
 800bb2a:	607b      	str	r3, [r7, #4]
 800bb2c:	e010      	b.n	800bb50 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800bb2e:	4b0b      	ldr	r3, [pc, #44]	@ (800bb5c <osKernelStart+0x48>)
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	2b01      	cmp	r3, #1
 800bb34:	d109      	bne.n	800bb4a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800bb36:	f7ff ff9d 	bl	800ba74 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800bb3a:	4b08      	ldr	r3, [pc, #32]	@ (800bb5c <osKernelStart+0x48>)
 800bb3c:	2202      	movs	r2, #2
 800bb3e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bb40:	f001 fe2c 	bl	800d79c <vTaskStartScheduler>
      stat = osOK;
 800bb44:	2300      	movs	r3, #0
 800bb46:	607b      	str	r3, [r7, #4]
 800bb48:	e002      	b.n	800bb50 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800bb4a:	f04f 33ff 	mov.w	r3, #4294967295
 800bb4e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bb50:	687b      	ldr	r3, [r7, #4]
}
 800bb52:	4618      	mov	r0, r3
 800bb54:	3708      	adds	r7, #8
 800bb56:	46bd      	mov	sp, r7
 800bb58:	bd80      	pop	{r7, pc}
 800bb5a:	bf00      	nop
 800bb5c:	200017c4 	.word	0x200017c4

0800bb60 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b082      	sub	sp, #8
 800bb64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bb66:	f3ef 8305 	mrs	r3, IPSR
 800bb6a:	603b      	str	r3, [r7, #0]
  return(result);
 800bb6c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d003      	beq.n	800bb7a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800bb72:	f001 ff3f 	bl	800d9f4 <xTaskGetTickCountFromISR>
 800bb76:	6078      	str	r0, [r7, #4]
 800bb78:	e002      	b.n	800bb80 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800bb7a:	f001 ff2b 	bl	800d9d4 <xTaskGetTickCount>
 800bb7e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800bb80:	687b      	ldr	r3, [r7, #4]
}
 800bb82:	4618      	mov	r0, r3
 800bb84:	3708      	adds	r7, #8
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}

0800bb8a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bb8a:	b580      	push	{r7, lr}
 800bb8c:	b08e      	sub	sp, #56	@ 0x38
 800bb8e:	af04      	add	r7, sp, #16
 800bb90:	60f8      	str	r0, [r7, #12]
 800bb92:	60b9      	str	r1, [r7, #8]
 800bb94:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bb96:	2300      	movs	r3, #0
 800bb98:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bb9a:	f3ef 8305 	mrs	r3, IPSR
 800bb9e:	617b      	str	r3, [r7, #20]
  return(result);
 800bba0:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d17e      	bne.n	800bca4 <osThreadNew+0x11a>
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d07b      	beq.n	800bca4 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800bbac:	2380      	movs	r3, #128	@ 0x80
 800bbae:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800bbb0:	2318      	movs	r3, #24
 800bbb2:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800bbb8:	f04f 33ff 	mov.w	r3, #4294967295
 800bbbc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d045      	beq.n	800bc50 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d002      	beq.n	800bbd2 <osThreadNew+0x48>
        name = attr->name;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	699b      	ldr	r3, [r3, #24]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d002      	beq.n	800bbe0 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	699b      	ldr	r3, [r3, #24]
 800bbde:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800bbe0:	69fb      	ldr	r3, [r7, #28]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d008      	beq.n	800bbf8 <osThreadNew+0x6e>
 800bbe6:	69fb      	ldr	r3, [r7, #28]
 800bbe8:	2b38      	cmp	r3, #56	@ 0x38
 800bbea:	d805      	bhi.n	800bbf8 <osThreadNew+0x6e>
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	685b      	ldr	r3, [r3, #4]
 800bbf0:	f003 0301 	and.w	r3, r3, #1
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d001      	beq.n	800bbfc <osThreadNew+0x72>
        return (NULL);
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	e054      	b.n	800bca6 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	695b      	ldr	r3, [r3, #20]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d003      	beq.n	800bc0c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	695b      	ldr	r3, [r3, #20]
 800bc08:	089b      	lsrs	r3, r3, #2
 800bc0a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	689b      	ldr	r3, [r3, #8]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d00e      	beq.n	800bc32 <osThreadNew+0xa8>
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	68db      	ldr	r3, [r3, #12]
 800bc18:	2bab      	cmp	r3, #171	@ 0xab
 800bc1a:	d90a      	bls.n	800bc32 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d006      	beq.n	800bc32 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	695b      	ldr	r3, [r3, #20]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d002      	beq.n	800bc32 <osThreadNew+0xa8>
        mem = 1;
 800bc2c:	2301      	movs	r3, #1
 800bc2e:	61bb      	str	r3, [r7, #24]
 800bc30:	e010      	b.n	800bc54 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	689b      	ldr	r3, [r3, #8]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d10c      	bne.n	800bc54 <osThreadNew+0xca>
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	68db      	ldr	r3, [r3, #12]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d108      	bne.n	800bc54 <osThreadNew+0xca>
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	691b      	ldr	r3, [r3, #16]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d104      	bne.n	800bc54 <osThreadNew+0xca>
          mem = 0;
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	61bb      	str	r3, [r7, #24]
 800bc4e:	e001      	b.n	800bc54 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800bc50:	2300      	movs	r3, #0
 800bc52:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bc54:	69bb      	ldr	r3, [r7, #24]
 800bc56:	2b01      	cmp	r3, #1
 800bc58:	d110      	bne.n	800bc7c <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800bc5e:	687a      	ldr	r2, [r7, #4]
 800bc60:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bc62:	9202      	str	r2, [sp, #8]
 800bc64:	9301      	str	r3, [sp, #4]
 800bc66:	69fb      	ldr	r3, [r7, #28]
 800bc68:	9300      	str	r3, [sp, #0]
 800bc6a:	68bb      	ldr	r3, [r7, #8]
 800bc6c:	6a3a      	ldr	r2, [r7, #32]
 800bc6e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bc70:	68f8      	ldr	r0, [r7, #12]
 800bc72:	f001 fb9d 	bl	800d3b0 <xTaskCreateStatic>
 800bc76:	4603      	mov	r3, r0
 800bc78:	613b      	str	r3, [r7, #16]
 800bc7a:	e013      	b.n	800bca4 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800bc7c:	69bb      	ldr	r3, [r7, #24]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d110      	bne.n	800bca4 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800bc82:	6a3b      	ldr	r3, [r7, #32]
 800bc84:	b29a      	uxth	r2, r3
 800bc86:	f107 0310 	add.w	r3, r7, #16
 800bc8a:	9301      	str	r3, [sp, #4]
 800bc8c:	69fb      	ldr	r3, [r7, #28]
 800bc8e:	9300      	str	r3, [sp, #0]
 800bc90:	68bb      	ldr	r3, [r7, #8]
 800bc92:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bc94:	68f8      	ldr	r0, [r7, #12]
 800bc96:	f001 fbeb 	bl	800d470 <xTaskCreate>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	2b01      	cmp	r3, #1
 800bc9e:	d001      	beq.n	800bca4 <osThreadNew+0x11a>
            hTask = NULL;
 800bca0:	2300      	movs	r3, #0
 800bca2:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800bca4:	693b      	ldr	r3, [r7, #16]
}
 800bca6:	4618      	mov	r0, r3
 800bca8:	3728      	adds	r7, #40	@ 0x28
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	bd80      	pop	{r7, pc}

0800bcae <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800bcae:	b580      	push	{r7, lr}
 800bcb0:	b084      	sub	sp, #16
 800bcb2:	af00      	add	r7, sp, #0
 800bcb4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bcb6:	f3ef 8305 	mrs	r3, IPSR
 800bcba:	60bb      	str	r3, [r7, #8]
  return(result);
 800bcbc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d003      	beq.n	800bcca <osDelay+0x1c>
    stat = osErrorISR;
 800bcc2:	f06f 0305 	mvn.w	r3, #5
 800bcc6:	60fb      	str	r3, [r7, #12]
 800bcc8:	e007      	b.n	800bcda <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800bcca:	2300      	movs	r3, #0
 800bccc:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d002      	beq.n	800bcda <osDelay+0x2c>
      vTaskDelay(ticks);
 800bcd4:	6878      	ldr	r0, [r7, #4]
 800bcd6:	f001 fd2b 	bl	800d730 <vTaskDelay>
    }
  }

  return (stat);
 800bcda:	68fb      	ldr	r3, [r7, #12]
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	3710      	adds	r7, #16
 800bce0:	46bd      	mov	sp, r7
 800bce2:	bd80      	pop	{r7, pc}

0800bce4 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b08a      	sub	sp, #40	@ 0x28
 800bce8:	af02      	add	r7, sp, #8
 800bcea:	60f8      	str	r0, [r7, #12]
 800bcec:	60b9      	str	r1, [r7, #8]
 800bcee:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bcf4:	f3ef 8305 	mrs	r3, IPSR
 800bcf8:	613b      	str	r3, [r7, #16]
  return(result);
 800bcfa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d175      	bne.n	800bdec <osSemaphoreNew+0x108>
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d072      	beq.n	800bdec <osSemaphoreNew+0x108>
 800bd06:	68ba      	ldr	r2, [r7, #8]
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	429a      	cmp	r2, r3
 800bd0c:	d86e      	bhi.n	800bdec <osSemaphoreNew+0x108>
    mem = -1;
 800bd0e:	f04f 33ff 	mov.w	r3, #4294967295
 800bd12:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d015      	beq.n	800bd46 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	689b      	ldr	r3, [r3, #8]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d006      	beq.n	800bd30 <osSemaphoreNew+0x4c>
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	68db      	ldr	r3, [r3, #12]
 800bd26:	2b4f      	cmp	r3, #79	@ 0x4f
 800bd28:	d902      	bls.n	800bd30 <osSemaphoreNew+0x4c>
        mem = 1;
 800bd2a:	2301      	movs	r3, #1
 800bd2c:	61bb      	str	r3, [r7, #24]
 800bd2e:	e00c      	b.n	800bd4a <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	689b      	ldr	r3, [r3, #8]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d108      	bne.n	800bd4a <osSemaphoreNew+0x66>
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	68db      	ldr	r3, [r3, #12]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d104      	bne.n	800bd4a <osSemaphoreNew+0x66>
          mem = 0;
 800bd40:	2300      	movs	r3, #0
 800bd42:	61bb      	str	r3, [r7, #24]
 800bd44:	e001      	b.n	800bd4a <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800bd46:	2300      	movs	r3, #0
 800bd48:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800bd4a:	69bb      	ldr	r3, [r7, #24]
 800bd4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd50:	d04c      	beq.n	800bdec <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	2b01      	cmp	r3, #1
 800bd56:	d128      	bne.n	800bdaa <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800bd58:	69bb      	ldr	r3, [r7, #24]
 800bd5a:	2b01      	cmp	r3, #1
 800bd5c:	d10a      	bne.n	800bd74 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	689b      	ldr	r3, [r3, #8]
 800bd62:	2203      	movs	r2, #3
 800bd64:	9200      	str	r2, [sp, #0]
 800bd66:	2200      	movs	r2, #0
 800bd68:	2100      	movs	r1, #0
 800bd6a:	2001      	movs	r0, #1
 800bd6c:	f000 fb5e 	bl	800c42c <xQueueGenericCreateStatic>
 800bd70:	61f8      	str	r0, [r7, #28]
 800bd72:	e005      	b.n	800bd80 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800bd74:	2203      	movs	r2, #3
 800bd76:	2100      	movs	r1, #0
 800bd78:	2001      	movs	r0, #1
 800bd7a:	f000 fbd4 	bl	800c526 <xQueueGenericCreate>
 800bd7e:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800bd80:	69fb      	ldr	r3, [r7, #28]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d022      	beq.n	800bdcc <osSemaphoreNew+0xe8>
 800bd86:	68bb      	ldr	r3, [r7, #8]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d01f      	beq.n	800bdcc <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	2200      	movs	r2, #0
 800bd90:	2100      	movs	r1, #0
 800bd92:	69f8      	ldr	r0, [r7, #28]
 800bd94:	f000 fc94 	bl	800c6c0 <xQueueGenericSend>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	2b01      	cmp	r3, #1
 800bd9c:	d016      	beq.n	800bdcc <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800bd9e:	69f8      	ldr	r0, [r7, #28]
 800bda0:	f001 f932 	bl	800d008 <vQueueDelete>
            hSemaphore = NULL;
 800bda4:	2300      	movs	r3, #0
 800bda6:	61fb      	str	r3, [r7, #28]
 800bda8:	e010      	b.n	800bdcc <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800bdaa:	69bb      	ldr	r3, [r7, #24]
 800bdac:	2b01      	cmp	r3, #1
 800bdae:	d108      	bne.n	800bdc2 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	689b      	ldr	r3, [r3, #8]
 800bdb4:	461a      	mov	r2, r3
 800bdb6:	68b9      	ldr	r1, [r7, #8]
 800bdb8:	68f8      	ldr	r0, [r7, #12]
 800bdba:	f000 fc12 	bl	800c5e2 <xQueueCreateCountingSemaphoreStatic>
 800bdbe:	61f8      	str	r0, [r7, #28]
 800bdc0:	e004      	b.n	800bdcc <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800bdc2:	68b9      	ldr	r1, [r7, #8]
 800bdc4:	68f8      	ldr	r0, [r7, #12]
 800bdc6:	f000 fc45 	bl	800c654 <xQueueCreateCountingSemaphore>
 800bdca:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800bdcc:	69fb      	ldr	r3, [r7, #28]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d00c      	beq.n	800bdec <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d003      	beq.n	800bde0 <osSemaphoreNew+0xfc>
          name = attr->name;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	617b      	str	r3, [r7, #20]
 800bdde:	e001      	b.n	800bde4 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800bde0:	2300      	movs	r3, #0
 800bde2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800bde4:	6979      	ldr	r1, [r7, #20]
 800bde6:	69f8      	ldr	r0, [r7, #28]
 800bde8:	f001 fa5a 	bl	800d2a0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800bdec:	69fb      	ldr	r3, [r7, #28]
}
 800bdee:	4618      	mov	r0, r3
 800bdf0:	3720      	adds	r7, #32
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}
	...

0800bdf8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b086      	sub	sp, #24
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
 800be00:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800be06:	2300      	movs	r3, #0
 800be08:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800be0a:	693b      	ldr	r3, [r7, #16]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d103      	bne.n	800be18 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800be10:	f06f 0303 	mvn.w	r3, #3
 800be14:	617b      	str	r3, [r7, #20]
 800be16:	e039      	b.n	800be8c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800be18:	f3ef 8305 	mrs	r3, IPSR
 800be1c:	60fb      	str	r3, [r7, #12]
  return(result);
 800be1e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800be20:	2b00      	cmp	r3, #0
 800be22:	d022      	beq.n	800be6a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800be24:	683b      	ldr	r3, [r7, #0]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d003      	beq.n	800be32 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800be2a:	f06f 0303 	mvn.w	r3, #3
 800be2e:	617b      	str	r3, [r7, #20]
 800be30:	e02c      	b.n	800be8c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800be32:	2300      	movs	r3, #0
 800be34:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800be36:	f107 0308 	add.w	r3, r7, #8
 800be3a:	461a      	mov	r2, r3
 800be3c:	2100      	movs	r1, #0
 800be3e:	6938      	ldr	r0, [r7, #16]
 800be40:	f001 f860 	bl	800cf04 <xQueueReceiveFromISR>
 800be44:	4603      	mov	r3, r0
 800be46:	2b01      	cmp	r3, #1
 800be48:	d003      	beq.n	800be52 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800be4a:	f06f 0302 	mvn.w	r3, #2
 800be4e:	617b      	str	r3, [r7, #20]
 800be50:	e01c      	b.n	800be8c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800be52:	68bb      	ldr	r3, [r7, #8]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d019      	beq.n	800be8c <osSemaphoreAcquire+0x94>
 800be58:	4b0f      	ldr	r3, [pc, #60]	@ (800be98 <osSemaphoreAcquire+0xa0>)
 800be5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be5e:	601a      	str	r2, [r3, #0]
 800be60:	f3bf 8f4f 	dsb	sy
 800be64:	f3bf 8f6f 	isb	sy
 800be68:	e010      	b.n	800be8c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800be6a:	6839      	ldr	r1, [r7, #0]
 800be6c:	6938      	ldr	r0, [r7, #16]
 800be6e:	f000 ff39 	bl	800cce4 <xQueueSemaphoreTake>
 800be72:	4603      	mov	r3, r0
 800be74:	2b01      	cmp	r3, #1
 800be76:	d009      	beq.n	800be8c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d003      	beq.n	800be86 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800be7e:	f06f 0301 	mvn.w	r3, #1
 800be82:	617b      	str	r3, [r7, #20]
 800be84:	e002      	b.n	800be8c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800be86:	f06f 0302 	mvn.w	r3, #2
 800be8a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800be8c:	697b      	ldr	r3, [r7, #20]
}
 800be8e:	4618      	mov	r0, r3
 800be90:	3718      	adds	r7, #24
 800be92:	46bd      	mov	sp, r7
 800be94:	bd80      	pop	{r7, pc}
 800be96:	bf00      	nop
 800be98:	e000ed04 	.word	0xe000ed04

0800be9c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b086      	sub	sp, #24
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800bea8:	2300      	movs	r3, #0
 800beaa:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800beac:	693b      	ldr	r3, [r7, #16]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d103      	bne.n	800beba <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800beb2:	f06f 0303 	mvn.w	r3, #3
 800beb6:	617b      	str	r3, [r7, #20]
 800beb8:	e02c      	b.n	800bf14 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800beba:	f3ef 8305 	mrs	r3, IPSR
 800bebe:	60fb      	str	r3, [r7, #12]
  return(result);
 800bec0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d01a      	beq.n	800befc <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800bec6:	2300      	movs	r3, #0
 800bec8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800beca:	f107 0308 	add.w	r3, r7, #8
 800bece:	4619      	mov	r1, r3
 800bed0:	6938      	ldr	r0, [r7, #16]
 800bed2:	f000 fd95 	bl	800ca00 <xQueueGiveFromISR>
 800bed6:	4603      	mov	r3, r0
 800bed8:	2b01      	cmp	r3, #1
 800beda:	d003      	beq.n	800bee4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800bedc:	f06f 0302 	mvn.w	r3, #2
 800bee0:	617b      	str	r3, [r7, #20]
 800bee2:	e017      	b.n	800bf14 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800bee4:	68bb      	ldr	r3, [r7, #8]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d014      	beq.n	800bf14 <osSemaphoreRelease+0x78>
 800beea:	4b0d      	ldr	r3, [pc, #52]	@ (800bf20 <osSemaphoreRelease+0x84>)
 800beec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bef0:	601a      	str	r2, [r3, #0]
 800bef2:	f3bf 8f4f 	dsb	sy
 800bef6:	f3bf 8f6f 	isb	sy
 800befa:	e00b      	b.n	800bf14 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800befc:	2300      	movs	r3, #0
 800befe:	2200      	movs	r2, #0
 800bf00:	2100      	movs	r1, #0
 800bf02:	6938      	ldr	r0, [r7, #16]
 800bf04:	f000 fbdc 	bl	800c6c0 <xQueueGenericSend>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	2b01      	cmp	r3, #1
 800bf0c:	d002      	beq.n	800bf14 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800bf0e:	f06f 0302 	mvn.w	r3, #2
 800bf12:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800bf14:	697b      	ldr	r3, [r7, #20]
}
 800bf16:	4618      	mov	r0, r3
 800bf18:	3718      	adds	r7, #24
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}
 800bf1e:	bf00      	nop
 800bf20:	e000ed04 	.word	0xe000ed04

0800bf24 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b08a      	sub	sp, #40	@ 0x28
 800bf28:	af02      	add	r7, sp, #8
 800bf2a:	60f8      	str	r0, [r7, #12]
 800bf2c:	60b9      	str	r1, [r7, #8]
 800bf2e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800bf30:	2300      	movs	r3, #0
 800bf32:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf34:	f3ef 8305 	mrs	r3, IPSR
 800bf38:	613b      	str	r3, [r7, #16]
  return(result);
 800bf3a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d15f      	bne.n	800c000 <osMessageQueueNew+0xdc>
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d05c      	beq.n	800c000 <osMessageQueueNew+0xdc>
 800bf46:	68bb      	ldr	r3, [r7, #8]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d059      	beq.n	800c000 <osMessageQueueNew+0xdc>
    mem = -1;
 800bf4c:	f04f 33ff 	mov.w	r3, #4294967295
 800bf50:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d029      	beq.n	800bfac <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	689b      	ldr	r3, [r3, #8]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d012      	beq.n	800bf86 <osMessageQueueNew+0x62>
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	68db      	ldr	r3, [r3, #12]
 800bf64:	2b4f      	cmp	r3, #79	@ 0x4f
 800bf66:	d90e      	bls.n	800bf86 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d00a      	beq.n	800bf86 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	695a      	ldr	r2, [r3, #20]
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	68b9      	ldr	r1, [r7, #8]
 800bf78:	fb01 f303 	mul.w	r3, r1, r3
 800bf7c:	429a      	cmp	r2, r3
 800bf7e:	d302      	bcc.n	800bf86 <osMessageQueueNew+0x62>
        mem = 1;
 800bf80:	2301      	movs	r3, #1
 800bf82:	61bb      	str	r3, [r7, #24]
 800bf84:	e014      	b.n	800bfb0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	689b      	ldr	r3, [r3, #8]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d110      	bne.n	800bfb0 <osMessageQueueNew+0x8c>
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	68db      	ldr	r3, [r3, #12]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d10c      	bne.n	800bfb0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d108      	bne.n	800bfb0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	695b      	ldr	r3, [r3, #20]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d104      	bne.n	800bfb0 <osMessageQueueNew+0x8c>
          mem = 0;
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	61bb      	str	r3, [r7, #24]
 800bfaa:	e001      	b.n	800bfb0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800bfac:	2300      	movs	r3, #0
 800bfae:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bfb0:	69bb      	ldr	r3, [r7, #24]
 800bfb2:	2b01      	cmp	r3, #1
 800bfb4:	d10b      	bne.n	800bfce <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	691a      	ldr	r2, [r3, #16]
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	689b      	ldr	r3, [r3, #8]
 800bfbe:	2100      	movs	r1, #0
 800bfc0:	9100      	str	r1, [sp, #0]
 800bfc2:	68b9      	ldr	r1, [r7, #8]
 800bfc4:	68f8      	ldr	r0, [r7, #12]
 800bfc6:	f000 fa31 	bl	800c42c <xQueueGenericCreateStatic>
 800bfca:	61f8      	str	r0, [r7, #28]
 800bfcc:	e008      	b.n	800bfe0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800bfce:	69bb      	ldr	r3, [r7, #24]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d105      	bne.n	800bfe0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	68b9      	ldr	r1, [r7, #8]
 800bfd8:	68f8      	ldr	r0, [r7, #12]
 800bfda:	f000 faa4 	bl	800c526 <xQueueGenericCreate>
 800bfde:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800bfe0:	69fb      	ldr	r3, [r7, #28]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d00c      	beq.n	800c000 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d003      	beq.n	800bff4 <osMessageQueueNew+0xd0>
        name = attr->name;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	617b      	str	r3, [r7, #20]
 800bff2:	e001      	b.n	800bff8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800bff4:	2300      	movs	r3, #0
 800bff6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800bff8:	6979      	ldr	r1, [r7, #20]
 800bffa:	69f8      	ldr	r0, [r7, #28]
 800bffc:	f001 f950 	bl	800d2a0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800c000:	69fb      	ldr	r3, [r7, #28]
}
 800c002:	4618      	mov	r0, r3
 800c004:	3720      	adds	r7, #32
 800c006:	46bd      	mov	sp, r7
 800c008:	bd80      	pop	{r7, pc}
	...

0800c00c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b088      	sub	sp, #32
 800c010:	af00      	add	r7, sp, #0
 800c012:	60f8      	str	r0, [r7, #12]
 800c014:	60b9      	str	r1, [r7, #8]
 800c016:	603b      	str	r3, [r7, #0]
 800c018:	4613      	mov	r3, r2
 800c01a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c020:	2300      	movs	r3, #0
 800c022:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c024:	f3ef 8305 	mrs	r3, IPSR
 800c028:	617b      	str	r3, [r7, #20]
  return(result);
 800c02a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d028      	beq.n	800c082 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c030:	69bb      	ldr	r3, [r7, #24]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d005      	beq.n	800c042 <osMessageQueuePut+0x36>
 800c036:	68bb      	ldr	r3, [r7, #8]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d002      	beq.n	800c042 <osMessageQueuePut+0x36>
 800c03c:	683b      	ldr	r3, [r7, #0]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d003      	beq.n	800c04a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800c042:	f06f 0303 	mvn.w	r3, #3
 800c046:	61fb      	str	r3, [r7, #28]
 800c048:	e038      	b.n	800c0bc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800c04a:	2300      	movs	r3, #0
 800c04c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800c04e:	f107 0210 	add.w	r2, r7, #16
 800c052:	2300      	movs	r3, #0
 800c054:	68b9      	ldr	r1, [r7, #8]
 800c056:	69b8      	ldr	r0, [r7, #24]
 800c058:	f000 fc34 	bl	800c8c4 <xQueueGenericSendFromISR>
 800c05c:	4603      	mov	r3, r0
 800c05e:	2b01      	cmp	r3, #1
 800c060:	d003      	beq.n	800c06a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800c062:	f06f 0302 	mvn.w	r3, #2
 800c066:	61fb      	str	r3, [r7, #28]
 800c068:	e028      	b.n	800c0bc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800c06a:	693b      	ldr	r3, [r7, #16]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d025      	beq.n	800c0bc <osMessageQueuePut+0xb0>
 800c070:	4b15      	ldr	r3, [pc, #84]	@ (800c0c8 <osMessageQueuePut+0xbc>)
 800c072:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c076:	601a      	str	r2, [r3, #0]
 800c078:	f3bf 8f4f 	dsb	sy
 800c07c:	f3bf 8f6f 	isb	sy
 800c080:	e01c      	b.n	800c0bc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c082:	69bb      	ldr	r3, [r7, #24]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d002      	beq.n	800c08e <osMessageQueuePut+0x82>
 800c088:	68bb      	ldr	r3, [r7, #8]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d103      	bne.n	800c096 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800c08e:	f06f 0303 	mvn.w	r3, #3
 800c092:	61fb      	str	r3, [r7, #28]
 800c094:	e012      	b.n	800c0bc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c096:	2300      	movs	r3, #0
 800c098:	683a      	ldr	r2, [r7, #0]
 800c09a:	68b9      	ldr	r1, [r7, #8]
 800c09c:	69b8      	ldr	r0, [r7, #24]
 800c09e:	f000 fb0f 	bl	800c6c0 <xQueueGenericSend>
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	2b01      	cmp	r3, #1
 800c0a6:	d009      	beq.n	800c0bc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800c0a8:	683b      	ldr	r3, [r7, #0]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d003      	beq.n	800c0b6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800c0ae:	f06f 0301 	mvn.w	r3, #1
 800c0b2:	61fb      	str	r3, [r7, #28]
 800c0b4:	e002      	b.n	800c0bc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800c0b6:	f06f 0302 	mvn.w	r3, #2
 800c0ba:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c0bc:	69fb      	ldr	r3, [r7, #28]
}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	3720      	adds	r7, #32
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	bd80      	pop	{r7, pc}
 800c0c6:	bf00      	nop
 800c0c8:	e000ed04 	.word	0xe000ed04

0800c0cc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b088      	sub	sp, #32
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	60f8      	str	r0, [r7, #12]
 800c0d4:	60b9      	str	r1, [r7, #8]
 800c0d6:	607a      	str	r2, [r7, #4]
 800c0d8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c0de:	2300      	movs	r3, #0
 800c0e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c0e2:	f3ef 8305 	mrs	r3, IPSR
 800c0e6:	617b      	str	r3, [r7, #20]
  return(result);
 800c0e8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d028      	beq.n	800c140 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c0ee:	69bb      	ldr	r3, [r7, #24]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d005      	beq.n	800c100 <osMessageQueueGet+0x34>
 800c0f4:	68bb      	ldr	r3, [r7, #8]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d002      	beq.n	800c100 <osMessageQueueGet+0x34>
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d003      	beq.n	800c108 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800c100:	f06f 0303 	mvn.w	r3, #3
 800c104:	61fb      	str	r3, [r7, #28]
 800c106:	e037      	b.n	800c178 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800c108:	2300      	movs	r3, #0
 800c10a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800c10c:	f107 0310 	add.w	r3, r7, #16
 800c110:	461a      	mov	r2, r3
 800c112:	68b9      	ldr	r1, [r7, #8]
 800c114:	69b8      	ldr	r0, [r7, #24]
 800c116:	f000 fef5 	bl	800cf04 <xQueueReceiveFromISR>
 800c11a:	4603      	mov	r3, r0
 800c11c:	2b01      	cmp	r3, #1
 800c11e:	d003      	beq.n	800c128 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800c120:	f06f 0302 	mvn.w	r3, #2
 800c124:	61fb      	str	r3, [r7, #28]
 800c126:	e027      	b.n	800c178 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800c128:	693b      	ldr	r3, [r7, #16]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d024      	beq.n	800c178 <osMessageQueueGet+0xac>
 800c12e:	4b15      	ldr	r3, [pc, #84]	@ (800c184 <osMessageQueueGet+0xb8>)
 800c130:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c134:	601a      	str	r2, [r3, #0]
 800c136:	f3bf 8f4f 	dsb	sy
 800c13a:	f3bf 8f6f 	isb	sy
 800c13e:	e01b      	b.n	800c178 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c140:	69bb      	ldr	r3, [r7, #24]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d002      	beq.n	800c14c <osMessageQueueGet+0x80>
 800c146:	68bb      	ldr	r3, [r7, #8]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d103      	bne.n	800c154 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800c14c:	f06f 0303 	mvn.w	r3, #3
 800c150:	61fb      	str	r3, [r7, #28]
 800c152:	e011      	b.n	800c178 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c154:	683a      	ldr	r2, [r7, #0]
 800c156:	68b9      	ldr	r1, [r7, #8]
 800c158:	69b8      	ldr	r0, [r7, #24]
 800c15a:	f000 fce1 	bl	800cb20 <xQueueReceive>
 800c15e:	4603      	mov	r3, r0
 800c160:	2b01      	cmp	r3, #1
 800c162:	d009      	beq.n	800c178 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d003      	beq.n	800c172 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800c16a:	f06f 0301 	mvn.w	r3, #1
 800c16e:	61fb      	str	r3, [r7, #28]
 800c170:	e002      	b.n	800c178 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800c172:	f06f 0302 	mvn.w	r3, #2
 800c176:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c178:	69fb      	ldr	r3, [r7, #28]
}
 800c17a:	4618      	mov	r0, r3
 800c17c:	3720      	adds	r7, #32
 800c17e:	46bd      	mov	sp, r7
 800c180:	bd80      	pop	{r7, pc}
 800c182:	bf00      	nop
 800c184:	e000ed04 	.word	0xe000ed04

0800c188 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c188:	b480      	push	{r7}
 800c18a:	b085      	sub	sp, #20
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	60f8      	str	r0, [r7, #12]
 800c190:	60b9      	str	r1, [r7, #8]
 800c192:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	4a07      	ldr	r2, [pc, #28]	@ (800c1b4 <vApplicationGetIdleTaskMemory+0x2c>)
 800c198:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c19a:	68bb      	ldr	r3, [r7, #8]
 800c19c:	4a06      	ldr	r2, [pc, #24]	@ (800c1b8 <vApplicationGetIdleTaskMemory+0x30>)
 800c19e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	2280      	movs	r2, #128	@ 0x80
 800c1a4:	601a      	str	r2, [r3, #0]
}
 800c1a6:	bf00      	nop
 800c1a8:	3714      	adds	r7, #20
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b0:	4770      	bx	lr
 800c1b2:	bf00      	nop
 800c1b4:	200017c8 	.word	0x200017c8
 800c1b8:	20001874 	.word	0x20001874

0800c1bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c1bc:	b480      	push	{r7}
 800c1be:	b085      	sub	sp, #20
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	60f8      	str	r0, [r7, #12]
 800c1c4:	60b9      	str	r1, [r7, #8]
 800c1c6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	4a07      	ldr	r2, [pc, #28]	@ (800c1e8 <vApplicationGetTimerTaskMemory+0x2c>)
 800c1cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c1ce:	68bb      	ldr	r3, [r7, #8]
 800c1d0:	4a06      	ldr	r2, [pc, #24]	@ (800c1ec <vApplicationGetTimerTaskMemory+0x30>)
 800c1d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c1da:	601a      	str	r2, [r3, #0]
}
 800c1dc:	bf00      	nop
 800c1de:	3714      	adds	r7, #20
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e6:	4770      	bx	lr
 800c1e8:	20001a74 	.word	0x20001a74
 800c1ec:	20001b20 	.word	0x20001b20

0800c1f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c1f0:	b480      	push	{r7}
 800c1f2:	b083      	sub	sp, #12
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	f103 0208 	add.w	r2, r3, #8
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	f04f 32ff 	mov.w	r2, #4294967295
 800c208:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	f103 0208 	add.w	r2, r3, #8
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f103 0208 	add.w	r2, r3, #8
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2200      	movs	r2, #0
 800c222:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c224:	bf00      	nop
 800c226:	370c      	adds	r7, #12
 800c228:	46bd      	mov	sp, r7
 800c22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22e:	4770      	bx	lr

0800c230 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c230:	b480      	push	{r7}
 800c232:	b083      	sub	sp, #12
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2200      	movs	r2, #0
 800c23c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c23e:	bf00      	nop
 800c240:	370c      	adds	r7, #12
 800c242:	46bd      	mov	sp, r7
 800c244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c248:	4770      	bx	lr

0800c24a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c24a:	b480      	push	{r7}
 800c24c:	b085      	sub	sp, #20
 800c24e:	af00      	add	r7, sp, #0
 800c250:	6078      	str	r0, [r7, #4]
 800c252:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	685b      	ldr	r3, [r3, #4]
 800c258:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	68fa      	ldr	r2, [r7, #12]
 800c25e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	689a      	ldr	r2, [r3, #8]
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	689b      	ldr	r3, [r3, #8]
 800c26c:	683a      	ldr	r2, [r7, #0]
 800c26e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	683a      	ldr	r2, [r7, #0]
 800c274:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	687a      	ldr	r2, [r7, #4]
 800c27a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	1c5a      	adds	r2, r3, #1
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	601a      	str	r2, [r3, #0]
}
 800c286:	bf00      	nop
 800c288:	3714      	adds	r7, #20
 800c28a:	46bd      	mov	sp, r7
 800c28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c290:	4770      	bx	lr

0800c292 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c292:	b480      	push	{r7}
 800c294:	b085      	sub	sp, #20
 800c296:	af00      	add	r7, sp, #0
 800c298:	6078      	str	r0, [r7, #4]
 800c29a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c29c:	683b      	ldr	r3, [r7, #0]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c2a2:	68bb      	ldr	r3, [r7, #8]
 800c2a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2a8:	d103      	bne.n	800c2b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	691b      	ldr	r3, [r3, #16]
 800c2ae:	60fb      	str	r3, [r7, #12]
 800c2b0:	e00c      	b.n	800c2cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	3308      	adds	r3, #8
 800c2b6:	60fb      	str	r3, [r7, #12]
 800c2b8:	e002      	b.n	800c2c0 <vListInsert+0x2e>
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	685b      	ldr	r3, [r3, #4]
 800c2be:	60fb      	str	r3, [r7, #12]
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	685b      	ldr	r3, [r3, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	68ba      	ldr	r2, [r7, #8]
 800c2c8:	429a      	cmp	r2, r3
 800c2ca:	d2f6      	bcs.n	800c2ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	685a      	ldr	r2, [r3, #4]
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c2d4:	683b      	ldr	r3, [r7, #0]
 800c2d6:	685b      	ldr	r3, [r3, #4]
 800c2d8:	683a      	ldr	r2, [r7, #0]
 800c2da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c2dc:	683b      	ldr	r3, [r7, #0]
 800c2de:	68fa      	ldr	r2, [r7, #12]
 800c2e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	683a      	ldr	r2, [r7, #0]
 800c2e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	687a      	ldr	r2, [r7, #4]
 800c2ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	1c5a      	adds	r2, r3, #1
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	601a      	str	r2, [r3, #0]
}
 800c2f8:	bf00      	nop
 800c2fa:	3714      	adds	r7, #20
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c302:	4770      	bx	lr

0800c304 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c304:	b480      	push	{r7}
 800c306:	b085      	sub	sp, #20
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	691b      	ldr	r3, [r3, #16]
 800c310:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	685b      	ldr	r3, [r3, #4]
 800c316:	687a      	ldr	r2, [r7, #4]
 800c318:	6892      	ldr	r2, [r2, #8]
 800c31a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	689b      	ldr	r3, [r3, #8]
 800c320:	687a      	ldr	r2, [r7, #4]
 800c322:	6852      	ldr	r2, [r2, #4]
 800c324:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	685b      	ldr	r3, [r3, #4]
 800c32a:	687a      	ldr	r2, [r7, #4]
 800c32c:	429a      	cmp	r2, r3
 800c32e:	d103      	bne.n	800c338 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	689a      	ldr	r2, [r3, #8]
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2200      	movs	r2, #0
 800c33c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	1e5a      	subs	r2, r3, #1
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	681b      	ldr	r3, [r3, #0]
}
 800c34c:	4618      	mov	r0, r3
 800c34e:	3714      	adds	r7, #20
 800c350:	46bd      	mov	sp, r7
 800c352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c356:	4770      	bx	lr

0800c358 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b084      	sub	sp, #16
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
 800c360:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d10b      	bne.n	800c384 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c36c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c370:	f383 8811 	msr	BASEPRI, r3
 800c374:	f3bf 8f6f 	isb	sy
 800c378:	f3bf 8f4f 	dsb	sy
 800c37c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c37e:	bf00      	nop
 800c380:	bf00      	nop
 800c382:	e7fd      	b.n	800c380 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c384:	f002 fd10 	bl	800eda8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	681a      	ldr	r2, [r3, #0]
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c390:	68f9      	ldr	r1, [r7, #12]
 800c392:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c394:	fb01 f303 	mul.w	r3, r1, r3
 800c398:	441a      	add	r2, r3
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	681a      	ldr	r2, [r3, #0]
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	681a      	ldr	r2, [r3, #0]
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c3b4:	3b01      	subs	r3, #1
 800c3b6:	68f9      	ldr	r1, [r7, #12]
 800c3b8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c3ba:	fb01 f303 	mul.w	r3, r1, r3
 800c3be:	441a      	add	r2, r3
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	22ff      	movs	r2, #255	@ 0xff
 800c3c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	22ff      	movs	r2, #255	@ 0xff
 800c3d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d114      	bne.n	800c404 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	691b      	ldr	r3, [r3, #16]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d01a      	beq.n	800c418 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	3310      	adds	r3, #16
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	f001 fcac 	bl	800dd44 <xTaskRemoveFromEventList>
 800c3ec:	4603      	mov	r3, r0
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d012      	beq.n	800c418 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c3f2:	4b0d      	ldr	r3, [pc, #52]	@ (800c428 <xQueueGenericReset+0xd0>)
 800c3f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c3f8:	601a      	str	r2, [r3, #0]
 800c3fa:	f3bf 8f4f 	dsb	sy
 800c3fe:	f3bf 8f6f 	isb	sy
 800c402:	e009      	b.n	800c418 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	3310      	adds	r3, #16
 800c408:	4618      	mov	r0, r3
 800c40a:	f7ff fef1 	bl	800c1f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	3324      	adds	r3, #36	@ 0x24
 800c412:	4618      	mov	r0, r3
 800c414:	f7ff feec 	bl	800c1f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c418:	f002 fcf8 	bl	800ee0c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c41c:	2301      	movs	r3, #1
}
 800c41e:	4618      	mov	r0, r3
 800c420:	3710      	adds	r7, #16
 800c422:	46bd      	mov	sp, r7
 800c424:	bd80      	pop	{r7, pc}
 800c426:	bf00      	nop
 800c428:	e000ed04 	.word	0xe000ed04

0800c42c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b08e      	sub	sp, #56	@ 0x38
 800c430:	af02      	add	r7, sp, #8
 800c432:	60f8      	str	r0, [r7, #12]
 800c434:	60b9      	str	r1, [r7, #8]
 800c436:	607a      	str	r2, [r7, #4]
 800c438:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d10b      	bne.n	800c458 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800c440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c444:	f383 8811 	msr	BASEPRI, r3
 800c448:	f3bf 8f6f 	isb	sy
 800c44c:	f3bf 8f4f 	dsb	sy
 800c450:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c452:	bf00      	nop
 800c454:	bf00      	nop
 800c456:	e7fd      	b.n	800c454 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d10b      	bne.n	800c476 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800c45e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c462:	f383 8811 	msr	BASEPRI, r3
 800c466:	f3bf 8f6f 	isb	sy
 800c46a:	f3bf 8f4f 	dsb	sy
 800c46e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c470:	bf00      	nop
 800c472:	bf00      	nop
 800c474:	e7fd      	b.n	800c472 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d002      	beq.n	800c482 <xQueueGenericCreateStatic+0x56>
 800c47c:	68bb      	ldr	r3, [r7, #8]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d001      	beq.n	800c486 <xQueueGenericCreateStatic+0x5a>
 800c482:	2301      	movs	r3, #1
 800c484:	e000      	b.n	800c488 <xQueueGenericCreateStatic+0x5c>
 800c486:	2300      	movs	r3, #0
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d10b      	bne.n	800c4a4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800c48c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c490:	f383 8811 	msr	BASEPRI, r3
 800c494:	f3bf 8f6f 	isb	sy
 800c498:	f3bf 8f4f 	dsb	sy
 800c49c:	623b      	str	r3, [r7, #32]
}
 800c49e:	bf00      	nop
 800c4a0:	bf00      	nop
 800c4a2:	e7fd      	b.n	800c4a0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d102      	bne.n	800c4b0 <xQueueGenericCreateStatic+0x84>
 800c4aa:	68bb      	ldr	r3, [r7, #8]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d101      	bne.n	800c4b4 <xQueueGenericCreateStatic+0x88>
 800c4b0:	2301      	movs	r3, #1
 800c4b2:	e000      	b.n	800c4b6 <xQueueGenericCreateStatic+0x8a>
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d10b      	bne.n	800c4d2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800c4ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4be:	f383 8811 	msr	BASEPRI, r3
 800c4c2:	f3bf 8f6f 	isb	sy
 800c4c6:	f3bf 8f4f 	dsb	sy
 800c4ca:	61fb      	str	r3, [r7, #28]
}
 800c4cc:	bf00      	nop
 800c4ce:	bf00      	nop
 800c4d0:	e7fd      	b.n	800c4ce <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c4d2:	2350      	movs	r3, #80	@ 0x50
 800c4d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c4d6:	697b      	ldr	r3, [r7, #20]
 800c4d8:	2b50      	cmp	r3, #80	@ 0x50
 800c4da:	d00b      	beq.n	800c4f4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800c4dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4e0:	f383 8811 	msr	BASEPRI, r3
 800c4e4:	f3bf 8f6f 	isb	sy
 800c4e8:	f3bf 8f4f 	dsb	sy
 800c4ec:	61bb      	str	r3, [r7, #24]
}
 800c4ee:	bf00      	nop
 800c4f0:	bf00      	nop
 800c4f2:	e7fd      	b.n	800c4f0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c4f4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800c4fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d00d      	beq.n	800c51c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c502:	2201      	movs	r2, #1
 800c504:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c508:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800c50c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c50e:	9300      	str	r3, [sp, #0]
 800c510:	4613      	mov	r3, r2
 800c512:	687a      	ldr	r2, [r7, #4]
 800c514:	68b9      	ldr	r1, [r7, #8]
 800c516:	68f8      	ldr	r0, [r7, #12]
 800c518:	f000 f840 	bl	800c59c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c51c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800c51e:	4618      	mov	r0, r3
 800c520:	3730      	adds	r7, #48	@ 0x30
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}

0800c526 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c526:	b580      	push	{r7, lr}
 800c528:	b08a      	sub	sp, #40	@ 0x28
 800c52a:	af02      	add	r7, sp, #8
 800c52c:	60f8      	str	r0, [r7, #12]
 800c52e:	60b9      	str	r1, [r7, #8]
 800c530:	4613      	mov	r3, r2
 800c532:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d10b      	bne.n	800c552 <xQueueGenericCreate+0x2c>
	__asm volatile
 800c53a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c53e:	f383 8811 	msr	BASEPRI, r3
 800c542:	f3bf 8f6f 	isb	sy
 800c546:	f3bf 8f4f 	dsb	sy
 800c54a:	613b      	str	r3, [r7, #16]
}
 800c54c:	bf00      	nop
 800c54e:	bf00      	nop
 800c550:	e7fd      	b.n	800c54e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	68ba      	ldr	r2, [r7, #8]
 800c556:	fb02 f303 	mul.w	r3, r2, r3
 800c55a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c55c:	69fb      	ldr	r3, [r7, #28]
 800c55e:	3350      	adds	r3, #80	@ 0x50
 800c560:	4618      	mov	r0, r3
 800c562:	f002 fd43 	bl	800efec <pvPortMalloc>
 800c566:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c568:	69bb      	ldr	r3, [r7, #24]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d011      	beq.n	800c592 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c56e:	69bb      	ldr	r3, [r7, #24]
 800c570:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c572:	697b      	ldr	r3, [r7, #20]
 800c574:	3350      	adds	r3, #80	@ 0x50
 800c576:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c578:	69bb      	ldr	r3, [r7, #24]
 800c57a:	2200      	movs	r2, #0
 800c57c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c580:	79fa      	ldrb	r2, [r7, #7]
 800c582:	69bb      	ldr	r3, [r7, #24]
 800c584:	9300      	str	r3, [sp, #0]
 800c586:	4613      	mov	r3, r2
 800c588:	697a      	ldr	r2, [r7, #20]
 800c58a:	68b9      	ldr	r1, [r7, #8]
 800c58c:	68f8      	ldr	r0, [r7, #12]
 800c58e:	f000 f805 	bl	800c59c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c592:	69bb      	ldr	r3, [r7, #24]
	}
 800c594:	4618      	mov	r0, r3
 800c596:	3720      	adds	r7, #32
 800c598:	46bd      	mov	sp, r7
 800c59a:	bd80      	pop	{r7, pc}

0800c59c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b084      	sub	sp, #16
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	60f8      	str	r0, [r7, #12]
 800c5a4:	60b9      	str	r1, [r7, #8]
 800c5a6:	607a      	str	r2, [r7, #4]
 800c5a8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c5aa:	68bb      	ldr	r3, [r7, #8]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d103      	bne.n	800c5b8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c5b0:	69bb      	ldr	r3, [r7, #24]
 800c5b2:	69ba      	ldr	r2, [r7, #24]
 800c5b4:	601a      	str	r2, [r3, #0]
 800c5b6:	e002      	b.n	800c5be <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c5b8:	69bb      	ldr	r3, [r7, #24]
 800c5ba:	687a      	ldr	r2, [r7, #4]
 800c5bc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c5be:	69bb      	ldr	r3, [r7, #24]
 800c5c0:	68fa      	ldr	r2, [r7, #12]
 800c5c2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c5c4:	69bb      	ldr	r3, [r7, #24]
 800c5c6:	68ba      	ldr	r2, [r7, #8]
 800c5c8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c5ca:	2101      	movs	r1, #1
 800c5cc:	69b8      	ldr	r0, [r7, #24]
 800c5ce:	f7ff fec3 	bl	800c358 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c5d2:	69bb      	ldr	r3, [r7, #24]
 800c5d4:	78fa      	ldrb	r2, [r7, #3]
 800c5d6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c5da:	bf00      	nop
 800c5dc:	3710      	adds	r7, #16
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bd80      	pop	{r7, pc}

0800c5e2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800c5e2:	b580      	push	{r7, lr}
 800c5e4:	b08a      	sub	sp, #40	@ 0x28
 800c5e6:	af02      	add	r7, sp, #8
 800c5e8:	60f8      	str	r0, [r7, #12]
 800c5ea:	60b9      	str	r1, [r7, #8]
 800c5ec:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d10b      	bne.n	800c60c <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800c5f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5f8:	f383 8811 	msr	BASEPRI, r3
 800c5fc:	f3bf 8f6f 	isb	sy
 800c600:	f3bf 8f4f 	dsb	sy
 800c604:	61bb      	str	r3, [r7, #24]
}
 800c606:	bf00      	nop
 800c608:	bf00      	nop
 800c60a:	e7fd      	b.n	800c608 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c60c:	68ba      	ldr	r2, [r7, #8]
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	429a      	cmp	r2, r3
 800c612:	d90b      	bls.n	800c62c <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800c614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c618:	f383 8811 	msr	BASEPRI, r3
 800c61c:	f3bf 8f6f 	isb	sy
 800c620:	f3bf 8f4f 	dsb	sy
 800c624:	617b      	str	r3, [r7, #20]
}
 800c626:	bf00      	nop
 800c628:	bf00      	nop
 800c62a:	e7fd      	b.n	800c628 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c62c:	2302      	movs	r3, #2
 800c62e:	9300      	str	r3, [sp, #0]
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2200      	movs	r2, #0
 800c634:	2100      	movs	r1, #0
 800c636:	68f8      	ldr	r0, [r7, #12]
 800c638:	f7ff fef8 	bl	800c42c <xQueueGenericCreateStatic>
 800c63c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800c63e:	69fb      	ldr	r3, [r7, #28]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d002      	beq.n	800c64a <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c644:	69fb      	ldr	r3, [r7, #28]
 800c646:	68ba      	ldr	r2, [r7, #8]
 800c648:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c64a:	69fb      	ldr	r3, [r7, #28]
	}
 800c64c:	4618      	mov	r0, r3
 800c64e:	3720      	adds	r7, #32
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}

0800c654 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800c654:	b580      	push	{r7, lr}
 800c656:	b086      	sub	sp, #24
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
 800c65c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d10b      	bne.n	800c67c <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800c664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c668:	f383 8811 	msr	BASEPRI, r3
 800c66c:	f3bf 8f6f 	isb	sy
 800c670:	f3bf 8f4f 	dsb	sy
 800c674:	613b      	str	r3, [r7, #16]
}
 800c676:	bf00      	nop
 800c678:	bf00      	nop
 800c67a:	e7fd      	b.n	800c678 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c67c:	683a      	ldr	r2, [r7, #0]
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	429a      	cmp	r2, r3
 800c682:	d90b      	bls.n	800c69c <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800c684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c688:	f383 8811 	msr	BASEPRI, r3
 800c68c:	f3bf 8f6f 	isb	sy
 800c690:	f3bf 8f4f 	dsb	sy
 800c694:	60fb      	str	r3, [r7, #12]
}
 800c696:	bf00      	nop
 800c698:	bf00      	nop
 800c69a:	e7fd      	b.n	800c698 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c69c:	2202      	movs	r2, #2
 800c69e:	2100      	movs	r1, #0
 800c6a0:	6878      	ldr	r0, [r7, #4]
 800c6a2:	f7ff ff40 	bl	800c526 <xQueueGenericCreate>
 800c6a6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800c6a8:	697b      	ldr	r3, [r7, #20]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d002      	beq.n	800c6b4 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c6ae:	697b      	ldr	r3, [r7, #20]
 800c6b0:	683a      	ldr	r2, [r7, #0]
 800c6b2:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c6b4:	697b      	ldr	r3, [r7, #20]
	}
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	3718      	adds	r7, #24
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	bd80      	pop	{r7, pc}
	...

0800c6c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b08e      	sub	sp, #56	@ 0x38
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	60f8      	str	r0, [r7, #12]
 800c6c8:	60b9      	str	r1, [r7, #8]
 800c6ca:	607a      	str	r2, [r7, #4]
 800c6cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c6d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d10b      	bne.n	800c6f4 <xQueueGenericSend+0x34>
	__asm volatile
 800c6dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6e0:	f383 8811 	msr	BASEPRI, r3
 800c6e4:	f3bf 8f6f 	isb	sy
 800c6e8:	f3bf 8f4f 	dsb	sy
 800c6ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c6ee:	bf00      	nop
 800c6f0:	bf00      	nop
 800c6f2:	e7fd      	b.n	800c6f0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c6f4:	68bb      	ldr	r3, [r7, #8]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d103      	bne.n	800c702 <xQueueGenericSend+0x42>
 800c6fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d101      	bne.n	800c706 <xQueueGenericSend+0x46>
 800c702:	2301      	movs	r3, #1
 800c704:	e000      	b.n	800c708 <xQueueGenericSend+0x48>
 800c706:	2300      	movs	r3, #0
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d10b      	bne.n	800c724 <xQueueGenericSend+0x64>
	__asm volatile
 800c70c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c710:	f383 8811 	msr	BASEPRI, r3
 800c714:	f3bf 8f6f 	isb	sy
 800c718:	f3bf 8f4f 	dsb	sy
 800c71c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c71e:	bf00      	nop
 800c720:	bf00      	nop
 800c722:	e7fd      	b.n	800c720 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c724:	683b      	ldr	r3, [r7, #0]
 800c726:	2b02      	cmp	r3, #2
 800c728:	d103      	bne.n	800c732 <xQueueGenericSend+0x72>
 800c72a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c72c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c72e:	2b01      	cmp	r3, #1
 800c730:	d101      	bne.n	800c736 <xQueueGenericSend+0x76>
 800c732:	2301      	movs	r3, #1
 800c734:	e000      	b.n	800c738 <xQueueGenericSend+0x78>
 800c736:	2300      	movs	r3, #0
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d10b      	bne.n	800c754 <xQueueGenericSend+0x94>
	__asm volatile
 800c73c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c740:	f383 8811 	msr	BASEPRI, r3
 800c744:	f3bf 8f6f 	isb	sy
 800c748:	f3bf 8f4f 	dsb	sy
 800c74c:	623b      	str	r3, [r7, #32]
}
 800c74e:	bf00      	nop
 800c750:	bf00      	nop
 800c752:	e7fd      	b.n	800c750 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c754:	f001 fcbe 	bl	800e0d4 <xTaskGetSchedulerState>
 800c758:	4603      	mov	r3, r0
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d102      	bne.n	800c764 <xQueueGenericSend+0xa4>
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d101      	bne.n	800c768 <xQueueGenericSend+0xa8>
 800c764:	2301      	movs	r3, #1
 800c766:	e000      	b.n	800c76a <xQueueGenericSend+0xaa>
 800c768:	2300      	movs	r3, #0
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d10b      	bne.n	800c786 <xQueueGenericSend+0xc6>
	__asm volatile
 800c76e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c772:	f383 8811 	msr	BASEPRI, r3
 800c776:	f3bf 8f6f 	isb	sy
 800c77a:	f3bf 8f4f 	dsb	sy
 800c77e:	61fb      	str	r3, [r7, #28]
}
 800c780:	bf00      	nop
 800c782:	bf00      	nop
 800c784:	e7fd      	b.n	800c782 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c786:	f002 fb0f 	bl	800eda8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c78a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c78c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c78e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c790:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c792:	429a      	cmp	r2, r3
 800c794:	d302      	bcc.n	800c79c <xQueueGenericSend+0xdc>
 800c796:	683b      	ldr	r3, [r7, #0]
 800c798:	2b02      	cmp	r3, #2
 800c79a:	d129      	bne.n	800c7f0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c79c:	683a      	ldr	r2, [r7, #0]
 800c79e:	68b9      	ldr	r1, [r7, #8]
 800c7a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c7a2:	f000 fc6d 	bl	800d080 <prvCopyDataToQueue>
 800c7a6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c7a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d010      	beq.n	800c7d2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c7b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7b2:	3324      	adds	r3, #36	@ 0x24
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	f001 fac5 	bl	800dd44 <xTaskRemoveFromEventList>
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d013      	beq.n	800c7e8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c7c0:	4b3f      	ldr	r3, [pc, #252]	@ (800c8c0 <xQueueGenericSend+0x200>)
 800c7c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c7c6:	601a      	str	r2, [r3, #0]
 800c7c8:	f3bf 8f4f 	dsb	sy
 800c7cc:	f3bf 8f6f 	isb	sy
 800c7d0:	e00a      	b.n	800c7e8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c7d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d007      	beq.n	800c7e8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c7d8:	4b39      	ldr	r3, [pc, #228]	@ (800c8c0 <xQueueGenericSend+0x200>)
 800c7da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c7de:	601a      	str	r2, [r3, #0]
 800c7e0:	f3bf 8f4f 	dsb	sy
 800c7e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c7e8:	f002 fb10 	bl	800ee0c <vPortExitCritical>
				return pdPASS;
 800c7ec:	2301      	movs	r3, #1
 800c7ee:	e063      	b.n	800c8b8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d103      	bne.n	800c7fe <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c7f6:	f002 fb09 	bl	800ee0c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	e05c      	b.n	800c8b8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c7fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c800:	2b00      	cmp	r3, #0
 800c802:	d106      	bne.n	800c812 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c804:	f107 0314 	add.w	r3, r7, #20
 800c808:	4618      	mov	r0, r3
 800c80a:	f001 faff 	bl	800de0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c80e:	2301      	movs	r3, #1
 800c810:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c812:	f002 fafb 	bl	800ee0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c816:	f001 f831 	bl	800d87c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c81a:	f002 fac5 	bl	800eda8 <vPortEnterCritical>
 800c81e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c820:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c824:	b25b      	sxtb	r3, r3
 800c826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c82a:	d103      	bne.n	800c834 <xQueueGenericSend+0x174>
 800c82c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c82e:	2200      	movs	r2, #0
 800c830:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c836:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c83a:	b25b      	sxtb	r3, r3
 800c83c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c840:	d103      	bne.n	800c84a <xQueueGenericSend+0x18a>
 800c842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c844:	2200      	movs	r2, #0
 800c846:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c84a:	f002 fadf 	bl	800ee0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c84e:	1d3a      	adds	r2, r7, #4
 800c850:	f107 0314 	add.w	r3, r7, #20
 800c854:	4611      	mov	r1, r2
 800c856:	4618      	mov	r0, r3
 800c858:	f001 faee 	bl	800de38 <xTaskCheckForTimeOut>
 800c85c:	4603      	mov	r3, r0
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d124      	bne.n	800c8ac <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c862:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c864:	f000 fd04 	bl	800d270 <prvIsQueueFull>
 800c868:	4603      	mov	r3, r0
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d018      	beq.n	800c8a0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c86e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c870:	3310      	adds	r3, #16
 800c872:	687a      	ldr	r2, [r7, #4]
 800c874:	4611      	mov	r1, r2
 800c876:	4618      	mov	r0, r3
 800c878:	f001 fa12 	bl	800dca0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c87c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c87e:	f000 fc8f 	bl	800d1a0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c882:	f001 f809 	bl	800d898 <xTaskResumeAll>
 800c886:	4603      	mov	r3, r0
 800c888:	2b00      	cmp	r3, #0
 800c88a:	f47f af7c 	bne.w	800c786 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c88e:	4b0c      	ldr	r3, [pc, #48]	@ (800c8c0 <xQueueGenericSend+0x200>)
 800c890:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c894:	601a      	str	r2, [r3, #0]
 800c896:	f3bf 8f4f 	dsb	sy
 800c89a:	f3bf 8f6f 	isb	sy
 800c89e:	e772      	b.n	800c786 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c8a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c8a2:	f000 fc7d 	bl	800d1a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c8a6:	f000 fff7 	bl	800d898 <xTaskResumeAll>
 800c8aa:	e76c      	b.n	800c786 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c8ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c8ae:	f000 fc77 	bl	800d1a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c8b2:	f000 fff1 	bl	800d898 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c8b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	3738      	adds	r7, #56	@ 0x38
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	bd80      	pop	{r7, pc}
 800c8c0:	e000ed04 	.word	0xe000ed04

0800c8c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b090      	sub	sp, #64	@ 0x40
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	60f8      	str	r0, [r7, #12]
 800c8cc:	60b9      	str	r1, [r7, #8]
 800c8ce:	607a      	str	r2, [r7, #4]
 800c8d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800c8d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d10b      	bne.n	800c8f4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800c8dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8e0:	f383 8811 	msr	BASEPRI, r3
 800c8e4:	f3bf 8f6f 	isb	sy
 800c8e8:	f3bf 8f4f 	dsb	sy
 800c8ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c8ee:	bf00      	nop
 800c8f0:	bf00      	nop
 800c8f2:	e7fd      	b.n	800c8f0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c8f4:	68bb      	ldr	r3, [r7, #8]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d103      	bne.n	800c902 <xQueueGenericSendFromISR+0x3e>
 800c8fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d101      	bne.n	800c906 <xQueueGenericSendFromISR+0x42>
 800c902:	2301      	movs	r3, #1
 800c904:	e000      	b.n	800c908 <xQueueGenericSendFromISR+0x44>
 800c906:	2300      	movs	r3, #0
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d10b      	bne.n	800c924 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800c90c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c910:	f383 8811 	msr	BASEPRI, r3
 800c914:	f3bf 8f6f 	isb	sy
 800c918:	f3bf 8f4f 	dsb	sy
 800c91c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c91e:	bf00      	nop
 800c920:	bf00      	nop
 800c922:	e7fd      	b.n	800c920 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	2b02      	cmp	r3, #2
 800c928:	d103      	bne.n	800c932 <xQueueGenericSendFromISR+0x6e>
 800c92a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c92c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c92e:	2b01      	cmp	r3, #1
 800c930:	d101      	bne.n	800c936 <xQueueGenericSendFromISR+0x72>
 800c932:	2301      	movs	r3, #1
 800c934:	e000      	b.n	800c938 <xQueueGenericSendFromISR+0x74>
 800c936:	2300      	movs	r3, #0
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d10b      	bne.n	800c954 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800c93c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c940:	f383 8811 	msr	BASEPRI, r3
 800c944:	f3bf 8f6f 	isb	sy
 800c948:	f3bf 8f4f 	dsb	sy
 800c94c:	623b      	str	r3, [r7, #32]
}
 800c94e:	bf00      	nop
 800c950:	bf00      	nop
 800c952:	e7fd      	b.n	800c950 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c954:	f002 fb08 	bl	800ef68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c958:	f3ef 8211 	mrs	r2, BASEPRI
 800c95c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c960:	f383 8811 	msr	BASEPRI, r3
 800c964:	f3bf 8f6f 	isb	sy
 800c968:	f3bf 8f4f 	dsb	sy
 800c96c:	61fa      	str	r2, [r7, #28]
 800c96e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c970:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c972:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c976:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c97a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c97c:	429a      	cmp	r2, r3
 800c97e:	d302      	bcc.n	800c986 <xQueueGenericSendFromISR+0xc2>
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	2b02      	cmp	r3, #2
 800c984:	d12f      	bne.n	800c9e6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c988:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c98c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c994:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c996:	683a      	ldr	r2, [r7, #0]
 800c998:	68b9      	ldr	r1, [r7, #8]
 800c99a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c99c:	f000 fb70 	bl	800d080 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c9a0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800c9a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9a8:	d112      	bne.n	800c9d0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c9aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d016      	beq.n	800c9e0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c9b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9b4:	3324      	adds	r3, #36	@ 0x24
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	f001 f9c4 	bl	800dd44 <xTaskRemoveFromEventList>
 800c9bc:	4603      	mov	r3, r0
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d00e      	beq.n	800c9e0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d00b      	beq.n	800c9e0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	2201      	movs	r2, #1
 800c9cc:	601a      	str	r2, [r3, #0]
 800c9ce:	e007      	b.n	800c9e0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c9d0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c9d4:	3301      	adds	r3, #1
 800c9d6:	b2db      	uxtb	r3, r3
 800c9d8:	b25a      	sxtb	r2, r3
 800c9da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c9e0:	2301      	movs	r3, #1
 800c9e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800c9e4:	e001      	b.n	800c9ea <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c9ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9ec:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c9ee:	697b      	ldr	r3, [r7, #20]
 800c9f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c9f4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c9f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	3740      	adds	r7, #64	@ 0x40
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd80      	pop	{r7, pc}

0800ca00 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b08e      	sub	sp, #56	@ 0x38
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
 800ca08:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ca0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d10b      	bne.n	800ca2c <xQueueGiveFromISR+0x2c>
	__asm volatile
 800ca14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca18:	f383 8811 	msr	BASEPRI, r3
 800ca1c:	f3bf 8f6f 	isb	sy
 800ca20:	f3bf 8f4f 	dsb	sy
 800ca24:	623b      	str	r3, [r7, #32]
}
 800ca26:	bf00      	nop
 800ca28:	bf00      	nop
 800ca2a:	e7fd      	b.n	800ca28 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ca2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d00b      	beq.n	800ca4c <xQueueGiveFromISR+0x4c>
	__asm volatile
 800ca34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca38:	f383 8811 	msr	BASEPRI, r3
 800ca3c:	f3bf 8f6f 	isb	sy
 800ca40:	f3bf 8f4f 	dsb	sy
 800ca44:	61fb      	str	r3, [r7, #28]
}
 800ca46:	bf00      	nop
 800ca48:	bf00      	nop
 800ca4a:	e7fd      	b.n	800ca48 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ca4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d103      	bne.n	800ca5c <xQueueGiveFromISR+0x5c>
 800ca54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca56:	689b      	ldr	r3, [r3, #8]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d101      	bne.n	800ca60 <xQueueGiveFromISR+0x60>
 800ca5c:	2301      	movs	r3, #1
 800ca5e:	e000      	b.n	800ca62 <xQueueGiveFromISR+0x62>
 800ca60:	2300      	movs	r3, #0
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d10b      	bne.n	800ca7e <xQueueGiveFromISR+0x7e>
	__asm volatile
 800ca66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca6a:	f383 8811 	msr	BASEPRI, r3
 800ca6e:	f3bf 8f6f 	isb	sy
 800ca72:	f3bf 8f4f 	dsb	sy
 800ca76:	61bb      	str	r3, [r7, #24]
}
 800ca78:	bf00      	nop
 800ca7a:	bf00      	nop
 800ca7c:	e7fd      	b.n	800ca7a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ca7e:	f002 fa73 	bl	800ef68 <vPortValidateInterruptPriority>
	__asm volatile
 800ca82:	f3ef 8211 	mrs	r2, BASEPRI
 800ca86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca8a:	f383 8811 	msr	BASEPRI, r3
 800ca8e:	f3bf 8f6f 	isb	sy
 800ca92:	f3bf 8f4f 	dsb	sy
 800ca96:	617a      	str	r2, [r7, #20]
 800ca98:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ca9a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ca9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ca9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800caa2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800caa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800caa8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800caaa:	429a      	cmp	r2, r3
 800caac:	d22b      	bcs.n	800cb06 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800caae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cab0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cab4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800caba:	1c5a      	adds	r2, r3, #1
 800cabc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cabe:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cac0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800cac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cac8:	d112      	bne.n	800caf0 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800caca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cacc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d016      	beq.n	800cb00 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cad4:	3324      	adds	r3, #36	@ 0x24
 800cad6:	4618      	mov	r0, r3
 800cad8:	f001 f934 	bl	800dd44 <xTaskRemoveFromEventList>
 800cadc:	4603      	mov	r3, r0
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d00e      	beq.n	800cb00 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d00b      	beq.n	800cb00 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	2201      	movs	r2, #1
 800caec:	601a      	str	r2, [r3, #0]
 800caee:	e007      	b.n	800cb00 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800caf0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800caf4:	3301      	adds	r3, #1
 800caf6:	b2db      	uxtb	r3, r3
 800caf8:	b25a      	sxtb	r2, r3
 800cafa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cafc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800cb00:	2301      	movs	r3, #1
 800cb02:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb04:	e001      	b.n	800cb0a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cb06:	2300      	movs	r3, #0
 800cb08:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb0c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	f383 8811 	msr	BASEPRI, r3
}
 800cb14:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cb16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800cb18:	4618      	mov	r0, r3
 800cb1a:	3738      	adds	r7, #56	@ 0x38
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	bd80      	pop	{r7, pc}

0800cb20 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b08c      	sub	sp, #48	@ 0x30
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	60f8      	str	r0, [r7, #12]
 800cb28:	60b9      	str	r1, [r7, #8]
 800cb2a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cb34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d10b      	bne.n	800cb52 <xQueueReceive+0x32>
	__asm volatile
 800cb3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb3e:	f383 8811 	msr	BASEPRI, r3
 800cb42:	f3bf 8f6f 	isb	sy
 800cb46:	f3bf 8f4f 	dsb	sy
 800cb4a:	623b      	str	r3, [r7, #32]
}
 800cb4c:	bf00      	nop
 800cb4e:	bf00      	nop
 800cb50:	e7fd      	b.n	800cb4e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cb52:	68bb      	ldr	r3, [r7, #8]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d103      	bne.n	800cb60 <xQueueReceive+0x40>
 800cb58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d101      	bne.n	800cb64 <xQueueReceive+0x44>
 800cb60:	2301      	movs	r3, #1
 800cb62:	e000      	b.n	800cb66 <xQueueReceive+0x46>
 800cb64:	2300      	movs	r3, #0
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d10b      	bne.n	800cb82 <xQueueReceive+0x62>
	__asm volatile
 800cb6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb6e:	f383 8811 	msr	BASEPRI, r3
 800cb72:	f3bf 8f6f 	isb	sy
 800cb76:	f3bf 8f4f 	dsb	sy
 800cb7a:	61fb      	str	r3, [r7, #28]
}
 800cb7c:	bf00      	nop
 800cb7e:	bf00      	nop
 800cb80:	e7fd      	b.n	800cb7e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cb82:	f001 faa7 	bl	800e0d4 <xTaskGetSchedulerState>
 800cb86:	4603      	mov	r3, r0
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d102      	bne.n	800cb92 <xQueueReceive+0x72>
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d101      	bne.n	800cb96 <xQueueReceive+0x76>
 800cb92:	2301      	movs	r3, #1
 800cb94:	e000      	b.n	800cb98 <xQueueReceive+0x78>
 800cb96:	2300      	movs	r3, #0
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d10b      	bne.n	800cbb4 <xQueueReceive+0x94>
	__asm volatile
 800cb9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cba0:	f383 8811 	msr	BASEPRI, r3
 800cba4:	f3bf 8f6f 	isb	sy
 800cba8:	f3bf 8f4f 	dsb	sy
 800cbac:	61bb      	str	r3, [r7, #24]
}
 800cbae:	bf00      	nop
 800cbb0:	bf00      	nop
 800cbb2:	e7fd      	b.n	800cbb0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cbb4:	f002 f8f8 	bl	800eda8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cbb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbbc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cbbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d01f      	beq.n	800cc04 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cbc4:	68b9      	ldr	r1, [r7, #8]
 800cbc6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cbc8:	f000 fac4 	bl	800d154 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cbcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbce:	1e5a      	subs	r2, r3, #1
 800cbd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbd2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cbd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbd6:	691b      	ldr	r3, [r3, #16]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d00f      	beq.n	800cbfc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cbdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbde:	3310      	adds	r3, #16
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	f001 f8af 	bl	800dd44 <xTaskRemoveFromEventList>
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d007      	beq.n	800cbfc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cbec:	4b3c      	ldr	r3, [pc, #240]	@ (800cce0 <xQueueReceive+0x1c0>)
 800cbee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cbf2:	601a      	str	r2, [r3, #0]
 800cbf4:	f3bf 8f4f 	dsb	sy
 800cbf8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cbfc:	f002 f906 	bl	800ee0c <vPortExitCritical>
				return pdPASS;
 800cc00:	2301      	movs	r3, #1
 800cc02:	e069      	b.n	800ccd8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d103      	bne.n	800cc12 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cc0a:	f002 f8ff 	bl	800ee0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cc0e:	2300      	movs	r3, #0
 800cc10:	e062      	b.n	800ccd8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cc12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d106      	bne.n	800cc26 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cc18:	f107 0310 	add.w	r3, r7, #16
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	f001 f8f5 	bl	800de0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cc22:	2301      	movs	r3, #1
 800cc24:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cc26:	f002 f8f1 	bl	800ee0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cc2a:	f000 fe27 	bl	800d87c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cc2e:	f002 f8bb 	bl	800eda8 <vPortEnterCritical>
 800cc32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cc38:	b25b      	sxtb	r3, r3
 800cc3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc3e:	d103      	bne.n	800cc48 <xQueueReceive+0x128>
 800cc40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc42:	2200      	movs	r2, #0
 800cc44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cc48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc4a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cc4e:	b25b      	sxtb	r3, r3
 800cc50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc54:	d103      	bne.n	800cc5e <xQueueReceive+0x13e>
 800cc56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc58:	2200      	movs	r2, #0
 800cc5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cc5e:	f002 f8d5 	bl	800ee0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cc62:	1d3a      	adds	r2, r7, #4
 800cc64:	f107 0310 	add.w	r3, r7, #16
 800cc68:	4611      	mov	r1, r2
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	f001 f8e4 	bl	800de38 <xTaskCheckForTimeOut>
 800cc70:	4603      	mov	r3, r0
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d123      	bne.n	800ccbe <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cc76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cc78:	f000 fae4 	bl	800d244 <prvIsQueueEmpty>
 800cc7c:	4603      	mov	r3, r0
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d017      	beq.n	800ccb2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cc82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc84:	3324      	adds	r3, #36	@ 0x24
 800cc86:	687a      	ldr	r2, [r7, #4]
 800cc88:	4611      	mov	r1, r2
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	f001 f808 	bl	800dca0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cc90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cc92:	f000 fa85 	bl	800d1a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cc96:	f000 fdff 	bl	800d898 <xTaskResumeAll>
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d189      	bne.n	800cbb4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800cca0:	4b0f      	ldr	r3, [pc, #60]	@ (800cce0 <xQueueReceive+0x1c0>)
 800cca2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cca6:	601a      	str	r2, [r3, #0]
 800cca8:	f3bf 8f4f 	dsb	sy
 800ccac:	f3bf 8f6f 	isb	sy
 800ccb0:	e780      	b.n	800cbb4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ccb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ccb4:	f000 fa74 	bl	800d1a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ccb8:	f000 fdee 	bl	800d898 <xTaskResumeAll>
 800ccbc:	e77a      	b.n	800cbb4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ccbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ccc0:	f000 fa6e 	bl	800d1a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ccc4:	f000 fde8 	bl	800d898 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ccc8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ccca:	f000 fabb 	bl	800d244 <prvIsQueueEmpty>
 800ccce:	4603      	mov	r3, r0
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	f43f af6f 	beq.w	800cbb4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ccd6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ccd8:	4618      	mov	r0, r3
 800ccda:	3730      	adds	r7, #48	@ 0x30
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	bd80      	pop	{r7, pc}
 800cce0:	e000ed04 	.word	0xe000ed04

0800cce4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b08e      	sub	sp, #56	@ 0x38
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
 800ccec:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ccee:	2300      	movs	r3, #0
 800ccf0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ccfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d10b      	bne.n	800cd18 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800cd00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd04:	f383 8811 	msr	BASEPRI, r3
 800cd08:	f3bf 8f6f 	isb	sy
 800cd0c:	f3bf 8f4f 	dsb	sy
 800cd10:	623b      	str	r3, [r7, #32]
}
 800cd12:	bf00      	nop
 800cd14:	bf00      	nop
 800cd16:	e7fd      	b.n	800cd14 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cd18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d00b      	beq.n	800cd38 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800cd20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd24:	f383 8811 	msr	BASEPRI, r3
 800cd28:	f3bf 8f6f 	isb	sy
 800cd2c:	f3bf 8f4f 	dsb	sy
 800cd30:	61fb      	str	r3, [r7, #28]
}
 800cd32:	bf00      	nop
 800cd34:	bf00      	nop
 800cd36:	e7fd      	b.n	800cd34 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cd38:	f001 f9cc 	bl	800e0d4 <xTaskGetSchedulerState>
 800cd3c:	4603      	mov	r3, r0
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d102      	bne.n	800cd48 <xQueueSemaphoreTake+0x64>
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d101      	bne.n	800cd4c <xQueueSemaphoreTake+0x68>
 800cd48:	2301      	movs	r3, #1
 800cd4a:	e000      	b.n	800cd4e <xQueueSemaphoreTake+0x6a>
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d10b      	bne.n	800cd6a <xQueueSemaphoreTake+0x86>
	__asm volatile
 800cd52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd56:	f383 8811 	msr	BASEPRI, r3
 800cd5a:	f3bf 8f6f 	isb	sy
 800cd5e:	f3bf 8f4f 	dsb	sy
 800cd62:	61bb      	str	r3, [r7, #24]
}
 800cd64:	bf00      	nop
 800cd66:	bf00      	nop
 800cd68:	e7fd      	b.n	800cd66 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cd6a:	f002 f81d 	bl	800eda8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800cd6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd72:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800cd74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d024      	beq.n	800cdc4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800cd7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd7c:	1e5a      	subs	r2, r3, #1
 800cd7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd80:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cd82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d104      	bne.n	800cd94 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800cd8a:	f001 fb1d 	bl	800e3c8 <pvTaskIncrementMutexHeldCount>
 800cd8e:	4602      	mov	r2, r0
 800cd90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd92:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cd94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd96:	691b      	ldr	r3, [r3, #16]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d00f      	beq.n	800cdbc <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cd9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd9e:	3310      	adds	r3, #16
 800cda0:	4618      	mov	r0, r3
 800cda2:	f000 ffcf 	bl	800dd44 <xTaskRemoveFromEventList>
 800cda6:	4603      	mov	r3, r0
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d007      	beq.n	800cdbc <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cdac:	4b54      	ldr	r3, [pc, #336]	@ (800cf00 <xQueueSemaphoreTake+0x21c>)
 800cdae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cdb2:	601a      	str	r2, [r3, #0]
 800cdb4:	f3bf 8f4f 	dsb	sy
 800cdb8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cdbc:	f002 f826 	bl	800ee0c <vPortExitCritical>
				return pdPASS;
 800cdc0:	2301      	movs	r3, #1
 800cdc2:	e098      	b.n	800cef6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cdc4:	683b      	ldr	r3, [r7, #0]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d112      	bne.n	800cdf0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800cdca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d00b      	beq.n	800cde8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800cdd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdd4:	f383 8811 	msr	BASEPRI, r3
 800cdd8:	f3bf 8f6f 	isb	sy
 800cddc:	f3bf 8f4f 	dsb	sy
 800cde0:	617b      	str	r3, [r7, #20]
}
 800cde2:	bf00      	nop
 800cde4:	bf00      	nop
 800cde6:	e7fd      	b.n	800cde4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800cde8:	f002 f810 	bl	800ee0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cdec:	2300      	movs	r3, #0
 800cdee:	e082      	b.n	800cef6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cdf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d106      	bne.n	800ce04 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cdf6:	f107 030c 	add.w	r3, r7, #12
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	f001 f806 	bl	800de0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ce00:	2301      	movs	r3, #1
 800ce02:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ce04:	f002 f802 	bl	800ee0c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ce08:	f000 fd38 	bl	800d87c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ce0c:	f001 ffcc 	bl	800eda8 <vPortEnterCritical>
 800ce10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce12:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ce16:	b25b      	sxtb	r3, r3
 800ce18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce1c:	d103      	bne.n	800ce26 <xQueueSemaphoreTake+0x142>
 800ce1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce20:	2200      	movs	r2, #0
 800ce22:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ce26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce28:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ce2c:	b25b      	sxtb	r3, r3
 800ce2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce32:	d103      	bne.n	800ce3c <xQueueSemaphoreTake+0x158>
 800ce34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce36:	2200      	movs	r2, #0
 800ce38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ce3c:	f001 ffe6 	bl	800ee0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ce40:	463a      	mov	r2, r7
 800ce42:	f107 030c 	add.w	r3, r7, #12
 800ce46:	4611      	mov	r1, r2
 800ce48:	4618      	mov	r0, r3
 800ce4a:	f000 fff5 	bl	800de38 <xTaskCheckForTimeOut>
 800ce4e:	4603      	mov	r3, r0
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d132      	bne.n	800ceba <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ce54:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ce56:	f000 f9f5 	bl	800d244 <prvIsQueueEmpty>
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d026      	beq.n	800ceae <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ce60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d109      	bne.n	800ce7c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800ce68:	f001 ff9e 	bl	800eda8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ce6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce6e:	689b      	ldr	r3, [r3, #8]
 800ce70:	4618      	mov	r0, r3
 800ce72:	f001 f94d 	bl	800e110 <xTaskPriorityInherit>
 800ce76:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800ce78:	f001 ffc8 	bl	800ee0c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ce7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce7e:	3324      	adds	r3, #36	@ 0x24
 800ce80:	683a      	ldr	r2, [r7, #0]
 800ce82:	4611      	mov	r1, r2
 800ce84:	4618      	mov	r0, r3
 800ce86:	f000 ff0b 	bl	800dca0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ce8a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ce8c:	f000 f988 	bl	800d1a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ce90:	f000 fd02 	bl	800d898 <xTaskResumeAll>
 800ce94:	4603      	mov	r3, r0
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	f47f af67 	bne.w	800cd6a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800ce9c:	4b18      	ldr	r3, [pc, #96]	@ (800cf00 <xQueueSemaphoreTake+0x21c>)
 800ce9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cea2:	601a      	str	r2, [r3, #0]
 800cea4:	f3bf 8f4f 	dsb	sy
 800cea8:	f3bf 8f6f 	isb	sy
 800ceac:	e75d      	b.n	800cd6a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ceae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ceb0:	f000 f976 	bl	800d1a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ceb4:	f000 fcf0 	bl	800d898 <xTaskResumeAll>
 800ceb8:	e757      	b.n	800cd6a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ceba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cebc:	f000 f970 	bl	800d1a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cec0:	f000 fcea 	bl	800d898 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cec4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cec6:	f000 f9bd 	bl	800d244 <prvIsQueueEmpty>
 800ceca:	4603      	mov	r3, r0
 800cecc:	2b00      	cmp	r3, #0
 800cece:	f43f af4c 	beq.w	800cd6a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ced2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d00d      	beq.n	800cef4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800ced8:	f001 ff66 	bl	800eda8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800cedc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cede:	f000 f8b7 	bl	800d050 <prvGetDisinheritPriorityAfterTimeout>
 800cee2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800cee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cee6:	689b      	ldr	r3, [r3, #8]
 800cee8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ceea:	4618      	mov	r0, r3
 800ceec:	f001 f9e8 	bl	800e2c0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800cef0:	f001 ff8c 	bl	800ee0c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cef4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cef6:	4618      	mov	r0, r3
 800cef8:	3738      	adds	r7, #56	@ 0x38
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd80      	pop	{r7, pc}
 800cefe:	bf00      	nop
 800cf00:	e000ed04 	.word	0xe000ed04

0800cf04 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b08e      	sub	sp, #56	@ 0x38
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	60f8      	str	r0, [r7, #12]
 800cf0c:	60b9      	str	r1, [r7, #8]
 800cf0e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800cf14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d10b      	bne.n	800cf32 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800cf1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf1e:	f383 8811 	msr	BASEPRI, r3
 800cf22:	f3bf 8f6f 	isb	sy
 800cf26:	f3bf 8f4f 	dsb	sy
 800cf2a:	623b      	str	r3, [r7, #32]
}
 800cf2c:	bf00      	nop
 800cf2e:	bf00      	nop
 800cf30:	e7fd      	b.n	800cf2e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cf32:	68bb      	ldr	r3, [r7, #8]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d103      	bne.n	800cf40 <xQueueReceiveFromISR+0x3c>
 800cf38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d101      	bne.n	800cf44 <xQueueReceiveFromISR+0x40>
 800cf40:	2301      	movs	r3, #1
 800cf42:	e000      	b.n	800cf46 <xQueueReceiveFromISR+0x42>
 800cf44:	2300      	movs	r3, #0
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d10b      	bne.n	800cf62 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800cf4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf4e:	f383 8811 	msr	BASEPRI, r3
 800cf52:	f3bf 8f6f 	isb	sy
 800cf56:	f3bf 8f4f 	dsb	sy
 800cf5a:	61fb      	str	r3, [r7, #28]
}
 800cf5c:	bf00      	nop
 800cf5e:	bf00      	nop
 800cf60:	e7fd      	b.n	800cf5e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cf62:	f002 f801 	bl	800ef68 <vPortValidateInterruptPriority>
	__asm volatile
 800cf66:	f3ef 8211 	mrs	r2, BASEPRI
 800cf6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf6e:	f383 8811 	msr	BASEPRI, r3
 800cf72:	f3bf 8f6f 	isb	sy
 800cf76:	f3bf 8f4f 	dsb	sy
 800cf7a:	61ba      	str	r2, [r7, #24]
 800cf7c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800cf7e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cf80:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cf82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf86:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cf88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d02f      	beq.n	800cfee <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800cf8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf90:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cf94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cf98:	68b9      	ldr	r1, [r7, #8]
 800cf9a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cf9c:	f000 f8da 	bl	800d154 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cfa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfa2:	1e5a      	subs	r2, r3, #1
 800cfa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfa6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800cfa8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800cfac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfb0:	d112      	bne.n	800cfd8 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cfb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfb4:	691b      	ldr	r3, [r3, #16]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d016      	beq.n	800cfe8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cfba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfbc:	3310      	adds	r3, #16
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	f000 fec0 	bl	800dd44 <xTaskRemoveFromEventList>
 800cfc4:	4603      	mov	r3, r0
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d00e      	beq.n	800cfe8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d00b      	beq.n	800cfe8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	2201      	movs	r2, #1
 800cfd4:	601a      	str	r2, [r3, #0]
 800cfd6:	e007      	b.n	800cfe8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800cfd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cfdc:	3301      	adds	r3, #1
 800cfde:	b2db      	uxtb	r3, r3
 800cfe0:	b25a      	sxtb	r2, r3
 800cfe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfe4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800cfe8:	2301      	movs	r3, #1
 800cfea:	637b      	str	r3, [r7, #52]	@ 0x34
 800cfec:	e001      	b.n	800cff2 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800cfee:	2300      	movs	r3, #0
 800cff0:	637b      	str	r3, [r7, #52]	@ 0x34
 800cff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cff4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800cff6:	693b      	ldr	r3, [r7, #16]
 800cff8:	f383 8811 	msr	BASEPRI, r3
}
 800cffc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cffe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800d000:	4618      	mov	r0, r3
 800d002:	3738      	adds	r7, #56	@ 0x38
 800d004:	46bd      	mov	sp, r7
 800d006:	bd80      	pop	{r7, pc}

0800d008 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b084      	sub	sp, #16
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d10b      	bne.n	800d032 <vQueueDelete+0x2a>
	__asm volatile
 800d01a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d01e:	f383 8811 	msr	BASEPRI, r3
 800d022:	f3bf 8f6f 	isb	sy
 800d026:	f3bf 8f4f 	dsb	sy
 800d02a:	60bb      	str	r3, [r7, #8]
}
 800d02c:	bf00      	nop
 800d02e:	bf00      	nop
 800d030:	e7fd      	b.n	800d02e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800d032:	68f8      	ldr	r0, [r7, #12]
 800d034:	f000 f95e 	bl	800d2f4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d102      	bne.n	800d048 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800d042:	68f8      	ldr	r0, [r7, #12]
 800d044:	f002 f8a6 	bl	800f194 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800d048:	bf00      	nop
 800d04a:	3710      	adds	r7, #16
 800d04c:	46bd      	mov	sp, r7
 800d04e:	bd80      	pop	{r7, pc}

0800d050 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d050:	b480      	push	{r7}
 800d052:	b085      	sub	sp, #20
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d006      	beq.n	800d06e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800d06a:	60fb      	str	r3, [r7, #12]
 800d06c:	e001      	b.n	800d072 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d06e:	2300      	movs	r3, #0
 800d070:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d072:	68fb      	ldr	r3, [r7, #12]
	}
 800d074:	4618      	mov	r0, r3
 800d076:	3714      	adds	r7, #20
 800d078:	46bd      	mov	sp, r7
 800d07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07e:	4770      	bx	lr

0800d080 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b086      	sub	sp, #24
 800d084:	af00      	add	r7, sp, #0
 800d086:	60f8      	str	r0, [r7, #12]
 800d088:	60b9      	str	r1, [r7, #8]
 800d08a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d08c:	2300      	movs	r3, #0
 800d08e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d094:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d10d      	bne.n	800d0ba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d14d      	bne.n	800d142 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	689b      	ldr	r3, [r3, #8]
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	f001 f898 	bl	800e1e0 <xTaskPriorityDisinherit>
 800d0b0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	609a      	str	r2, [r3, #8]
 800d0b8:	e043      	b.n	800d142 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d119      	bne.n	800d0f4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	6858      	ldr	r0, [r3, #4]
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d0c8:	461a      	mov	r2, r3
 800d0ca:	68b9      	ldr	r1, [r7, #8]
 800d0cc:	f003 fcd9 	bl	8010a82 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	685a      	ldr	r2, [r3, #4]
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d0d8:	441a      	add	r2, r3
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	685a      	ldr	r2, [r3, #4]
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	689b      	ldr	r3, [r3, #8]
 800d0e6:	429a      	cmp	r2, r3
 800d0e8:	d32b      	bcc.n	800d142 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	681a      	ldr	r2, [r3, #0]
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	605a      	str	r2, [r3, #4]
 800d0f2:	e026      	b.n	800d142 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	68d8      	ldr	r0, [r3, #12]
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d0fc:	461a      	mov	r2, r3
 800d0fe:	68b9      	ldr	r1, [r7, #8]
 800d100:	f003 fcbf 	bl	8010a82 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	68da      	ldr	r2, [r3, #12]
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d10c:	425b      	negs	r3, r3
 800d10e:	441a      	add	r2, r3
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	68da      	ldr	r2, [r3, #12]
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	429a      	cmp	r2, r3
 800d11e:	d207      	bcs.n	800d130 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	689a      	ldr	r2, [r3, #8]
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d128:	425b      	negs	r3, r3
 800d12a:	441a      	add	r2, r3
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	2b02      	cmp	r3, #2
 800d134:	d105      	bne.n	800d142 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d136:	693b      	ldr	r3, [r7, #16]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d002      	beq.n	800d142 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d13c:	693b      	ldr	r3, [r7, #16]
 800d13e:	3b01      	subs	r3, #1
 800d140:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d142:	693b      	ldr	r3, [r7, #16]
 800d144:	1c5a      	adds	r2, r3, #1
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800d14a:	697b      	ldr	r3, [r7, #20]
}
 800d14c:	4618      	mov	r0, r3
 800d14e:	3718      	adds	r7, #24
 800d150:	46bd      	mov	sp, r7
 800d152:	bd80      	pop	{r7, pc}

0800d154 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d154:	b580      	push	{r7, lr}
 800d156:	b082      	sub	sp, #8
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
 800d15c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d162:	2b00      	cmp	r3, #0
 800d164:	d018      	beq.n	800d198 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	68da      	ldr	r2, [r3, #12]
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d16e:	441a      	add	r2, r3
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	68da      	ldr	r2, [r3, #12]
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	689b      	ldr	r3, [r3, #8]
 800d17c:	429a      	cmp	r2, r3
 800d17e:	d303      	bcc.n	800d188 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681a      	ldr	r2, [r3, #0]
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	68d9      	ldr	r1, [r3, #12]
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d190:	461a      	mov	r2, r3
 800d192:	6838      	ldr	r0, [r7, #0]
 800d194:	f003 fc75 	bl	8010a82 <memcpy>
	}
}
 800d198:	bf00      	nop
 800d19a:	3708      	adds	r7, #8
 800d19c:	46bd      	mov	sp, r7
 800d19e:	bd80      	pop	{r7, pc}

0800d1a0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	b084      	sub	sp, #16
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d1a8:	f001 fdfe 	bl	800eda8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d1b2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d1b4:	e011      	b.n	800d1da <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d012      	beq.n	800d1e4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	3324      	adds	r3, #36	@ 0x24
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	f000 fdbe 	bl	800dd44 <xTaskRemoveFromEventList>
 800d1c8:	4603      	mov	r3, r0
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d001      	beq.n	800d1d2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d1ce:	f000 fe97 	bl	800df00 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d1d2:	7bfb      	ldrb	r3, [r7, #15]
 800d1d4:	3b01      	subs	r3, #1
 800d1d6:	b2db      	uxtb	r3, r3
 800d1d8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d1da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	dce9      	bgt.n	800d1b6 <prvUnlockQueue+0x16>
 800d1e2:	e000      	b.n	800d1e6 <prvUnlockQueue+0x46>
					break;
 800d1e4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	22ff      	movs	r2, #255	@ 0xff
 800d1ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800d1ee:	f001 fe0d 	bl	800ee0c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d1f2:	f001 fdd9 	bl	800eda8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d1fc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d1fe:	e011      	b.n	800d224 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	691b      	ldr	r3, [r3, #16]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d012      	beq.n	800d22e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	3310      	adds	r3, #16
 800d20c:	4618      	mov	r0, r3
 800d20e:	f000 fd99 	bl	800dd44 <xTaskRemoveFromEventList>
 800d212:	4603      	mov	r3, r0
 800d214:	2b00      	cmp	r3, #0
 800d216:	d001      	beq.n	800d21c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d218:	f000 fe72 	bl	800df00 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d21c:	7bbb      	ldrb	r3, [r7, #14]
 800d21e:	3b01      	subs	r3, #1
 800d220:	b2db      	uxtb	r3, r3
 800d222:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d224:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	dce9      	bgt.n	800d200 <prvUnlockQueue+0x60>
 800d22c:	e000      	b.n	800d230 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d22e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	22ff      	movs	r2, #255	@ 0xff
 800d234:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800d238:	f001 fde8 	bl	800ee0c <vPortExitCritical>
}
 800d23c:	bf00      	nop
 800d23e:	3710      	adds	r7, #16
 800d240:	46bd      	mov	sp, r7
 800d242:	bd80      	pop	{r7, pc}

0800d244 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b084      	sub	sp, #16
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d24c:	f001 fdac 	bl	800eda8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d254:	2b00      	cmp	r3, #0
 800d256:	d102      	bne.n	800d25e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d258:	2301      	movs	r3, #1
 800d25a:	60fb      	str	r3, [r7, #12]
 800d25c:	e001      	b.n	800d262 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d25e:	2300      	movs	r3, #0
 800d260:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d262:	f001 fdd3 	bl	800ee0c <vPortExitCritical>

	return xReturn;
 800d266:	68fb      	ldr	r3, [r7, #12]
}
 800d268:	4618      	mov	r0, r3
 800d26a:	3710      	adds	r7, #16
 800d26c:	46bd      	mov	sp, r7
 800d26e:	bd80      	pop	{r7, pc}

0800d270 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b084      	sub	sp, #16
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d278:	f001 fd96 	bl	800eda8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d284:	429a      	cmp	r2, r3
 800d286:	d102      	bne.n	800d28e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d288:	2301      	movs	r3, #1
 800d28a:	60fb      	str	r3, [r7, #12]
 800d28c:	e001      	b.n	800d292 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d28e:	2300      	movs	r3, #0
 800d290:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d292:	f001 fdbb 	bl	800ee0c <vPortExitCritical>

	return xReturn;
 800d296:	68fb      	ldr	r3, [r7, #12]
}
 800d298:	4618      	mov	r0, r3
 800d29a:	3710      	adds	r7, #16
 800d29c:	46bd      	mov	sp, r7
 800d29e:	bd80      	pop	{r7, pc}

0800d2a0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d2a0:	b480      	push	{r7}
 800d2a2:	b085      	sub	sp, #20
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
 800d2a8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	60fb      	str	r3, [r7, #12]
 800d2ae:	e014      	b.n	800d2da <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d2b0:	4a0f      	ldr	r2, [pc, #60]	@ (800d2f0 <vQueueAddToRegistry+0x50>)
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d10b      	bne.n	800d2d4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d2bc:	490c      	ldr	r1, [pc, #48]	@ (800d2f0 <vQueueAddToRegistry+0x50>)
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	683a      	ldr	r2, [r7, #0]
 800d2c2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d2c6:	4a0a      	ldr	r2, [pc, #40]	@ (800d2f0 <vQueueAddToRegistry+0x50>)
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	00db      	lsls	r3, r3, #3
 800d2cc:	4413      	add	r3, r2
 800d2ce:	687a      	ldr	r2, [r7, #4]
 800d2d0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d2d2:	e006      	b.n	800d2e2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	3301      	adds	r3, #1
 800d2d8:	60fb      	str	r3, [r7, #12]
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	2b07      	cmp	r3, #7
 800d2de:	d9e7      	bls.n	800d2b0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d2e0:	bf00      	nop
 800d2e2:	bf00      	nop
 800d2e4:	3714      	adds	r7, #20
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ec:	4770      	bx	lr
 800d2ee:	bf00      	nop
 800d2f0:	20001f20 	.word	0x20001f20

0800d2f4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d2f4:	b480      	push	{r7}
 800d2f6:	b085      	sub	sp, #20
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	60fb      	str	r3, [r7, #12]
 800d300:	e016      	b.n	800d330 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d302:	4a10      	ldr	r2, [pc, #64]	@ (800d344 <vQueueUnregisterQueue+0x50>)
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	00db      	lsls	r3, r3, #3
 800d308:	4413      	add	r3, r2
 800d30a:	685b      	ldr	r3, [r3, #4]
 800d30c:	687a      	ldr	r2, [r7, #4]
 800d30e:	429a      	cmp	r2, r3
 800d310:	d10b      	bne.n	800d32a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d312:	4a0c      	ldr	r2, [pc, #48]	@ (800d344 <vQueueUnregisterQueue+0x50>)
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	2100      	movs	r1, #0
 800d318:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d31c:	4a09      	ldr	r2, [pc, #36]	@ (800d344 <vQueueUnregisterQueue+0x50>)
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	00db      	lsls	r3, r3, #3
 800d322:	4413      	add	r3, r2
 800d324:	2200      	movs	r2, #0
 800d326:	605a      	str	r2, [r3, #4]
				break;
 800d328:	e006      	b.n	800d338 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	3301      	adds	r3, #1
 800d32e:	60fb      	str	r3, [r7, #12]
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	2b07      	cmp	r3, #7
 800d334:	d9e5      	bls.n	800d302 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d336:	bf00      	nop
 800d338:	bf00      	nop
 800d33a:	3714      	adds	r7, #20
 800d33c:	46bd      	mov	sp, r7
 800d33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d342:	4770      	bx	lr
 800d344:	20001f20 	.word	0x20001f20

0800d348 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d348:	b580      	push	{r7, lr}
 800d34a:	b086      	sub	sp, #24
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	60f8      	str	r0, [r7, #12]
 800d350:	60b9      	str	r1, [r7, #8]
 800d352:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d358:	f001 fd26 	bl	800eda8 <vPortEnterCritical>
 800d35c:	697b      	ldr	r3, [r7, #20]
 800d35e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d362:	b25b      	sxtb	r3, r3
 800d364:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d368:	d103      	bne.n	800d372 <vQueueWaitForMessageRestricted+0x2a>
 800d36a:	697b      	ldr	r3, [r7, #20]
 800d36c:	2200      	movs	r2, #0
 800d36e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d372:	697b      	ldr	r3, [r7, #20]
 800d374:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d378:	b25b      	sxtb	r3, r3
 800d37a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d37e:	d103      	bne.n	800d388 <vQueueWaitForMessageRestricted+0x40>
 800d380:	697b      	ldr	r3, [r7, #20]
 800d382:	2200      	movs	r2, #0
 800d384:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d388:	f001 fd40 	bl	800ee0c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d38c:	697b      	ldr	r3, [r7, #20]
 800d38e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d390:	2b00      	cmp	r3, #0
 800d392:	d106      	bne.n	800d3a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d394:	697b      	ldr	r3, [r7, #20]
 800d396:	3324      	adds	r3, #36	@ 0x24
 800d398:	687a      	ldr	r2, [r7, #4]
 800d39a:	68b9      	ldr	r1, [r7, #8]
 800d39c:	4618      	mov	r0, r3
 800d39e:	f000 fca5 	bl	800dcec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d3a2:	6978      	ldr	r0, [r7, #20]
 800d3a4:	f7ff fefc 	bl	800d1a0 <prvUnlockQueue>
	}
 800d3a8:	bf00      	nop
 800d3aa:	3718      	adds	r7, #24
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	bd80      	pop	{r7, pc}

0800d3b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d3b0:	b580      	push	{r7, lr}
 800d3b2:	b08e      	sub	sp, #56	@ 0x38
 800d3b4:	af04      	add	r7, sp, #16
 800d3b6:	60f8      	str	r0, [r7, #12]
 800d3b8:	60b9      	str	r1, [r7, #8]
 800d3ba:	607a      	str	r2, [r7, #4]
 800d3bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d3be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d10b      	bne.n	800d3dc <xTaskCreateStatic+0x2c>
	__asm volatile
 800d3c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3c8:	f383 8811 	msr	BASEPRI, r3
 800d3cc:	f3bf 8f6f 	isb	sy
 800d3d0:	f3bf 8f4f 	dsb	sy
 800d3d4:	623b      	str	r3, [r7, #32]
}
 800d3d6:	bf00      	nop
 800d3d8:	bf00      	nop
 800d3da:	e7fd      	b.n	800d3d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d3dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d10b      	bne.n	800d3fa <xTaskCreateStatic+0x4a>
	__asm volatile
 800d3e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3e6:	f383 8811 	msr	BASEPRI, r3
 800d3ea:	f3bf 8f6f 	isb	sy
 800d3ee:	f3bf 8f4f 	dsb	sy
 800d3f2:	61fb      	str	r3, [r7, #28]
}
 800d3f4:	bf00      	nop
 800d3f6:	bf00      	nop
 800d3f8:	e7fd      	b.n	800d3f6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d3fa:	23ac      	movs	r3, #172	@ 0xac
 800d3fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d3fe:	693b      	ldr	r3, [r7, #16]
 800d400:	2bac      	cmp	r3, #172	@ 0xac
 800d402:	d00b      	beq.n	800d41c <xTaskCreateStatic+0x6c>
	__asm volatile
 800d404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d408:	f383 8811 	msr	BASEPRI, r3
 800d40c:	f3bf 8f6f 	isb	sy
 800d410:	f3bf 8f4f 	dsb	sy
 800d414:	61bb      	str	r3, [r7, #24]
}
 800d416:	bf00      	nop
 800d418:	bf00      	nop
 800d41a:	e7fd      	b.n	800d418 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d41c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d41e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d420:	2b00      	cmp	r3, #0
 800d422:	d01e      	beq.n	800d462 <xTaskCreateStatic+0xb2>
 800d424:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d426:	2b00      	cmp	r3, #0
 800d428:	d01b      	beq.n	800d462 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d42a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d42c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d42e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d430:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d432:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d436:	2202      	movs	r2, #2
 800d438:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d43c:	2300      	movs	r3, #0
 800d43e:	9303      	str	r3, [sp, #12]
 800d440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d442:	9302      	str	r3, [sp, #8]
 800d444:	f107 0314 	add.w	r3, r7, #20
 800d448:	9301      	str	r3, [sp, #4]
 800d44a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d44c:	9300      	str	r3, [sp, #0]
 800d44e:	683b      	ldr	r3, [r7, #0]
 800d450:	687a      	ldr	r2, [r7, #4]
 800d452:	68b9      	ldr	r1, [r7, #8]
 800d454:	68f8      	ldr	r0, [r7, #12]
 800d456:	f000 f851 	bl	800d4fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d45a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d45c:	f000 f8f8 	bl	800d650 <prvAddNewTaskToReadyList>
 800d460:	e001      	b.n	800d466 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d462:	2300      	movs	r3, #0
 800d464:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d466:	697b      	ldr	r3, [r7, #20]
	}
 800d468:	4618      	mov	r0, r3
 800d46a:	3728      	adds	r7, #40	@ 0x28
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bd80      	pop	{r7, pc}

0800d470 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d470:	b580      	push	{r7, lr}
 800d472:	b08c      	sub	sp, #48	@ 0x30
 800d474:	af04      	add	r7, sp, #16
 800d476:	60f8      	str	r0, [r7, #12]
 800d478:	60b9      	str	r1, [r7, #8]
 800d47a:	603b      	str	r3, [r7, #0]
 800d47c:	4613      	mov	r3, r2
 800d47e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d480:	88fb      	ldrh	r3, [r7, #6]
 800d482:	009b      	lsls	r3, r3, #2
 800d484:	4618      	mov	r0, r3
 800d486:	f001 fdb1 	bl	800efec <pvPortMalloc>
 800d48a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d48c:	697b      	ldr	r3, [r7, #20]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d00e      	beq.n	800d4b0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d492:	20ac      	movs	r0, #172	@ 0xac
 800d494:	f001 fdaa 	bl	800efec <pvPortMalloc>
 800d498:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d49a:	69fb      	ldr	r3, [r7, #28]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d003      	beq.n	800d4a8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d4a0:	69fb      	ldr	r3, [r7, #28]
 800d4a2:	697a      	ldr	r2, [r7, #20]
 800d4a4:	631a      	str	r2, [r3, #48]	@ 0x30
 800d4a6:	e005      	b.n	800d4b4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d4a8:	6978      	ldr	r0, [r7, #20]
 800d4aa:	f001 fe73 	bl	800f194 <vPortFree>
 800d4ae:	e001      	b.n	800d4b4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d4b4:	69fb      	ldr	r3, [r7, #28]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d017      	beq.n	800d4ea <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d4ba:	69fb      	ldr	r3, [r7, #28]
 800d4bc:	2200      	movs	r2, #0
 800d4be:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d4c2:	88fa      	ldrh	r2, [r7, #6]
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	9303      	str	r3, [sp, #12]
 800d4c8:	69fb      	ldr	r3, [r7, #28]
 800d4ca:	9302      	str	r3, [sp, #8]
 800d4cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4ce:	9301      	str	r3, [sp, #4]
 800d4d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4d2:	9300      	str	r3, [sp, #0]
 800d4d4:	683b      	ldr	r3, [r7, #0]
 800d4d6:	68b9      	ldr	r1, [r7, #8]
 800d4d8:	68f8      	ldr	r0, [r7, #12]
 800d4da:	f000 f80f 	bl	800d4fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d4de:	69f8      	ldr	r0, [r7, #28]
 800d4e0:	f000 f8b6 	bl	800d650 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d4e4:	2301      	movs	r3, #1
 800d4e6:	61bb      	str	r3, [r7, #24]
 800d4e8:	e002      	b.n	800d4f0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d4ea:	f04f 33ff 	mov.w	r3, #4294967295
 800d4ee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d4f0:	69bb      	ldr	r3, [r7, #24]
	}
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	3720      	adds	r7, #32
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	bd80      	pop	{r7, pc}
	...

0800d4fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	b088      	sub	sp, #32
 800d500:	af00      	add	r7, sp, #0
 800d502:	60f8      	str	r0, [r7, #12]
 800d504:	60b9      	str	r1, [r7, #8]
 800d506:	607a      	str	r2, [r7, #4]
 800d508:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d50a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d50c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	009b      	lsls	r3, r3, #2
 800d512:	461a      	mov	r2, r3
 800d514:	21a5      	movs	r1, #165	@ 0xa5
 800d516:	f003 f9e3 	bl	80108e0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d51a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d51c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d524:	3b01      	subs	r3, #1
 800d526:	009b      	lsls	r3, r3, #2
 800d528:	4413      	add	r3, r2
 800d52a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d52c:	69bb      	ldr	r3, [r7, #24]
 800d52e:	f023 0307 	bic.w	r3, r3, #7
 800d532:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d534:	69bb      	ldr	r3, [r7, #24]
 800d536:	f003 0307 	and.w	r3, r3, #7
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d00b      	beq.n	800d556 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800d53e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d542:	f383 8811 	msr	BASEPRI, r3
 800d546:	f3bf 8f6f 	isb	sy
 800d54a:	f3bf 8f4f 	dsb	sy
 800d54e:	617b      	str	r3, [r7, #20]
}
 800d550:	bf00      	nop
 800d552:	bf00      	nop
 800d554:	e7fd      	b.n	800d552 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d556:	68bb      	ldr	r3, [r7, #8]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d01f      	beq.n	800d59c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d55c:	2300      	movs	r3, #0
 800d55e:	61fb      	str	r3, [r7, #28]
 800d560:	e012      	b.n	800d588 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d562:	68ba      	ldr	r2, [r7, #8]
 800d564:	69fb      	ldr	r3, [r7, #28]
 800d566:	4413      	add	r3, r2
 800d568:	7819      	ldrb	r1, [r3, #0]
 800d56a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d56c:	69fb      	ldr	r3, [r7, #28]
 800d56e:	4413      	add	r3, r2
 800d570:	3334      	adds	r3, #52	@ 0x34
 800d572:	460a      	mov	r2, r1
 800d574:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d576:	68ba      	ldr	r2, [r7, #8]
 800d578:	69fb      	ldr	r3, [r7, #28]
 800d57a:	4413      	add	r3, r2
 800d57c:	781b      	ldrb	r3, [r3, #0]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d006      	beq.n	800d590 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d582:	69fb      	ldr	r3, [r7, #28]
 800d584:	3301      	adds	r3, #1
 800d586:	61fb      	str	r3, [r7, #28]
 800d588:	69fb      	ldr	r3, [r7, #28]
 800d58a:	2b0f      	cmp	r3, #15
 800d58c:	d9e9      	bls.n	800d562 <prvInitialiseNewTask+0x66>
 800d58e:	e000      	b.n	800d592 <prvInitialiseNewTask+0x96>
			{
				break;
 800d590:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d594:	2200      	movs	r2, #0
 800d596:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d59a:	e003      	b.n	800d5a4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d59c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d59e:	2200      	movs	r2, #0
 800d5a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d5a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5a6:	2b37      	cmp	r3, #55	@ 0x37
 800d5a8:	d901      	bls.n	800d5ae <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d5aa:	2337      	movs	r3, #55	@ 0x37
 800d5ac:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d5ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d5b2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d5b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d5b8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d5ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5bc:	2200      	movs	r2, #0
 800d5be:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d5c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5c2:	3304      	adds	r3, #4
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	f7fe fe33 	bl	800c230 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d5ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5cc:	3318      	adds	r3, #24
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	f7fe fe2e 	bl	800c230 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d5d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d5d8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d5da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5dc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d5e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5e2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d5e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d5e8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800d5ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5ec:	2200      	movs	r2, #0
 800d5ee:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d5f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d5f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5fa:	2200      	movs	r2, #0
 800d5fc:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d602:	3358      	adds	r3, #88	@ 0x58
 800d604:	224c      	movs	r2, #76	@ 0x4c
 800d606:	2100      	movs	r1, #0
 800d608:	4618      	mov	r0, r3
 800d60a:	f003 f969 	bl	80108e0 <memset>
 800d60e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d610:	4a0c      	ldr	r2, [pc, #48]	@ (800d644 <prvInitialiseNewTask+0x148>)
 800d612:	65da      	str	r2, [r3, #92]	@ 0x5c
 800d614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d616:	4a0c      	ldr	r2, [pc, #48]	@ (800d648 <prvInitialiseNewTask+0x14c>)
 800d618:	661a      	str	r2, [r3, #96]	@ 0x60
 800d61a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d61c:	4a0b      	ldr	r2, [pc, #44]	@ (800d64c <prvInitialiseNewTask+0x150>)
 800d61e:	665a      	str	r2, [r3, #100]	@ 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d620:	683a      	ldr	r2, [r7, #0]
 800d622:	68f9      	ldr	r1, [r7, #12]
 800d624:	69b8      	ldr	r0, [r7, #24]
 800d626:	f001 fa91 	bl	800eb4c <pxPortInitialiseStack>
 800d62a:	4602      	mov	r2, r0
 800d62c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d62e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d632:	2b00      	cmp	r3, #0
 800d634:	d002      	beq.n	800d63c <prvInitialiseNewTask+0x140>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d638:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d63a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d63c:	bf00      	nop
 800d63e:	3720      	adds	r7, #32
 800d640:	46bd      	mov	sp, r7
 800d642:	bd80      	pop	{r7, pc}
 800d644:	2000a5b4 	.word	0x2000a5b4
 800d648:	2000a61c 	.word	0x2000a61c
 800d64c:	2000a684 	.word	0x2000a684

0800d650 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b082      	sub	sp, #8
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d658:	f001 fba6 	bl	800eda8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d65c:	4b2d      	ldr	r3, [pc, #180]	@ (800d714 <prvAddNewTaskToReadyList+0xc4>)
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	3301      	adds	r3, #1
 800d662:	4a2c      	ldr	r2, [pc, #176]	@ (800d714 <prvAddNewTaskToReadyList+0xc4>)
 800d664:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d666:	4b2c      	ldr	r3, [pc, #176]	@ (800d718 <prvAddNewTaskToReadyList+0xc8>)
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d109      	bne.n	800d682 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d66e:	4a2a      	ldr	r2, [pc, #168]	@ (800d718 <prvAddNewTaskToReadyList+0xc8>)
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d674:	4b27      	ldr	r3, [pc, #156]	@ (800d714 <prvAddNewTaskToReadyList+0xc4>)
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	2b01      	cmp	r3, #1
 800d67a:	d110      	bne.n	800d69e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d67c:	f000 fc66 	bl	800df4c <prvInitialiseTaskLists>
 800d680:	e00d      	b.n	800d69e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d682:	4b26      	ldr	r3, [pc, #152]	@ (800d71c <prvAddNewTaskToReadyList+0xcc>)
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d109      	bne.n	800d69e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d68a:	4b23      	ldr	r3, [pc, #140]	@ (800d718 <prvAddNewTaskToReadyList+0xc8>)
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d694:	429a      	cmp	r2, r3
 800d696:	d802      	bhi.n	800d69e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d698:	4a1f      	ldr	r2, [pc, #124]	@ (800d718 <prvAddNewTaskToReadyList+0xc8>)
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d69e:	4b20      	ldr	r3, [pc, #128]	@ (800d720 <prvAddNewTaskToReadyList+0xd0>)
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	3301      	adds	r3, #1
 800d6a4:	4a1e      	ldr	r2, [pc, #120]	@ (800d720 <prvAddNewTaskToReadyList+0xd0>)
 800d6a6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d6a8:	4b1d      	ldr	r3, [pc, #116]	@ (800d720 <prvAddNewTaskToReadyList+0xd0>)
 800d6aa:	681a      	ldr	r2, [r3, #0]
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d6b4:	4b1b      	ldr	r3, [pc, #108]	@ (800d724 <prvAddNewTaskToReadyList+0xd4>)
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	429a      	cmp	r2, r3
 800d6ba:	d903      	bls.n	800d6c4 <prvAddNewTaskToReadyList+0x74>
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6c0:	4a18      	ldr	r2, [pc, #96]	@ (800d724 <prvAddNewTaskToReadyList+0xd4>)
 800d6c2:	6013      	str	r3, [r2, #0]
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d6c8:	4613      	mov	r3, r2
 800d6ca:	009b      	lsls	r3, r3, #2
 800d6cc:	4413      	add	r3, r2
 800d6ce:	009b      	lsls	r3, r3, #2
 800d6d0:	4a15      	ldr	r2, [pc, #84]	@ (800d728 <prvAddNewTaskToReadyList+0xd8>)
 800d6d2:	441a      	add	r2, r3
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	3304      	adds	r3, #4
 800d6d8:	4619      	mov	r1, r3
 800d6da:	4610      	mov	r0, r2
 800d6dc:	f7fe fdb5 	bl	800c24a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d6e0:	f001 fb94 	bl	800ee0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d6e4:	4b0d      	ldr	r3, [pc, #52]	@ (800d71c <prvAddNewTaskToReadyList+0xcc>)
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d00e      	beq.n	800d70a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d6ec:	4b0a      	ldr	r3, [pc, #40]	@ (800d718 <prvAddNewTaskToReadyList+0xc8>)
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6f6:	429a      	cmp	r2, r3
 800d6f8:	d207      	bcs.n	800d70a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d6fa:	4b0c      	ldr	r3, [pc, #48]	@ (800d72c <prvAddNewTaskToReadyList+0xdc>)
 800d6fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d700:	601a      	str	r2, [r3, #0]
 800d702:	f3bf 8f4f 	dsb	sy
 800d706:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d70a:	bf00      	nop
 800d70c:	3708      	adds	r7, #8
 800d70e:	46bd      	mov	sp, r7
 800d710:	bd80      	pop	{r7, pc}
 800d712:	bf00      	nop
 800d714:	20002434 	.word	0x20002434
 800d718:	20001f60 	.word	0x20001f60
 800d71c:	20002440 	.word	0x20002440
 800d720:	20002450 	.word	0x20002450
 800d724:	2000243c 	.word	0x2000243c
 800d728:	20001f64 	.word	0x20001f64
 800d72c:	e000ed04 	.word	0xe000ed04

0800d730 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d730:	b580      	push	{r7, lr}
 800d732:	b084      	sub	sp, #16
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d738:	2300      	movs	r3, #0
 800d73a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d018      	beq.n	800d774 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d742:	4b14      	ldr	r3, [pc, #80]	@ (800d794 <vTaskDelay+0x64>)
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d00b      	beq.n	800d762 <vTaskDelay+0x32>
	__asm volatile
 800d74a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d74e:	f383 8811 	msr	BASEPRI, r3
 800d752:	f3bf 8f6f 	isb	sy
 800d756:	f3bf 8f4f 	dsb	sy
 800d75a:	60bb      	str	r3, [r7, #8]
}
 800d75c:	bf00      	nop
 800d75e:	bf00      	nop
 800d760:	e7fd      	b.n	800d75e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d762:	f000 f88b 	bl	800d87c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d766:	2100      	movs	r1, #0
 800d768:	6878      	ldr	r0, [r7, #4]
 800d76a:	f000 fe41 	bl	800e3f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d76e:	f000 f893 	bl	800d898 <xTaskResumeAll>
 800d772:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d107      	bne.n	800d78a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800d77a:	4b07      	ldr	r3, [pc, #28]	@ (800d798 <vTaskDelay+0x68>)
 800d77c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d780:	601a      	str	r2, [r3, #0]
 800d782:	f3bf 8f4f 	dsb	sy
 800d786:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d78a:	bf00      	nop
 800d78c:	3710      	adds	r7, #16
 800d78e:	46bd      	mov	sp, r7
 800d790:	bd80      	pop	{r7, pc}
 800d792:	bf00      	nop
 800d794:	2000245c 	.word	0x2000245c
 800d798:	e000ed04 	.word	0xe000ed04

0800d79c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b08a      	sub	sp, #40	@ 0x28
 800d7a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d7aa:	463a      	mov	r2, r7
 800d7ac:	1d39      	adds	r1, r7, #4
 800d7ae:	f107 0308 	add.w	r3, r7, #8
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	f7fe fce8 	bl	800c188 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d7b8:	6839      	ldr	r1, [r7, #0]
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	68ba      	ldr	r2, [r7, #8]
 800d7be:	9202      	str	r2, [sp, #8]
 800d7c0:	9301      	str	r3, [sp, #4]
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	9300      	str	r3, [sp, #0]
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	460a      	mov	r2, r1
 800d7ca:	4924      	ldr	r1, [pc, #144]	@ (800d85c <vTaskStartScheduler+0xc0>)
 800d7cc:	4824      	ldr	r0, [pc, #144]	@ (800d860 <vTaskStartScheduler+0xc4>)
 800d7ce:	f7ff fdef 	bl	800d3b0 <xTaskCreateStatic>
 800d7d2:	4603      	mov	r3, r0
 800d7d4:	4a23      	ldr	r2, [pc, #140]	@ (800d864 <vTaskStartScheduler+0xc8>)
 800d7d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d7d8:	4b22      	ldr	r3, [pc, #136]	@ (800d864 <vTaskStartScheduler+0xc8>)
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d002      	beq.n	800d7e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d7e0:	2301      	movs	r3, #1
 800d7e2:	617b      	str	r3, [r7, #20]
 800d7e4:	e001      	b.n	800d7ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d7ea:	697b      	ldr	r3, [r7, #20]
 800d7ec:	2b01      	cmp	r3, #1
 800d7ee:	d102      	bne.n	800d7f6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d7f0:	f000 fe52 	bl	800e498 <xTimerCreateTimerTask>
 800d7f4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d7f6:	697b      	ldr	r3, [r7, #20]
 800d7f8:	2b01      	cmp	r3, #1
 800d7fa:	d11b      	bne.n	800d834 <vTaskStartScheduler+0x98>
	__asm volatile
 800d7fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d800:	f383 8811 	msr	BASEPRI, r3
 800d804:	f3bf 8f6f 	isb	sy
 800d808:	f3bf 8f4f 	dsb	sy
 800d80c:	613b      	str	r3, [r7, #16]
}
 800d80e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d810:	4b15      	ldr	r3, [pc, #84]	@ (800d868 <vTaskStartScheduler+0xcc>)
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	3358      	adds	r3, #88	@ 0x58
 800d816:	4a15      	ldr	r2, [pc, #84]	@ (800d86c <vTaskStartScheduler+0xd0>)
 800d818:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d81a:	4b15      	ldr	r3, [pc, #84]	@ (800d870 <vTaskStartScheduler+0xd4>)
 800d81c:	f04f 32ff 	mov.w	r2, #4294967295
 800d820:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d822:	4b14      	ldr	r3, [pc, #80]	@ (800d874 <vTaskStartScheduler+0xd8>)
 800d824:	2201      	movs	r2, #1
 800d826:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d828:	4b13      	ldr	r3, [pc, #76]	@ (800d878 <vTaskStartScheduler+0xdc>)
 800d82a:	2200      	movs	r2, #0
 800d82c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d82e:	f001 fa17 	bl	800ec60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d832:	e00f      	b.n	800d854 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d834:	697b      	ldr	r3, [r7, #20]
 800d836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d83a:	d10b      	bne.n	800d854 <vTaskStartScheduler+0xb8>
	__asm volatile
 800d83c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d840:	f383 8811 	msr	BASEPRI, r3
 800d844:	f3bf 8f6f 	isb	sy
 800d848:	f3bf 8f4f 	dsb	sy
 800d84c:	60fb      	str	r3, [r7, #12]
}
 800d84e:	bf00      	nop
 800d850:	bf00      	nop
 800d852:	e7fd      	b.n	800d850 <vTaskStartScheduler+0xb4>
}
 800d854:	bf00      	nop
 800d856:	3718      	adds	r7, #24
 800d858:	46bd      	mov	sp, r7
 800d85a:	bd80      	pop	{r7, pc}
 800d85c:	08012030 	.word	0x08012030
 800d860:	0800df19 	.word	0x0800df19
 800d864:	20002458 	.word	0x20002458
 800d868:	20001f60 	.word	0x20001f60
 800d86c:	2000001c 	.word	0x2000001c
 800d870:	20002454 	.word	0x20002454
 800d874:	20002440 	.word	0x20002440
 800d878:	20002438 	.word	0x20002438

0800d87c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d87c:	b480      	push	{r7}
 800d87e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d880:	4b04      	ldr	r3, [pc, #16]	@ (800d894 <vTaskSuspendAll+0x18>)
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	3301      	adds	r3, #1
 800d886:	4a03      	ldr	r2, [pc, #12]	@ (800d894 <vTaskSuspendAll+0x18>)
 800d888:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d88a:	bf00      	nop
 800d88c:	46bd      	mov	sp, r7
 800d88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d892:	4770      	bx	lr
 800d894:	2000245c 	.word	0x2000245c

0800d898 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b084      	sub	sp, #16
 800d89c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d89e:	2300      	movs	r3, #0
 800d8a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d8a6:	4b42      	ldr	r3, [pc, #264]	@ (800d9b0 <xTaskResumeAll+0x118>)
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d10b      	bne.n	800d8c6 <xTaskResumeAll+0x2e>
	__asm volatile
 800d8ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8b2:	f383 8811 	msr	BASEPRI, r3
 800d8b6:	f3bf 8f6f 	isb	sy
 800d8ba:	f3bf 8f4f 	dsb	sy
 800d8be:	603b      	str	r3, [r7, #0]
}
 800d8c0:	bf00      	nop
 800d8c2:	bf00      	nop
 800d8c4:	e7fd      	b.n	800d8c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d8c6:	f001 fa6f 	bl	800eda8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d8ca:	4b39      	ldr	r3, [pc, #228]	@ (800d9b0 <xTaskResumeAll+0x118>)
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	3b01      	subs	r3, #1
 800d8d0:	4a37      	ldr	r2, [pc, #220]	@ (800d9b0 <xTaskResumeAll+0x118>)
 800d8d2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d8d4:	4b36      	ldr	r3, [pc, #216]	@ (800d9b0 <xTaskResumeAll+0x118>)
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d162      	bne.n	800d9a2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d8dc:	4b35      	ldr	r3, [pc, #212]	@ (800d9b4 <xTaskResumeAll+0x11c>)
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d05e      	beq.n	800d9a2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d8e4:	e02f      	b.n	800d946 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d8e6:	4b34      	ldr	r3, [pc, #208]	@ (800d9b8 <xTaskResumeAll+0x120>)
 800d8e8:	68db      	ldr	r3, [r3, #12]
 800d8ea:	68db      	ldr	r3, [r3, #12]
 800d8ec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	3318      	adds	r3, #24
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	f7fe fd06 	bl	800c304 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	3304      	adds	r3, #4
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	f7fe fd01 	bl	800c304 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d906:	4b2d      	ldr	r3, [pc, #180]	@ (800d9bc <xTaskResumeAll+0x124>)
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	429a      	cmp	r2, r3
 800d90c:	d903      	bls.n	800d916 <xTaskResumeAll+0x7e>
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d912:	4a2a      	ldr	r2, [pc, #168]	@ (800d9bc <xTaskResumeAll+0x124>)
 800d914:	6013      	str	r3, [r2, #0]
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d91a:	4613      	mov	r3, r2
 800d91c:	009b      	lsls	r3, r3, #2
 800d91e:	4413      	add	r3, r2
 800d920:	009b      	lsls	r3, r3, #2
 800d922:	4a27      	ldr	r2, [pc, #156]	@ (800d9c0 <xTaskResumeAll+0x128>)
 800d924:	441a      	add	r2, r3
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	3304      	adds	r3, #4
 800d92a:	4619      	mov	r1, r3
 800d92c:	4610      	mov	r0, r2
 800d92e:	f7fe fc8c 	bl	800c24a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d936:	4b23      	ldr	r3, [pc, #140]	@ (800d9c4 <xTaskResumeAll+0x12c>)
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d93c:	429a      	cmp	r2, r3
 800d93e:	d302      	bcc.n	800d946 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800d940:	4b21      	ldr	r3, [pc, #132]	@ (800d9c8 <xTaskResumeAll+0x130>)
 800d942:	2201      	movs	r2, #1
 800d944:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d946:	4b1c      	ldr	r3, [pc, #112]	@ (800d9b8 <xTaskResumeAll+0x120>)
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d1cb      	bne.n	800d8e6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d001      	beq.n	800d958 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d954:	f000 fb9e 	bl	800e094 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d958:	4b1c      	ldr	r3, [pc, #112]	@ (800d9cc <xTaskResumeAll+0x134>)
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d010      	beq.n	800d986 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d964:	f000 f858 	bl	800da18 <xTaskIncrementTick>
 800d968:	4603      	mov	r3, r0
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d002      	beq.n	800d974 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800d96e:	4b16      	ldr	r3, [pc, #88]	@ (800d9c8 <xTaskResumeAll+0x130>)
 800d970:	2201      	movs	r2, #1
 800d972:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	3b01      	subs	r3, #1
 800d978:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d1f1      	bne.n	800d964 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800d980:	4b12      	ldr	r3, [pc, #72]	@ (800d9cc <xTaskResumeAll+0x134>)
 800d982:	2200      	movs	r2, #0
 800d984:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d986:	4b10      	ldr	r3, [pc, #64]	@ (800d9c8 <xTaskResumeAll+0x130>)
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d009      	beq.n	800d9a2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d98e:	2301      	movs	r3, #1
 800d990:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d992:	4b0f      	ldr	r3, [pc, #60]	@ (800d9d0 <xTaskResumeAll+0x138>)
 800d994:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d998:	601a      	str	r2, [r3, #0]
 800d99a:	f3bf 8f4f 	dsb	sy
 800d99e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d9a2:	f001 fa33 	bl	800ee0c <vPortExitCritical>

	return xAlreadyYielded;
 800d9a6:	68bb      	ldr	r3, [r7, #8]
}
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	3710      	adds	r7, #16
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	bd80      	pop	{r7, pc}
 800d9b0:	2000245c 	.word	0x2000245c
 800d9b4:	20002434 	.word	0x20002434
 800d9b8:	200023f4 	.word	0x200023f4
 800d9bc:	2000243c 	.word	0x2000243c
 800d9c0:	20001f64 	.word	0x20001f64
 800d9c4:	20001f60 	.word	0x20001f60
 800d9c8:	20002448 	.word	0x20002448
 800d9cc:	20002444 	.word	0x20002444
 800d9d0:	e000ed04 	.word	0xe000ed04

0800d9d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d9d4:	b480      	push	{r7}
 800d9d6:	b083      	sub	sp, #12
 800d9d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d9da:	4b05      	ldr	r3, [pc, #20]	@ (800d9f0 <xTaskGetTickCount+0x1c>)
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d9e0:	687b      	ldr	r3, [r7, #4]
}
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	370c      	adds	r7, #12
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ec:	4770      	bx	lr
 800d9ee:	bf00      	nop
 800d9f0:	20002438 	.word	0x20002438

0800d9f4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b082      	sub	sp, #8
 800d9f8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d9fa:	f001 fab5 	bl	800ef68 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800d9fe:	2300      	movs	r3, #0
 800da00:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800da02:	4b04      	ldr	r3, [pc, #16]	@ (800da14 <xTaskGetTickCountFromISR+0x20>)
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800da08:	683b      	ldr	r3, [r7, #0]
}
 800da0a:	4618      	mov	r0, r3
 800da0c:	3708      	adds	r7, #8
 800da0e:	46bd      	mov	sp, r7
 800da10:	bd80      	pop	{r7, pc}
 800da12:	bf00      	nop
 800da14:	20002438 	.word	0x20002438

0800da18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b086      	sub	sp, #24
 800da1c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800da1e:	2300      	movs	r3, #0
 800da20:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800da22:	4b4f      	ldr	r3, [pc, #316]	@ (800db60 <xTaskIncrementTick+0x148>)
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	2b00      	cmp	r3, #0
 800da28:	f040 8090 	bne.w	800db4c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800da2c:	4b4d      	ldr	r3, [pc, #308]	@ (800db64 <xTaskIncrementTick+0x14c>)
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	3301      	adds	r3, #1
 800da32:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800da34:	4a4b      	ldr	r2, [pc, #300]	@ (800db64 <xTaskIncrementTick+0x14c>)
 800da36:	693b      	ldr	r3, [r7, #16]
 800da38:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800da3a:	693b      	ldr	r3, [r7, #16]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d121      	bne.n	800da84 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800da40:	4b49      	ldr	r3, [pc, #292]	@ (800db68 <xTaskIncrementTick+0x150>)
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d00b      	beq.n	800da62 <xTaskIncrementTick+0x4a>
	__asm volatile
 800da4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da4e:	f383 8811 	msr	BASEPRI, r3
 800da52:	f3bf 8f6f 	isb	sy
 800da56:	f3bf 8f4f 	dsb	sy
 800da5a:	603b      	str	r3, [r7, #0]
}
 800da5c:	bf00      	nop
 800da5e:	bf00      	nop
 800da60:	e7fd      	b.n	800da5e <xTaskIncrementTick+0x46>
 800da62:	4b41      	ldr	r3, [pc, #260]	@ (800db68 <xTaskIncrementTick+0x150>)
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	60fb      	str	r3, [r7, #12]
 800da68:	4b40      	ldr	r3, [pc, #256]	@ (800db6c <xTaskIncrementTick+0x154>)
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	4a3e      	ldr	r2, [pc, #248]	@ (800db68 <xTaskIncrementTick+0x150>)
 800da6e:	6013      	str	r3, [r2, #0]
 800da70:	4a3e      	ldr	r2, [pc, #248]	@ (800db6c <xTaskIncrementTick+0x154>)
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	6013      	str	r3, [r2, #0]
 800da76:	4b3e      	ldr	r3, [pc, #248]	@ (800db70 <xTaskIncrementTick+0x158>)
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	3301      	adds	r3, #1
 800da7c:	4a3c      	ldr	r2, [pc, #240]	@ (800db70 <xTaskIncrementTick+0x158>)
 800da7e:	6013      	str	r3, [r2, #0]
 800da80:	f000 fb08 	bl	800e094 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800da84:	4b3b      	ldr	r3, [pc, #236]	@ (800db74 <xTaskIncrementTick+0x15c>)
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	693a      	ldr	r2, [r7, #16]
 800da8a:	429a      	cmp	r2, r3
 800da8c:	d349      	bcc.n	800db22 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800da8e:	4b36      	ldr	r3, [pc, #216]	@ (800db68 <xTaskIncrementTick+0x150>)
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d104      	bne.n	800daa2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da98:	4b36      	ldr	r3, [pc, #216]	@ (800db74 <xTaskIncrementTick+0x15c>)
 800da9a:	f04f 32ff 	mov.w	r2, #4294967295
 800da9e:	601a      	str	r2, [r3, #0]
					break;
 800daa0:	e03f      	b.n	800db22 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800daa2:	4b31      	ldr	r3, [pc, #196]	@ (800db68 <xTaskIncrementTick+0x150>)
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	68db      	ldr	r3, [r3, #12]
 800daa8:	68db      	ldr	r3, [r3, #12]
 800daaa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800daac:	68bb      	ldr	r3, [r7, #8]
 800daae:	685b      	ldr	r3, [r3, #4]
 800dab0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dab2:	693a      	ldr	r2, [r7, #16]
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	429a      	cmp	r2, r3
 800dab8:	d203      	bcs.n	800dac2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800daba:	4a2e      	ldr	r2, [pc, #184]	@ (800db74 <xTaskIncrementTick+0x15c>)
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dac0:	e02f      	b.n	800db22 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dac2:	68bb      	ldr	r3, [r7, #8]
 800dac4:	3304      	adds	r3, #4
 800dac6:	4618      	mov	r0, r3
 800dac8:	f7fe fc1c 	bl	800c304 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dacc:	68bb      	ldr	r3, [r7, #8]
 800dace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d004      	beq.n	800dade <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dad4:	68bb      	ldr	r3, [r7, #8]
 800dad6:	3318      	adds	r3, #24
 800dad8:	4618      	mov	r0, r3
 800dada:	f7fe fc13 	bl	800c304 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dade:	68bb      	ldr	r3, [r7, #8]
 800dae0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dae2:	4b25      	ldr	r3, [pc, #148]	@ (800db78 <xTaskIncrementTick+0x160>)
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	429a      	cmp	r2, r3
 800dae8:	d903      	bls.n	800daf2 <xTaskIncrementTick+0xda>
 800daea:	68bb      	ldr	r3, [r7, #8]
 800daec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800daee:	4a22      	ldr	r2, [pc, #136]	@ (800db78 <xTaskIncrementTick+0x160>)
 800daf0:	6013      	str	r3, [r2, #0]
 800daf2:	68bb      	ldr	r3, [r7, #8]
 800daf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800daf6:	4613      	mov	r3, r2
 800daf8:	009b      	lsls	r3, r3, #2
 800dafa:	4413      	add	r3, r2
 800dafc:	009b      	lsls	r3, r3, #2
 800dafe:	4a1f      	ldr	r2, [pc, #124]	@ (800db7c <xTaskIncrementTick+0x164>)
 800db00:	441a      	add	r2, r3
 800db02:	68bb      	ldr	r3, [r7, #8]
 800db04:	3304      	adds	r3, #4
 800db06:	4619      	mov	r1, r3
 800db08:	4610      	mov	r0, r2
 800db0a:	f7fe fb9e 	bl	800c24a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800db0e:	68bb      	ldr	r3, [r7, #8]
 800db10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db12:	4b1b      	ldr	r3, [pc, #108]	@ (800db80 <xTaskIncrementTick+0x168>)
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db18:	429a      	cmp	r2, r3
 800db1a:	d3b8      	bcc.n	800da8e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800db1c:	2301      	movs	r3, #1
 800db1e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800db20:	e7b5      	b.n	800da8e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800db22:	4b17      	ldr	r3, [pc, #92]	@ (800db80 <xTaskIncrementTick+0x168>)
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db28:	4914      	ldr	r1, [pc, #80]	@ (800db7c <xTaskIncrementTick+0x164>)
 800db2a:	4613      	mov	r3, r2
 800db2c:	009b      	lsls	r3, r3, #2
 800db2e:	4413      	add	r3, r2
 800db30:	009b      	lsls	r3, r3, #2
 800db32:	440b      	add	r3, r1
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	2b01      	cmp	r3, #1
 800db38:	d901      	bls.n	800db3e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800db3a:	2301      	movs	r3, #1
 800db3c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800db3e:	4b11      	ldr	r3, [pc, #68]	@ (800db84 <xTaskIncrementTick+0x16c>)
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d007      	beq.n	800db56 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800db46:	2301      	movs	r3, #1
 800db48:	617b      	str	r3, [r7, #20]
 800db4a:	e004      	b.n	800db56 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800db4c:	4b0e      	ldr	r3, [pc, #56]	@ (800db88 <xTaskIncrementTick+0x170>)
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	3301      	adds	r3, #1
 800db52:	4a0d      	ldr	r2, [pc, #52]	@ (800db88 <xTaskIncrementTick+0x170>)
 800db54:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800db56:	697b      	ldr	r3, [r7, #20]
}
 800db58:	4618      	mov	r0, r3
 800db5a:	3718      	adds	r7, #24
 800db5c:	46bd      	mov	sp, r7
 800db5e:	bd80      	pop	{r7, pc}
 800db60:	2000245c 	.word	0x2000245c
 800db64:	20002438 	.word	0x20002438
 800db68:	200023ec 	.word	0x200023ec
 800db6c:	200023f0 	.word	0x200023f0
 800db70:	2000244c 	.word	0x2000244c
 800db74:	20002454 	.word	0x20002454
 800db78:	2000243c 	.word	0x2000243c
 800db7c:	20001f64 	.word	0x20001f64
 800db80:	20001f60 	.word	0x20001f60
 800db84:	20002448 	.word	0x20002448
 800db88:	20002444 	.word	0x20002444

0800db8c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b086      	sub	sp, #24
 800db90:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800db92:	4b3d      	ldr	r3, [pc, #244]	@ (800dc88 <vTaskSwitchContext+0xfc>)
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d003      	beq.n	800dba2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800db9a:	4b3c      	ldr	r3, [pc, #240]	@ (800dc8c <vTaskSwitchContext+0x100>)
 800db9c:	2201      	movs	r2, #1
 800db9e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dba0:	e06e      	b.n	800dc80 <vTaskSwitchContext+0xf4>
		xYieldPending = pdFALSE;
 800dba2:	4b3a      	ldr	r3, [pc, #232]	@ (800dc8c <vTaskSwitchContext+0x100>)
 800dba4:	2200      	movs	r2, #0
 800dba6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800dba8:	4b39      	ldr	r3, [pc, #228]	@ (800dc90 <vTaskSwitchContext+0x104>)
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dbae:	613b      	str	r3, [r7, #16]
 800dbb0:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 800dbb4:	60fb      	str	r3, [r7, #12]
 800dbb6:	693b      	ldr	r3, [r7, #16]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	68fa      	ldr	r2, [r7, #12]
 800dbbc:	429a      	cmp	r2, r3
 800dbbe:	d111      	bne.n	800dbe4 <vTaskSwitchContext+0x58>
 800dbc0:	693b      	ldr	r3, [r7, #16]
 800dbc2:	3304      	adds	r3, #4
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	68fa      	ldr	r2, [r7, #12]
 800dbc8:	429a      	cmp	r2, r3
 800dbca:	d10b      	bne.n	800dbe4 <vTaskSwitchContext+0x58>
 800dbcc:	693b      	ldr	r3, [r7, #16]
 800dbce:	3308      	adds	r3, #8
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	68fa      	ldr	r2, [r7, #12]
 800dbd4:	429a      	cmp	r2, r3
 800dbd6:	d105      	bne.n	800dbe4 <vTaskSwitchContext+0x58>
 800dbd8:	693b      	ldr	r3, [r7, #16]
 800dbda:	330c      	adds	r3, #12
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	68fa      	ldr	r2, [r7, #12]
 800dbe0:	429a      	cmp	r2, r3
 800dbe2:	d008      	beq.n	800dbf6 <vTaskSwitchContext+0x6a>
 800dbe4:	4b2a      	ldr	r3, [pc, #168]	@ (800dc90 <vTaskSwitchContext+0x104>)
 800dbe6:	681a      	ldr	r2, [r3, #0]
 800dbe8:	4b29      	ldr	r3, [pc, #164]	@ (800dc90 <vTaskSwitchContext+0x104>)
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	3334      	adds	r3, #52	@ 0x34
 800dbee:	4619      	mov	r1, r3
 800dbf0:	4610      	mov	r0, r2
 800dbf2:	f7f3 f80a 	bl	8000c0a <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dbf6:	4b27      	ldr	r3, [pc, #156]	@ (800dc94 <vTaskSwitchContext+0x108>)
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	617b      	str	r3, [r7, #20]
 800dbfc:	e011      	b.n	800dc22 <vTaskSwitchContext+0x96>
 800dbfe:	697b      	ldr	r3, [r7, #20]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d10b      	bne.n	800dc1c <vTaskSwitchContext+0x90>
	__asm volatile
 800dc04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc08:	f383 8811 	msr	BASEPRI, r3
 800dc0c:	f3bf 8f6f 	isb	sy
 800dc10:	f3bf 8f4f 	dsb	sy
 800dc14:	607b      	str	r3, [r7, #4]
}
 800dc16:	bf00      	nop
 800dc18:	bf00      	nop
 800dc1a:	e7fd      	b.n	800dc18 <vTaskSwitchContext+0x8c>
 800dc1c:	697b      	ldr	r3, [r7, #20]
 800dc1e:	3b01      	subs	r3, #1
 800dc20:	617b      	str	r3, [r7, #20]
 800dc22:	491d      	ldr	r1, [pc, #116]	@ (800dc98 <vTaskSwitchContext+0x10c>)
 800dc24:	697a      	ldr	r2, [r7, #20]
 800dc26:	4613      	mov	r3, r2
 800dc28:	009b      	lsls	r3, r3, #2
 800dc2a:	4413      	add	r3, r2
 800dc2c:	009b      	lsls	r3, r3, #2
 800dc2e:	440b      	add	r3, r1
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d0e3      	beq.n	800dbfe <vTaskSwitchContext+0x72>
 800dc36:	697a      	ldr	r2, [r7, #20]
 800dc38:	4613      	mov	r3, r2
 800dc3a:	009b      	lsls	r3, r3, #2
 800dc3c:	4413      	add	r3, r2
 800dc3e:	009b      	lsls	r3, r3, #2
 800dc40:	4a15      	ldr	r2, [pc, #84]	@ (800dc98 <vTaskSwitchContext+0x10c>)
 800dc42:	4413      	add	r3, r2
 800dc44:	60bb      	str	r3, [r7, #8]
 800dc46:	68bb      	ldr	r3, [r7, #8]
 800dc48:	685b      	ldr	r3, [r3, #4]
 800dc4a:	685a      	ldr	r2, [r3, #4]
 800dc4c:	68bb      	ldr	r3, [r7, #8]
 800dc4e:	605a      	str	r2, [r3, #4]
 800dc50:	68bb      	ldr	r3, [r7, #8]
 800dc52:	685a      	ldr	r2, [r3, #4]
 800dc54:	68bb      	ldr	r3, [r7, #8]
 800dc56:	3308      	adds	r3, #8
 800dc58:	429a      	cmp	r2, r3
 800dc5a:	d104      	bne.n	800dc66 <vTaskSwitchContext+0xda>
 800dc5c:	68bb      	ldr	r3, [r7, #8]
 800dc5e:	685b      	ldr	r3, [r3, #4]
 800dc60:	685a      	ldr	r2, [r3, #4]
 800dc62:	68bb      	ldr	r3, [r7, #8]
 800dc64:	605a      	str	r2, [r3, #4]
 800dc66:	68bb      	ldr	r3, [r7, #8]
 800dc68:	685b      	ldr	r3, [r3, #4]
 800dc6a:	68db      	ldr	r3, [r3, #12]
 800dc6c:	4a08      	ldr	r2, [pc, #32]	@ (800dc90 <vTaskSwitchContext+0x104>)
 800dc6e:	6013      	str	r3, [r2, #0]
 800dc70:	4a08      	ldr	r2, [pc, #32]	@ (800dc94 <vTaskSwitchContext+0x108>)
 800dc72:	697b      	ldr	r3, [r7, #20]
 800dc74:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800dc76:	4b06      	ldr	r3, [pc, #24]	@ (800dc90 <vTaskSwitchContext+0x104>)
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	3358      	adds	r3, #88	@ 0x58
 800dc7c:	4a07      	ldr	r2, [pc, #28]	@ (800dc9c <vTaskSwitchContext+0x110>)
 800dc7e:	6013      	str	r3, [r2, #0]
}
 800dc80:	bf00      	nop
 800dc82:	3718      	adds	r7, #24
 800dc84:	46bd      	mov	sp, r7
 800dc86:	bd80      	pop	{r7, pc}
 800dc88:	2000245c 	.word	0x2000245c
 800dc8c:	20002448 	.word	0x20002448
 800dc90:	20001f60 	.word	0x20001f60
 800dc94:	2000243c 	.word	0x2000243c
 800dc98:	20001f64 	.word	0x20001f64
 800dc9c:	2000001c 	.word	0x2000001c

0800dca0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b084      	sub	sp, #16
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
 800dca8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d10b      	bne.n	800dcc8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800dcb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcb4:	f383 8811 	msr	BASEPRI, r3
 800dcb8:	f3bf 8f6f 	isb	sy
 800dcbc:	f3bf 8f4f 	dsb	sy
 800dcc0:	60fb      	str	r3, [r7, #12]
}
 800dcc2:	bf00      	nop
 800dcc4:	bf00      	nop
 800dcc6:	e7fd      	b.n	800dcc4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dcc8:	4b07      	ldr	r3, [pc, #28]	@ (800dce8 <vTaskPlaceOnEventList+0x48>)
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	3318      	adds	r3, #24
 800dcce:	4619      	mov	r1, r3
 800dcd0:	6878      	ldr	r0, [r7, #4]
 800dcd2:	f7fe fade 	bl	800c292 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dcd6:	2101      	movs	r1, #1
 800dcd8:	6838      	ldr	r0, [r7, #0]
 800dcda:	f000 fb89 	bl	800e3f0 <prvAddCurrentTaskToDelayedList>
}
 800dcde:	bf00      	nop
 800dce0:	3710      	adds	r7, #16
 800dce2:	46bd      	mov	sp, r7
 800dce4:	bd80      	pop	{r7, pc}
 800dce6:	bf00      	nop
 800dce8:	20001f60 	.word	0x20001f60

0800dcec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b086      	sub	sp, #24
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	60f8      	str	r0, [r7, #12]
 800dcf4:	60b9      	str	r1, [r7, #8]
 800dcf6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d10b      	bne.n	800dd16 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800dcfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd02:	f383 8811 	msr	BASEPRI, r3
 800dd06:	f3bf 8f6f 	isb	sy
 800dd0a:	f3bf 8f4f 	dsb	sy
 800dd0e:	617b      	str	r3, [r7, #20]
}
 800dd10:	bf00      	nop
 800dd12:	bf00      	nop
 800dd14:	e7fd      	b.n	800dd12 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dd16:	4b0a      	ldr	r3, [pc, #40]	@ (800dd40 <vTaskPlaceOnEventListRestricted+0x54>)
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	3318      	adds	r3, #24
 800dd1c:	4619      	mov	r1, r3
 800dd1e:	68f8      	ldr	r0, [r7, #12]
 800dd20:	f7fe fa93 	bl	800c24a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d002      	beq.n	800dd30 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800dd2a:	f04f 33ff 	mov.w	r3, #4294967295
 800dd2e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800dd30:	6879      	ldr	r1, [r7, #4]
 800dd32:	68b8      	ldr	r0, [r7, #8]
 800dd34:	f000 fb5c 	bl	800e3f0 <prvAddCurrentTaskToDelayedList>
	}
 800dd38:	bf00      	nop
 800dd3a:	3718      	adds	r7, #24
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	bd80      	pop	{r7, pc}
 800dd40:	20001f60 	.word	0x20001f60

0800dd44 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b086      	sub	sp, #24
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	68db      	ldr	r3, [r3, #12]
 800dd50:	68db      	ldr	r3, [r3, #12]
 800dd52:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800dd54:	693b      	ldr	r3, [r7, #16]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d10b      	bne.n	800dd72 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800dd5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd5e:	f383 8811 	msr	BASEPRI, r3
 800dd62:	f3bf 8f6f 	isb	sy
 800dd66:	f3bf 8f4f 	dsb	sy
 800dd6a:	60fb      	str	r3, [r7, #12]
}
 800dd6c:	bf00      	nop
 800dd6e:	bf00      	nop
 800dd70:	e7fd      	b.n	800dd6e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800dd72:	693b      	ldr	r3, [r7, #16]
 800dd74:	3318      	adds	r3, #24
 800dd76:	4618      	mov	r0, r3
 800dd78:	f7fe fac4 	bl	800c304 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dd7c:	4b1d      	ldr	r3, [pc, #116]	@ (800ddf4 <xTaskRemoveFromEventList+0xb0>)
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d11d      	bne.n	800ddc0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800dd84:	693b      	ldr	r3, [r7, #16]
 800dd86:	3304      	adds	r3, #4
 800dd88:	4618      	mov	r0, r3
 800dd8a:	f7fe fabb 	bl	800c304 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800dd8e:	693b      	ldr	r3, [r7, #16]
 800dd90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd92:	4b19      	ldr	r3, [pc, #100]	@ (800ddf8 <xTaskRemoveFromEventList+0xb4>)
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	429a      	cmp	r2, r3
 800dd98:	d903      	bls.n	800dda2 <xTaskRemoveFromEventList+0x5e>
 800dd9a:	693b      	ldr	r3, [r7, #16]
 800dd9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd9e:	4a16      	ldr	r2, [pc, #88]	@ (800ddf8 <xTaskRemoveFromEventList+0xb4>)
 800dda0:	6013      	str	r3, [r2, #0]
 800dda2:	693b      	ldr	r3, [r7, #16]
 800dda4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dda6:	4613      	mov	r3, r2
 800dda8:	009b      	lsls	r3, r3, #2
 800ddaa:	4413      	add	r3, r2
 800ddac:	009b      	lsls	r3, r3, #2
 800ddae:	4a13      	ldr	r2, [pc, #76]	@ (800ddfc <xTaskRemoveFromEventList+0xb8>)
 800ddb0:	441a      	add	r2, r3
 800ddb2:	693b      	ldr	r3, [r7, #16]
 800ddb4:	3304      	adds	r3, #4
 800ddb6:	4619      	mov	r1, r3
 800ddb8:	4610      	mov	r0, r2
 800ddba:	f7fe fa46 	bl	800c24a <vListInsertEnd>
 800ddbe:	e005      	b.n	800ddcc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ddc0:	693b      	ldr	r3, [r7, #16]
 800ddc2:	3318      	adds	r3, #24
 800ddc4:	4619      	mov	r1, r3
 800ddc6:	480e      	ldr	r0, [pc, #56]	@ (800de00 <xTaskRemoveFromEventList+0xbc>)
 800ddc8:	f7fe fa3f 	bl	800c24a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ddcc:	693b      	ldr	r3, [r7, #16]
 800ddce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ddd0:	4b0c      	ldr	r3, [pc, #48]	@ (800de04 <xTaskRemoveFromEventList+0xc0>)
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ddd6:	429a      	cmp	r2, r3
 800ddd8:	d905      	bls.n	800dde6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ddda:	2301      	movs	r3, #1
 800dddc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ddde:	4b0a      	ldr	r3, [pc, #40]	@ (800de08 <xTaskRemoveFromEventList+0xc4>)
 800dde0:	2201      	movs	r2, #1
 800dde2:	601a      	str	r2, [r3, #0]
 800dde4:	e001      	b.n	800ddea <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800dde6:	2300      	movs	r3, #0
 800dde8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ddea:	697b      	ldr	r3, [r7, #20]
}
 800ddec:	4618      	mov	r0, r3
 800ddee:	3718      	adds	r7, #24
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	bd80      	pop	{r7, pc}
 800ddf4:	2000245c 	.word	0x2000245c
 800ddf8:	2000243c 	.word	0x2000243c
 800ddfc:	20001f64 	.word	0x20001f64
 800de00:	200023f4 	.word	0x200023f4
 800de04:	20001f60 	.word	0x20001f60
 800de08:	20002448 	.word	0x20002448

0800de0c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800de0c:	b480      	push	{r7}
 800de0e:	b083      	sub	sp, #12
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800de14:	4b06      	ldr	r3, [pc, #24]	@ (800de30 <vTaskInternalSetTimeOutState+0x24>)
 800de16:	681a      	ldr	r2, [r3, #0]
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800de1c:	4b05      	ldr	r3, [pc, #20]	@ (800de34 <vTaskInternalSetTimeOutState+0x28>)
 800de1e:	681a      	ldr	r2, [r3, #0]
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	605a      	str	r2, [r3, #4]
}
 800de24:	bf00      	nop
 800de26:	370c      	adds	r7, #12
 800de28:	46bd      	mov	sp, r7
 800de2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2e:	4770      	bx	lr
 800de30:	2000244c 	.word	0x2000244c
 800de34:	20002438 	.word	0x20002438

0800de38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b088      	sub	sp, #32
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	6078      	str	r0, [r7, #4]
 800de40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d10b      	bne.n	800de60 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800de48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de4c:	f383 8811 	msr	BASEPRI, r3
 800de50:	f3bf 8f6f 	isb	sy
 800de54:	f3bf 8f4f 	dsb	sy
 800de58:	613b      	str	r3, [r7, #16]
}
 800de5a:	bf00      	nop
 800de5c:	bf00      	nop
 800de5e:	e7fd      	b.n	800de5c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800de60:	683b      	ldr	r3, [r7, #0]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d10b      	bne.n	800de7e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800de66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de6a:	f383 8811 	msr	BASEPRI, r3
 800de6e:	f3bf 8f6f 	isb	sy
 800de72:	f3bf 8f4f 	dsb	sy
 800de76:	60fb      	str	r3, [r7, #12]
}
 800de78:	bf00      	nop
 800de7a:	bf00      	nop
 800de7c:	e7fd      	b.n	800de7a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800de7e:	f000 ff93 	bl	800eda8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800de82:	4b1d      	ldr	r3, [pc, #116]	@ (800def8 <xTaskCheckForTimeOut+0xc0>)
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	685b      	ldr	r3, [r3, #4]
 800de8c:	69ba      	ldr	r2, [r7, #24]
 800de8e:	1ad3      	subs	r3, r2, r3
 800de90:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800de92:	683b      	ldr	r3, [r7, #0]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de9a:	d102      	bne.n	800dea2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800de9c:	2300      	movs	r3, #0
 800de9e:	61fb      	str	r3, [r7, #28]
 800dea0:	e023      	b.n	800deea <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681a      	ldr	r2, [r3, #0]
 800dea6:	4b15      	ldr	r3, [pc, #84]	@ (800defc <xTaskCheckForTimeOut+0xc4>)
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	429a      	cmp	r2, r3
 800deac:	d007      	beq.n	800debe <xTaskCheckForTimeOut+0x86>
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	685b      	ldr	r3, [r3, #4]
 800deb2:	69ba      	ldr	r2, [r7, #24]
 800deb4:	429a      	cmp	r2, r3
 800deb6:	d302      	bcc.n	800debe <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800deb8:	2301      	movs	r3, #1
 800deba:	61fb      	str	r3, [r7, #28]
 800debc:	e015      	b.n	800deea <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800debe:	683b      	ldr	r3, [r7, #0]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	697a      	ldr	r2, [r7, #20]
 800dec4:	429a      	cmp	r2, r3
 800dec6:	d20b      	bcs.n	800dee0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800dec8:	683b      	ldr	r3, [r7, #0]
 800deca:	681a      	ldr	r2, [r3, #0]
 800decc:	697b      	ldr	r3, [r7, #20]
 800dece:	1ad2      	subs	r2, r2, r3
 800ded0:	683b      	ldr	r3, [r7, #0]
 800ded2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ded4:	6878      	ldr	r0, [r7, #4]
 800ded6:	f7ff ff99 	bl	800de0c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800deda:	2300      	movs	r3, #0
 800dedc:	61fb      	str	r3, [r7, #28]
 800dede:	e004      	b.n	800deea <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800dee0:	683b      	ldr	r3, [r7, #0]
 800dee2:	2200      	movs	r2, #0
 800dee4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800dee6:	2301      	movs	r3, #1
 800dee8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800deea:	f000 ff8f 	bl	800ee0c <vPortExitCritical>

	return xReturn;
 800deee:	69fb      	ldr	r3, [r7, #28]
}
 800def0:	4618      	mov	r0, r3
 800def2:	3720      	adds	r7, #32
 800def4:	46bd      	mov	sp, r7
 800def6:	bd80      	pop	{r7, pc}
 800def8:	20002438 	.word	0x20002438
 800defc:	2000244c 	.word	0x2000244c

0800df00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800df00:	b480      	push	{r7}
 800df02:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800df04:	4b03      	ldr	r3, [pc, #12]	@ (800df14 <vTaskMissedYield+0x14>)
 800df06:	2201      	movs	r2, #1
 800df08:	601a      	str	r2, [r3, #0]
}
 800df0a:	bf00      	nop
 800df0c:	46bd      	mov	sp, r7
 800df0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df12:	4770      	bx	lr
 800df14:	20002448 	.word	0x20002448

0800df18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	b082      	sub	sp, #8
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800df20:	f000 f854 	bl	800dfcc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800df24:	4b07      	ldr	r3, [pc, #28]	@ (800df44 <prvIdleTask+0x2c>)
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	2b01      	cmp	r3, #1
 800df2a:	d907      	bls.n	800df3c <prvIdleTask+0x24>
			{
				taskYIELD();
 800df2c:	4b06      	ldr	r3, [pc, #24]	@ (800df48 <prvIdleTask+0x30>)
 800df2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800df32:	601a      	str	r2, [r3, #0]
 800df34:	f3bf 8f4f 	dsb	sy
 800df38:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800df3c:	f7f2 fe5e 	bl	8000bfc <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800df40:	e7ee      	b.n	800df20 <prvIdleTask+0x8>
 800df42:	bf00      	nop
 800df44:	20001f64 	.word	0x20001f64
 800df48:	e000ed04 	.word	0xe000ed04

0800df4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b082      	sub	sp, #8
 800df50:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800df52:	2300      	movs	r3, #0
 800df54:	607b      	str	r3, [r7, #4]
 800df56:	e00c      	b.n	800df72 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800df58:	687a      	ldr	r2, [r7, #4]
 800df5a:	4613      	mov	r3, r2
 800df5c:	009b      	lsls	r3, r3, #2
 800df5e:	4413      	add	r3, r2
 800df60:	009b      	lsls	r3, r3, #2
 800df62:	4a12      	ldr	r2, [pc, #72]	@ (800dfac <prvInitialiseTaskLists+0x60>)
 800df64:	4413      	add	r3, r2
 800df66:	4618      	mov	r0, r3
 800df68:	f7fe f942 	bl	800c1f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	3301      	adds	r3, #1
 800df70:	607b      	str	r3, [r7, #4]
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	2b37      	cmp	r3, #55	@ 0x37
 800df76:	d9ef      	bls.n	800df58 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800df78:	480d      	ldr	r0, [pc, #52]	@ (800dfb0 <prvInitialiseTaskLists+0x64>)
 800df7a:	f7fe f939 	bl	800c1f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800df7e:	480d      	ldr	r0, [pc, #52]	@ (800dfb4 <prvInitialiseTaskLists+0x68>)
 800df80:	f7fe f936 	bl	800c1f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800df84:	480c      	ldr	r0, [pc, #48]	@ (800dfb8 <prvInitialiseTaskLists+0x6c>)
 800df86:	f7fe f933 	bl	800c1f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800df8a:	480c      	ldr	r0, [pc, #48]	@ (800dfbc <prvInitialiseTaskLists+0x70>)
 800df8c:	f7fe f930 	bl	800c1f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800df90:	480b      	ldr	r0, [pc, #44]	@ (800dfc0 <prvInitialiseTaskLists+0x74>)
 800df92:	f7fe f92d 	bl	800c1f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800df96:	4b0b      	ldr	r3, [pc, #44]	@ (800dfc4 <prvInitialiseTaskLists+0x78>)
 800df98:	4a05      	ldr	r2, [pc, #20]	@ (800dfb0 <prvInitialiseTaskLists+0x64>)
 800df9a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800df9c:	4b0a      	ldr	r3, [pc, #40]	@ (800dfc8 <prvInitialiseTaskLists+0x7c>)
 800df9e:	4a05      	ldr	r2, [pc, #20]	@ (800dfb4 <prvInitialiseTaskLists+0x68>)
 800dfa0:	601a      	str	r2, [r3, #0]
}
 800dfa2:	bf00      	nop
 800dfa4:	3708      	adds	r7, #8
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	bd80      	pop	{r7, pc}
 800dfaa:	bf00      	nop
 800dfac:	20001f64 	.word	0x20001f64
 800dfb0:	200023c4 	.word	0x200023c4
 800dfb4:	200023d8 	.word	0x200023d8
 800dfb8:	200023f4 	.word	0x200023f4
 800dfbc:	20002408 	.word	0x20002408
 800dfc0:	20002420 	.word	0x20002420
 800dfc4:	200023ec 	.word	0x200023ec
 800dfc8:	200023f0 	.word	0x200023f0

0800dfcc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b082      	sub	sp, #8
 800dfd0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dfd2:	e019      	b.n	800e008 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800dfd4:	f000 fee8 	bl	800eda8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dfd8:	4b10      	ldr	r3, [pc, #64]	@ (800e01c <prvCheckTasksWaitingTermination+0x50>)
 800dfda:	68db      	ldr	r3, [r3, #12]
 800dfdc:	68db      	ldr	r3, [r3, #12]
 800dfde:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	3304      	adds	r3, #4
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	f7fe f98d 	bl	800c304 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800dfea:	4b0d      	ldr	r3, [pc, #52]	@ (800e020 <prvCheckTasksWaitingTermination+0x54>)
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	3b01      	subs	r3, #1
 800dff0:	4a0b      	ldr	r2, [pc, #44]	@ (800e020 <prvCheckTasksWaitingTermination+0x54>)
 800dff2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800dff4:	4b0b      	ldr	r3, [pc, #44]	@ (800e024 <prvCheckTasksWaitingTermination+0x58>)
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	3b01      	subs	r3, #1
 800dffa:	4a0a      	ldr	r2, [pc, #40]	@ (800e024 <prvCheckTasksWaitingTermination+0x58>)
 800dffc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800dffe:	f000 ff05 	bl	800ee0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e002:	6878      	ldr	r0, [r7, #4]
 800e004:	f000 f810 	bl	800e028 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e008:	4b06      	ldr	r3, [pc, #24]	@ (800e024 <prvCheckTasksWaitingTermination+0x58>)
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d1e1      	bne.n	800dfd4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e010:	bf00      	nop
 800e012:	bf00      	nop
 800e014:	3708      	adds	r7, #8
 800e016:	46bd      	mov	sp, r7
 800e018:	bd80      	pop	{r7, pc}
 800e01a:	bf00      	nop
 800e01c:	20002408 	.word	0x20002408
 800e020:	20002434 	.word	0x20002434
 800e024:	2000241c 	.word	0x2000241c

0800e028 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b084      	sub	sp, #16
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	3358      	adds	r3, #88	@ 0x58
 800e034:	4618      	mov	r0, r3
 800e036:	f002 fc6b 	bl	8010910 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800e040:	2b00      	cmp	r3, #0
 800e042:	d108      	bne.n	800e056 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e048:	4618      	mov	r0, r3
 800e04a:	f001 f8a3 	bl	800f194 <vPortFree>
				vPortFree( pxTCB );
 800e04e:	6878      	ldr	r0, [r7, #4]
 800e050:	f001 f8a0 	bl	800f194 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e054:	e019      	b.n	800e08a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800e05c:	2b01      	cmp	r3, #1
 800e05e:	d103      	bne.n	800e068 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e060:	6878      	ldr	r0, [r7, #4]
 800e062:	f001 f897 	bl	800f194 <vPortFree>
	}
 800e066:	e010      	b.n	800e08a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800e06e:	2b02      	cmp	r3, #2
 800e070:	d00b      	beq.n	800e08a <prvDeleteTCB+0x62>
	__asm volatile
 800e072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e076:	f383 8811 	msr	BASEPRI, r3
 800e07a:	f3bf 8f6f 	isb	sy
 800e07e:	f3bf 8f4f 	dsb	sy
 800e082:	60fb      	str	r3, [r7, #12]
}
 800e084:	bf00      	nop
 800e086:	bf00      	nop
 800e088:	e7fd      	b.n	800e086 <prvDeleteTCB+0x5e>
	}
 800e08a:	bf00      	nop
 800e08c:	3710      	adds	r7, #16
 800e08e:	46bd      	mov	sp, r7
 800e090:	bd80      	pop	{r7, pc}
	...

0800e094 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e094:	b480      	push	{r7}
 800e096:	b083      	sub	sp, #12
 800e098:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e09a:	4b0c      	ldr	r3, [pc, #48]	@ (800e0cc <prvResetNextTaskUnblockTime+0x38>)
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d104      	bne.n	800e0ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e0a4:	4b0a      	ldr	r3, [pc, #40]	@ (800e0d0 <prvResetNextTaskUnblockTime+0x3c>)
 800e0a6:	f04f 32ff 	mov.w	r2, #4294967295
 800e0aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e0ac:	e008      	b.n	800e0c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0ae:	4b07      	ldr	r3, [pc, #28]	@ (800e0cc <prvResetNextTaskUnblockTime+0x38>)
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	68db      	ldr	r3, [r3, #12]
 800e0b4:	68db      	ldr	r3, [r3, #12]
 800e0b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	685b      	ldr	r3, [r3, #4]
 800e0bc:	4a04      	ldr	r2, [pc, #16]	@ (800e0d0 <prvResetNextTaskUnblockTime+0x3c>)
 800e0be:	6013      	str	r3, [r2, #0]
}
 800e0c0:	bf00      	nop
 800e0c2:	370c      	adds	r7, #12
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ca:	4770      	bx	lr
 800e0cc:	200023ec 	.word	0x200023ec
 800e0d0:	20002454 	.word	0x20002454

0800e0d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e0d4:	b480      	push	{r7}
 800e0d6:	b083      	sub	sp, #12
 800e0d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e0da:	4b0b      	ldr	r3, [pc, #44]	@ (800e108 <xTaskGetSchedulerState+0x34>)
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d102      	bne.n	800e0e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e0e2:	2301      	movs	r3, #1
 800e0e4:	607b      	str	r3, [r7, #4]
 800e0e6:	e008      	b.n	800e0fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e0e8:	4b08      	ldr	r3, [pc, #32]	@ (800e10c <xTaskGetSchedulerState+0x38>)
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d102      	bne.n	800e0f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e0f0:	2302      	movs	r3, #2
 800e0f2:	607b      	str	r3, [r7, #4]
 800e0f4:	e001      	b.n	800e0fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e0fa:	687b      	ldr	r3, [r7, #4]
	}
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	370c      	adds	r7, #12
 800e100:	46bd      	mov	sp, r7
 800e102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e106:	4770      	bx	lr
 800e108:	20002440 	.word	0x20002440
 800e10c:	2000245c 	.word	0x2000245c

0800e110 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e110:	b580      	push	{r7, lr}
 800e112:	b084      	sub	sp, #16
 800e114:	af00      	add	r7, sp, #0
 800e116:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e11c:	2300      	movs	r3, #0
 800e11e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d051      	beq.n	800e1ca <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e126:	68bb      	ldr	r3, [r7, #8]
 800e128:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e12a:	4b2a      	ldr	r3, [pc, #168]	@ (800e1d4 <xTaskPriorityInherit+0xc4>)
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e130:	429a      	cmp	r2, r3
 800e132:	d241      	bcs.n	800e1b8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e134:	68bb      	ldr	r3, [r7, #8]
 800e136:	699b      	ldr	r3, [r3, #24]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	db06      	blt.n	800e14a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e13c:	4b25      	ldr	r3, [pc, #148]	@ (800e1d4 <xTaskPriorityInherit+0xc4>)
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e142:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e146:	68bb      	ldr	r3, [r7, #8]
 800e148:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e14a:	68bb      	ldr	r3, [r7, #8]
 800e14c:	6959      	ldr	r1, [r3, #20]
 800e14e:	68bb      	ldr	r3, [r7, #8]
 800e150:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e152:	4613      	mov	r3, r2
 800e154:	009b      	lsls	r3, r3, #2
 800e156:	4413      	add	r3, r2
 800e158:	009b      	lsls	r3, r3, #2
 800e15a:	4a1f      	ldr	r2, [pc, #124]	@ (800e1d8 <xTaskPriorityInherit+0xc8>)
 800e15c:	4413      	add	r3, r2
 800e15e:	4299      	cmp	r1, r3
 800e160:	d122      	bne.n	800e1a8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e162:	68bb      	ldr	r3, [r7, #8]
 800e164:	3304      	adds	r3, #4
 800e166:	4618      	mov	r0, r3
 800e168:	f7fe f8cc 	bl	800c304 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e16c:	4b19      	ldr	r3, [pc, #100]	@ (800e1d4 <xTaskPriorityInherit+0xc4>)
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e172:	68bb      	ldr	r3, [r7, #8]
 800e174:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e176:	68bb      	ldr	r3, [r7, #8]
 800e178:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e17a:	4b18      	ldr	r3, [pc, #96]	@ (800e1dc <xTaskPriorityInherit+0xcc>)
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	429a      	cmp	r2, r3
 800e180:	d903      	bls.n	800e18a <xTaskPriorityInherit+0x7a>
 800e182:	68bb      	ldr	r3, [r7, #8]
 800e184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e186:	4a15      	ldr	r2, [pc, #84]	@ (800e1dc <xTaskPriorityInherit+0xcc>)
 800e188:	6013      	str	r3, [r2, #0]
 800e18a:	68bb      	ldr	r3, [r7, #8]
 800e18c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e18e:	4613      	mov	r3, r2
 800e190:	009b      	lsls	r3, r3, #2
 800e192:	4413      	add	r3, r2
 800e194:	009b      	lsls	r3, r3, #2
 800e196:	4a10      	ldr	r2, [pc, #64]	@ (800e1d8 <xTaskPriorityInherit+0xc8>)
 800e198:	441a      	add	r2, r3
 800e19a:	68bb      	ldr	r3, [r7, #8]
 800e19c:	3304      	adds	r3, #4
 800e19e:	4619      	mov	r1, r3
 800e1a0:	4610      	mov	r0, r2
 800e1a2:	f7fe f852 	bl	800c24a <vListInsertEnd>
 800e1a6:	e004      	b.n	800e1b2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e1a8:	4b0a      	ldr	r3, [pc, #40]	@ (800e1d4 <xTaskPriorityInherit+0xc4>)
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1ae:	68bb      	ldr	r3, [r7, #8]
 800e1b0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e1b2:	2301      	movs	r3, #1
 800e1b4:	60fb      	str	r3, [r7, #12]
 800e1b6:	e008      	b.n	800e1ca <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e1b8:	68bb      	ldr	r3, [r7, #8]
 800e1ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e1bc:	4b05      	ldr	r3, [pc, #20]	@ (800e1d4 <xTaskPriorityInherit+0xc4>)
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1c2:	429a      	cmp	r2, r3
 800e1c4:	d201      	bcs.n	800e1ca <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e1c6:	2301      	movs	r3, #1
 800e1c8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e1ca:	68fb      	ldr	r3, [r7, #12]
	}
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	3710      	adds	r7, #16
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	bd80      	pop	{r7, pc}
 800e1d4:	20001f60 	.word	0x20001f60
 800e1d8:	20001f64 	.word	0x20001f64
 800e1dc:	2000243c 	.word	0x2000243c

0800e1e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b086      	sub	sp, #24
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d058      	beq.n	800e2a8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e1f6:	4b2f      	ldr	r3, [pc, #188]	@ (800e2b4 <xTaskPriorityDisinherit+0xd4>)
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	693a      	ldr	r2, [r7, #16]
 800e1fc:	429a      	cmp	r2, r3
 800e1fe:	d00b      	beq.n	800e218 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800e200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e204:	f383 8811 	msr	BASEPRI, r3
 800e208:	f3bf 8f6f 	isb	sy
 800e20c:	f3bf 8f4f 	dsb	sy
 800e210:	60fb      	str	r3, [r7, #12]
}
 800e212:	bf00      	nop
 800e214:	bf00      	nop
 800e216:	e7fd      	b.n	800e214 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e218:	693b      	ldr	r3, [r7, #16]
 800e21a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d10b      	bne.n	800e238 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800e220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e224:	f383 8811 	msr	BASEPRI, r3
 800e228:	f3bf 8f6f 	isb	sy
 800e22c:	f3bf 8f4f 	dsb	sy
 800e230:	60bb      	str	r3, [r7, #8]
}
 800e232:	bf00      	nop
 800e234:	bf00      	nop
 800e236:	e7fd      	b.n	800e234 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800e238:	693b      	ldr	r3, [r7, #16]
 800e23a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e23c:	1e5a      	subs	r2, r3, #1
 800e23e:	693b      	ldr	r3, [r7, #16]
 800e240:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e242:	693b      	ldr	r3, [r7, #16]
 800e244:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e246:	693b      	ldr	r3, [r7, #16]
 800e248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e24a:	429a      	cmp	r2, r3
 800e24c:	d02c      	beq.n	800e2a8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e24e:	693b      	ldr	r3, [r7, #16]
 800e250:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e252:	2b00      	cmp	r3, #0
 800e254:	d128      	bne.n	800e2a8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e256:	693b      	ldr	r3, [r7, #16]
 800e258:	3304      	adds	r3, #4
 800e25a:	4618      	mov	r0, r3
 800e25c:	f7fe f852 	bl	800c304 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e260:	693b      	ldr	r3, [r7, #16]
 800e262:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e264:	693b      	ldr	r3, [r7, #16]
 800e266:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e268:	693b      	ldr	r3, [r7, #16]
 800e26a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e26c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e270:	693b      	ldr	r3, [r7, #16]
 800e272:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e274:	693b      	ldr	r3, [r7, #16]
 800e276:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e278:	4b0f      	ldr	r3, [pc, #60]	@ (800e2b8 <xTaskPriorityDisinherit+0xd8>)
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	429a      	cmp	r2, r3
 800e27e:	d903      	bls.n	800e288 <xTaskPriorityDisinherit+0xa8>
 800e280:	693b      	ldr	r3, [r7, #16]
 800e282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e284:	4a0c      	ldr	r2, [pc, #48]	@ (800e2b8 <xTaskPriorityDisinherit+0xd8>)
 800e286:	6013      	str	r3, [r2, #0]
 800e288:	693b      	ldr	r3, [r7, #16]
 800e28a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e28c:	4613      	mov	r3, r2
 800e28e:	009b      	lsls	r3, r3, #2
 800e290:	4413      	add	r3, r2
 800e292:	009b      	lsls	r3, r3, #2
 800e294:	4a09      	ldr	r2, [pc, #36]	@ (800e2bc <xTaskPriorityDisinherit+0xdc>)
 800e296:	441a      	add	r2, r3
 800e298:	693b      	ldr	r3, [r7, #16]
 800e29a:	3304      	adds	r3, #4
 800e29c:	4619      	mov	r1, r3
 800e29e:	4610      	mov	r0, r2
 800e2a0:	f7fd ffd3 	bl	800c24a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e2a4:	2301      	movs	r3, #1
 800e2a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e2a8:	697b      	ldr	r3, [r7, #20]
	}
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	3718      	adds	r7, #24
 800e2ae:	46bd      	mov	sp, r7
 800e2b0:	bd80      	pop	{r7, pc}
 800e2b2:	bf00      	nop
 800e2b4:	20001f60 	.word	0x20001f60
 800e2b8:	2000243c 	.word	0x2000243c
 800e2bc:	20001f64 	.word	0x20001f64

0800e2c0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e2c0:	b580      	push	{r7, lr}
 800e2c2:	b088      	sub	sp, #32
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	6078      	str	r0, [r7, #4]
 800e2c8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e2ce:	2301      	movs	r3, #1
 800e2d0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d06c      	beq.n	800e3b2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e2d8:	69bb      	ldr	r3, [r7, #24]
 800e2da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d10b      	bne.n	800e2f8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800e2e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2e4:	f383 8811 	msr	BASEPRI, r3
 800e2e8:	f3bf 8f6f 	isb	sy
 800e2ec:	f3bf 8f4f 	dsb	sy
 800e2f0:	60fb      	str	r3, [r7, #12]
}
 800e2f2:	bf00      	nop
 800e2f4:	bf00      	nop
 800e2f6:	e7fd      	b.n	800e2f4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e2f8:	69bb      	ldr	r3, [r7, #24]
 800e2fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e2fc:	683a      	ldr	r2, [r7, #0]
 800e2fe:	429a      	cmp	r2, r3
 800e300:	d902      	bls.n	800e308 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e302:	683b      	ldr	r3, [r7, #0]
 800e304:	61fb      	str	r3, [r7, #28]
 800e306:	e002      	b.n	800e30e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e308:	69bb      	ldr	r3, [r7, #24]
 800e30a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e30c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e30e:	69bb      	ldr	r3, [r7, #24]
 800e310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e312:	69fa      	ldr	r2, [r7, #28]
 800e314:	429a      	cmp	r2, r3
 800e316:	d04c      	beq.n	800e3b2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e318:	69bb      	ldr	r3, [r7, #24]
 800e31a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e31c:	697a      	ldr	r2, [r7, #20]
 800e31e:	429a      	cmp	r2, r3
 800e320:	d147      	bne.n	800e3b2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e322:	4b26      	ldr	r3, [pc, #152]	@ (800e3bc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	69ba      	ldr	r2, [r7, #24]
 800e328:	429a      	cmp	r2, r3
 800e32a:	d10b      	bne.n	800e344 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800e32c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e330:	f383 8811 	msr	BASEPRI, r3
 800e334:	f3bf 8f6f 	isb	sy
 800e338:	f3bf 8f4f 	dsb	sy
 800e33c:	60bb      	str	r3, [r7, #8]
}
 800e33e:	bf00      	nop
 800e340:	bf00      	nop
 800e342:	e7fd      	b.n	800e340 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e344:	69bb      	ldr	r3, [r7, #24]
 800e346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e348:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e34a:	69bb      	ldr	r3, [r7, #24]
 800e34c:	69fa      	ldr	r2, [r7, #28]
 800e34e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e350:	69bb      	ldr	r3, [r7, #24]
 800e352:	699b      	ldr	r3, [r3, #24]
 800e354:	2b00      	cmp	r3, #0
 800e356:	db04      	blt.n	800e362 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e358:	69fb      	ldr	r3, [r7, #28]
 800e35a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e35e:	69bb      	ldr	r3, [r7, #24]
 800e360:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e362:	69bb      	ldr	r3, [r7, #24]
 800e364:	6959      	ldr	r1, [r3, #20]
 800e366:	693a      	ldr	r2, [r7, #16]
 800e368:	4613      	mov	r3, r2
 800e36a:	009b      	lsls	r3, r3, #2
 800e36c:	4413      	add	r3, r2
 800e36e:	009b      	lsls	r3, r3, #2
 800e370:	4a13      	ldr	r2, [pc, #76]	@ (800e3c0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e372:	4413      	add	r3, r2
 800e374:	4299      	cmp	r1, r3
 800e376:	d11c      	bne.n	800e3b2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e378:	69bb      	ldr	r3, [r7, #24]
 800e37a:	3304      	adds	r3, #4
 800e37c:	4618      	mov	r0, r3
 800e37e:	f7fd ffc1 	bl	800c304 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e382:	69bb      	ldr	r3, [r7, #24]
 800e384:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e386:	4b0f      	ldr	r3, [pc, #60]	@ (800e3c4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	429a      	cmp	r2, r3
 800e38c:	d903      	bls.n	800e396 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800e38e:	69bb      	ldr	r3, [r7, #24]
 800e390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e392:	4a0c      	ldr	r2, [pc, #48]	@ (800e3c4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800e394:	6013      	str	r3, [r2, #0]
 800e396:	69bb      	ldr	r3, [r7, #24]
 800e398:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e39a:	4613      	mov	r3, r2
 800e39c:	009b      	lsls	r3, r3, #2
 800e39e:	4413      	add	r3, r2
 800e3a0:	009b      	lsls	r3, r3, #2
 800e3a2:	4a07      	ldr	r2, [pc, #28]	@ (800e3c0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e3a4:	441a      	add	r2, r3
 800e3a6:	69bb      	ldr	r3, [r7, #24]
 800e3a8:	3304      	adds	r3, #4
 800e3aa:	4619      	mov	r1, r3
 800e3ac:	4610      	mov	r0, r2
 800e3ae:	f7fd ff4c 	bl	800c24a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e3b2:	bf00      	nop
 800e3b4:	3720      	adds	r7, #32
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	bd80      	pop	{r7, pc}
 800e3ba:	bf00      	nop
 800e3bc:	20001f60 	.word	0x20001f60
 800e3c0:	20001f64 	.word	0x20001f64
 800e3c4:	2000243c 	.word	0x2000243c

0800e3c8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e3c8:	b480      	push	{r7}
 800e3ca:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e3cc:	4b07      	ldr	r3, [pc, #28]	@ (800e3ec <pvTaskIncrementMutexHeldCount+0x24>)
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d004      	beq.n	800e3de <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e3d4:	4b05      	ldr	r3, [pc, #20]	@ (800e3ec <pvTaskIncrementMutexHeldCount+0x24>)
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e3da:	3201      	adds	r2, #1
 800e3dc:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800e3de:	4b03      	ldr	r3, [pc, #12]	@ (800e3ec <pvTaskIncrementMutexHeldCount+0x24>)
 800e3e0:	681b      	ldr	r3, [r3, #0]
	}
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ea:	4770      	bx	lr
 800e3ec:	20001f60 	.word	0x20001f60

0800e3f0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e3f0:	b580      	push	{r7, lr}
 800e3f2:	b084      	sub	sp, #16
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	6078      	str	r0, [r7, #4]
 800e3f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e3fa:	4b21      	ldr	r3, [pc, #132]	@ (800e480 <prvAddCurrentTaskToDelayedList+0x90>)
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e400:	4b20      	ldr	r3, [pc, #128]	@ (800e484 <prvAddCurrentTaskToDelayedList+0x94>)
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	3304      	adds	r3, #4
 800e406:	4618      	mov	r0, r3
 800e408:	f7fd ff7c 	bl	800c304 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e412:	d10a      	bne.n	800e42a <prvAddCurrentTaskToDelayedList+0x3a>
 800e414:	683b      	ldr	r3, [r7, #0]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d007      	beq.n	800e42a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e41a:	4b1a      	ldr	r3, [pc, #104]	@ (800e484 <prvAddCurrentTaskToDelayedList+0x94>)
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	3304      	adds	r3, #4
 800e420:	4619      	mov	r1, r3
 800e422:	4819      	ldr	r0, [pc, #100]	@ (800e488 <prvAddCurrentTaskToDelayedList+0x98>)
 800e424:	f7fd ff11 	bl	800c24a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e428:	e026      	b.n	800e478 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e42a:	68fa      	ldr	r2, [r7, #12]
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	4413      	add	r3, r2
 800e430:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e432:	4b14      	ldr	r3, [pc, #80]	@ (800e484 <prvAddCurrentTaskToDelayedList+0x94>)
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	68ba      	ldr	r2, [r7, #8]
 800e438:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e43a:	68ba      	ldr	r2, [r7, #8]
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	429a      	cmp	r2, r3
 800e440:	d209      	bcs.n	800e456 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e442:	4b12      	ldr	r3, [pc, #72]	@ (800e48c <prvAddCurrentTaskToDelayedList+0x9c>)
 800e444:	681a      	ldr	r2, [r3, #0]
 800e446:	4b0f      	ldr	r3, [pc, #60]	@ (800e484 <prvAddCurrentTaskToDelayedList+0x94>)
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	3304      	adds	r3, #4
 800e44c:	4619      	mov	r1, r3
 800e44e:	4610      	mov	r0, r2
 800e450:	f7fd ff1f 	bl	800c292 <vListInsert>
}
 800e454:	e010      	b.n	800e478 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e456:	4b0e      	ldr	r3, [pc, #56]	@ (800e490 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e458:	681a      	ldr	r2, [r3, #0]
 800e45a:	4b0a      	ldr	r3, [pc, #40]	@ (800e484 <prvAddCurrentTaskToDelayedList+0x94>)
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	3304      	adds	r3, #4
 800e460:	4619      	mov	r1, r3
 800e462:	4610      	mov	r0, r2
 800e464:	f7fd ff15 	bl	800c292 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e468:	4b0a      	ldr	r3, [pc, #40]	@ (800e494 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	68ba      	ldr	r2, [r7, #8]
 800e46e:	429a      	cmp	r2, r3
 800e470:	d202      	bcs.n	800e478 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e472:	4a08      	ldr	r2, [pc, #32]	@ (800e494 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e474:	68bb      	ldr	r3, [r7, #8]
 800e476:	6013      	str	r3, [r2, #0]
}
 800e478:	bf00      	nop
 800e47a:	3710      	adds	r7, #16
 800e47c:	46bd      	mov	sp, r7
 800e47e:	bd80      	pop	{r7, pc}
 800e480:	20002438 	.word	0x20002438
 800e484:	20001f60 	.word	0x20001f60
 800e488:	20002420 	.word	0x20002420
 800e48c:	200023f0 	.word	0x200023f0
 800e490:	200023ec 	.word	0x200023ec
 800e494:	20002454 	.word	0x20002454

0800e498 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e498:	b580      	push	{r7, lr}
 800e49a:	b08a      	sub	sp, #40	@ 0x28
 800e49c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e49e:	2300      	movs	r3, #0
 800e4a0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e4a2:	f000 fb13 	bl	800eacc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e4a6:	4b1d      	ldr	r3, [pc, #116]	@ (800e51c <xTimerCreateTimerTask+0x84>)
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d021      	beq.n	800e4f2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e4b6:	1d3a      	adds	r2, r7, #4
 800e4b8:	f107 0108 	add.w	r1, r7, #8
 800e4bc:	f107 030c 	add.w	r3, r7, #12
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	f7fd fe7b 	bl	800c1bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e4c6:	6879      	ldr	r1, [r7, #4]
 800e4c8:	68bb      	ldr	r3, [r7, #8]
 800e4ca:	68fa      	ldr	r2, [r7, #12]
 800e4cc:	9202      	str	r2, [sp, #8]
 800e4ce:	9301      	str	r3, [sp, #4]
 800e4d0:	2302      	movs	r3, #2
 800e4d2:	9300      	str	r3, [sp, #0]
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	460a      	mov	r2, r1
 800e4d8:	4911      	ldr	r1, [pc, #68]	@ (800e520 <xTimerCreateTimerTask+0x88>)
 800e4da:	4812      	ldr	r0, [pc, #72]	@ (800e524 <xTimerCreateTimerTask+0x8c>)
 800e4dc:	f7fe ff68 	bl	800d3b0 <xTaskCreateStatic>
 800e4e0:	4603      	mov	r3, r0
 800e4e2:	4a11      	ldr	r2, [pc, #68]	@ (800e528 <xTimerCreateTimerTask+0x90>)
 800e4e4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e4e6:	4b10      	ldr	r3, [pc, #64]	@ (800e528 <xTimerCreateTimerTask+0x90>)
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d001      	beq.n	800e4f2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e4ee:	2301      	movs	r3, #1
 800e4f0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e4f2:	697b      	ldr	r3, [r7, #20]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d10b      	bne.n	800e510 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800e4f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4fc:	f383 8811 	msr	BASEPRI, r3
 800e500:	f3bf 8f6f 	isb	sy
 800e504:	f3bf 8f4f 	dsb	sy
 800e508:	613b      	str	r3, [r7, #16]
}
 800e50a:	bf00      	nop
 800e50c:	bf00      	nop
 800e50e:	e7fd      	b.n	800e50c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e510:	697b      	ldr	r3, [r7, #20]
}
 800e512:	4618      	mov	r0, r3
 800e514:	3718      	adds	r7, #24
 800e516:	46bd      	mov	sp, r7
 800e518:	bd80      	pop	{r7, pc}
 800e51a:	bf00      	nop
 800e51c:	20002490 	.word	0x20002490
 800e520:	08012038 	.word	0x08012038
 800e524:	0800e665 	.word	0x0800e665
 800e528:	20002494 	.word	0x20002494

0800e52c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b08a      	sub	sp, #40	@ 0x28
 800e530:	af00      	add	r7, sp, #0
 800e532:	60f8      	str	r0, [r7, #12]
 800e534:	60b9      	str	r1, [r7, #8]
 800e536:	607a      	str	r2, [r7, #4]
 800e538:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e53a:	2300      	movs	r3, #0
 800e53c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d10b      	bne.n	800e55c <xTimerGenericCommand+0x30>
	__asm volatile
 800e544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e548:	f383 8811 	msr	BASEPRI, r3
 800e54c:	f3bf 8f6f 	isb	sy
 800e550:	f3bf 8f4f 	dsb	sy
 800e554:	623b      	str	r3, [r7, #32]
}
 800e556:	bf00      	nop
 800e558:	bf00      	nop
 800e55a:	e7fd      	b.n	800e558 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e55c:	4b19      	ldr	r3, [pc, #100]	@ (800e5c4 <xTimerGenericCommand+0x98>)
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d02a      	beq.n	800e5ba <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e564:	68bb      	ldr	r3, [r7, #8]
 800e566:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e570:	68bb      	ldr	r3, [r7, #8]
 800e572:	2b05      	cmp	r3, #5
 800e574:	dc18      	bgt.n	800e5a8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e576:	f7ff fdad 	bl	800e0d4 <xTaskGetSchedulerState>
 800e57a:	4603      	mov	r3, r0
 800e57c:	2b02      	cmp	r3, #2
 800e57e:	d109      	bne.n	800e594 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e580:	4b10      	ldr	r3, [pc, #64]	@ (800e5c4 <xTimerGenericCommand+0x98>)
 800e582:	6818      	ldr	r0, [r3, #0]
 800e584:	f107 0110 	add.w	r1, r7, #16
 800e588:	2300      	movs	r3, #0
 800e58a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e58c:	f7fe f898 	bl	800c6c0 <xQueueGenericSend>
 800e590:	6278      	str	r0, [r7, #36]	@ 0x24
 800e592:	e012      	b.n	800e5ba <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e594:	4b0b      	ldr	r3, [pc, #44]	@ (800e5c4 <xTimerGenericCommand+0x98>)
 800e596:	6818      	ldr	r0, [r3, #0]
 800e598:	f107 0110 	add.w	r1, r7, #16
 800e59c:	2300      	movs	r3, #0
 800e59e:	2200      	movs	r2, #0
 800e5a0:	f7fe f88e 	bl	800c6c0 <xQueueGenericSend>
 800e5a4:	6278      	str	r0, [r7, #36]	@ 0x24
 800e5a6:	e008      	b.n	800e5ba <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e5a8:	4b06      	ldr	r3, [pc, #24]	@ (800e5c4 <xTimerGenericCommand+0x98>)
 800e5aa:	6818      	ldr	r0, [r3, #0]
 800e5ac:	f107 0110 	add.w	r1, r7, #16
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	683a      	ldr	r2, [r7, #0]
 800e5b4:	f7fe f986 	bl	800c8c4 <xQueueGenericSendFromISR>
 800e5b8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e5ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e5bc:	4618      	mov	r0, r3
 800e5be:	3728      	adds	r7, #40	@ 0x28
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	bd80      	pop	{r7, pc}
 800e5c4:	20002490 	.word	0x20002490

0800e5c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b088      	sub	sp, #32
 800e5cc:	af02      	add	r7, sp, #8
 800e5ce:	6078      	str	r0, [r7, #4]
 800e5d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e5d2:	4b23      	ldr	r3, [pc, #140]	@ (800e660 <prvProcessExpiredTimer+0x98>)
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	68db      	ldr	r3, [r3, #12]
 800e5d8:	68db      	ldr	r3, [r3, #12]
 800e5da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e5dc:	697b      	ldr	r3, [r7, #20]
 800e5de:	3304      	adds	r3, #4
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	f7fd fe8f 	bl	800c304 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e5e6:	697b      	ldr	r3, [r7, #20]
 800e5e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e5ec:	f003 0304 	and.w	r3, r3, #4
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d023      	beq.n	800e63c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e5f4:	697b      	ldr	r3, [r7, #20]
 800e5f6:	699a      	ldr	r2, [r3, #24]
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	18d1      	adds	r1, r2, r3
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	683a      	ldr	r2, [r7, #0]
 800e600:	6978      	ldr	r0, [r7, #20]
 800e602:	f000 f8d5 	bl	800e7b0 <prvInsertTimerInActiveList>
 800e606:	4603      	mov	r3, r0
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d020      	beq.n	800e64e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e60c:	2300      	movs	r3, #0
 800e60e:	9300      	str	r3, [sp, #0]
 800e610:	2300      	movs	r3, #0
 800e612:	687a      	ldr	r2, [r7, #4]
 800e614:	2100      	movs	r1, #0
 800e616:	6978      	ldr	r0, [r7, #20]
 800e618:	f7ff ff88 	bl	800e52c <xTimerGenericCommand>
 800e61c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e61e:	693b      	ldr	r3, [r7, #16]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d114      	bne.n	800e64e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800e624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e628:	f383 8811 	msr	BASEPRI, r3
 800e62c:	f3bf 8f6f 	isb	sy
 800e630:	f3bf 8f4f 	dsb	sy
 800e634:	60fb      	str	r3, [r7, #12]
}
 800e636:	bf00      	nop
 800e638:	bf00      	nop
 800e63a:	e7fd      	b.n	800e638 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e63c:	697b      	ldr	r3, [r7, #20]
 800e63e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e642:	f023 0301 	bic.w	r3, r3, #1
 800e646:	b2da      	uxtb	r2, r3
 800e648:	697b      	ldr	r3, [r7, #20]
 800e64a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e64e:	697b      	ldr	r3, [r7, #20]
 800e650:	6a1b      	ldr	r3, [r3, #32]
 800e652:	6978      	ldr	r0, [r7, #20]
 800e654:	4798      	blx	r3
}
 800e656:	bf00      	nop
 800e658:	3718      	adds	r7, #24
 800e65a:	46bd      	mov	sp, r7
 800e65c:	bd80      	pop	{r7, pc}
 800e65e:	bf00      	nop
 800e660:	20002488 	.word	0x20002488

0800e664 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e664:	b580      	push	{r7, lr}
 800e666:	b084      	sub	sp, #16
 800e668:	af00      	add	r7, sp, #0
 800e66a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e66c:	f107 0308 	add.w	r3, r7, #8
 800e670:	4618      	mov	r0, r3
 800e672:	f000 f859 	bl	800e728 <prvGetNextExpireTime>
 800e676:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e678:	68bb      	ldr	r3, [r7, #8]
 800e67a:	4619      	mov	r1, r3
 800e67c:	68f8      	ldr	r0, [r7, #12]
 800e67e:	f000 f805 	bl	800e68c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e682:	f000 f8d7 	bl	800e834 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e686:	bf00      	nop
 800e688:	e7f0      	b.n	800e66c <prvTimerTask+0x8>
	...

0800e68c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b084      	sub	sp, #16
 800e690:	af00      	add	r7, sp, #0
 800e692:	6078      	str	r0, [r7, #4]
 800e694:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e696:	f7ff f8f1 	bl	800d87c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e69a:	f107 0308 	add.w	r3, r7, #8
 800e69e:	4618      	mov	r0, r3
 800e6a0:	f000 f866 	bl	800e770 <prvSampleTimeNow>
 800e6a4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e6a6:	68bb      	ldr	r3, [r7, #8]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d130      	bne.n	800e70e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e6ac:	683b      	ldr	r3, [r7, #0]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d10a      	bne.n	800e6c8 <prvProcessTimerOrBlockTask+0x3c>
 800e6b2:	687a      	ldr	r2, [r7, #4]
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	429a      	cmp	r2, r3
 800e6b8:	d806      	bhi.n	800e6c8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e6ba:	f7ff f8ed 	bl	800d898 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e6be:	68f9      	ldr	r1, [r7, #12]
 800e6c0:	6878      	ldr	r0, [r7, #4]
 800e6c2:	f7ff ff81 	bl	800e5c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e6c6:	e024      	b.n	800e712 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e6c8:	683b      	ldr	r3, [r7, #0]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d008      	beq.n	800e6e0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e6ce:	4b13      	ldr	r3, [pc, #76]	@ (800e71c <prvProcessTimerOrBlockTask+0x90>)
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d101      	bne.n	800e6dc <prvProcessTimerOrBlockTask+0x50>
 800e6d8:	2301      	movs	r3, #1
 800e6da:	e000      	b.n	800e6de <prvProcessTimerOrBlockTask+0x52>
 800e6dc:	2300      	movs	r3, #0
 800e6de:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e6e0:	4b0f      	ldr	r3, [pc, #60]	@ (800e720 <prvProcessTimerOrBlockTask+0x94>)
 800e6e2:	6818      	ldr	r0, [r3, #0]
 800e6e4:	687a      	ldr	r2, [r7, #4]
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	1ad3      	subs	r3, r2, r3
 800e6ea:	683a      	ldr	r2, [r7, #0]
 800e6ec:	4619      	mov	r1, r3
 800e6ee:	f7fe fe2b 	bl	800d348 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e6f2:	f7ff f8d1 	bl	800d898 <xTaskResumeAll>
 800e6f6:	4603      	mov	r3, r0
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d10a      	bne.n	800e712 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e6fc:	4b09      	ldr	r3, [pc, #36]	@ (800e724 <prvProcessTimerOrBlockTask+0x98>)
 800e6fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e702:	601a      	str	r2, [r3, #0]
 800e704:	f3bf 8f4f 	dsb	sy
 800e708:	f3bf 8f6f 	isb	sy
}
 800e70c:	e001      	b.n	800e712 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e70e:	f7ff f8c3 	bl	800d898 <xTaskResumeAll>
}
 800e712:	bf00      	nop
 800e714:	3710      	adds	r7, #16
 800e716:	46bd      	mov	sp, r7
 800e718:	bd80      	pop	{r7, pc}
 800e71a:	bf00      	nop
 800e71c:	2000248c 	.word	0x2000248c
 800e720:	20002490 	.word	0x20002490
 800e724:	e000ed04 	.word	0xe000ed04

0800e728 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e728:	b480      	push	{r7}
 800e72a:	b085      	sub	sp, #20
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e730:	4b0e      	ldr	r3, [pc, #56]	@ (800e76c <prvGetNextExpireTime+0x44>)
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d101      	bne.n	800e73e <prvGetNextExpireTime+0x16>
 800e73a:	2201      	movs	r2, #1
 800e73c:	e000      	b.n	800e740 <prvGetNextExpireTime+0x18>
 800e73e:	2200      	movs	r2, #0
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d105      	bne.n	800e758 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e74c:	4b07      	ldr	r3, [pc, #28]	@ (800e76c <prvGetNextExpireTime+0x44>)
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	68db      	ldr	r3, [r3, #12]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	60fb      	str	r3, [r7, #12]
 800e756:	e001      	b.n	800e75c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e758:	2300      	movs	r3, #0
 800e75a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e75c:	68fb      	ldr	r3, [r7, #12]
}
 800e75e:	4618      	mov	r0, r3
 800e760:	3714      	adds	r7, #20
 800e762:	46bd      	mov	sp, r7
 800e764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e768:	4770      	bx	lr
 800e76a:	bf00      	nop
 800e76c:	20002488 	.word	0x20002488

0800e770 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e770:	b580      	push	{r7, lr}
 800e772:	b084      	sub	sp, #16
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e778:	f7ff f92c 	bl	800d9d4 <xTaskGetTickCount>
 800e77c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e77e:	4b0b      	ldr	r3, [pc, #44]	@ (800e7ac <prvSampleTimeNow+0x3c>)
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	68fa      	ldr	r2, [r7, #12]
 800e784:	429a      	cmp	r2, r3
 800e786:	d205      	bcs.n	800e794 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e788:	f000 f93a 	bl	800ea00 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	2201      	movs	r2, #1
 800e790:	601a      	str	r2, [r3, #0]
 800e792:	e002      	b.n	800e79a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	2200      	movs	r2, #0
 800e798:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e79a:	4a04      	ldr	r2, [pc, #16]	@ (800e7ac <prvSampleTimeNow+0x3c>)
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e7a0:	68fb      	ldr	r3, [r7, #12]
}
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	3710      	adds	r7, #16
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	bd80      	pop	{r7, pc}
 800e7aa:	bf00      	nop
 800e7ac:	20002498 	.word	0x20002498

0800e7b0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	b086      	sub	sp, #24
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	60f8      	str	r0, [r7, #12]
 800e7b8:	60b9      	str	r1, [r7, #8]
 800e7ba:	607a      	str	r2, [r7, #4]
 800e7bc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e7be:	2300      	movs	r3, #0
 800e7c0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	68ba      	ldr	r2, [r7, #8]
 800e7c6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	68fa      	ldr	r2, [r7, #12]
 800e7cc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e7ce:	68ba      	ldr	r2, [r7, #8]
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	429a      	cmp	r2, r3
 800e7d4:	d812      	bhi.n	800e7fc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e7d6:	687a      	ldr	r2, [r7, #4]
 800e7d8:	683b      	ldr	r3, [r7, #0]
 800e7da:	1ad2      	subs	r2, r2, r3
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	699b      	ldr	r3, [r3, #24]
 800e7e0:	429a      	cmp	r2, r3
 800e7e2:	d302      	bcc.n	800e7ea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e7e4:	2301      	movs	r3, #1
 800e7e6:	617b      	str	r3, [r7, #20]
 800e7e8:	e01b      	b.n	800e822 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e7ea:	4b10      	ldr	r3, [pc, #64]	@ (800e82c <prvInsertTimerInActiveList+0x7c>)
 800e7ec:	681a      	ldr	r2, [r3, #0]
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	3304      	adds	r3, #4
 800e7f2:	4619      	mov	r1, r3
 800e7f4:	4610      	mov	r0, r2
 800e7f6:	f7fd fd4c 	bl	800c292 <vListInsert>
 800e7fa:	e012      	b.n	800e822 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e7fc:	687a      	ldr	r2, [r7, #4]
 800e7fe:	683b      	ldr	r3, [r7, #0]
 800e800:	429a      	cmp	r2, r3
 800e802:	d206      	bcs.n	800e812 <prvInsertTimerInActiveList+0x62>
 800e804:	68ba      	ldr	r2, [r7, #8]
 800e806:	683b      	ldr	r3, [r7, #0]
 800e808:	429a      	cmp	r2, r3
 800e80a:	d302      	bcc.n	800e812 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e80c:	2301      	movs	r3, #1
 800e80e:	617b      	str	r3, [r7, #20]
 800e810:	e007      	b.n	800e822 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e812:	4b07      	ldr	r3, [pc, #28]	@ (800e830 <prvInsertTimerInActiveList+0x80>)
 800e814:	681a      	ldr	r2, [r3, #0]
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	3304      	adds	r3, #4
 800e81a:	4619      	mov	r1, r3
 800e81c:	4610      	mov	r0, r2
 800e81e:	f7fd fd38 	bl	800c292 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e822:	697b      	ldr	r3, [r7, #20]
}
 800e824:	4618      	mov	r0, r3
 800e826:	3718      	adds	r7, #24
 800e828:	46bd      	mov	sp, r7
 800e82a:	bd80      	pop	{r7, pc}
 800e82c:	2000248c 	.word	0x2000248c
 800e830:	20002488 	.word	0x20002488

0800e834 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e834:	b580      	push	{r7, lr}
 800e836:	b08e      	sub	sp, #56	@ 0x38
 800e838:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e83a:	e0ce      	b.n	800e9da <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	da19      	bge.n	800e876 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e842:	1d3b      	adds	r3, r7, #4
 800e844:	3304      	adds	r3, #4
 800e846:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d10b      	bne.n	800e866 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800e84e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e852:	f383 8811 	msr	BASEPRI, r3
 800e856:	f3bf 8f6f 	isb	sy
 800e85a:	f3bf 8f4f 	dsb	sy
 800e85e:	61fb      	str	r3, [r7, #28]
}
 800e860:	bf00      	nop
 800e862:	bf00      	nop
 800e864:	e7fd      	b.n	800e862 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e86c:	6850      	ldr	r0, [r2, #4]
 800e86e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e870:	6892      	ldr	r2, [r2, #8]
 800e872:	4611      	mov	r1, r2
 800e874:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	f2c0 80ae 	blt.w	800e9da <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e884:	695b      	ldr	r3, [r3, #20]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d004      	beq.n	800e894 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e88a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e88c:	3304      	adds	r3, #4
 800e88e:	4618      	mov	r0, r3
 800e890:	f7fd fd38 	bl	800c304 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e894:	463b      	mov	r3, r7
 800e896:	4618      	mov	r0, r3
 800e898:	f7ff ff6a 	bl	800e770 <prvSampleTimeNow>
 800e89c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	2b09      	cmp	r3, #9
 800e8a2:	f200 8097 	bhi.w	800e9d4 <prvProcessReceivedCommands+0x1a0>
 800e8a6:	a201      	add	r2, pc, #4	@ (adr r2, 800e8ac <prvProcessReceivedCommands+0x78>)
 800e8a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8ac:	0800e8d5 	.word	0x0800e8d5
 800e8b0:	0800e8d5 	.word	0x0800e8d5
 800e8b4:	0800e8d5 	.word	0x0800e8d5
 800e8b8:	0800e94b 	.word	0x0800e94b
 800e8bc:	0800e95f 	.word	0x0800e95f
 800e8c0:	0800e9ab 	.word	0x0800e9ab
 800e8c4:	0800e8d5 	.word	0x0800e8d5
 800e8c8:	0800e8d5 	.word	0x0800e8d5
 800e8cc:	0800e94b 	.word	0x0800e94b
 800e8d0:	0800e95f 	.word	0x0800e95f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e8d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e8da:	f043 0301 	orr.w	r3, r3, #1
 800e8de:	b2da      	uxtb	r2, r3
 800e8e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e8e6:	68ba      	ldr	r2, [r7, #8]
 800e8e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8ea:	699b      	ldr	r3, [r3, #24]
 800e8ec:	18d1      	adds	r1, r2, r3
 800e8ee:	68bb      	ldr	r3, [r7, #8]
 800e8f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e8f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e8f4:	f7ff ff5c 	bl	800e7b0 <prvInsertTimerInActiveList>
 800e8f8:	4603      	mov	r3, r0
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d06c      	beq.n	800e9d8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e8fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e900:	6a1b      	ldr	r3, [r3, #32]
 800e902:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e904:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e908:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e90c:	f003 0304 	and.w	r3, r3, #4
 800e910:	2b00      	cmp	r3, #0
 800e912:	d061      	beq.n	800e9d8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e914:	68ba      	ldr	r2, [r7, #8]
 800e916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e918:	699b      	ldr	r3, [r3, #24]
 800e91a:	441a      	add	r2, r3
 800e91c:	2300      	movs	r3, #0
 800e91e:	9300      	str	r3, [sp, #0]
 800e920:	2300      	movs	r3, #0
 800e922:	2100      	movs	r1, #0
 800e924:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e926:	f7ff fe01 	bl	800e52c <xTimerGenericCommand>
 800e92a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e92c:	6a3b      	ldr	r3, [r7, #32]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d152      	bne.n	800e9d8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800e932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e936:	f383 8811 	msr	BASEPRI, r3
 800e93a:	f3bf 8f6f 	isb	sy
 800e93e:	f3bf 8f4f 	dsb	sy
 800e942:	61bb      	str	r3, [r7, #24]
}
 800e944:	bf00      	nop
 800e946:	bf00      	nop
 800e948:	e7fd      	b.n	800e946 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e94a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e94c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e950:	f023 0301 	bic.w	r3, r3, #1
 800e954:	b2da      	uxtb	r2, r3
 800e956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e958:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e95c:	e03d      	b.n	800e9da <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e95e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e960:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e964:	f043 0301 	orr.w	r3, r3, #1
 800e968:	b2da      	uxtb	r2, r3
 800e96a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e96c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e970:	68ba      	ldr	r2, [r7, #8]
 800e972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e974:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e978:	699b      	ldr	r3, [r3, #24]
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d10b      	bne.n	800e996 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800e97e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e982:	f383 8811 	msr	BASEPRI, r3
 800e986:	f3bf 8f6f 	isb	sy
 800e98a:	f3bf 8f4f 	dsb	sy
 800e98e:	617b      	str	r3, [r7, #20]
}
 800e990:	bf00      	nop
 800e992:	bf00      	nop
 800e994:	e7fd      	b.n	800e992 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e998:	699a      	ldr	r2, [r3, #24]
 800e99a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e99c:	18d1      	adds	r1, r2, r3
 800e99e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e9a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e9a4:	f7ff ff04 	bl	800e7b0 <prvInsertTimerInActiveList>
					break;
 800e9a8:	e017      	b.n	800e9da <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e9aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e9b0:	f003 0302 	and.w	r3, r3, #2
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d103      	bne.n	800e9c0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800e9b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e9ba:	f000 fbeb 	bl	800f194 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e9be:	e00c      	b.n	800e9da <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e9c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e9c6:	f023 0301 	bic.w	r3, r3, #1
 800e9ca:	b2da      	uxtb	r2, r3
 800e9cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e9d2:	e002      	b.n	800e9da <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800e9d4:	bf00      	nop
 800e9d6:	e000      	b.n	800e9da <prvProcessReceivedCommands+0x1a6>
					break;
 800e9d8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e9da:	4b08      	ldr	r3, [pc, #32]	@ (800e9fc <prvProcessReceivedCommands+0x1c8>)
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	1d39      	adds	r1, r7, #4
 800e9e0:	2200      	movs	r2, #0
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	f7fe f89c 	bl	800cb20 <xQueueReceive>
 800e9e8:	4603      	mov	r3, r0
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	f47f af26 	bne.w	800e83c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800e9f0:	bf00      	nop
 800e9f2:	bf00      	nop
 800e9f4:	3730      	adds	r7, #48	@ 0x30
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	bd80      	pop	{r7, pc}
 800e9fa:	bf00      	nop
 800e9fc:	20002490 	.word	0x20002490

0800ea00 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b088      	sub	sp, #32
 800ea04:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ea06:	e049      	b.n	800ea9c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ea08:	4b2e      	ldr	r3, [pc, #184]	@ (800eac4 <prvSwitchTimerLists+0xc4>)
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	68db      	ldr	r3, [r3, #12]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea12:	4b2c      	ldr	r3, [pc, #176]	@ (800eac4 <prvSwitchTimerLists+0xc4>)
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	68db      	ldr	r3, [r3, #12]
 800ea18:	68db      	ldr	r3, [r3, #12]
 800ea1a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	3304      	adds	r3, #4
 800ea20:	4618      	mov	r0, r3
 800ea22:	f7fd fc6f 	bl	800c304 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	6a1b      	ldr	r3, [r3, #32]
 800ea2a:	68f8      	ldr	r0, [r7, #12]
 800ea2c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ea34:	f003 0304 	and.w	r3, r3, #4
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d02f      	beq.n	800ea9c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	699b      	ldr	r3, [r3, #24]
 800ea40:	693a      	ldr	r2, [r7, #16]
 800ea42:	4413      	add	r3, r2
 800ea44:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ea46:	68ba      	ldr	r2, [r7, #8]
 800ea48:	693b      	ldr	r3, [r7, #16]
 800ea4a:	429a      	cmp	r2, r3
 800ea4c:	d90e      	bls.n	800ea6c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	68ba      	ldr	r2, [r7, #8]
 800ea52:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	68fa      	ldr	r2, [r7, #12]
 800ea58:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ea5a:	4b1a      	ldr	r3, [pc, #104]	@ (800eac4 <prvSwitchTimerLists+0xc4>)
 800ea5c:	681a      	ldr	r2, [r3, #0]
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	3304      	adds	r3, #4
 800ea62:	4619      	mov	r1, r3
 800ea64:	4610      	mov	r0, r2
 800ea66:	f7fd fc14 	bl	800c292 <vListInsert>
 800ea6a:	e017      	b.n	800ea9c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	9300      	str	r3, [sp, #0]
 800ea70:	2300      	movs	r3, #0
 800ea72:	693a      	ldr	r2, [r7, #16]
 800ea74:	2100      	movs	r1, #0
 800ea76:	68f8      	ldr	r0, [r7, #12]
 800ea78:	f7ff fd58 	bl	800e52c <xTimerGenericCommand>
 800ea7c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d10b      	bne.n	800ea9c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800ea84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea88:	f383 8811 	msr	BASEPRI, r3
 800ea8c:	f3bf 8f6f 	isb	sy
 800ea90:	f3bf 8f4f 	dsb	sy
 800ea94:	603b      	str	r3, [r7, #0]
}
 800ea96:	bf00      	nop
 800ea98:	bf00      	nop
 800ea9a:	e7fd      	b.n	800ea98 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ea9c:	4b09      	ldr	r3, [pc, #36]	@ (800eac4 <prvSwitchTimerLists+0xc4>)
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d1b0      	bne.n	800ea08 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800eaa6:	4b07      	ldr	r3, [pc, #28]	@ (800eac4 <prvSwitchTimerLists+0xc4>)
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800eaac:	4b06      	ldr	r3, [pc, #24]	@ (800eac8 <prvSwitchTimerLists+0xc8>)
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	4a04      	ldr	r2, [pc, #16]	@ (800eac4 <prvSwitchTimerLists+0xc4>)
 800eab2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800eab4:	4a04      	ldr	r2, [pc, #16]	@ (800eac8 <prvSwitchTimerLists+0xc8>)
 800eab6:	697b      	ldr	r3, [r7, #20]
 800eab8:	6013      	str	r3, [r2, #0]
}
 800eaba:	bf00      	nop
 800eabc:	3718      	adds	r7, #24
 800eabe:	46bd      	mov	sp, r7
 800eac0:	bd80      	pop	{r7, pc}
 800eac2:	bf00      	nop
 800eac4:	20002488 	.word	0x20002488
 800eac8:	2000248c 	.word	0x2000248c

0800eacc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800eacc:	b580      	push	{r7, lr}
 800eace:	b082      	sub	sp, #8
 800ead0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ead2:	f000 f969 	bl	800eda8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ead6:	4b15      	ldr	r3, [pc, #84]	@ (800eb2c <prvCheckForValidListAndQueue+0x60>)
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d120      	bne.n	800eb20 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800eade:	4814      	ldr	r0, [pc, #80]	@ (800eb30 <prvCheckForValidListAndQueue+0x64>)
 800eae0:	f7fd fb86 	bl	800c1f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800eae4:	4813      	ldr	r0, [pc, #76]	@ (800eb34 <prvCheckForValidListAndQueue+0x68>)
 800eae6:	f7fd fb83 	bl	800c1f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800eaea:	4b13      	ldr	r3, [pc, #76]	@ (800eb38 <prvCheckForValidListAndQueue+0x6c>)
 800eaec:	4a10      	ldr	r2, [pc, #64]	@ (800eb30 <prvCheckForValidListAndQueue+0x64>)
 800eaee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800eaf0:	4b12      	ldr	r3, [pc, #72]	@ (800eb3c <prvCheckForValidListAndQueue+0x70>)
 800eaf2:	4a10      	ldr	r2, [pc, #64]	@ (800eb34 <prvCheckForValidListAndQueue+0x68>)
 800eaf4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800eaf6:	2300      	movs	r3, #0
 800eaf8:	9300      	str	r3, [sp, #0]
 800eafa:	4b11      	ldr	r3, [pc, #68]	@ (800eb40 <prvCheckForValidListAndQueue+0x74>)
 800eafc:	4a11      	ldr	r2, [pc, #68]	@ (800eb44 <prvCheckForValidListAndQueue+0x78>)
 800eafe:	2110      	movs	r1, #16
 800eb00:	200a      	movs	r0, #10
 800eb02:	f7fd fc93 	bl	800c42c <xQueueGenericCreateStatic>
 800eb06:	4603      	mov	r3, r0
 800eb08:	4a08      	ldr	r2, [pc, #32]	@ (800eb2c <prvCheckForValidListAndQueue+0x60>)
 800eb0a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800eb0c:	4b07      	ldr	r3, [pc, #28]	@ (800eb2c <prvCheckForValidListAndQueue+0x60>)
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d005      	beq.n	800eb20 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800eb14:	4b05      	ldr	r3, [pc, #20]	@ (800eb2c <prvCheckForValidListAndQueue+0x60>)
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	490b      	ldr	r1, [pc, #44]	@ (800eb48 <prvCheckForValidListAndQueue+0x7c>)
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	f7fe fbc0 	bl	800d2a0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800eb20:	f000 f974 	bl	800ee0c <vPortExitCritical>
}
 800eb24:	bf00      	nop
 800eb26:	46bd      	mov	sp, r7
 800eb28:	bd80      	pop	{r7, pc}
 800eb2a:	bf00      	nop
 800eb2c:	20002490 	.word	0x20002490
 800eb30:	20002460 	.word	0x20002460
 800eb34:	20002474 	.word	0x20002474
 800eb38:	20002488 	.word	0x20002488
 800eb3c:	2000248c 	.word	0x2000248c
 800eb40:	2000253c 	.word	0x2000253c
 800eb44:	2000249c 	.word	0x2000249c
 800eb48:	08012040 	.word	0x08012040

0800eb4c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800eb4c:	b480      	push	{r7}
 800eb4e:	b085      	sub	sp, #20
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	60f8      	str	r0, [r7, #12]
 800eb54:	60b9      	str	r1, [r7, #8]
 800eb56:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	3b04      	subs	r3, #4
 800eb5c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800eb64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	3b04      	subs	r3, #4
 800eb6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800eb6c:	68bb      	ldr	r3, [r7, #8]
 800eb6e:	f023 0201 	bic.w	r2, r3, #1
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	3b04      	subs	r3, #4
 800eb7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800eb7c:	4a0c      	ldr	r2, [pc, #48]	@ (800ebb0 <pxPortInitialiseStack+0x64>)
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	3b14      	subs	r3, #20
 800eb86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800eb88:	687a      	ldr	r2, [r7, #4]
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	3b04      	subs	r3, #4
 800eb92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	f06f 0202 	mvn.w	r2, #2
 800eb9a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	3b20      	subs	r3, #32
 800eba0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800eba2:	68fb      	ldr	r3, [r7, #12]
}
 800eba4:	4618      	mov	r0, r3
 800eba6:	3714      	adds	r7, #20
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebae:	4770      	bx	lr
 800ebb0:	0800ebb5 	.word	0x0800ebb5

0800ebb4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ebb4:	b480      	push	{r7}
 800ebb6:	b085      	sub	sp, #20
 800ebb8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ebba:	2300      	movs	r3, #0
 800ebbc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ebbe:	4b13      	ldr	r3, [pc, #76]	@ (800ec0c <prvTaskExitError+0x58>)
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebc6:	d00b      	beq.n	800ebe0 <prvTaskExitError+0x2c>
	__asm volatile
 800ebc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebcc:	f383 8811 	msr	BASEPRI, r3
 800ebd0:	f3bf 8f6f 	isb	sy
 800ebd4:	f3bf 8f4f 	dsb	sy
 800ebd8:	60fb      	str	r3, [r7, #12]
}
 800ebda:	bf00      	nop
 800ebdc:	bf00      	nop
 800ebde:	e7fd      	b.n	800ebdc <prvTaskExitError+0x28>
	__asm volatile
 800ebe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebe4:	f383 8811 	msr	BASEPRI, r3
 800ebe8:	f3bf 8f6f 	isb	sy
 800ebec:	f3bf 8f4f 	dsb	sy
 800ebf0:	60bb      	str	r3, [r7, #8]
}
 800ebf2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ebf4:	bf00      	nop
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d0fc      	beq.n	800ebf6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ebfc:	bf00      	nop
 800ebfe:	bf00      	nop
 800ec00:	3714      	adds	r7, #20
 800ec02:	46bd      	mov	sp, r7
 800ec04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec08:	4770      	bx	lr
 800ec0a:	bf00      	nop
 800ec0c:	2000000c 	.word	0x2000000c

0800ec10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ec10:	4b07      	ldr	r3, [pc, #28]	@ (800ec30 <pxCurrentTCBConst2>)
 800ec12:	6819      	ldr	r1, [r3, #0]
 800ec14:	6808      	ldr	r0, [r1, #0]
 800ec16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec1a:	f380 8809 	msr	PSP, r0
 800ec1e:	f3bf 8f6f 	isb	sy
 800ec22:	f04f 0000 	mov.w	r0, #0
 800ec26:	f380 8811 	msr	BASEPRI, r0
 800ec2a:	4770      	bx	lr
 800ec2c:	f3af 8000 	nop.w

0800ec30 <pxCurrentTCBConst2>:
 800ec30:	20001f60 	.word	0x20001f60
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ec34:	bf00      	nop
 800ec36:	bf00      	nop

0800ec38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ec38:	4808      	ldr	r0, [pc, #32]	@ (800ec5c <prvPortStartFirstTask+0x24>)
 800ec3a:	6800      	ldr	r0, [r0, #0]
 800ec3c:	6800      	ldr	r0, [r0, #0]
 800ec3e:	f380 8808 	msr	MSP, r0
 800ec42:	f04f 0000 	mov.w	r0, #0
 800ec46:	f380 8814 	msr	CONTROL, r0
 800ec4a:	b662      	cpsie	i
 800ec4c:	b661      	cpsie	f
 800ec4e:	f3bf 8f4f 	dsb	sy
 800ec52:	f3bf 8f6f 	isb	sy
 800ec56:	df00      	svc	0
 800ec58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ec5a:	bf00      	nop
 800ec5c:	e000ed08 	.word	0xe000ed08

0800ec60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b086      	sub	sp, #24
 800ec64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ec66:	4b47      	ldr	r3, [pc, #284]	@ (800ed84 <xPortStartScheduler+0x124>)
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	4a47      	ldr	r2, [pc, #284]	@ (800ed88 <xPortStartScheduler+0x128>)
 800ec6c:	4293      	cmp	r3, r2
 800ec6e:	d10b      	bne.n	800ec88 <xPortStartScheduler+0x28>
	__asm volatile
 800ec70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec74:	f383 8811 	msr	BASEPRI, r3
 800ec78:	f3bf 8f6f 	isb	sy
 800ec7c:	f3bf 8f4f 	dsb	sy
 800ec80:	613b      	str	r3, [r7, #16]
}
 800ec82:	bf00      	nop
 800ec84:	bf00      	nop
 800ec86:	e7fd      	b.n	800ec84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ec88:	4b3e      	ldr	r3, [pc, #248]	@ (800ed84 <xPortStartScheduler+0x124>)
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	4a3f      	ldr	r2, [pc, #252]	@ (800ed8c <xPortStartScheduler+0x12c>)
 800ec8e:	4293      	cmp	r3, r2
 800ec90:	d10b      	bne.n	800ecaa <xPortStartScheduler+0x4a>
	__asm volatile
 800ec92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec96:	f383 8811 	msr	BASEPRI, r3
 800ec9a:	f3bf 8f6f 	isb	sy
 800ec9e:	f3bf 8f4f 	dsb	sy
 800eca2:	60fb      	str	r3, [r7, #12]
}
 800eca4:	bf00      	nop
 800eca6:	bf00      	nop
 800eca8:	e7fd      	b.n	800eca6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ecaa:	4b39      	ldr	r3, [pc, #228]	@ (800ed90 <xPortStartScheduler+0x130>)
 800ecac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ecae:	697b      	ldr	r3, [r7, #20]
 800ecb0:	781b      	ldrb	r3, [r3, #0]
 800ecb2:	b2db      	uxtb	r3, r3
 800ecb4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ecb6:	697b      	ldr	r3, [r7, #20]
 800ecb8:	22ff      	movs	r2, #255	@ 0xff
 800ecba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ecbc:	697b      	ldr	r3, [r7, #20]
 800ecbe:	781b      	ldrb	r3, [r3, #0]
 800ecc0:	b2db      	uxtb	r3, r3
 800ecc2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ecc4:	78fb      	ldrb	r3, [r7, #3]
 800ecc6:	b2db      	uxtb	r3, r3
 800ecc8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800eccc:	b2da      	uxtb	r2, r3
 800ecce:	4b31      	ldr	r3, [pc, #196]	@ (800ed94 <xPortStartScheduler+0x134>)
 800ecd0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ecd2:	4b31      	ldr	r3, [pc, #196]	@ (800ed98 <xPortStartScheduler+0x138>)
 800ecd4:	2207      	movs	r2, #7
 800ecd6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ecd8:	e009      	b.n	800ecee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800ecda:	4b2f      	ldr	r3, [pc, #188]	@ (800ed98 <xPortStartScheduler+0x138>)
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	3b01      	subs	r3, #1
 800ece0:	4a2d      	ldr	r2, [pc, #180]	@ (800ed98 <xPortStartScheduler+0x138>)
 800ece2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ece4:	78fb      	ldrb	r3, [r7, #3]
 800ece6:	b2db      	uxtb	r3, r3
 800ece8:	005b      	lsls	r3, r3, #1
 800ecea:	b2db      	uxtb	r3, r3
 800ecec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ecee:	78fb      	ldrb	r3, [r7, #3]
 800ecf0:	b2db      	uxtb	r3, r3
 800ecf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ecf6:	2b80      	cmp	r3, #128	@ 0x80
 800ecf8:	d0ef      	beq.n	800ecda <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ecfa:	4b27      	ldr	r3, [pc, #156]	@ (800ed98 <xPortStartScheduler+0x138>)
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	f1c3 0307 	rsb	r3, r3, #7
 800ed02:	2b04      	cmp	r3, #4
 800ed04:	d00b      	beq.n	800ed1e <xPortStartScheduler+0xbe>
	__asm volatile
 800ed06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed0a:	f383 8811 	msr	BASEPRI, r3
 800ed0e:	f3bf 8f6f 	isb	sy
 800ed12:	f3bf 8f4f 	dsb	sy
 800ed16:	60bb      	str	r3, [r7, #8]
}
 800ed18:	bf00      	nop
 800ed1a:	bf00      	nop
 800ed1c:	e7fd      	b.n	800ed1a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ed1e:	4b1e      	ldr	r3, [pc, #120]	@ (800ed98 <xPortStartScheduler+0x138>)
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	021b      	lsls	r3, r3, #8
 800ed24:	4a1c      	ldr	r2, [pc, #112]	@ (800ed98 <xPortStartScheduler+0x138>)
 800ed26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ed28:	4b1b      	ldr	r3, [pc, #108]	@ (800ed98 <xPortStartScheduler+0x138>)
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ed30:	4a19      	ldr	r2, [pc, #100]	@ (800ed98 <xPortStartScheduler+0x138>)
 800ed32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	b2da      	uxtb	r2, r3
 800ed38:	697b      	ldr	r3, [r7, #20]
 800ed3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ed3c:	4b17      	ldr	r3, [pc, #92]	@ (800ed9c <xPortStartScheduler+0x13c>)
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	4a16      	ldr	r2, [pc, #88]	@ (800ed9c <xPortStartScheduler+0x13c>)
 800ed42:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ed46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ed48:	4b14      	ldr	r3, [pc, #80]	@ (800ed9c <xPortStartScheduler+0x13c>)
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	4a13      	ldr	r2, [pc, #76]	@ (800ed9c <xPortStartScheduler+0x13c>)
 800ed4e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800ed52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ed54:	f000 f8da 	bl	800ef0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ed58:	4b11      	ldr	r3, [pc, #68]	@ (800eda0 <xPortStartScheduler+0x140>)
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ed5e:	f000 f8f9 	bl	800ef54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ed62:	4b10      	ldr	r3, [pc, #64]	@ (800eda4 <xPortStartScheduler+0x144>)
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	4a0f      	ldr	r2, [pc, #60]	@ (800eda4 <xPortStartScheduler+0x144>)
 800ed68:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800ed6c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ed6e:	f7ff ff63 	bl	800ec38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ed72:	f7fe ff0b 	bl	800db8c <vTaskSwitchContext>
	prvTaskExitError();
 800ed76:	f7ff ff1d 	bl	800ebb4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ed7a:	2300      	movs	r3, #0
}
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	3718      	adds	r7, #24
 800ed80:	46bd      	mov	sp, r7
 800ed82:	bd80      	pop	{r7, pc}
 800ed84:	e000ed00 	.word	0xe000ed00
 800ed88:	410fc271 	.word	0x410fc271
 800ed8c:	410fc270 	.word	0x410fc270
 800ed90:	e000e400 	.word	0xe000e400
 800ed94:	2000258c 	.word	0x2000258c
 800ed98:	20002590 	.word	0x20002590
 800ed9c:	e000ed20 	.word	0xe000ed20
 800eda0:	2000000c 	.word	0x2000000c
 800eda4:	e000ef34 	.word	0xe000ef34

0800eda8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800eda8:	b480      	push	{r7}
 800edaa:	b083      	sub	sp, #12
 800edac:	af00      	add	r7, sp, #0
	__asm volatile
 800edae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edb2:	f383 8811 	msr	BASEPRI, r3
 800edb6:	f3bf 8f6f 	isb	sy
 800edba:	f3bf 8f4f 	dsb	sy
 800edbe:	607b      	str	r3, [r7, #4]
}
 800edc0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800edc2:	4b10      	ldr	r3, [pc, #64]	@ (800ee04 <vPortEnterCritical+0x5c>)
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	3301      	adds	r3, #1
 800edc8:	4a0e      	ldr	r2, [pc, #56]	@ (800ee04 <vPortEnterCritical+0x5c>)
 800edca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800edcc:	4b0d      	ldr	r3, [pc, #52]	@ (800ee04 <vPortEnterCritical+0x5c>)
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	2b01      	cmp	r3, #1
 800edd2:	d110      	bne.n	800edf6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800edd4:	4b0c      	ldr	r3, [pc, #48]	@ (800ee08 <vPortEnterCritical+0x60>)
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	b2db      	uxtb	r3, r3
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d00b      	beq.n	800edf6 <vPortEnterCritical+0x4e>
	__asm volatile
 800edde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ede2:	f383 8811 	msr	BASEPRI, r3
 800ede6:	f3bf 8f6f 	isb	sy
 800edea:	f3bf 8f4f 	dsb	sy
 800edee:	603b      	str	r3, [r7, #0]
}
 800edf0:	bf00      	nop
 800edf2:	bf00      	nop
 800edf4:	e7fd      	b.n	800edf2 <vPortEnterCritical+0x4a>
	}
}
 800edf6:	bf00      	nop
 800edf8:	370c      	adds	r7, #12
 800edfa:	46bd      	mov	sp, r7
 800edfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee00:	4770      	bx	lr
 800ee02:	bf00      	nop
 800ee04:	2000000c 	.word	0x2000000c
 800ee08:	e000ed04 	.word	0xe000ed04

0800ee0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ee0c:	b480      	push	{r7}
 800ee0e:	b083      	sub	sp, #12
 800ee10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ee12:	4b12      	ldr	r3, [pc, #72]	@ (800ee5c <vPortExitCritical+0x50>)
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d10b      	bne.n	800ee32 <vPortExitCritical+0x26>
	__asm volatile
 800ee1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee1e:	f383 8811 	msr	BASEPRI, r3
 800ee22:	f3bf 8f6f 	isb	sy
 800ee26:	f3bf 8f4f 	dsb	sy
 800ee2a:	607b      	str	r3, [r7, #4]
}
 800ee2c:	bf00      	nop
 800ee2e:	bf00      	nop
 800ee30:	e7fd      	b.n	800ee2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ee32:	4b0a      	ldr	r3, [pc, #40]	@ (800ee5c <vPortExitCritical+0x50>)
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	3b01      	subs	r3, #1
 800ee38:	4a08      	ldr	r2, [pc, #32]	@ (800ee5c <vPortExitCritical+0x50>)
 800ee3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ee3c:	4b07      	ldr	r3, [pc, #28]	@ (800ee5c <vPortExitCritical+0x50>)
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d105      	bne.n	800ee50 <vPortExitCritical+0x44>
 800ee44:	2300      	movs	r3, #0
 800ee46:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ee48:	683b      	ldr	r3, [r7, #0]
 800ee4a:	f383 8811 	msr	BASEPRI, r3
}
 800ee4e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ee50:	bf00      	nop
 800ee52:	370c      	adds	r7, #12
 800ee54:	46bd      	mov	sp, r7
 800ee56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5a:	4770      	bx	lr
 800ee5c:	2000000c 	.word	0x2000000c

0800ee60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ee60:	f3ef 8009 	mrs	r0, PSP
 800ee64:	f3bf 8f6f 	isb	sy
 800ee68:	4b15      	ldr	r3, [pc, #84]	@ (800eec0 <pxCurrentTCBConst>)
 800ee6a:	681a      	ldr	r2, [r3, #0]
 800ee6c:	f01e 0f10 	tst.w	lr, #16
 800ee70:	bf08      	it	eq
 800ee72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ee76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee7a:	6010      	str	r0, [r2, #0]
 800ee7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ee80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ee84:	f380 8811 	msr	BASEPRI, r0
 800ee88:	f3bf 8f4f 	dsb	sy
 800ee8c:	f3bf 8f6f 	isb	sy
 800ee90:	f7fe fe7c 	bl	800db8c <vTaskSwitchContext>
 800ee94:	f04f 0000 	mov.w	r0, #0
 800ee98:	f380 8811 	msr	BASEPRI, r0
 800ee9c:	bc09      	pop	{r0, r3}
 800ee9e:	6819      	ldr	r1, [r3, #0]
 800eea0:	6808      	ldr	r0, [r1, #0]
 800eea2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eea6:	f01e 0f10 	tst.w	lr, #16
 800eeaa:	bf08      	it	eq
 800eeac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800eeb0:	f380 8809 	msr	PSP, r0
 800eeb4:	f3bf 8f6f 	isb	sy
 800eeb8:	4770      	bx	lr
 800eeba:	bf00      	nop
 800eebc:	f3af 8000 	nop.w

0800eec0 <pxCurrentTCBConst>:
 800eec0:	20001f60 	.word	0x20001f60
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800eec4:	bf00      	nop
 800eec6:	bf00      	nop

0800eec8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800eec8:	b580      	push	{r7, lr}
 800eeca:	b082      	sub	sp, #8
 800eecc:	af00      	add	r7, sp, #0
	__asm volatile
 800eece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eed2:	f383 8811 	msr	BASEPRI, r3
 800eed6:	f3bf 8f6f 	isb	sy
 800eeda:	f3bf 8f4f 	dsb	sy
 800eede:	607b      	str	r3, [r7, #4]
}
 800eee0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800eee2:	f7fe fd99 	bl	800da18 <xTaskIncrementTick>
 800eee6:	4603      	mov	r3, r0
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d003      	beq.n	800eef4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800eeec:	4b06      	ldr	r3, [pc, #24]	@ (800ef08 <xPortSysTickHandler+0x40>)
 800eeee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eef2:	601a      	str	r2, [r3, #0]
 800eef4:	2300      	movs	r3, #0
 800eef6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800eef8:	683b      	ldr	r3, [r7, #0]
 800eefa:	f383 8811 	msr	BASEPRI, r3
}
 800eefe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ef00:	bf00      	nop
 800ef02:	3708      	adds	r7, #8
 800ef04:	46bd      	mov	sp, r7
 800ef06:	bd80      	pop	{r7, pc}
 800ef08:	e000ed04 	.word	0xe000ed04

0800ef0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ef0c:	b480      	push	{r7}
 800ef0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ef10:	4b0b      	ldr	r3, [pc, #44]	@ (800ef40 <vPortSetupTimerInterrupt+0x34>)
 800ef12:	2200      	movs	r2, #0
 800ef14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ef16:	4b0b      	ldr	r3, [pc, #44]	@ (800ef44 <vPortSetupTimerInterrupt+0x38>)
 800ef18:	2200      	movs	r2, #0
 800ef1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ef1c:	4b0a      	ldr	r3, [pc, #40]	@ (800ef48 <vPortSetupTimerInterrupt+0x3c>)
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	4a0a      	ldr	r2, [pc, #40]	@ (800ef4c <vPortSetupTimerInterrupt+0x40>)
 800ef22:	fba2 2303 	umull	r2, r3, r2, r3
 800ef26:	099b      	lsrs	r3, r3, #6
 800ef28:	4a09      	ldr	r2, [pc, #36]	@ (800ef50 <vPortSetupTimerInterrupt+0x44>)
 800ef2a:	3b01      	subs	r3, #1
 800ef2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ef2e:	4b04      	ldr	r3, [pc, #16]	@ (800ef40 <vPortSetupTimerInterrupt+0x34>)
 800ef30:	2207      	movs	r2, #7
 800ef32:	601a      	str	r2, [r3, #0]
}
 800ef34:	bf00      	nop
 800ef36:	46bd      	mov	sp, r7
 800ef38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef3c:	4770      	bx	lr
 800ef3e:	bf00      	nop
 800ef40:	e000e010 	.word	0xe000e010
 800ef44:	e000e018 	.word	0xe000e018
 800ef48:	20000000 	.word	0x20000000
 800ef4c:	10624dd3 	.word	0x10624dd3
 800ef50:	e000e014 	.word	0xe000e014

0800ef54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ef54:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ef64 <vPortEnableVFP+0x10>
 800ef58:	6801      	ldr	r1, [r0, #0]
 800ef5a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ef5e:	6001      	str	r1, [r0, #0]
 800ef60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ef62:	bf00      	nop
 800ef64:	e000ed88 	.word	0xe000ed88

0800ef68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ef68:	b480      	push	{r7}
 800ef6a:	b085      	sub	sp, #20
 800ef6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ef6e:	f3ef 8305 	mrs	r3, IPSR
 800ef72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	2b0f      	cmp	r3, #15
 800ef78:	d915      	bls.n	800efa6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ef7a:	4a18      	ldr	r2, [pc, #96]	@ (800efdc <vPortValidateInterruptPriority+0x74>)
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	4413      	add	r3, r2
 800ef80:	781b      	ldrb	r3, [r3, #0]
 800ef82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ef84:	4b16      	ldr	r3, [pc, #88]	@ (800efe0 <vPortValidateInterruptPriority+0x78>)
 800ef86:	781b      	ldrb	r3, [r3, #0]
 800ef88:	7afa      	ldrb	r2, [r7, #11]
 800ef8a:	429a      	cmp	r2, r3
 800ef8c:	d20b      	bcs.n	800efa6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ef8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef92:	f383 8811 	msr	BASEPRI, r3
 800ef96:	f3bf 8f6f 	isb	sy
 800ef9a:	f3bf 8f4f 	dsb	sy
 800ef9e:	607b      	str	r3, [r7, #4]
}
 800efa0:	bf00      	nop
 800efa2:	bf00      	nop
 800efa4:	e7fd      	b.n	800efa2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800efa6:	4b0f      	ldr	r3, [pc, #60]	@ (800efe4 <vPortValidateInterruptPriority+0x7c>)
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800efae:	4b0e      	ldr	r3, [pc, #56]	@ (800efe8 <vPortValidateInterruptPriority+0x80>)
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	429a      	cmp	r2, r3
 800efb4:	d90b      	bls.n	800efce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800efb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efba:	f383 8811 	msr	BASEPRI, r3
 800efbe:	f3bf 8f6f 	isb	sy
 800efc2:	f3bf 8f4f 	dsb	sy
 800efc6:	603b      	str	r3, [r7, #0]
}
 800efc8:	bf00      	nop
 800efca:	bf00      	nop
 800efcc:	e7fd      	b.n	800efca <vPortValidateInterruptPriority+0x62>
	}
 800efce:	bf00      	nop
 800efd0:	3714      	adds	r7, #20
 800efd2:	46bd      	mov	sp, r7
 800efd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd8:	4770      	bx	lr
 800efda:	bf00      	nop
 800efdc:	e000e3f0 	.word	0xe000e3f0
 800efe0:	2000258c 	.word	0x2000258c
 800efe4:	e000ed0c 	.word	0xe000ed0c
 800efe8:	20002590 	.word	0x20002590

0800efec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800efec:	b580      	push	{r7, lr}
 800efee:	b08a      	sub	sp, #40	@ 0x28
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800eff4:	2300      	movs	r3, #0
 800eff6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800eff8:	f7fe fc40 	bl	800d87c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800effc:	4b5f      	ldr	r3, [pc, #380]	@ (800f17c <pvPortMalloc+0x190>)
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d101      	bne.n	800f008 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f004:	f000 f92a 	bl	800f25c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f008:	4b5d      	ldr	r3, [pc, #372]	@ (800f180 <pvPortMalloc+0x194>)
 800f00a:	681a      	ldr	r2, [r3, #0]
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	4013      	ands	r3, r2
 800f010:	2b00      	cmp	r3, #0
 800f012:	f040 8095 	bne.w	800f140 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d01e      	beq.n	800f05a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800f01c:	2208      	movs	r2, #8
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	4413      	add	r3, r2
 800f022:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	f003 0307 	and.w	r3, r3, #7
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d015      	beq.n	800f05a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	f023 0307 	bic.w	r3, r3, #7
 800f034:	3308      	adds	r3, #8
 800f036:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	f003 0307 	and.w	r3, r3, #7
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d00b      	beq.n	800f05a <pvPortMalloc+0x6e>
	__asm volatile
 800f042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f046:	f383 8811 	msr	BASEPRI, r3
 800f04a:	f3bf 8f6f 	isb	sy
 800f04e:	f3bf 8f4f 	dsb	sy
 800f052:	617b      	str	r3, [r7, #20]
}
 800f054:	bf00      	nop
 800f056:	bf00      	nop
 800f058:	e7fd      	b.n	800f056 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d06f      	beq.n	800f140 <pvPortMalloc+0x154>
 800f060:	4b48      	ldr	r3, [pc, #288]	@ (800f184 <pvPortMalloc+0x198>)
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	687a      	ldr	r2, [r7, #4]
 800f066:	429a      	cmp	r2, r3
 800f068:	d86a      	bhi.n	800f140 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f06a:	4b47      	ldr	r3, [pc, #284]	@ (800f188 <pvPortMalloc+0x19c>)
 800f06c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f06e:	4b46      	ldr	r3, [pc, #280]	@ (800f188 <pvPortMalloc+0x19c>)
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f074:	e004      	b.n	800f080 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800f076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f078:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f07a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f082:	685b      	ldr	r3, [r3, #4]
 800f084:	687a      	ldr	r2, [r7, #4]
 800f086:	429a      	cmp	r2, r3
 800f088:	d903      	bls.n	800f092 <pvPortMalloc+0xa6>
 800f08a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d1f1      	bne.n	800f076 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f092:	4b3a      	ldr	r3, [pc, #232]	@ (800f17c <pvPortMalloc+0x190>)
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f098:	429a      	cmp	r2, r3
 800f09a:	d051      	beq.n	800f140 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f09c:	6a3b      	ldr	r3, [r7, #32]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	2208      	movs	r2, #8
 800f0a2:	4413      	add	r3, r2
 800f0a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f0a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0a8:	681a      	ldr	r2, [r3, #0]
 800f0aa:	6a3b      	ldr	r3, [r7, #32]
 800f0ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f0ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0b0:	685a      	ldr	r2, [r3, #4]
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	1ad2      	subs	r2, r2, r3
 800f0b6:	2308      	movs	r3, #8
 800f0b8:	005b      	lsls	r3, r3, #1
 800f0ba:	429a      	cmp	r2, r3
 800f0bc:	d920      	bls.n	800f100 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f0be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	4413      	add	r3, r2
 800f0c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f0c6:	69bb      	ldr	r3, [r7, #24]
 800f0c8:	f003 0307 	and.w	r3, r3, #7
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d00b      	beq.n	800f0e8 <pvPortMalloc+0xfc>
	__asm volatile
 800f0d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0d4:	f383 8811 	msr	BASEPRI, r3
 800f0d8:	f3bf 8f6f 	isb	sy
 800f0dc:	f3bf 8f4f 	dsb	sy
 800f0e0:	613b      	str	r3, [r7, #16]
}
 800f0e2:	bf00      	nop
 800f0e4:	bf00      	nop
 800f0e6:	e7fd      	b.n	800f0e4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f0e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0ea:	685a      	ldr	r2, [r3, #4]
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	1ad2      	subs	r2, r2, r3
 800f0f0:	69bb      	ldr	r3, [r7, #24]
 800f0f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f0f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0f6:	687a      	ldr	r2, [r7, #4]
 800f0f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f0fa:	69b8      	ldr	r0, [r7, #24]
 800f0fc:	f000 f910 	bl	800f320 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f100:	4b20      	ldr	r3, [pc, #128]	@ (800f184 <pvPortMalloc+0x198>)
 800f102:	681a      	ldr	r2, [r3, #0]
 800f104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f106:	685b      	ldr	r3, [r3, #4]
 800f108:	1ad3      	subs	r3, r2, r3
 800f10a:	4a1e      	ldr	r2, [pc, #120]	@ (800f184 <pvPortMalloc+0x198>)
 800f10c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f10e:	4b1d      	ldr	r3, [pc, #116]	@ (800f184 <pvPortMalloc+0x198>)
 800f110:	681a      	ldr	r2, [r3, #0]
 800f112:	4b1e      	ldr	r3, [pc, #120]	@ (800f18c <pvPortMalloc+0x1a0>)
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	429a      	cmp	r2, r3
 800f118:	d203      	bcs.n	800f122 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f11a:	4b1a      	ldr	r3, [pc, #104]	@ (800f184 <pvPortMalloc+0x198>)
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	4a1b      	ldr	r2, [pc, #108]	@ (800f18c <pvPortMalloc+0x1a0>)
 800f120:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f124:	685a      	ldr	r2, [r3, #4]
 800f126:	4b16      	ldr	r3, [pc, #88]	@ (800f180 <pvPortMalloc+0x194>)
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	431a      	orrs	r2, r3
 800f12c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f12e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f132:	2200      	movs	r2, #0
 800f134:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f136:	4b16      	ldr	r3, [pc, #88]	@ (800f190 <pvPortMalloc+0x1a4>)
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	3301      	adds	r3, #1
 800f13c:	4a14      	ldr	r2, [pc, #80]	@ (800f190 <pvPortMalloc+0x1a4>)
 800f13e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f140:	f7fe fbaa 	bl	800d898 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800f144:	69fb      	ldr	r3, [r7, #28]
 800f146:	2b00      	cmp	r3, #0
 800f148:	d101      	bne.n	800f14e <pvPortMalloc+0x162>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800f14a:	f7f1 fd69 	bl	8000c20 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f14e:	69fb      	ldr	r3, [r7, #28]
 800f150:	f003 0307 	and.w	r3, r3, #7
 800f154:	2b00      	cmp	r3, #0
 800f156:	d00b      	beq.n	800f170 <pvPortMalloc+0x184>
	__asm volatile
 800f158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f15c:	f383 8811 	msr	BASEPRI, r3
 800f160:	f3bf 8f6f 	isb	sy
 800f164:	f3bf 8f4f 	dsb	sy
 800f168:	60fb      	str	r3, [r7, #12]
}
 800f16a:	bf00      	nop
 800f16c:	bf00      	nop
 800f16e:	e7fd      	b.n	800f16c <pvPortMalloc+0x180>
	return pvReturn;
 800f170:	69fb      	ldr	r3, [r7, #28]
}
 800f172:	4618      	mov	r0, r3
 800f174:	3728      	adds	r7, #40	@ 0x28
 800f176:	46bd      	mov	sp, r7
 800f178:	bd80      	pop	{r7, pc}
 800f17a:	bf00      	nop
 800f17c:	2000a59c 	.word	0x2000a59c
 800f180:	2000a5b0 	.word	0x2000a5b0
 800f184:	2000a5a0 	.word	0x2000a5a0
 800f188:	2000a594 	.word	0x2000a594
 800f18c:	2000a5a4 	.word	0x2000a5a4
 800f190:	2000a5a8 	.word	0x2000a5a8

0800f194 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f194:	b580      	push	{r7, lr}
 800f196:	b086      	sub	sp, #24
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d04f      	beq.n	800f246 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f1a6:	2308      	movs	r3, #8
 800f1a8:	425b      	negs	r3, r3
 800f1aa:	697a      	ldr	r2, [r7, #20]
 800f1ac:	4413      	add	r3, r2
 800f1ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f1b0:	697b      	ldr	r3, [r7, #20]
 800f1b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f1b4:	693b      	ldr	r3, [r7, #16]
 800f1b6:	685a      	ldr	r2, [r3, #4]
 800f1b8:	4b25      	ldr	r3, [pc, #148]	@ (800f250 <vPortFree+0xbc>)
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	4013      	ands	r3, r2
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d10b      	bne.n	800f1da <vPortFree+0x46>
	__asm volatile
 800f1c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1c6:	f383 8811 	msr	BASEPRI, r3
 800f1ca:	f3bf 8f6f 	isb	sy
 800f1ce:	f3bf 8f4f 	dsb	sy
 800f1d2:	60fb      	str	r3, [r7, #12]
}
 800f1d4:	bf00      	nop
 800f1d6:	bf00      	nop
 800f1d8:	e7fd      	b.n	800f1d6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f1da:	693b      	ldr	r3, [r7, #16]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d00b      	beq.n	800f1fa <vPortFree+0x66>
	__asm volatile
 800f1e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1e6:	f383 8811 	msr	BASEPRI, r3
 800f1ea:	f3bf 8f6f 	isb	sy
 800f1ee:	f3bf 8f4f 	dsb	sy
 800f1f2:	60bb      	str	r3, [r7, #8]
}
 800f1f4:	bf00      	nop
 800f1f6:	bf00      	nop
 800f1f8:	e7fd      	b.n	800f1f6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f1fa:	693b      	ldr	r3, [r7, #16]
 800f1fc:	685a      	ldr	r2, [r3, #4]
 800f1fe:	4b14      	ldr	r3, [pc, #80]	@ (800f250 <vPortFree+0xbc>)
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	4013      	ands	r3, r2
 800f204:	2b00      	cmp	r3, #0
 800f206:	d01e      	beq.n	800f246 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f208:	693b      	ldr	r3, [r7, #16]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d11a      	bne.n	800f246 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f210:	693b      	ldr	r3, [r7, #16]
 800f212:	685a      	ldr	r2, [r3, #4]
 800f214:	4b0e      	ldr	r3, [pc, #56]	@ (800f250 <vPortFree+0xbc>)
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	43db      	mvns	r3, r3
 800f21a:	401a      	ands	r2, r3
 800f21c:	693b      	ldr	r3, [r7, #16]
 800f21e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f220:	f7fe fb2c 	bl	800d87c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f224:	693b      	ldr	r3, [r7, #16]
 800f226:	685a      	ldr	r2, [r3, #4]
 800f228:	4b0a      	ldr	r3, [pc, #40]	@ (800f254 <vPortFree+0xc0>)
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	4413      	add	r3, r2
 800f22e:	4a09      	ldr	r2, [pc, #36]	@ (800f254 <vPortFree+0xc0>)
 800f230:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f232:	6938      	ldr	r0, [r7, #16]
 800f234:	f000 f874 	bl	800f320 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f238:	4b07      	ldr	r3, [pc, #28]	@ (800f258 <vPortFree+0xc4>)
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	3301      	adds	r3, #1
 800f23e:	4a06      	ldr	r2, [pc, #24]	@ (800f258 <vPortFree+0xc4>)
 800f240:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f242:	f7fe fb29 	bl	800d898 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f246:	bf00      	nop
 800f248:	3718      	adds	r7, #24
 800f24a:	46bd      	mov	sp, r7
 800f24c:	bd80      	pop	{r7, pc}
 800f24e:	bf00      	nop
 800f250:	2000a5b0 	.word	0x2000a5b0
 800f254:	2000a5a0 	.word	0x2000a5a0
 800f258:	2000a5ac 	.word	0x2000a5ac

0800f25c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f25c:	b480      	push	{r7}
 800f25e:	b085      	sub	sp, #20
 800f260:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f262:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f266:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f268:	4b27      	ldr	r3, [pc, #156]	@ (800f308 <prvHeapInit+0xac>)
 800f26a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	f003 0307 	and.w	r3, r3, #7
 800f272:	2b00      	cmp	r3, #0
 800f274:	d00c      	beq.n	800f290 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	3307      	adds	r3, #7
 800f27a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	f023 0307 	bic.w	r3, r3, #7
 800f282:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f284:	68ba      	ldr	r2, [r7, #8]
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	1ad3      	subs	r3, r2, r3
 800f28a:	4a1f      	ldr	r2, [pc, #124]	@ (800f308 <prvHeapInit+0xac>)
 800f28c:	4413      	add	r3, r2
 800f28e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f294:	4a1d      	ldr	r2, [pc, #116]	@ (800f30c <prvHeapInit+0xb0>)
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f29a:	4b1c      	ldr	r3, [pc, #112]	@ (800f30c <prvHeapInit+0xb0>)
 800f29c:	2200      	movs	r2, #0
 800f29e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	68ba      	ldr	r2, [r7, #8]
 800f2a4:	4413      	add	r3, r2
 800f2a6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f2a8:	2208      	movs	r2, #8
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	1a9b      	subs	r3, r3, r2
 800f2ae:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	f023 0307 	bic.w	r3, r3, #7
 800f2b6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	4a15      	ldr	r2, [pc, #84]	@ (800f310 <prvHeapInit+0xb4>)
 800f2bc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f2be:	4b14      	ldr	r3, [pc, #80]	@ (800f310 <prvHeapInit+0xb4>)
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	2200      	movs	r2, #0
 800f2c4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f2c6:	4b12      	ldr	r3, [pc, #72]	@ (800f310 <prvHeapInit+0xb4>)
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f2d2:	683b      	ldr	r3, [r7, #0]
 800f2d4:	68fa      	ldr	r2, [r7, #12]
 800f2d6:	1ad2      	subs	r2, r2, r3
 800f2d8:	683b      	ldr	r3, [r7, #0]
 800f2da:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f2dc:	4b0c      	ldr	r3, [pc, #48]	@ (800f310 <prvHeapInit+0xb4>)
 800f2de:	681a      	ldr	r2, [r3, #0]
 800f2e0:	683b      	ldr	r3, [r7, #0]
 800f2e2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f2e4:	683b      	ldr	r3, [r7, #0]
 800f2e6:	685b      	ldr	r3, [r3, #4]
 800f2e8:	4a0a      	ldr	r2, [pc, #40]	@ (800f314 <prvHeapInit+0xb8>)
 800f2ea:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f2ec:	683b      	ldr	r3, [r7, #0]
 800f2ee:	685b      	ldr	r3, [r3, #4]
 800f2f0:	4a09      	ldr	r2, [pc, #36]	@ (800f318 <prvHeapInit+0xbc>)
 800f2f2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f2f4:	4b09      	ldr	r3, [pc, #36]	@ (800f31c <prvHeapInit+0xc0>)
 800f2f6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800f2fa:	601a      	str	r2, [r3, #0]
}
 800f2fc:	bf00      	nop
 800f2fe:	3714      	adds	r7, #20
 800f300:	46bd      	mov	sp, r7
 800f302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f306:	4770      	bx	lr
 800f308:	20002594 	.word	0x20002594
 800f30c:	2000a594 	.word	0x2000a594
 800f310:	2000a59c 	.word	0x2000a59c
 800f314:	2000a5a4 	.word	0x2000a5a4
 800f318:	2000a5a0 	.word	0x2000a5a0
 800f31c:	2000a5b0 	.word	0x2000a5b0

0800f320 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f320:	b480      	push	{r7}
 800f322:	b085      	sub	sp, #20
 800f324:	af00      	add	r7, sp, #0
 800f326:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f328:	4b28      	ldr	r3, [pc, #160]	@ (800f3cc <prvInsertBlockIntoFreeList+0xac>)
 800f32a:	60fb      	str	r3, [r7, #12]
 800f32c:	e002      	b.n	800f334 <prvInsertBlockIntoFreeList+0x14>
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	60fb      	str	r3, [r7, #12]
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	687a      	ldr	r2, [r7, #4]
 800f33a:	429a      	cmp	r2, r3
 800f33c:	d8f7      	bhi.n	800f32e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	685b      	ldr	r3, [r3, #4]
 800f346:	68ba      	ldr	r2, [r7, #8]
 800f348:	4413      	add	r3, r2
 800f34a:	687a      	ldr	r2, [r7, #4]
 800f34c:	429a      	cmp	r2, r3
 800f34e:	d108      	bne.n	800f362 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	685a      	ldr	r2, [r3, #4]
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	685b      	ldr	r3, [r3, #4]
 800f358:	441a      	add	r2, r3
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	685b      	ldr	r3, [r3, #4]
 800f36a:	68ba      	ldr	r2, [r7, #8]
 800f36c:	441a      	add	r2, r3
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	429a      	cmp	r2, r3
 800f374:	d118      	bne.n	800f3a8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	681a      	ldr	r2, [r3, #0]
 800f37a:	4b15      	ldr	r3, [pc, #84]	@ (800f3d0 <prvInsertBlockIntoFreeList+0xb0>)
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	429a      	cmp	r2, r3
 800f380:	d00d      	beq.n	800f39e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	685a      	ldr	r2, [r3, #4]
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	685b      	ldr	r3, [r3, #4]
 800f38c:	441a      	add	r2, r3
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	681a      	ldr	r2, [r3, #0]
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	601a      	str	r2, [r3, #0]
 800f39c:	e008      	b.n	800f3b0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f39e:	4b0c      	ldr	r3, [pc, #48]	@ (800f3d0 <prvInsertBlockIntoFreeList+0xb0>)
 800f3a0:	681a      	ldr	r2, [r3, #0]
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	601a      	str	r2, [r3, #0]
 800f3a6:	e003      	b.n	800f3b0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	681a      	ldr	r2, [r3, #0]
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f3b0:	68fa      	ldr	r2, [r7, #12]
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	429a      	cmp	r2, r3
 800f3b6:	d002      	beq.n	800f3be <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	687a      	ldr	r2, [r7, #4]
 800f3bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f3be:	bf00      	nop
 800f3c0:	3714      	adds	r7, #20
 800f3c2:	46bd      	mov	sp, r7
 800f3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c8:	4770      	bx	lr
 800f3ca:	bf00      	nop
 800f3cc:	2000a594 	.word	0x2000a594
 800f3d0:	2000a59c 	.word	0x2000a59c

0800f3d4 <arm_rfft_32_fast_init_f32>:
 800f3d4:	b150      	cbz	r0, 800f3ec <arm_rfft_32_fast_init_f32+0x18>
 800f3d6:	b510      	push	{r4, lr}
 800f3d8:	2110      	movs	r1, #16
 800f3da:	4604      	mov	r4, r0
 800f3dc:	f000 fd58 	bl	800fe90 <arm_cfft_init_f32>
 800f3e0:	b918      	cbnz	r0, 800f3ea <arm_rfft_32_fast_init_f32+0x16>
 800f3e2:	4b04      	ldr	r3, [pc, #16]	@ (800f3f4 <arm_rfft_32_fast_init_f32+0x20>)
 800f3e4:	6163      	str	r3, [r4, #20]
 800f3e6:	2220      	movs	r2, #32
 800f3e8:	8222      	strh	r2, [r4, #16]
 800f3ea:	bd10      	pop	{r4, pc}
 800f3ec:	f04f 30ff 	mov.w	r0, #4294967295
 800f3f0:	4770      	bx	lr
 800f3f2:	bf00      	nop
 800f3f4:	0802ab5c 	.word	0x0802ab5c

0800f3f8 <arm_rfft_64_fast_init_f32>:
 800f3f8:	b150      	cbz	r0, 800f410 <arm_rfft_64_fast_init_f32+0x18>
 800f3fa:	b510      	push	{r4, lr}
 800f3fc:	2120      	movs	r1, #32
 800f3fe:	4604      	mov	r4, r0
 800f400:	f000 fd46 	bl	800fe90 <arm_cfft_init_f32>
 800f404:	b918      	cbnz	r0, 800f40e <arm_rfft_64_fast_init_f32+0x16>
 800f406:	4b04      	ldr	r3, [pc, #16]	@ (800f418 <arm_rfft_64_fast_init_f32+0x20>)
 800f408:	6163      	str	r3, [r4, #20]
 800f40a:	2240      	movs	r2, #64	@ 0x40
 800f40c:	8222      	strh	r2, [r4, #16]
 800f40e:	bd10      	pop	{r4, pc}
 800f410:	f04f 30ff 	mov.w	r0, #4294967295
 800f414:	4770      	bx	lr
 800f416:	bf00      	nop
 800f418:	0802f3dc 	.word	0x0802f3dc

0800f41c <arm_rfft_128_fast_init_f32>:
 800f41c:	b150      	cbz	r0, 800f434 <arm_rfft_128_fast_init_f32+0x18>
 800f41e:	b510      	push	{r4, lr}
 800f420:	2140      	movs	r1, #64	@ 0x40
 800f422:	4604      	mov	r4, r0
 800f424:	f000 fd34 	bl	800fe90 <arm_cfft_init_f32>
 800f428:	b918      	cbnz	r0, 800f432 <arm_rfft_128_fast_init_f32+0x16>
 800f42a:	4b04      	ldr	r3, [pc, #16]	@ (800f43c <arm_rfft_128_fast_init_f32+0x20>)
 800f42c:	6163      	str	r3, [r4, #20]
 800f42e:	2280      	movs	r2, #128	@ 0x80
 800f430:	8222      	strh	r2, [r4, #16]
 800f432:	bd10      	pop	{r4, pc}
 800f434:	f04f 30ff 	mov.w	r0, #4294967295
 800f438:	4770      	bx	lr
 800f43a:	bf00      	nop
 800f43c:	0802855c 	.word	0x0802855c

0800f440 <arm_rfft_256_fast_init_f32>:
 800f440:	b158      	cbz	r0, 800f45a <arm_rfft_256_fast_init_f32+0x1a>
 800f442:	b510      	push	{r4, lr}
 800f444:	2180      	movs	r1, #128	@ 0x80
 800f446:	4604      	mov	r4, r0
 800f448:	f000 fd22 	bl	800fe90 <arm_cfft_init_f32>
 800f44c:	b920      	cbnz	r0, 800f458 <arm_rfft_256_fast_init_f32+0x18>
 800f44e:	4b04      	ldr	r3, [pc, #16]	@ (800f460 <arm_rfft_256_fast_init_f32+0x20>)
 800f450:	6163      	str	r3, [r4, #20]
 800f452:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f456:	8222      	strh	r2, [r4, #16]
 800f458:	bd10      	pop	{r4, pc}
 800f45a:	f04f 30ff 	mov.w	r0, #4294967295
 800f45e:	4770      	bx	lr
 800f460:	0802a75c 	.word	0x0802a75c

0800f464 <arm_rfft_512_fast_init_f32>:
 800f464:	b160      	cbz	r0, 800f480 <arm_rfft_512_fast_init_f32+0x1c>
 800f466:	b510      	push	{r4, lr}
 800f468:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f46c:	4604      	mov	r4, r0
 800f46e:	f000 fd0f 	bl	800fe90 <arm_cfft_init_f32>
 800f472:	b920      	cbnz	r0, 800f47e <arm_rfft_512_fast_init_f32+0x1a>
 800f474:	4b04      	ldr	r3, [pc, #16]	@ (800f488 <arm_rfft_512_fast_init_f32+0x24>)
 800f476:	6163      	str	r3, [r4, #20]
 800f478:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f47c:	8222      	strh	r2, [r4, #16]
 800f47e:	bd10      	pop	{r4, pc}
 800f480:	f04f 30ff 	mov.w	r0, #4294967295
 800f484:	4770      	bx	lr
 800f486:	bf00      	nop
 800f488:	0802ebdc 	.word	0x0802ebdc

0800f48c <arm_rfft_1024_fast_init_f32>:
 800f48c:	b160      	cbz	r0, 800f4a8 <arm_rfft_1024_fast_init_f32+0x1c>
 800f48e:	b510      	push	{r4, lr}
 800f490:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800f494:	4604      	mov	r4, r0
 800f496:	f000 fcfb 	bl	800fe90 <arm_cfft_init_f32>
 800f49a:	b920      	cbnz	r0, 800f4a6 <arm_rfft_1024_fast_init_f32+0x1a>
 800f49c:	4b04      	ldr	r3, [pc, #16]	@ (800f4b0 <arm_rfft_1024_fast_init_f32+0x24>)
 800f49e:	6163      	str	r3, [r4, #20]
 800f4a0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800f4a4:	8222      	strh	r2, [r4, #16]
 800f4a6:	bd10      	pop	{r4, pc}
 800f4a8:	f04f 30ff 	mov.w	r0, #4294967295
 800f4ac:	4770      	bx	lr
 800f4ae:	bf00      	nop
 800f4b0:	0802755c 	.word	0x0802755c

0800f4b4 <arm_rfft_2048_fast_init_f32>:
 800f4b4:	b160      	cbz	r0, 800f4d0 <arm_rfft_2048_fast_init_f32+0x1c>
 800f4b6:	b510      	push	{r4, lr}
 800f4b8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800f4bc:	4604      	mov	r4, r0
 800f4be:	f000 fce7 	bl	800fe90 <arm_cfft_init_f32>
 800f4c2:	b920      	cbnz	r0, 800f4ce <arm_rfft_2048_fast_init_f32+0x1a>
 800f4c4:	4b04      	ldr	r3, [pc, #16]	@ (800f4d8 <arm_rfft_2048_fast_init_f32+0x24>)
 800f4c6:	6163      	str	r3, [r4, #20]
 800f4c8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f4cc:	8222      	strh	r2, [r4, #16]
 800f4ce:	bd10      	pop	{r4, pc}
 800f4d0:	f04f 30ff 	mov.w	r0, #4294967295
 800f4d4:	4770      	bx	lr
 800f4d6:	bf00      	nop
 800f4d8:	0802875c 	.word	0x0802875c

0800f4dc <arm_rfft_4096_fast_init_f32>:
 800f4dc:	b160      	cbz	r0, 800f4f8 <arm_rfft_4096_fast_init_f32+0x1c>
 800f4de:	b510      	push	{r4, lr}
 800f4e0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800f4e4:	4604      	mov	r4, r0
 800f4e6:	f000 fcd3 	bl	800fe90 <arm_cfft_init_f32>
 800f4ea:	b920      	cbnz	r0, 800f4f6 <arm_rfft_4096_fast_init_f32+0x1a>
 800f4ec:	4b04      	ldr	r3, [pc, #16]	@ (800f500 <arm_rfft_4096_fast_init_f32+0x24>)
 800f4ee:	6163      	str	r3, [r4, #20]
 800f4f0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800f4f4:	8222      	strh	r2, [r4, #16]
 800f4f6:	bd10      	pop	{r4, pc}
 800f4f8:	f04f 30ff 	mov.w	r0, #4294967295
 800f4fc:	4770      	bx	lr
 800f4fe:	bf00      	nop
 800f500:	0802abdc 	.word	0x0802abdc

0800f504 <arm_rfft_fast_init_f32>:
 800f504:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800f508:	d024      	beq.n	800f554 <arm_rfft_fast_init_f32+0x50>
 800f50a:	d807      	bhi.n	800f51c <arm_rfft_fast_init_f32+0x18>
 800f50c:	2980      	cmp	r1, #128	@ 0x80
 800f50e:	d01c      	beq.n	800f54a <arm_rfft_fast_init_f32+0x46>
 800f510:	d90c      	bls.n	800f52c <arm_rfft_fast_init_f32+0x28>
 800f512:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800f516:	d11a      	bne.n	800f54e <arm_rfft_fast_init_f32+0x4a>
 800f518:	4b0f      	ldr	r3, [pc, #60]	@ (800f558 <arm_rfft_fast_init_f32+0x54>)
 800f51a:	4718      	bx	r3
 800f51c:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 800f520:	d011      	beq.n	800f546 <arm_rfft_fast_init_f32+0x42>
 800f522:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 800f526:	d107      	bne.n	800f538 <arm_rfft_fast_init_f32+0x34>
 800f528:	4b0c      	ldr	r3, [pc, #48]	@ (800f55c <arm_rfft_fast_init_f32+0x58>)
 800f52a:	4718      	bx	r3
 800f52c:	2920      	cmp	r1, #32
 800f52e:	d008      	beq.n	800f542 <arm_rfft_fast_init_f32+0x3e>
 800f530:	2940      	cmp	r1, #64	@ 0x40
 800f532:	d10c      	bne.n	800f54e <arm_rfft_fast_init_f32+0x4a>
 800f534:	4b0a      	ldr	r3, [pc, #40]	@ (800f560 <arm_rfft_fast_init_f32+0x5c>)
 800f536:	e7f0      	b.n	800f51a <arm_rfft_fast_init_f32+0x16>
 800f538:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800f53c:	d107      	bne.n	800f54e <arm_rfft_fast_init_f32+0x4a>
 800f53e:	4b09      	ldr	r3, [pc, #36]	@ (800f564 <arm_rfft_fast_init_f32+0x60>)
 800f540:	e7eb      	b.n	800f51a <arm_rfft_fast_init_f32+0x16>
 800f542:	4b09      	ldr	r3, [pc, #36]	@ (800f568 <arm_rfft_fast_init_f32+0x64>)
 800f544:	e7e9      	b.n	800f51a <arm_rfft_fast_init_f32+0x16>
 800f546:	4b09      	ldr	r3, [pc, #36]	@ (800f56c <arm_rfft_fast_init_f32+0x68>)
 800f548:	e7e7      	b.n	800f51a <arm_rfft_fast_init_f32+0x16>
 800f54a:	4b09      	ldr	r3, [pc, #36]	@ (800f570 <arm_rfft_fast_init_f32+0x6c>)
 800f54c:	e7e5      	b.n	800f51a <arm_rfft_fast_init_f32+0x16>
 800f54e:	f04f 30ff 	mov.w	r0, #4294967295
 800f552:	4770      	bx	lr
 800f554:	4b07      	ldr	r3, [pc, #28]	@ (800f574 <arm_rfft_fast_init_f32+0x70>)
 800f556:	e7e0      	b.n	800f51a <arm_rfft_fast_init_f32+0x16>
 800f558:	0800f441 	.word	0x0800f441
 800f55c:	0800f4dd 	.word	0x0800f4dd
 800f560:	0800f3f9 	.word	0x0800f3f9
 800f564:	0800f48d 	.word	0x0800f48d
 800f568:	0800f3d5 	.word	0x0800f3d5
 800f56c:	0800f4b5 	.word	0x0800f4b5
 800f570:	0800f41d 	.word	0x0800f41d
 800f574:	0800f465 	.word	0x0800f465

0800f578 <stage_rfft_f32>:
 800f578:	b410      	push	{r4}
 800f57a:	edd1 7a00 	vldr	s15, [r1]
 800f57e:	ed91 7a01 	vldr	s14, [r1, #4]
 800f582:	8804      	ldrh	r4, [r0, #0]
 800f584:	6940      	ldr	r0, [r0, #20]
 800f586:	ee37 7a07 	vadd.f32	s14, s14, s14
 800f58a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f58e:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 800f592:	ee77 6a87 	vadd.f32	s13, s15, s14
 800f596:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f59a:	3c01      	subs	r4, #1
 800f59c:	ee26 7a84 	vmul.f32	s14, s13, s8
 800f5a0:	ee67 7a84 	vmul.f32	s15, s15, s8
 800f5a4:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 800f5a8:	ed82 7a00 	vstr	s14, [r2]
 800f5ac:	edc2 7a01 	vstr	s15, [r2, #4]
 800f5b0:	3010      	adds	r0, #16
 800f5b2:	3210      	adds	r2, #16
 800f5b4:	3b08      	subs	r3, #8
 800f5b6:	3110      	adds	r1, #16
 800f5b8:	ed11 5a02 	vldr	s10, [r1, #-8]
 800f5bc:	ed93 7a02 	vldr	s14, [r3, #8]
 800f5c0:	ed50 6a02 	vldr	s13, [r0, #-8]
 800f5c4:	edd3 4a03 	vldr	s9, [r3, #12]
 800f5c8:	ed51 7a01 	vldr	s15, [r1, #-4]
 800f5cc:	ed10 6a01 	vldr	s12, [r0, #-4]
 800f5d0:	ee77 5a45 	vsub.f32	s11, s14, s10
 800f5d4:	ee37 7a05 	vadd.f32	s14, s14, s10
 800f5d8:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800f5dc:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800f5e0:	ee66 5a25 	vmul.f32	s11, s12, s11
 800f5e4:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800f5e8:	ee37 7a23 	vadd.f32	s14, s14, s7
 800f5ec:	ee66 6a85 	vmul.f32	s13, s13, s10
 800f5f0:	ee26 6a05 	vmul.f32	s12, s12, s10
 800f5f4:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800f5f8:	ee37 7a06 	vadd.f32	s14, s14, s12
 800f5fc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f600:	ee27 7a04 	vmul.f32	s14, s14, s8
 800f604:	ee67 7a84 	vmul.f32	s15, s15, s8
 800f608:	3c01      	subs	r4, #1
 800f60a:	ed02 7a02 	vstr	s14, [r2, #-8]
 800f60e:	ed42 7a01 	vstr	s15, [r2, #-4]
 800f612:	f1a3 0308 	sub.w	r3, r3, #8
 800f616:	f101 0108 	add.w	r1, r1, #8
 800f61a:	f100 0008 	add.w	r0, r0, #8
 800f61e:	f102 0208 	add.w	r2, r2, #8
 800f622:	d1c9      	bne.n	800f5b8 <stage_rfft_f32+0x40>
 800f624:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f628:	4770      	bx	lr
 800f62a:	bf00      	nop

0800f62c <merge_rfft_f32>:
 800f62c:	b410      	push	{r4}
 800f62e:	edd1 7a00 	vldr	s15, [r1]
 800f632:	edd1 6a01 	vldr	s13, [r1, #4]
 800f636:	8804      	ldrh	r4, [r0, #0]
 800f638:	6940      	ldr	r0, [r0, #20]
 800f63a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800f63e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f642:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 800f646:	ee27 7a04 	vmul.f32	s14, s14, s8
 800f64a:	ee67 7a84 	vmul.f32	s15, s15, s8
 800f64e:	3c01      	subs	r4, #1
 800f650:	ed82 7a00 	vstr	s14, [r2]
 800f654:	edc2 7a01 	vstr	s15, [r2, #4]
 800f658:	b3dc      	cbz	r4, 800f6d2 <merge_rfft_f32+0xa6>
 800f65a:	00e3      	lsls	r3, r4, #3
 800f65c:	3b08      	subs	r3, #8
 800f65e:	440b      	add	r3, r1
 800f660:	3010      	adds	r0, #16
 800f662:	3210      	adds	r2, #16
 800f664:	3110      	adds	r1, #16
 800f666:	ed11 5a02 	vldr	s10, [r1, #-8]
 800f66a:	ed93 7a02 	vldr	s14, [r3, #8]
 800f66e:	ed50 6a02 	vldr	s13, [r0, #-8]
 800f672:	edd3 4a03 	vldr	s9, [r3, #12]
 800f676:	ed51 7a01 	vldr	s15, [r1, #-4]
 800f67a:	ed10 6a01 	vldr	s12, [r0, #-4]
 800f67e:	ee75 5a47 	vsub.f32	s11, s10, s14
 800f682:	ee37 7a05 	vadd.f32	s14, s14, s10
 800f686:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800f68a:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800f68e:	ee66 5a25 	vmul.f32	s11, s12, s11
 800f692:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800f696:	ee37 7a63 	vsub.f32	s14, s14, s7
 800f69a:	ee66 6a85 	vmul.f32	s13, s13, s10
 800f69e:	ee26 6a05 	vmul.f32	s12, s12, s10
 800f6a2:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800f6a6:	ee37 7a46 	vsub.f32	s14, s14, s12
 800f6aa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f6ae:	ee27 7a04 	vmul.f32	s14, s14, s8
 800f6b2:	ee67 7a84 	vmul.f32	s15, s15, s8
 800f6b6:	3c01      	subs	r4, #1
 800f6b8:	ed02 7a02 	vstr	s14, [r2, #-8]
 800f6bc:	ed42 7a01 	vstr	s15, [r2, #-4]
 800f6c0:	f1a3 0308 	sub.w	r3, r3, #8
 800f6c4:	f101 0108 	add.w	r1, r1, #8
 800f6c8:	f100 0008 	add.w	r0, r0, #8
 800f6cc:	f102 0208 	add.w	r2, r2, #8
 800f6d0:	d1c9      	bne.n	800f666 <merge_rfft_f32+0x3a>
 800f6d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f6d6:	4770      	bx	lr

0800f6d8 <arm_rfft_fast_f32>:
 800f6d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6dc:	461c      	mov	r4, r3
 800f6de:	4605      	mov	r5, r0
 800f6e0:	4616      	mov	r6, r2
 800f6e2:	b14b      	cbz	r3, 800f6f8 <arm_rfft_fast_f32+0x20>
 800f6e4:	f7ff ffa2 	bl	800f62c <merge_rfft_f32>
 800f6e8:	4622      	mov	r2, r4
 800f6ea:	4631      	mov	r1, r6
 800f6ec:	4628      	mov	r0, r5
 800f6ee:	2301      	movs	r3, #1
 800f6f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f6f4:	f000 bb34 	b.w	800fd60 <arm_cfft_f32>
 800f6f8:	460f      	mov	r7, r1
 800f6fa:	461a      	mov	r2, r3
 800f6fc:	2301      	movs	r3, #1
 800f6fe:	f000 fb2f 	bl	800fd60 <arm_cfft_f32>
 800f702:	4632      	mov	r2, r6
 800f704:	4639      	mov	r1, r7
 800f706:	4628      	mov	r0, r5
 800f708:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f70c:	f7ff bf34 	b.w	800f578 <stage_rfft_f32>

0800f710 <arm_cfft_radix8by2_f32>:
 800f710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f714:	ed2d 8b08 	vpush	{d8-d11}
 800f718:	f8b0 c000 	ldrh.w	ip, [r0]
 800f71c:	6842      	ldr	r2, [r0, #4]
 800f71e:	4607      	mov	r7, r0
 800f720:	4608      	mov	r0, r1
 800f722:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800f726:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800f72a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800f72e:	b082      	sub	sp, #8
 800f730:	f000 80b0 	beq.w	800f894 <arm_cfft_radix8by2_f32+0x184>
 800f734:	008c      	lsls	r4, r1, #2
 800f736:	3410      	adds	r4, #16
 800f738:	f100 0310 	add.w	r3, r0, #16
 800f73c:	1906      	adds	r6, r0, r4
 800f73e:	3210      	adds	r2, #16
 800f740:	4444      	add	r4, r8
 800f742:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800f746:	f108 0510 	add.w	r5, r8, #16
 800f74a:	ed15 2a04 	vldr	s4, [r5, #-16]
 800f74e:	ed55 2a03 	vldr	s5, [r5, #-12]
 800f752:	ed54 4a04 	vldr	s9, [r4, #-16]
 800f756:	ed14 4a03 	vldr	s8, [r4, #-12]
 800f75a:	ed14 6a02 	vldr	s12, [r4, #-8]
 800f75e:	ed54 5a01 	vldr	s11, [r4, #-4]
 800f762:	ed53 3a04 	vldr	s7, [r3, #-16]
 800f766:	ed15 0a02 	vldr	s0, [r5, #-8]
 800f76a:	ed55 0a01 	vldr	s1, [r5, #-4]
 800f76e:	ed56 6a04 	vldr	s13, [r6, #-16]
 800f772:	ed16 3a03 	vldr	s6, [r6, #-12]
 800f776:	ed13 7a03 	vldr	s14, [r3, #-12]
 800f77a:	ed13 5a02 	vldr	s10, [r3, #-8]
 800f77e:	ed53 7a01 	vldr	s15, [r3, #-4]
 800f782:	ed16 1a02 	vldr	s2, [r6, #-8]
 800f786:	ed56 1a01 	vldr	s3, [r6, #-4]
 800f78a:	ee73 ba82 	vadd.f32	s23, s7, s4
 800f78e:	ee37 ba22 	vadd.f32	s22, s14, s5
 800f792:	ee76 9aa4 	vadd.f32	s19, s13, s9
 800f796:	ee33 9a04 	vadd.f32	s18, s6, s8
 800f79a:	ee31 8aa5 	vadd.f32	s16, s3, s11
 800f79e:	ee75 aa00 	vadd.f32	s21, s10, s0
 800f7a2:	ee37 aaa0 	vadd.f32	s20, s15, s1
 800f7a6:	ee71 8a06 	vadd.f32	s17, s2, s12
 800f7aa:	ed43 ba04 	vstr	s23, [r3, #-16]
 800f7ae:	ed03 ba03 	vstr	s22, [r3, #-12]
 800f7b2:	ed43 aa02 	vstr	s21, [r3, #-8]
 800f7b6:	ed03 aa01 	vstr	s20, [r3, #-4]
 800f7ba:	ed06 8a01 	vstr	s16, [r6, #-4]
 800f7be:	ed46 9a04 	vstr	s19, [r6, #-16]
 800f7c2:	ed06 9a03 	vstr	s18, [r6, #-12]
 800f7c6:	ed46 8a02 	vstr	s17, [r6, #-8]
 800f7ca:	ee37 7a62 	vsub.f32	s14, s14, s5
 800f7ce:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800f7d2:	ee34 4a43 	vsub.f32	s8, s8, s6
 800f7d6:	ed52 6a03 	vldr	s13, [r2, #-12]
 800f7da:	ed12 3a04 	vldr	s6, [r2, #-16]
 800f7de:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800f7e2:	ee27 8a26 	vmul.f32	s16, s14, s13
 800f7e6:	ee64 2aa6 	vmul.f32	s5, s9, s13
 800f7ea:	ee23 2a83 	vmul.f32	s4, s7, s6
 800f7ee:	ee64 4a83 	vmul.f32	s9, s9, s6
 800f7f2:	ee63 3aa6 	vmul.f32	s7, s7, s13
 800f7f6:	ee27 7a03 	vmul.f32	s14, s14, s6
 800f7fa:	ee64 6a26 	vmul.f32	s13, s8, s13
 800f7fe:	ee24 4a03 	vmul.f32	s8, s8, s6
 800f802:	ee37 7a63 	vsub.f32	s14, s14, s7
 800f806:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800f80a:	ee32 4ac4 	vsub.f32	s8, s5, s8
 800f80e:	ee32 3a08 	vadd.f32	s6, s4, s16
 800f812:	ed05 7a03 	vstr	s14, [r5, #-12]
 800f816:	ed05 3a04 	vstr	s6, [r5, #-16]
 800f81a:	ed04 4a04 	vstr	s8, [r4, #-16]
 800f81e:	ed44 6a03 	vstr	s13, [r4, #-12]
 800f822:	ed12 7a01 	vldr	s14, [r2, #-4]
 800f826:	ee76 6a41 	vsub.f32	s13, s12, s2
 800f82a:	ee35 5a40 	vsub.f32	s10, s10, s0
 800f82e:	ee35 6ae1 	vsub.f32	s12, s11, s3
 800f832:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800f836:	ed52 5a02 	vldr	s11, [r2, #-8]
 800f83a:	ee67 3a87 	vmul.f32	s7, s15, s14
 800f83e:	ee66 4a87 	vmul.f32	s9, s13, s14
 800f842:	ee25 4a25 	vmul.f32	s8, s10, s11
 800f846:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800f84a:	ee25 5a07 	vmul.f32	s10, s10, s14
 800f84e:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800f852:	ee26 7a07 	vmul.f32	s14, s12, s14
 800f856:	ee26 6a25 	vmul.f32	s12, s12, s11
 800f85a:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800f85e:	ee74 5a23 	vadd.f32	s11, s8, s7
 800f862:	ee34 6ac6 	vsub.f32	s12, s9, s12
 800f866:	ee37 7a26 	vadd.f32	s14, s14, s13
 800f86a:	3310      	adds	r3, #16
 800f86c:	4563      	cmp	r3, ip
 800f86e:	ed45 5a02 	vstr	s11, [r5, #-8]
 800f872:	f106 0610 	add.w	r6, r6, #16
 800f876:	ed45 7a01 	vstr	s15, [r5, #-4]
 800f87a:	f102 0210 	add.w	r2, r2, #16
 800f87e:	ed04 6a02 	vstr	s12, [r4, #-8]
 800f882:	ed04 7a01 	vstr	s14, [r4, #-4]
 800f886:	f105 0510 	add.w	r5, r5, #16
 800f88a:	f104 0410 	add.w	r4, r4, #16
 800f88e:	f47f af5c 	bne.w	800f74a <arm_cfft_radix8by2_f32+0x3a>
 800f892:	687a      	ldr	r2, [r7, #4]
 800f894:	b289      	uxth	r1, r1
 800f896:	2302      	movs	r3, #2
 800f898:	9101      	str	r1, [sp, #4]
 800f89a:	f000 fb4b 	bl	800ff34 <arm_radix8_butterfly_f32>
 800f89e:	9901      	ldr	r1, [sp, #4]
 800f8a0:	687a      	ldr	r2, [r7, #4]
 800f8a2:	4640      	mov	r0, r8
 800f8a4:	2302      	movs	r3, #2
 800f8a6:	b002      	add	sp, #8
 800f8a8:	ecbd 8b08 	vpop	{d8-d11}
 800f8ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f8b0:	f000 bb40 	b.w	800ff34 <arm_radix8_butterfly_f32>

0800f8b4 <arm_cfft_radix8by4_f32>:
 800f8b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8b8:	ed2d 8b0a 	vpush	{d8-d12}
 800f8bc:	8803      	ldrh	r3, [r0, #0]
 800f8be:	6842      	ldr	r2, [r0, #4]
 800f8c0:	b08d      	sub	sp, #52	@ 0x34
 800f8c2:	085b      	lsrs	r3, r3, #1
 800f8c4:	900a      	str	r0, [sp, #40]	@ 0x28
 800f8c6:	4608      	mov	r0, r1
 800f8c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f8cc:	edd1 5a00 	vldr	s11, [r1]
 800f8d0:	edd0 7a00 	vldr	s15, [r0]
 800f8d4:	edd1 3a01 	vldr	s7, [r1, #4]
 800f8d8:	ed90 5a01 	vldr	s10, [r0, #4]
 800f8dc:	9108      	str	r1, [sp, #32]
 800f8de:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800f8e2:	ed96 7a00 	vldr	s14, [r6]
 800f8e6:	ed96 4a01 	vldr	s8, [r6, #4]
 800f8ea:	9607      	str	r6, [sp, #28]
 800f8ec:	ee37 6aa5 	vadd.f32	s12, s15, s11
 800f8f0:	eb01 0883 	add.w	r8, r1, r3, lsl #2
 800f8f4:	edd8 4a00 	vldr	s9, [r8]
 800f8f8:	ed98 3a01 	vldr	s6, [r8, #4]
 800f8fc:	ee77 6a06 	vadd.f32	s13, s14, s12
 800f900:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800f904:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800f908:	4604      	mov	r4, r0
 800f90a:	edc0 6a00 	vstr	s13, [r0]
 800f90e:	edd6 5a01 	vldr	s11, [r6, #4]
 800f912:	edd8 2a01 	vldr	s5, [r8, #4]
 800f916:	ee75 6a23 	vadd.f32	s13, s10, s7
 800f91a:	ee35 5a63 	vsub.f32	s10, s10, s7
 800f91e:	ee36 6a47 	vsub.f32	s12, s12, s14
 800f922:	ee74 3a27 	vadd.f32	s7, s8, s15
 800f926:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800f92a:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800f92e:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800f932:	3408      	adds	r4, #8
 800f934:	ee35 4a47 	vsub.f32	s8, s10, s14
 800f938:	460d      	mov	r5, r1
 800f93a:	ee37 7a05 	vadd.f32	s14, s14, s10
 800f93e:	4637      	mov	r7, r6
 800f940:	9402      	str	r4, [sp, #8]
 800f942:	3708      	adds	r7, #8
 800f944:	460c      	mov	r4, r1
 800f946:	3508      	adds	r5, #8
 800f948:	0859      	lsrs	r1, r3, #1
 800f94a:	9109      	str	r1, [sp, #36]	@ 0x24
 800f94c:	9706      	str	r7, [sp, #24]
 800f94e:	9505      	str	r5, [sp, #20]
 800f950:	f102 0708 	add.w	r7, r2, #8
 800f954:	ee36 6a64 	vsub.f32	s12, s12, s9
 800f958:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800f95c:	ee75 5aa2 	vadd.f32	s11, s11, s5
 800f960:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800f964:	ee77 7a83 	vadd.f32	s15, s15, s6
 800f968:	ee34 5a24 	vadd.f32	s10, s8, s9
 800f96c:	ee37 7a64 	vsub.f32	s14, s14, s9
 800f970:	3902      	subs	r1, #2
 800f972:	4645      	mov	r5, r8
 800f974:	9701      	str	r7, [sp, #4]
 800f976:	f102 0c18 	add.w	ip, r2, #24
 800f97a:	f102 0710 	add.w	r7, r2, #16
 800f97e:	3508      	adds	r5, #8
 800f980:	0849      	lsrs	r1, r1, #1
 800f982:	edc0 5a01 	vstr	s11, [r0, #4]
 800f986:	9703      	str	r7, [sp, #12]
 800f988:	edc6 3a00 	vstr	s7, [r6]
 800f98c:	ed86 5a01 	vstr	s10, [r6, #4]
 800f990:	f8cd c000 	str.w	ip, [sp]
 800f994:	ed84 6a00 	vstr	s12, [r4]
 800f998:	edc4 6a01 	vstr	s13, [r4, #4]
 800f99c:	9504      	str	r5, [sp, #16]
 800f99e:	edc8 7a00 	vstr	s15, [r8]
 800f9a2:	ed88 7a01 	vstr	s14, [r8, #4]
 800f9a6:	910b      	str	r1, [sp, #44]	@ 0x2c
 800f9a8:	f000 8138 	beq.w	800fc1c <arm_cfft_radix8by4_f32+0x368>
 800f9ac:	009b      	lsls	r3, r3, #2
 800f9ae:	3b0c      	subs	r3, #12
 800f9b0:	f1a6 0c0c 	sub.w	ip, r6, #12
 800f9b4:	f106 0510 	add.w	r5, r6, #16
 800f9b8:	4626      	mov	r6, r4
 800f9ba:	46bb      	mov	fp, r7
 800f9bc:	f102 0a20 	add.w	sl, r2, #32
 800f9c0:	f102 0930 	add.w	r9, r2, #48	@ 0x30
 800f9c4:	f106 0710 	add.w	r7, r6, #16
 800f9c8:	4443      	add	r3, r8
 800f9ca:	f100 0e10 	add.w	lr, r0, #16
 800f9ce:	3c0c      	subs	r4, #12
 800f9d0:	f1a8 060c 	sub.w	r6, r8, #12
 800f9d4:	f108 0210 	add.w	r2, r8, #16
 800f9d8:	ed1e 5a02 	vldr	s10, [lr, #-8]
 800f9dc:	ed57 5a02 	vldr	s11, [r7, #-8]
 800f9e0:	ed55 7a02 	vldr	s15, [r5, #-8]
 800f9e4:	ed52 1a02 	vldr	s3, [r2, #-8]
 800f9e8:	ed57 6a01 	vldr	s13, [r7, #-4]
 800f9ec:	ed1e 0a01 	vldr	s0, [lr, #-4]
 800f9f0:	ed12 1a01 	vldr	s2, [r2, #-4]
 800f9f4:	ed15 8a01 	vldr	s16, [r5, #-4]
 800f9f8:	ee35 4a25 	vadd.f32	s8, s10, s11
 800f9fc:	ee30 6a26 	vadd.f32	s12, s0, s13
 800fa00:	ee37 7a84 	vadd.f32	s14, s15, s8
 800fa04:	ee30 0a66 	vsub.f32	s0, s0, s13
 800fa08:	ee37 7a21 	vadd.f32	s14, s14, s3
 800fa0c:	ee75 5a65 	vsub.f32	s11, s10, s11
 800fa10:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800fa14:	ed15 7a01 	vldr	s14, [r5, #-4]
 800fa18:	ed52 6a01 	vldr	s13, [r2, #-4]
 800fa1c:	ee36 7a07 	vadd.f32	s14, s12, s14
 800fa20:	ee78 aa25 	vadd.f32	s21, s16, s11
 800fa24:	ee37 7a26 	vadd.f32	s14, s14, s13
 800fa28:	ee70 3a67 	vsub.f32	s7, s0, s15
 800fa2c:	ed0e 7a01 	vstr	s14, [lr, #-4]
 800fa30:	ed96 7a02 	vldr	s14, [r6, #8]
 800fa34:	ed9c 2a02 	vldr	s4, [ip, #8]
 800fa38:	ed94 ba02 	vldr	s22, [r4, #8]
 800fa3c:	edd3 9a02 	vldr	s19, [r3, #8]
 800fa40:	edd6 2a01 	vldr	s5, [r6, #4]
 800fa44:	ed9c 9a01 	vldr	s18, [ip, #4]
 800fa48:	ed93 5a01 	vldr	s10, [r3, #4]
 800fa4c:	edd4 0a01 	vldr	s1, [r4, #4]
 800fa50:	ee72 6a07 	vadd.f32	s13, s4, s14
 800fa54:	ee32 2a47 	vsub.f32	s4, s4, s14
 800fa58:	ee7b 8a26 	vadd.f32	s17, s22, s13
 800fa5c:	ee79 4a22 	vadd.f32	s9, s18, s5
 800fa60:	ee38 7aa9 	vadd.f32	s14, s17, s19
 800fa64:	ee79 2a62 	vsub.f32	s5, s18, s5
 800fa68:	ed8c 7a02 	vstr	s14, [ip, #8]
 800fa6c:	ed94 7a01 	vldr	s14, [r4, #4]
 800fa70:	edd3 8a01 	vldr	s17, [r3, #4]
 800fa74:	ee34 7a87 	vadd.f32	s14, s9, s14
 800fa78:	ee3b 3a69 	vsub.f32	s6, s22, s19
 800fa7c:	ee37 7a28 	vadd.f32	s14, s14, s17
 800fa80:	ee32 9a60 	vsub.f32	s18, s4, s1
 800fa84:	ed8c 7a01 	vstr	s14, [ip, #4]
 800fa88:	ed1b 7a01 	vldr	s14, [fp, #-4]
 800fa8c:	ed1b aa02 	vldr	s20, [fp, #-8]
 800fa90:	ee73 8a22 	vadd.f32	s17, s6, s5
 800fa94:	ee39 9a05 	vadd.f32	s18, s18, s10
 800fa98:	ee7a aac1 	vsub.f32	s21, s21, s2
 800fa9c:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800faa0:	ee2a ca8a 	vmul.f32	s24, s21, s20
 800faa4:	ee69 ba07 	vmul.f32	s23, s18, s14
 800faa8:	ee6a aa87 	vmul.f32	s21, s21, s14
 800faac:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800fab0:	ee63 ca87 	vmul.f32	s25, s7, s14
 800fab4:	ee63 3a8a 	vmul.f32	s7, s7, s20
 800fab8:	ee28 aa8a 	vmul.f32	s20, s17, s20
 800fabc:	ee68 8a87 	vmul.f32	s17, s17, s14
 800fac0:	ee73 3aea 	vsub.f32	s7, s7, s21
 800fac4:	ee78 8a89 	vadd.f32	s17, s17, s18
 800fac8:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 800facc:	ee3b aaca 	vsub.f32	s20, s23, s20
 800fad0:	ee34 4a67 	vsub.f32	s8, s8, s15
 800fad4:	ee76 6acb 	vsub.f32	s13, s13, s22
 800fad8:	ee36 6a48 	vsub.f32	s12, s12, s16
 800fadc:	ee74 4ae0 	vsub.f32	s9, s9, s1
 800fae0:	ed05 7a02 	vstr	s14, [r5, #-8]
 800fae4:	ed45 3a01 	vstr	s7, [r5, #-4]
 800fae8:	edc4 8a01 	vstr	s17, [r4, #4]
 800faec:	ed84 aa02 	vstr	s20, [r4, #8]
 800faf0:	ed5a 3a04 	vldr	s7, [sl, #-16]
 800faf4:	ee36 7ae9 	vsub.f32	s14, s13, s19
 800faf8:	ee74 4ac5 	vsub.f32	s9, s9, s10
 800fafc:	ed5a 6a03 	vldr	s13, [sl, #-12]
 800fb00:	ee34 4a61 	vsub.f32	s8, s8, s3
 800fb04:	ee36 6a41 	vsub.f32	s12, s12, s2
 800fb08:	ee67 8a63 	vnmul.f32	s17, s14, s7
 800fb0c:	ee66 9a26 	vmul.f32	s19, s12, s13
 800fb10:	ee24 9a23 	vmul.f32	s18, s8, s7
 800fb14:	ee26 6a23 	vmul.f32	s12, s12, s7
 800fb18:	ee24 4a26 	vmul.f32	s8, s8, s13
 800fb1c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800fb20:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800fb24:	ee64 4aa3 	vmul.f32	s9, s9, s7
 800fb28:	ee36 6a44 	vsub.f32	s12, s12, s8
 800fb2c:	ee37 7a64 	vsub.f32	s14, s14, s9
 800fb30:	ee38 4ae6 	vsub.f32	s8, s17, s13
 800fb34:	ee79 3a29 	vadd.f32	s7, s18, s19
 800fb38:	ee75 6a60 	vsub.f32	s13, s10, s1
 800fb3c:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800fb40:	ee77 7a80 	vadd.f32	s15, s15, s0
 800fb44:	ed47 3a02 	vstr	s7, [r7, #-8]
 800fb48:	ed07 6a01 	vstr	s12, [r7, #-4]
 800fb4c:	ed86 7a01 	vstr	s14, [r6, #4]
 800fb50:	ed86 4a02 	vstr	s8, [r6, #8]
 800fb54:	ee35 6a81 	vadd.f32	s12, s11, s2
 800fb58:	ee36 7ac2 	vsub.f32	s14, s13, s4
 800fb5c:	ed59 5a06 	vldr	s11, [r9, #-24]	@ 0xffffffe8
 800fb60:	ed59 6a05 	vldr	s13, [r9, #-20]	@ 0xffffffec
 800fb64:	ee33 3a62 	vsub.f32	s6, s6, s5
 800fb68:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800fb6c:	ee67 2a26 	vmul.f32	s5, s14, s13
 800fb70:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800fb74:	ee26 5a25 	vmul.f32	s10, s12, s11
 800fb78:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800fb7c:	ee26 6a26 	vmul.f32	s12, s12, s13
 800fb80:	ee27 7a25 	vmul.f32	s14, s14, s11
 800fb84:	ee63 6a26 	vmul.f32	s13, s6, s13
 800fb88:	ee23 3a25 	vmul.f32	s6, s6, s11
 800fb8c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800fb90:	ee75 5a24 	vadd.f32	s11, s10, s9
 800fb94:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800fb98:	ee36 7a87 	vadd.f32	s14, s13, s14
 800fb9c:	3901      	subs	r1, #1
 800fb9e:	ed42 5a02 	vstr	s11, [r2, #-8]
 800fba2:	ed42 7a01 	vstr	s15, [r2, #-4]
 800fba6:	f10e 0e08 	add.w	lr, lr, #8
 800fbaa:	ed83 3a02 	vstr	s6, [r3, #8]
 800fbae:	ed83 7a01 	vstr	s14, [r3, #4]
 800fbb2:	f1ac 0c08 	sub.w	ip, ip, #8
 800fbb6:	f10b 0b08 	add.w	fp, fp, #8
 800fbba:	f105 0508 	add.w	r5, r5, #8
 800fbbe:	f1a4 0408 	sub.w	r4, r4, #8
 800fbc2:	f10a 0a10 	add.w	sl, sl, #16
 800fbc6:	f107 0708 	add.w	r7, r7, #8
 800fbca:	f1a6 0608 	sub.w	r6, r6, #8
 800fbce:	f109 0918 	add.w	r9, r9, #24
 800fbd2:	f102 0208 	add.w	r2, r2, #8
 800fbd6:	f1a3 0308 	sub.w	r3, r3, #8
 800fbda:	f47f aefd 	bne.w	800f9d8 <arm_cfft_radix8by4_f32+0x124>
 800fbde:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800fbe0:	9902      	ldr	r1, [sp, #8]
 800fbe2:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800fbe6:	9102      	str	r1, [sp, #8]
 800fbe8:	9901      	ldr	r1, [sp, #4]
 800fbea:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800fbee:	9101      	str	r1, [sp, #4]
 800fbf0:	9906      	ldr	r1, [sp, #24]
 800fbf2:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800fbf6:	9106      	str	r1, [sp, #24]
 800fbf8:	9903      	ldr	r1, [sp, #12]
 800fbfa:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 800fbfe:	9103      	str	r1, [sp, #12]
 800fc00:	9905      	ldr	r1, [sp, #20]
 800fc02:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800fc06:	9105      	str	r1, [sp, #20]
 800fc08:	9904      	ldr	r1, [sp, #16]
 800fc0a:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800fc0e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800fc12:	9204      	str	r2, [sp, #16]
 800fc14:	9a00      	ldr	r2, [sp, #0]
 800fc16:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800fc1a:	9300      	str	r3, [sp, #0]
 800fc1c:	9902      	ldr	r1, [sp, #8]
 800fc1e:	9d05      	ldr	r5, [sp, #20]
 800fc20:	ed91 4a00 	vldr	s8, [r1]
 800fc24:	edd5 6a00 	vldr	s13, [r5]
 800fc28:	9b06      	ldr	r3, [sp, #24]
 800fc2a:	9c04      	ldr	r4, [sp, #16]
 800fc2c:	edd3 7a00 	vldr	s15, [r3]
 800fc30:	ed94 3a00 	vldr	s6, [r4]
 800fc34:	edd5 4a01 	vldr	s9, [r5, #4]
 800fc38:	edd1 3a01 	vldr	s7, [r1, #4]
 800fc3c:	ed94 2a01 	vldr	s4, [r4, #4]
 800fc40:	ed93 7a01 	vldr	s14, [r3, #4]
 800fc44:	9a01      	ldr	r2, [sp, #4]
 800fc46:	ee34 6a26 	vadd.f32	s12, s8, s13
 800fc4a:	ee73 5aa4 	vadd.f32	s11, s7, s9
 800fc4e:	ee37 5a86 	vadd.f32	s10, s15, s12
 800fc52:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800fc56:	ee35 5a03 	vadd.f32	s10, s10, s6
 800fc5a:	ee74 6a66 	vsub.f32	s13, s8, s13
 800fc5e:	ed81 5a00 	vstr	s10, [r1]
 800fc62:	ed93 5a01 	vldr	s10, [r3, #4]
 800fc66:	edd4 4a01 	vldr	s9, [r4, #4]
 800fc6a:	ee35 5a85 	vadd.f32	s10, s11, s10
 800fc6e:	ee37 4a26 	vadd.f32	s8, s14, s13
 800fc72:	ee35 5a24 	vadd.f32	s10, s10, s9
 800fc76:	ee73 4ae7 	vsub.f32	s9, s7, s15
 800fc7a:	ed81 5a01 	vstr	s10, [r1, #4]
 800fc7e:	edd2 1a00 	vldr	s3, [r2]
 800fc82:	edd2 2a01 	vldr	s5, [r2, #4]
 800fc86:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 800fc8a:	ee34 5a83 	vadd.f32	s10, s9, s6
 800fc8e:	ee34 4a42 	vsub.f32	s8, s8, s4
 800fc92:	ee36 6a67 	vsub.f32	s12, s12, s15
 800fc96:	ee64 4a21 	vmul.f32	s9, s8, s3
 800fc9a:	ee24 4a22 	vmul.f32	s8, s8, s5
 800fc9e:	ee65 2a22 	vmul.f32	s5, s10, s5
 800fca2:	ee25 5a21 	vmul.f32	s10, s10, s3
 800fca6:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800fcaa:	ee35 5a44 	vsub.f32	s10, s10, s8
 800fcae:	edc3 2a00 	vstr	s5, [r3]
 800fcb2:	ed83 5a01 	vstr	s10, [r3, #4]
 800fcb6:	ee75 5ac7 	vsub.f32	s11, s11, s14
 800fcba:	9b03      	ldr	r3, [sp, #12]
 800fcbc:	ee36 6a43 	vsub.f32	s12, s12, s6
 800fcc0:	ed93 4a01 	vldr	s8, [r3, #4]
 800fcc4:	ed93 5a00 	vldr	s10, [r3]
 800fcc8:	9b00      	ldr	r3, [sp, #0]
 800fcca:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800fcce:	ee66 4a05 	vmul.f32	s9, s12, s10
 800fcd2:	ee25 5a85 	vmul.f32	s10, s11, s10
 800fcd6:	ee26 6a04 	vmul.f32	s12, s12, s8
 800fcda:	ee65 5a84 	vmul.f32	s11, s11, s8
 800fcde:	ee35 6a46 	vsub.f32	s12, s10, s12
 800fce2:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800fce6:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800fcea:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800fcee:	ed85 6a01 	vstr	s12, [r5, #4]
 800fcf2:	edc5 5a00 	vstr	s11, [r5]
 800fcf6:	edd3 5a01 	vldr	s11, [r3, #4]
 800fcfa:	edd3 6a00 	vldr	s13, [r3]
 800fcfe:	ee37 7a02 	vadd.f32	s14, s14, s4
 800fd02:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800fd06:	ee27 6a26 	vmul.f32	s12, s14, s13
 800fd0a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800fd0e:	ee27 7a25 	vmul.f32	s14, s14, s11
 800fd12:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800fd16:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800fd1a:	ee76 7a27 	vadd.f32	s15, s12, s15
 800fd1e:	ed84 7a01 	vstr	s14, [r4, #4]
 800fd22:	edc4 7a00 	vstr	s15, [r4]
 800fd26:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800fd28:	9100      	str	r1, [sp, #0]
 800fd2a:	6862      	ldr	r2, [r4, #4]
 800fd2c:	2304      	movs	r3, #4
 800fd2e:	f000 f901 	bl	800ff34 <arm_radix8_butterfly_f32>
 800fd32:	9807      	ldr	r0, [sp, #28]
 800fd34:	9900      	ldr	r1, [sp, #0]
 800fd36:	6862      	ldr	r2, [r4, #4]
 800fd38:	2304      	movs	r3, #4
 800fd3a:	f000 f8fb 	bl	800ff34 <arm_radix8_butterfly_f32>
 800fd3e:	9808      	ldr	r0, [sp, #32]
 800fd40:	9900      	ldr	r1, [sp, #0]
 800fd42:	6862      	ldr	r2, [r4, #4]
 800fd44:	2304      	movs	r3, #4
 800fd46:	f000 f8f5 	bl	800ff34 <arm_radix8_butterfly_f32>
 800fd4a:	9900      	ldr	r1, [sp, #0]
 800fd4c:	6862      	ldr	r2, [r4, #4]
 800fd4e:	4640      	mov	r0, r8
 800fd50:	2304      	movs	r3, #4
 800fd52:	b00d      	add	sp, #52	@ 0x34
 800fd54:	ecbd 8b0a 	vpop	{d8-d12}
 800fd58:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd5c:	f000 b8ea 	b.w	800ff34 <arm_radix8_butterfly_f32>

0800fd60 <arm_cfft_f32>:
 800fd60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd64:	2a01      	cmp	r2, #1
 800fd66:	8805      	ldrh	r5, [r0, #0]
 800fd68:	4607      	mov	r7, r0
 800fd6a:	4690      	mov	r8, r2
 800fd6c:	460c      	mov	r4, r1
 800fd6e:	4699      	mov	r9, r3
 800fd70:	d05c      	beq.n	800fe2c <arm_cfft_f32+0xcc>
 800fd72:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800fd76:	d054      	beq.n	800fe22 <arm_cfft_f32+0xc2>
 800fd78:	d810      	bhi.n	800fd9c <arm_cfft_f32+0x3c>
 800fd7a:	2d40      	cmp	r5, #64	@ 0x40
 800fd7c:	d015      	beq.n	800fdaa <arm_cfft_f32+0x4a>
 800fd7e:	d94c      	bls.n	800fe1a <arm_cfft_f32+0xba>
 800fd80:	2d80      	cmp	r5, #128	@ 0x80
 800fd82:	d103      	bne.n	800fd8c <arm_cfft_f32+0x2c>
 800fd84:	4621      	mov	r1, r4
 800fd86:	4638      	mov	r0, r7
 800fd88:	f7ff fcc2 	bl	800f710 <arm_cfft_radix8by2_f32>
 800fd8c:	f1b9 0f00 	cmp.w	r9, #0
 800fd90:	d114      	bne.n	800fdbc <arm_cfft_f32+0x5c>
 800fd92:	f1b8 0f01 	cmp.w	r8, #1
 800fd96:	d019      	beq.n	800fdcc <arm_cfft_f32+0x6c>
 800fd98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd9c:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 800fda0:	d03f      	beq.n	800fe22 <arm_cfft_f32+0xc2>
 800fda2:	d933      	bls.n	800fe0c <arm_cfft_f32+0xac>
 800fda4:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 800fda8:	d1f0      	bne.n	800fd8c <arm_cfft_f32+0x2c>
 800fdaa:	687a      	ldr	r2, [r7, #4]
 800fdac:	2301      	movs	r3, #1
 800fdae:	4629      	mov	r1, r5
 800fdb0:	4620      	mov	r0, r4
 800fdb2:	f000 f8bf 	bl	800ff34 <arm_radix8_butterfly_f32>
 800fdb6:	f1b9 0f00 	cmp.w	r9, #0
 800fdba:	d0ea      	beq.n	800fd92 <arm_cfft_f32+0x32>
 800fdbc:	68ba      	ldr	r2, [r7, #8]
 800fdbe:	89b9      	ldrh	r1, [r7, #12]
 800fdc0:	4620      	mov	r0, r4
 800fdc2:	f000 f845 	bl	800fe50 <arm_bitreversal_32>
 800fdc6:	f1b8 0f01 	cmp.w	r8, #1
 800fdca:	d1e5      	bne.n	800fd98 <arm_cfft_f32+0x38>
 800fdcc:	ee07 5a90 	vmov	s15, r5
 800fdd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fdd4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fdd8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800fddc:	2d00      	cmp	r5, #0
 800fdde:	d0db      	beq.n	800fd98 <arm_cfft_f32+0x38>
 800fde0:	f104 0108 	add.w	r1, r4, #8
 800fde4:	2300      	movs	r3, #0
 800fde6:	3301      	adds	r3, #1
 800fde8:	429d      	cmp	r5, r3
 800fdea:	f101 0108 	add.w	r1, r1, #8
 800fdee:	ed11 7a04 	vldr	s14, [r1, #-16]
 800fdf2:	ed51 7a03 	vldr	s15, [r1, #-12]
 800fdf6:	ee27 7a26 	vmul.f32	s14, s14, s13
 800fdfa:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800fdfe:	ed01 7a04 	vstr	s14, [r1, #-16]
 800fe02:	ed41 7a03 	vstr	s15, [r1, #-12]
 800fe06:	d1ee      	bne.n	800fde6 <arm_cfft_f32+0x86>
 800fe08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe0c:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 800fe10:	d0cb      	beq.n	800fdaa <arm_cfft_f32+0x4a>
 800fe12:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 800fe16:	d0b5      	beq.n	800fd84 <arm_cfft_f32+0x24>
 800fe18:	e7b8      	b.n	800fd8c <arm_cfft_f32+0x2c>
 800fe1a:	2d10      	cmp	r5, #16
 800fe1c:	d0b2      	beq.n	800fd84 <arm_cfft_f32+0x24>
 800fe1e:	2d20      	cmp	r5, #32
 800fe20:	d1b4      	bne.n	800fd8c <arm_cfft_f32+0x2c>
 800fe22:	4621      	mov	r1, r4
 800fe24:	4638      	mov	r0, r7
 800fe26:	f7ff fd45 	bl	800f8b4 <arm_cfft_radix8by4_f32>
 800fe2a:	e7af      	b.n	800fd8c <arm_cfft_f32+0x2c>
 800fe2c:	b16d      	cbz	r5, 800fe4a <arm_cfft_f32+0xea>
 800fe2e:	310c      	adds	r1, #12
 800fe30:	2600      	movs	r6, #0
 800fe32:	ed51 7a02 	vldr	s15, [r1, #-8]
 800fe36:	3601      	adds	r6, #1
 800fe38:	eef1 7a67 	vneg.f32	s15, s15
 800fe3c:	42b5      	cmp	r5, r6
 800fe3e:	ed41 7a02 	vstr	s15, [r1, #-8]
 800fe42:	f101 0108 	add.w	r1, r1, #8
 800fe46:	d1f4      	bne.n	800fe32 <arm_cfft_f32+0xd2>
 800fe48:	e793      	b.n	800fd72 <arm_cfft_f32+0x12>
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d0a4      	beq.n	800fd98 <arm_cfft_f32+0x38>
 800fe4e:	e7b5      	b.n	800fdbc <arm_cfft_f32+0x5c>

0800fe50 <arm_bitreversal_32>:
 800fe50:	b1e9      	cbz	r1, 800fe8e <arm_bitreversal_32+0x3e>
 800fe52:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe54:	2500      	movs	r5, #0
 800fe56:	f102 0e02 	add.w	lr, r2, #2
 800fe5a:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 800fe5e:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 800fe62:	08a4      	lsrs	r4, r4, #2
 800fe64:	089b      	lsrs	r3, r3, #2
 800fe66:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800fe6a:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 800fe6e:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800fe72:	00a6      	lsls	r6, r4, #2
 800fe74:	009b      	lsls	r3, r3, #2
 800fe76:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800fe7a:	3304      	adds	r3, #4
 800fe7c:	1d34      	adds	r4, r6, #4
 800fe7e:	3502      	adds	r5, #2
 800fe80:	58c6      	ldr	r6, [r0, r3]
 800fe82:	5907      	ldr	r7, [r0, r4]
 800fe84:	50c7      	str	r7, [r0, r3]
 800fe86:	428d      	cmp	r5, r1
 800fe88:	5106      	str	r6, [r0, r4]
 800fe8a:	d3e6      	bcc.n	800fe5a <arm_bitreversal_32+0xa>
 800fe8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe8e:	4770      	bx	lr

0800fe90 <arm_cfft_init_f32>:
 800fe90:	4603      	mov	r3, r0
 800fe92:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800fe96:	f04f 0000 	mov.w	r0, #0
 800fe9a:	b410      	push	{r4}
 800fe9c:	8019      	strh	r1, [r3, #0]
 800fe9e:	6058      	str	r0, [r3, #4]
 800fea0:	d033      	beq.n	800ff0a <arm_cfft_init_f32+0x7a>
 800fea2:	d918      	bls.n	800fed6 <arm_cfft_init_f32+0x46>
 800fea4:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 800fea8:	d027      	beq.n	800fefa <arm_cfft_init_f32+0x6a>
 800feaa:	d90c      	bls.n	800fec6 <arm_cfft_init_f32+0x36>
 800feac:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 800feb0:	d11e      	bne.n	800fef0 <arm_cfft_init_f32+0x60>
 800feb2:	4a17      	ldr	r2, [pc, #92]	@ (800ff10 <arm_cfft_init_f32+0x80>)
 800feb4:	8994      	ldrh	r4, [r2, #12]
 800feb6:	819c      	strh	r4, [r3, #12]
 800feb8:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 800febc:	e9c3 2101 	strd	r2, r1, [r3, #4]
 800fec0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fec4:	4770      	bx	lr
 800fec6:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800feca:	d018      	beq.n	800fefe <arm_cfft_init_f32+0x6e>
 800fecc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800fed0:	d10e      	bne.n	800fef0 <arm_cfft_init_f32+0x60>
 800fed2:	4a10      	ldr	r2, [pc, #64]	@ (800ff14 <arm_cfft_init_f32+0x84>)
 800fed4:	e7ee      	b.n	800feb4 <arm_cfft_init_f32+0x24>
 800fed6:	2940      	cmp	r1, #64	@ 0x40
 800fed8:	d013      	beq.n	800ff02 <arm_cfft_init_f32+0x72>
 800feda:	d903      	bls.n	800fee4 <arm_cfft_init_f32+0x54>
 800fedc:	2980      	cmp	r1, #128	@ 0x80
 800fede:	d107      	bne.n	800fef0 <arm_cfft_init_f32+0x60>
 800fee0:	4a0d      	ldr	r2, [pc, #52]	@ (800ff18 <arm_cfft_init_f32+0x88>)
 800fee2:	e7e7      	b.n	800feb4 <arm_cfft_init_f32+0x24>
 800fee4:	2910      	cmp	r1, #16
 800fee6:	d00e      	beq.n	800ff06 <arm_cfft_init_f32+0x76>
 800fee8:	2920      	cmp	r1, #32
 800feea:	d101      	bne.n	800fef0 <arm_cfft_init_f32+0x60>
 800feec:	4a0b      	ldr	r2, [pc, #44]	@ (800ff1c <arm_cfft_init_f32+0x8c>)
 800feee:	e7e1      	b.n	800feb4 <arm_cfft_init_f32+0x24>
 800fef0:	f04f 30ff 	mov.w	r0, #4294967295
 800fef4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fef8:	4770      	bx	lr
 800fefa:	4a09      	ldr	r2, [pc, #36]	@ (800ff20 <arm_cfft_init_f32+0x90>)
 800fefc:	e7da      	b.n	800feb4 <arm_cfft_init_f32+0x24>
 800fefe:	4a09      	ldr	r2, [pc, #36]	@ (800ff24 <arm_cfft_init_f32+0x94>)
 800ff00:	e7d8      	b.n	800feb4 <arm_cfft_init_f32+0x24>
 800ff02:	4a09      	ldr	r2, [pc, #36]	@ (800ff28 <arm_cfft_init_f32+0x98>)
 800ff04:	e7d6      	b.n	800feb4 <arm_cfft_init_f32+0x24>
 800ff06:	4a09      	ldr	r2, [pc, #36]	@ (800ff2c <arm_cfft_init_f32+0x9c>)
 800ff08:	e7d4      	b.n	800feb4 <arm_cfft_init_f32+0x24>
 800ff0a:	4a09      	ldr	r2, [pc, #36]	@ (800ff30 <arm_cfft_init_f32+0xa0>)
 800ff0c:	e7d2      	b.n	800feb4 <arm_cfft_init_f32+0x24>
 800ff0e:	bf00      	nop
 800ff10:	0802f53c 	.word	0x0802f53c
 800ff14:	0802f4dc 	.word	0x0802f4dc
 800ff18:	0802f4ec 	.word	0x0802f4ec
 800ff1c:	0802f52c 	.word	0x0802f52c
 800ff20:	0802f50c 	.word	0x0802f50c
 800ff24:	0802f54c 	.word	0x0802f54c
 800ff28:	0802f55c 	.word	0x0802f55c
 800ff2c:	0802f4fc 	.word	0x0802f4fc
 800ff30:	0802f51c 	.word	0x0802f51c

0800ff34 <arm_radix8_butterfly_f32>:
 800ff34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff38:	ed2d 8b10 	vpush	{d8-d15}
 800ff3c:	b093      	sub	sp, #76	@ 0x4c
 800ff3e:	e9cd 320e 	strd	r3, r2, [sp, #56]	@ 0x38
 800ff42:	4603      	mov	r3, r0
 800ff44:	3304      	adds	r3, #4
 800ff46:	ed9f bac0 	vldr	s22, [pc, #768]	@ 8010248 <arm_radix8_butterfly_f32+0x314>
 800ff4a:	9010      	str	r0, [sp, #64]	@ 0x40
 800ff4c:	468b      	mov	fp, r1
 800ff4e:	9311      	str	r3, [sp, #68]	@ 0x44
 800ff50:	4689      	mov	r9, r1
 800ff52:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800ff54:	ea4f 05db 	mov.w	r5, fp, lsr #3
 800ff58:	eb04 1245 	add.w	r2, r4, r5, lsl #5
 800ff5c:	eb02 1105 	add.w	r1, r2, r5, lsl #4
 800ff60:	eba5 0385 	sub.w	r3, r5, r5, lsl #2
 800ff64:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 800ff68:	ea4f 1e05 	mov.w	lr, r5, lsl #4
 800ff6c:	eb05 0a85 	add.w	sl, r5, r5, lsl #2
 800ff70:	9100      	str	r1, [sp, #0]
 800ff72:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800ff76:	f108 0004 	add.w	r0, r8, #4
 800ff7a:	f10e 0104 	add.w	r1, lr, #4
 800ff7e:	462e      	mov	r6, r5
 800ff80:	4420      	add	r0, r4
 800ff82:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ff86:	4421      	add	r1, r4
 800ff88:	ea4f 04ca 	mov.w	r4, sl, lsl #3
 800ff8c:	960d      	str	r6, [sp, #52]	@ 0x34
 800ff8e:	9402      	str	r4, [sp, #8]
 800ff90:	012c      	lsls	r4, r5, #4
 800ff92:	ebc6 0cc6 	rsb	ip, r6, r6, lsl #3
 800ff96:	9403      	str	r4, [sp, #12]
 800ff98:	00ec      	lsls	r4, r5, #3
 800ff9a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800ff9c:	9404      	str	r4, [sp, #16]
 800ff9e:	ea4f 04cc 	mov.w	r4, ip, lsl #3
 800ffa2:	9405      	str	r4, [sp, #20]
 800ffa4:	016c      	lsls	r4, r5, #5
 800ffa6:	9401      	str	r4, [sp, #4]
 800ffa8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800ffaa:	9c00      	ldr	r4, [sp, #0]
 800ffac:	eb03 1746 	add.w	r7, r3, r6, lsl #5
 800ffb0:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 800ffb4:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800ffb8:	f04f 0c00 	mov.w	ip, #0
 800ffbc:	edd6 6a00 	vldr	s13, [r6]
 800ffc0:	edd7 1a00 	vldr	s3, [r7]
 800ffc4:	ed15 aa01 	vldr	s20, [r5, #-4]
 800ffc8:	edd2 5a00 	vldr	s11, [r2]
 800ffcc:	ed51 9a01 	vldr	s19, [r1, #-4]
 800ffd0:	ed94 6a00 	vldr	s12, [r4]
 800ffd4:	ed50 7a01 	vldr	s15, [r0, #-4]
 800ffd8:	ed93 3a00 	vldr	s6, [r3]
 800ffdc:	ee39 0a86 	vadd.f32	s0, s19, s12
 800ffe0:	ee33 2a21 	vadd.f32	s4, s6, s3
 800ffe4:	ee37 5aa6 	vadd.f32	s10, s15, s13
 800ffe8:	ee7a 4a25 	vadd.f32	s9, s20, s11
 800ffec:	ee35 7a02 	vadd.f32	s14, s10, s4
 800fff0:	ee34 4a80 	vadd.f32	s8, s9, s0
 800fff4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800fff8:	ee74 6a07 	vadd.f32	s13, s8, s14
 800fffc:	ee34 4a47 	vsub.f32	s8, s8, s14
 8010000:	ed45 6a01 	vstr	s13, [r5, #-4]
 8010004:	ed82 4a00 	vstr	s8, [r2]
 8010008:	edd0 6a00 	vldr	s13, [r0]
 801000c:	ed96 9a01 	vldr	s18, [r6, #4]
 8010010:	edd3 2a01 	vldr	s5, [r3, #4]
 8010014:	edd7 8a01 	vldr	s17, [r7, #4]
 8010018:	edd5 0a00 	vldr	s1, [r5]
 801001c:	edd2 3a01 	vldr	s7, [r2, #4]
 8010020:	ed94 8a01 	vldr	s16, [r4, #4]
 8010024:	ed91 7a00 	vldr	s14, [r1]
 8010028:	ee33 3a61 	vsub.f32	s6, s6, s3
 801002c:	ee36 4ac9 	vsub.f32	s8, s13, s18
 8010030:	ee72 aae8 	vsub.f32	s21, s5, s17
 8010034:	ee77 1ac3 	vsub.f32	s3, s15, s6
 8010038:	ee34 1a2a 	vadd.f32	s2, s8, s21
 801003c:	ee77 7a83 	vadd.f32	s15, s15, s6
 8010040:	ee34 4a6a 	vsub.f32	s8, s8, s21
 8010044:	ee30 3aa3 	vadd.f32	s6, s1, s7
 8010048:	ee39 6ac6 	vsub.f32	s12, s19, s12
 801004c:	ee70 3ae3 	vsub.f32	s7, s1, s7
 8010050:	ee72 2aa8 	vadd.f32	s5, s5, s17
 8010054:	ee77 0a08 	vadd.f32	s1, s14, s16
 8010058:	ee21 1a0b 	vmul.f32	s2, s2, s22
 801005c:	ee37 7a48 	vsub.f32	s14, s14, s16
 8010060:	ee61 1a8b 	vmul.f32	s3, s3, s22
 8010064:	ee7a 5a65 	vsub.f32	s11, s20, s11
 8010068:	ee76 6a89 	vadd.f32	s13, s13, s18
 801006c:	ee24 4a0b 	vmul.f32	s8, s8, s22
 8010070:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8010074:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8010078:	ee35 5a42 	vsub.f32	s10, s10, s4
 801007c:	ee36 0aa2 	vadd.f32	s0, s13, s5
 8010080:	ee33 2a20 	vadd.f32	s4, s6, s1
 8010084:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8010088:	ee33 3a60 	vsub.f32	s6, s6, s1
 801008c:	ee75 2aa1 	vadd.f32	s5, s11, s3
 8010090:	ee77 0a01 	vadd.f32	s1, s14, s2
 8010094:	ee75 5ae1 	vsub.f32	s11, s11, s3
 8010098:	ee37 7a41 	vsub.f32	s14, s14, s2
 801009c:	ee73 1a84 	vadd.f32	s3, s7, s8
 80100a0:	ee33 4ac4 	vsub.f32	s8, s7, s8
 80100a4:	ee76 3a27 	vadd.f32	s7, s12, s15
 80100a8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80100ac:	ee32 8a00 	vadd.f32	s16, s4, s0
 80100b0:	ee33 1a45 	vsub.f32	s2, s6, s10
 80100b4:	ee32 2a40 	vsub.f32	s4, s4, s0
 80100b8:	ee35 5a03 	vadd.f32	s10, s10, s6
 80100bc:	ee34 0aa6 	vadd.f32	s0, s9, s13
 80100c0:	ee32 3aa0 	vadd.f32	s6, s5, s1
 80100c4:	ee74 6ae6 	vsub.f32	s13, s9, s13
 80100c8:	ee34 6a67 	vsub.f32	s12, s8, s15
 80100cc:	ee75 4a87 	vadd.f32	s9, s11, s14
 80100d0:	ee72 2ae0 	vsub.f32	s5, s5, s1
 80100d4:	ee35 7ac7 	vsub.f32	s14, s11, s14
 80100d8:	ee77 7a84 	vadd.f32	s15, s15, s8
 80100dc:	ee71 5ae3 	vsub.f32	s11, s3, s7
 80100e0:	44dc      	add	ip, fp
 80100e2:	ee73 3aa1 	vadd.f32	s7, s7, s3
 80100e6:	45e1      	cmp	r9, ip
 80100e8:	ed85 8a00 	vstr	s16, [r5]
 80100ec:	ed82 2a01 	vstr	s4, [r2, #4]
 80100f0:	4455      	add	r5, sl
 80100f2:	ed01 0a01 	vstr	s0, [r1, #-4]
 80100f6:	4452      	add	r2, sl
 80100f8:	edc4 6a00 	vstr	s13, [r4]
 80100fc:	ed81 1a00 	vstr	s2, [r1]
 8010100:	ed84 5a01 	vstr	s10, [r4, #4]
 8010104:	4451      	add	r1, sl
 8010106:	ed00 3a01 	vstr	s6, [r0, #-4]
 801010a:	4454      	add	r4, sl
 801010c:	edc7 2a00 	vstr	s5, [r7]
 8010110:	edc6 4a00 	vstr	s9, [r6]
 8010114:	ed83 7a00 	vstr	s14, [r3]
 8010118:	edc0 5a00 	vstr	s11, [r0]
 801011c:	edc7 3a01 	vstr	s7, [r7, #4]
 8010120:	4450      	add	r0, sl
 8010122:	ed86 6a01 	vstr	s12, [r6, #4]
 8010126:	4457      	add	r7, sl
 8010128:	edc3 7a01 	vstr	s15, [r3, #4]
 801012c:	4456      	add	r6, sl
 801012e:	4453      	add	r3, sl
 8010130:	f63f af44 	bhi.w	800ffbc <arm_radix8_butterfly_f32+0x88>
 8010134:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010136:	2b07      	cmp	r3, #7
 8010138:	f240 81c3 	bls.w	80104c2 <arm_radix8_butterfly_f32+0x58e>
 801013c:	9805      	ldr	r0, [sp, #20]
 801013e:	9a01      	ldr	r2, [sp, #4]
 8010140:	9b03      	ldr	r3, [sp, #12]
 8010142:	9d04      	ldr	r5, [sp, #16]
 8010144:	9902      	ldr	r1, [sp, #8]
 8010146:	f100 0c08 	add.w	ip, r0, #8
 801014a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801014c:	3208      	adds	r2, #8
 801014e:	1882      	adds	r2, r0, r2
 8010150:	3308      	adds	r3, #8
 8010152:	920a      	str	r2, [sp, #40]	@ 0x28
 8010154:	4602      	mov	r2, r0
 8010156:	18d3      	adds	r3, r2, r3
 8010158:	3108      	adds	r1, #8
 801015a:	3508      	adds	r5, #8
 801015c:	1851      	adds	r1, r2, r1
 801015e:	9307      	str	r3, [sp, #28]
 8010160:	4613      	mov	r3, r2
 8010162:	442a      	add	r2, r5
 8010164:	9206      	str	r2, [sp, #24]
 8010166:	461a      	mov	r2, r3
 8010168:	4462      	add	r2, ip
 801016a:	f10e 0e0c 	add.w	lr, lr, #12
 801016e:	9205      	str	r2, [sp, #20]
 8010170:	461a      	mov	r2, r3
 8010172:	4472      	add	r2, lr
 8010174:	f108 0808 	add.w	r8, r8, #8
 8010178:	330c      	adds	r3, #12
 801017a:	4440      	add	r0, r8
 801017c:	f04f 0e00 	mov.w	lr, #0
 8010180:	9203      	str	r2, [sp, #12]
 8010182:	9304      	str	r3, [sp, #16]
 8010184:	465a      	mov	r2, fp
 8010186:	464b      	mov	r3, r9
 8010188:	46f3      	mov	fp, lr
 801018a:	46d1      	mov	r9, sl
 801018c:	9009      	str	r0, [sp, #36]	@ 0x24
 801018e:	9108      	str	r1, [sp, #32]
 8010190:	f04f 0801 	mov.w	r8, #1
 8010194:	469a      	mov	sl, r3
 8010196:	4696      	mov	lr, r2
 8010198:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801019a:	449b      	add	fp, r3
 801019c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801019e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80101a2:	eb03 02cb 	add.w	r2, r3, fp, lsl #3
 80101a6:	eb02 00cb 	add.w	r0, r2, fp, lsl #3
 80101aa:	eb00 04cb 	add.w	r4, r0, fp, lsl #3
 80101ae:	eb04 05cb 	add.w	r5, r4, fp, lsl #3
 80101b2:	eb05 06cb 	add.w	r6, r5, fp, lsl #3
 80101b6:	930c      	str	r3, [sp, #48]	@ 0x30
 80101b8:	eb06 07cb 	add.w	r7, r6, fp, lsl #3
 80101bc:	ebab 038b 	sub.w	r3, fp, fp, lsl #2
 80101c0:	920b      	str	r2, [sp, #44]	@ 0x2c
 80101c2:	eb07 1203 	add.w	r2, r7, r3, lsl #4
 80101c6:	eb02 0ccb 	add.w	ip, r2, fp, lsl #3
 80101ca:	eb0c 03cb 	add.w	r3, ip, fp, lsl #3
 80101ce:	9202      	str	r2, [sp, #8]
 80101d0:	eb03 02cb 	add.w	r2, r3, fp, lsl #3
 80101d4:	9301      	str	r3, [sp, #4]
 80101d6:	4613      	mov	r3, r2
 80101d8:	edd3 da01 	vldr	s27, [r3, #4]
 80101dc:	9b01      	ldr	r3, [sp, #4]
 80101de:	edd0 7a00 	vldr	s15, [r0]
 80101e2:	ed93 da01 	vldr	s26, [r3, #4]
 80101e6:	9b02      	ldr	r3, [sp, #8]
 80101e8:	edcd 7a02 	vstr	s15, [sp, #8]
 80101ec:	ed93 ca01 	vldr	s24, [r3, #4]
 80101f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80101f2:	eddc ca01 	vldr	s25, [ip, #4]
 80101f6:	edd3 7a00 	vldr	s15, [r3]
 80101fa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80101fc:	edcd 7a01 	vstr	s15, [sp, #4]
 8010200:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8010204:	eb02 01cb 	add.w	r1, r2, fp, lsl #3
 8010208:	9200      	str	r2, [sp, #0]
 801020a:	eb01 02cb 	add.w	r2, r1, fp, lsl #3
 801020e:	edd3 7a00 	vldr	s15, [r3]
 8010212:	ed92 fa01 	vldr	s30, [r2, #4]
 8010216:	9a00      	ldr	r2, [sp, #0]
 8010218:	edd1 ea01 	vldr	s29, [r1, #4]
 801021c:	ed92 ea01 	vldr	s28, [r2, #4]
 8010220:	edd7 ba00 	vldr	s23, [r7]
 8010224:	edd6 aa00 	vldr	s21, [r6]
 8010228:	ed95 aa00 	vldr	s20, [r5]
 801022c:	edd4 9a00 	vldr	s19, [r4]
 8010230:	edcd 7a00 	vstr	s15, [sp]
 8010234:	e9dd 7603 	ldrd	r7, r6, [sp, #12]
 8010238:	e9dd 5405 	ldrd	r5, r4, [sp, #20]
 801023c:	e9dd 0107 	ldrd	r0, r1, [sp, #28]
 8010240:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	@ 0x24
 8010244:	46c4      	mov	ip, r8
 8010246:	e001      	b.n	801024c <arm_radix8_butterfly_f32+0x318>
 8010248:	3f3504f3 	.word	0x3f3504f3
 801024c:	ed91 6a00 	vldr	s12, [r1]
 8010250:	ed93 5a00 	vldr	s10, [r3]
 8010254:	edd0 fa00 	vldr	s31, [r0]
 8010258:	edd4 7a00 	vldr	s15, [r4]
 801025c:	ed95 7a00 	vldr	s14, [r5]
 8010260:	ed56 3a01 	vldr	s7, [r6, #-4]
 8010264:	ed17 3a01 	vldr	s6, [r7, #-4]
 8010268:	ed92 2a00 	vldr	s4, [r2]
 801026c:	ed96 0a00 	vldr	s0, [r6]
 8010270:	ee33 8a85 	vadd.f32	s16, s7, s10
 8010274:	ee32 1a06 	vadd.f32	s2, s4, s12
 8010278:	ee33 4a2f 	vadd.f32	s8, s6, s31
 801027c:	ee77 4a87 	vadd.f32	s9, s15, s14
 8010280:	ee78 1a04 	vadd.f32	s3, s16, s8
 8010284:	ee71 6a24 	vadd.f32	s13, s2, s9
 8010288:	ee32 2a46 	vsub.f32	s4, s4, s12
 801028c:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8010290:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010294:	ed06 6a01 	vstr	s12, [r6, #-4]
 8010298:	edd4 8a01 	vldr	s17, [r4, #4]
 801029c:	ed92 9a01 	vldr	s18, [r2, #4]
 80102a0:	edd7 0a00 	vldr	s1, [r7]
 80102a4:	edd1 2a01 	vldr	s5, [r1, #4]
 80102a8:	ed95 7a01 	vldr	s14, [r5, #4]
 80102ac:	ed93 6a01 	vldr	s12, [r3, #4]
 80102b0:	edd0 5a01 	vldr	s11, [r0, #4]
 80102b4:	ee73 3ac5 	vsub.f32	s7, s7, s10
 80102b8:	ee33 3a6f 	vsub.f32	s6, s6, s31
 80102bc:	ee39 5a62 	vsub.f32	s10, s18, s5
 80102c0:	ee78 fac7 	vsub.f32	s31, s17, s14
 80102c4:	ee38 4a44 	vsub.f32	s8, s16, s8
 80102c8:	ee38 7a87 	vadd.f32	s14, s17, s14
 80102cc:	ee30 8aa5 	vadd.f32	s16, s1, s11
 80102d0:	ee79 2a22 	vadd.f32	s5, s18, s5
 80102d4:	ee32 9a27 	vadd.f32	s18, s4, s15
 80102d8:	ee72 7a67 	vsub.f32	s15, s4, s15
 80102dc:	ee30 2a06 	vadd.f32	s4, s0, s12
 80102e0:	ee75 8a6f 	vsub.f32	s17, s10, s31
 80102e4:	ee71 4a64 	vsub.f32	s9, s2, s9
 80102e8:	ee35 5a2f 	vadd.f32	s10, s10, s31
 80102ec:	ee32 1a08 	vadd.f32	s2, s4, s16
 80102f0:	ee72 fa87 	vadd.f32	s31, s5, s14
 80102f4:	ee32 2a48 	vsub.f32	s4, s4, s16
 80102f8:	ee68 8a8b 	vmul.f32	s17, s17, s22
 80102fc:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8010300:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8010304:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8010308:	ee71 6ae6 	vsub.f32	s13, s3, s13
 801030c:	ee29 9a0b 	vmul.f32	s18, s18, s22
 8010310:	ee71 1a6f 	vsub.f32	s3, s2, s31
 8010314:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8010318:	ee30 6a46 	vsub.f32	s12, s0, s12
 801031c:	ee74 0a22 	vadd.f32	s1, s8, s5
 8010320:	ee36 0a28 	vadd.f32	s0, s12, s17
 8010324:	ee74 2a62 	vsub.f32	s5, s8, s5
 8010328:	ee36 6a68 	vsub.f32	s12, s12, s17
 801032c:	ee32 4a64 	vsub.f32	s8, s4, s9
 8010330:	ee73 8a09 	vadd.f32	s17, s6, s18
 8010334:	ee74 4a82 	vadd.f32	s9, s9, s4
 8010338:	ee33 9a49 	vsub.f32	s18, s6, s18
 801033c:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 8010340:	ee35 3a85 	vadd.f32	s6, s11, s10
 8010344:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8010348:	ee33 5aa7 	vadd.f32	s10, s7, s15
 801034c:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8010350:	ee69 3aa6 	vmul.f32	s7, s19, s13
 8010354:	ee30 7a68 	vsub.f32	s14, s0, s17
 8010358:	ee35 8a03 	vadd.f32	s16, s10, s6
 801035c:	ee38 0a80 	vadd.f32	s0, s17, s0
 8010360:	ee73 3a82 	vadd.f32	s7, s7, s4
 8010364:	ee69 8aa1 	vmul.f32	s17, s19, s3
 8010368:	ed9d 2a00 	vldr	s4, [sp]
 801036c:	eddd 1a01 	vldr	s3, [sp, #4]
 8010370:	ee35 5a43 	vsub.f32	s10, s10, s6
 8010374:	ee71 fa2f 	vadd.f32	s31, s2, s31
 8010378:	ee37 3aa5 	vadd.f32	s6, s15, s11
 801037c:	ee21 1aa0 	vmul.f32	s2, s3, s1
 8010380:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8010384:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 8010388:	ee76 5a49 	vsub.f32	s11, s12, s18
 801038c:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 8010390:	ee39 6a06 	vadd.f32	s12, s18, s12
 8010394:	ee2c 9a84 	vmul.f32	s18, s25, s8
 8010398:	ee21 4a84 	vmul.f32	s8, s3, s8
 801039c:	ee6c 1a07 	vmul.f32	s3, s24, s14
 80103a0:	ee22 7a07 	vmul.f32	s14, s4, s14
 80103a4:	ee22 2a08 	vmul.f32	s4, s4, s16
 80103a8:	ee2c 8a08 	vmul.f32	s16, s24, s16
 80103ac:	ee78 6ae6 	vsub.f32	s13, s17, s13
 80103b0:	ee31 1a09 	vadd.f32	s2, s2, s18
 80103b4:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 80103b8:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 80103bc:	ee74 0a60 	vsub.f32	s1, s8, s1
 80103c0:	ee37 7a48 	vsub.f32	s14, s14, s16
 80103c4:	ee2f 4a00 	vmul.f32	s8, s30, s0
 80103c8:	ee2b 8a85 	vmul.f32	s16, s23, s10
 80103cc:	ee72 1a21 	vadd.f32	s3, s4, s3
 80103d0:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 80103d4:	ee38 2a89 	vadd.f32	s4, s17, s18
 80103d8:	ee2f 5a05 	vmul.f32	s10, s30, s10
 80103dc:	ee38 8a04 	vadd.f32	s16, s16, s8
 80103e0:	ee2e 9a25 	vmul.f32	s18, s28, s11
 80103e4:	ee2a 4a25 	vmul.f32	s8, s20, s11
 80103e8:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 80103ec:	eddd 5a02 	vldr	s11, [sp, #8]
 80103f0:	edc6 fa00 	vstr	s31, [r6]
 80103f4:	ee2b 0a80 	vmul.f32	s0, s23, s0
 80103f8:	ee74 2ae2 	vsub.f32	s5, s9, s5
 80103fc:	ee30 0a45 	vsub.f32	s0, s0, s10
 8010400:	ee6a 4a03 	vmul.f32	s9, s20, s6
 8010404:	ee65 8aa7 	vmul.f32	s17, s11, s15
 8010408:	ee2d 5a06 	vmul.f32	s10, s26, s12
 801040c:	ee2e 3a03 	vmul.f32	s6, s28, s6
 8010410:	ee6d 7a27 	vmul.f32	s15, s26, s15
 8010414:	ee25 6a86 	vmul.f32	s12, s11, s12
 8010418:	ee74 4a89 	vadd.f32	s9, s9, s18
 801041c:	ee34 3a43 	vsub.f32	s6, s8, s6
 8010420:	ee78 8a85 	vadd.f32	s17, s17, s10
 8010424:	ee36 6a67 	vsub.f32	s12, s12, s15
 8010428:	44f4      	add	ip, lr
 801042a:	45e2      	cmp	sl, ip
 801042c:	edc3 3a00 	vstr	s7, [r3]
 8010430:	edc3 6a01 	vstr	s13, [r3, #4]
 8010434:	444e      	add	r6, r9
 8010436:	ed07 1a01 	vstr	s2, [r7, #-4]
 801043a:	edc7 0a00 	vstr	s1, [r7]
 801043e:	444b      	add	r3, r9
 8010440:	ed80 2a00 	vstr	s4, [r0]
 8010444:	edc0 2a01 	vstr	s5, [r0, #4]
 8010448:	444f      	add	r7, r9
 801044a:	edc2 1a00 	vstr	s3, [r2]
 801044e:	ed82 7a01 	vstr	s14, [r2, #4]
 8010452:	4448      	add	r0, r9
 8010454:	ed85 8a00 	vstr	s16, [r5]
 8010458:	ed85 0a01 	vstr	s0, [r5, #4]
 801045c:	444a      	add	r2, r9
 801045e:	edc1 4a00 	vstr	s9, [r1]
 8010462:	444d      	add	r5, r9
 8010464:	ed81 3a01 	vstr	s6, [r1, #4]
 8010468:	edc4 8a00 	vstr	s17, [r4]
 801046c:	ed84 6a01 	vstr	s12, [r4, #4]
 8010470:	4449      	add	r1, r9
 8010472:	444c      	add	r4, r9
 8010474:	f63f aeea 	bhi.w	801024c <arm_radix8_butterfly_f32+0x318>
 8010478:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801047a:	3308      	adds	r3, #8
 801047c:	930a      	str	r3, [sp, #40]	@ 0x28
 801047e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010480:	3308      	adds	r3, #8
 8010482:	9309      	str	r3, [sp, #36]	@ 0x24
 8010484:	9b08      	ldr	r3, [sp, #32]
 8010486:	3308      	adds	r3, #8
 8010488:	9308      	str	r3, [sp, #32]
 801048a:	9b07      	ldr	r3, [sp, #28]
 801048c:	3308      	adds	r3, #8
 801048e:	9307      	str	r3, [sp, #28]
 8010490:	9b06      	ldr	r3, [sp, #24]
 8010492:	3308      	adds	r3, #8
 8010494:	9306      	str	r3, [sp, #24]
 8010496:	9b05      	ldr	r3, [sp, #20]
 8010498:	3308      	adds	r3, #8
 801049a:	9305      	str	r3, [sp, #20]
 801049c:	9b04      	ldr	r3, [sp, #16]
 801049e:	3308      	adds	r3, #8
 80104a0:	9304      	str	r3, [sp, #16]
 80104a2:	9b03      	ldr	r3, [sp, #12]
 80104a4:	3308      	adds	r3, #8
 80104a6:	9303      	str	r3, [sp, #12]
 80104a8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80104aa:	f108 0801 	add.w	r8, r8, #1
 80104ae:	4543      	cmp	r3, r8
 80104b0:	f47f ae72 	bne.w	8010198 <arm_radix8_butterfly_f32+0x264>
 80104b4:	469b      	mov	fp, r3
 80104b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80104b8:	00db      	lsls	r3, r3, #3
 80104ba:	b29b      	uxth	r3, r3
 80104bc:	46d1      	mov	r9, sl
 80104be:	930e      	str	r3, [sp, #56]	@ 0x38
 80104c0:	e547      	b.n	800ff52 <arm_radix8_butterfly_f32+0x1e>
 80104c2:	b013      	add	sp, #76	@ 0x4c
 80104c4:	ecbd 8b10 	vpop	{d8-d15}
 80104c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080104cc <std>:
 80104cc:	2300      	movs	r3, #0
 80104ce:	b510      	push	{r4, lr}
 80104d0:	4604      	mov	r4, r0
 80104d2:	e9c0 3300 	strd	r3, r3, [r0]
 80104d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80104da:	6083      	str	r3, [r0, #8]
 80104dc:	8181      	strh	r1, [r0, #12]
 80104de:	6643      	str	r3, [r0, #100]	@ 0x64
 80104e0:	81c2      	strh	r2, [r0, #14]
 80104e2:	6183      	str	r3, [r0, #24]
 80104e4:	4619      	mov	r1, r3
 80104e6:	2208      	movs	r2, #8
 80104e8:	305c      	adds	r0, #92	@ 0x5c
 80104ea:	f000 f9f9 	bl	80108e0 <memset>
 80104ee:	4b0d      	ldr	r3, [pc, #52]	@ (8010524 <std+0x58>)
 80104f0:	6263      	str	r3, [r4, #36]	@ 0x24
 80104f2:	4b0d      	ldr	r3, [pc, #52]	@ (8010528 <std+0x5c>)
 80104f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80104f6:	4b0d      	ldr	r3, [pc, #52]	@ (801052c <std+0x60>)
 80104f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80104fa:	4b0d      	ldr	r3, [pc, #52]	@ (8010530 <std+0x64>)
 80104fc:	6323      	str	r3, [r4, #48]	@ 0x30
 80104fe:	4b0d      	ldr	r3, [pc, #52]	@ (8010534 <std+0x68>)
 8010500:	6224      	str	r4, [r4, #32]
 8010502:	429c      	cmp	r4, r3
 8010504:	d006      	beq.n	8010514 <std+0x48>
 8010506:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801050a:	4294      	cmp	r4, r2
 801050c:	d002      	beq.n	8010514 <std+0x48>
 801050e:	33d0      	adds	r3, #208	@ 0xd0
 8010510:	429c      	cmp	r4, r3
 8010512:	d105      	bne.n	8010520 <std+0x54>
 8010514:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801051c:	f000 baae 	b.w	8010a7c <__retarget_lock_init_recursive>
 8010520:	bd10      	pop	{r4, pc}
 8010522:	bf00      	nop
 8010524:	08010731 	.word	0x08010731
 8010528:	08010753 	.word	0x08010753
 801052c:	0801078b 	.word	0x0801078b
 8010530:	080107af 	.word	0x080107af
 8010534:	2000a5b4 	.word	0x2000a5b4

08010538 <stdio_exit_handler>:
 8010538:	4a02      	ldr	r2, [pc, #8]	@ (8010544 <stdio_exit_handler+0xc>)
 801053a:	4903      	ldr	r1, [pc, #12]	@ (8010548 <stdio_exit_handler+0x10>)
 801053c:	4803      	ldr	r0, [pc, #12]	@ (801054c <stdio_exit_handler+0x14>)
 801053e:	f000 b869 	b.w	8010614 <_fwalk_sglue>
 8010542:	bf00      	nop
 8010544:	20000010 	.word	0x20000010
 8010548:	08011339 	.word	0x08011339
 801054c:	20000020 	.word	0x20000020

08010550 <cleanup_stdio>:
 8010550:	6841      	ldr	r1, [r0, #4]
 8010552:	4b0c      	ldr	r3, [pc, #48]	@ (8010584 <cleanup_stdio+0x34>)
 8010554:	4299      	cmp	r1, r3
 8010556:	b510      	push	{r4, lr}
 8010558:	4604      	mov	r4, r0
 801055a:	d001      	beq.n	8010560 <cleanup_stdio+0x10>
 801055c:	f000 feec 	bl	8011338 <_fflush_r>
 8010560:	68a1      	ldr	r1, [r4, #8]
 8010562:	4b09      	ldr	r3, [pc, #36]	@ (8010588 <cleanup_stdio+0x38>)
 8010564:	4299      	cmp	r1, r3
 8010566:	d002      	beq.n	801056e <cleanup_stdio+0x1e>
 8010568:	4620      	mov	r0, r4
 801056a:	f000 fee5 	bl	8011338 <_fflush_r>
 801056e:	68e1      	ldr	r1, [r4, #12]
 8010570:	4b06      	ldr	r3, [pc, #24]	@ (801058c <cleanup_stdio+0x3c>)
 8010572:	4299      	cmp	r1, r3
 8010574:	d004      	beq.n	8010580 <cleanup_stdio+0x30>
 8010576:	4620      	mov	r0, r4
 8010578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801057c:	f000 bedc 	b.w	8011338 <_fflush_r>
 8010580:	bd10      	pop	{r4, pc}
 8010582:	bf00      	nop
 8010584:	2000a5b4 	.word	0x2000a5b4
 8010588:	2000a61c 	.word	0x2000a61c
 801058c:	2000a684 	.word	0x2000a684

08010590 <global_stdio_init.part.0>:
 8010590:	b510      	push	{r4, lr}
 8010592:	4b0b      	ldr	r3, [pc, #44]	@ (80105c0 <global_stdio_init.part.0+0x30>)
 8010594:	4c0b      	ldr	r4, [pc, #44]	@ (80105c4 <global_stdio_init.part.0+0x34>)
 8010596:	4a0c      	ldr	r2, [pc, #48]	@ (80105c8 <global_stdio_init.part.0+0x38>)
 8010598:	601a      	str	r2, [r3, #0]
 801059a:	4620      	mov	r0, r4
 801059c:	2200      	movs	r2, #0
 801059e:	2104      	movs	r1, #4
 80105a0:	f7ff ff94 	bl	80104cc <std>
 80105a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80105a8:	2201      	movs	r2, #1
 80105aa:	2109      	movs	r1, #9
 80105ac:	f7ff ff8e 	bl	80104cc <std>
 80105b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80105b4:	2202      	movs	r2, #2
 80105b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80105ba:	2112      	movs	r1, #18
 80105bc:	f7ff bf86 	b.w	80104cc <std>
 80105c0:	2000a6ec 	.word	0x2000a6ec
 80105c4:	2000a5b4 	.word	0x2000a5b4
 80105c8:	08010539 	.word	0x08010539

080105cc <__sfp_lock_acquire>:
 80105cc:	4801      	ldr	r0, [pc, #4]	@ (80105d4 <__sfp_lock_acquire+0x8>)
 80105ce:	f000 ba56 	b.w	8010a7e <__retarget_lock_acquire_recursive>
 80105d2:	bf00      	nop
 80105d4:	2000a6f5 	.word	0x2000a6f5

080105d8 <__sfp_lock_release>:
 80105d8:	4801      	ldr	r0, [pc, #4]	@ (80105e0 <__sfp_lock_release+0x8>)
 80105da:	f000 ba51 	b.w	8010a80 <__retarget_lock_release_recursive>
 80105de:	bf00      	nop
 80105e0:	2000a6f5 	.word	0x2000a6f5

080105e4 <__sinit>:
 80105e4:	b510      	push	{r4, lr}
 80105e6:	4604      	mov	r4, r0
 80105e8:	f7ff fff0 	bl	80105cc <__sfp_lock_acquire>
 80105ec:	6a23      	ldr	r3, [r4, #32]
 80105ee:	b11b      	cbz	r3, 80105f8 <__sinit+0x14>
 80105f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80105f4:	f7ff bff0 	b.w	80105d8 <__sfp_lock_release>
 80105f8:	4b04      	ldr	r3, [pc, #16]	@ (801060c <__sinit+0x28>)
 80105fa:	6223      	str	r3, [r4, #32]
 80105fc:	4b04      	ldr	r3, [pc, #16]	@ (8010610 <__sinit+0x2c>)
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	2b00      	cmp	r3, #0
 8010602:	d1f5      	bne.n	80105f0 <__sinit+0xc>
 8010604:	f7ff ffc4 	bl	8010590 <global_stdio_init.part.0>
 8010608:	e7f2      	b.n	80105f0 <__sinit+0xc>
 801060a:	bf00      	nop
 801060c:	08010551 	.word	0x08010551
 8010610:	2000a6ec 	.word	0x2000a6ec

08010614 <_fwalk_sglue>:
 8010614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010618:	4607      	mov	r7, r0
 801061a:	4688      	mov	r8, r1
 801061c:	4614      	mov	r4, r2
 801061e:	2600      	movs	r6, #0
 8010620:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010624:	f1b9 0901 	subs.w	r9, r9, #1
 8010628:	d505      	bpl.n	8010636 <_fwalk_sglue+0x22>
 801062a:	6824      	ldr	r4, [r4, #0]
 801062c:	2c00      	cmp	r4, #0
 801062e:	d1f7      	bne.n	8010620 <_fwalk_sglue+0xc>
 8010630:	4630      	mov	r0, r6
 8010632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010636:	89ab      	ldrh	r3, [r5, #12]
 8010638:	2b01      	cmp	r3, #1
 801063a:	d907      	bls.n	801064c <_fwalk_sglue+0x38>
 801063c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010640:	3301      	adds	r3, #1
 8010642:	d003      	beq.n	801064c <_fwalk_sglue+0x38>
 8010644:	4629      	mov	r1, r5
 8010646:	4638      	mov	r0, r7
 8010648:	47c0      	blx	r8
 801064a:	4306      	orrs	r6, r0
 801064c:	3568      	adds	r5, #104	@ 0x68
 801064e:	e7e9      	b.n	8010624 <_fwalk_sglue+0x10>

08010650 <iprintf>:
 8010650:	b40f      	push	{r0, r1, r2, r3}
 8010652:	b507      	push	{r0, r1, r2, lr}
 8010654:	4906      	ldr	r1, [pc, #24]	@ (8010670 <iprintf+0x20>)
 8010656:	ab04      	add	r3, sp, #16
 8010658:	6808      	ldr	r0, [r1, #0]
 801065a:	f853 2b04 	ldr.w	r2, [r3], #4
 801065e:	6881      	ldr	r1, [r0, #8]
 8010660:	9301      	str	r3, [sp, #4]
 8010662:	f000 fb3f 	bl	8010ce4 <_vfiprintf_r>
 8010666:	b003      	add	sp, #12
 8010668:	f85d eb04 	ldr.w	lr, [sp], #4
 801066c:	b004      	add	sp, #16
 801066e:	4770      	bx	lr
 8010670:	2000001c 	.word	0x2000001c

08010674 <_puts_r>:
 8010674:	6a03      	ldr	r3, [r0, #32]
 8010676:	b570      	push	{r4, r5, r6, lr}
 8010678:	6884      	ldr	r4, [r0, #8]
 801067a:	4605      	mov	r5, r0
 801067c:	460e      	mov	r6, r1
 801067e:	b90b      	cbnz	r3, 8010684 <_puts_r+0x10>
 8010680:	f7ff ffb0 	bl	80105e4 <__sinit>
 8010684:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010686:	07db      	lsls	r3, r3, #31
 8010688:	d405      	bmi.n	8010696 <_puts_r+0x22>
 801068a:	89a3      	ldrh	r3, [r4, #12]
 801068c:	0598      	lsls	r0, r3, #22
 801068e:	d402      	bmi.n	8010696 <_puts_r+0x22>
 8010690:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010692:	f000 f9f4 	bl	8010a7e <__retarget_lock_acquire_recursive>
 8010696:	89a3      	ldrh	r3, [r4, #12]
 8010698:	0719      	lsls	r1, r3, #28
 801069a:	d502      	bpl.n	80106a2 <_puts_r+0x2e>
 801069c:	6923      	ldr	r3, [r4, #16]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d135      	bne.n	801070e <_puts_r+0x9a>
 80106a2:	4621      	mov	r1, r4
 80106a4:	4628      	mov	r0, r5
 80106a6:	f000 f8c5 	bl	8010834 <__swsetup_r>
 80106aa:	b380      	cbz	r0, 801070e <_puts_r+0x9a>
 80106ac:	f04f 35ff 	mov.w	r5, #4294967295
 80106b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80106b2:	07da      	lsls	r2, r3, #31
 80106b4:	d405      	bmi.n	80106c2 <_puts_r+0x4e>
 80106b6:	89a3      	ldrh	r3, [r4, #12]
 80106b8:	059b      	lsls	r3, r3, #22
 80106ba:	d402      	bmi.n	80106c2 <_puts_r+0x4e>
 80106bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80106be:	f000 f9df 	bl	8010a80 <__retarget_lock_release_recursive>
 80106c2:	4628      	mov	r0, r5
 80106c4:	bd70      	pop	{r4, r5, r6, pc}
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	da04      	bge.n	80106d4 <_puts_r+0x60>
 80106ca:	69a2      	ldr	r2, [r4, #24]
 80106cc:	429a      	cmp	r2, r3
 80106ce:	dc17      	bgt.n	8010700 <_puts_r+0x8c>
 80106d0:	290a      	cmp	r1, #10
 80106d2:	d015      	beq.n	8010700 <_puts_r+0x8c>
 80106d4:	6823      	ldr	r3, [r4, #0]
 80106d6:	1c5a      	adds	r2, r3, #1
 80106d8:	6022      	str	r2, [r4, #0]
 80106da:	7019      	strb	r1, [r3, #0]
 80106dc:	68a3      	ldr	r3, [r4, #8]
 80106de:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80106e2:	3b01      	subs	r3, #1
 80106e4:	60a3      	str	r3, [r4, #8]
 80106e6:	2900      	cmp	r1, #0
 80106e8:	d1ed      	bne.n	80106c6 <_puts_r+0x52>
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	da11      	bge.n	8010712 <_puts_r+0x9e>
 80106ee:	4622      	mov	r2, r4
 80106f0:	210a      	movs	r1, #10
 80106f2:	4628      	mov	r0, r5
 80106f4:	f000 f85f 	bl	80107b6 <__swbuf_r>
 80106f8:	3001      	adds	r0, #1
 80106fa:	d0d7      	beq.n	80106ac <_puts_r+0x38>
 80106fc:	250a      	movs	r5, #10
 80106fe:	e7d7      	b.n	80106b0 <_puts_r+0x3c>
 8010700:	4622      	mov	r2, r4
 8010702:	4628      	mov	r0, r5
 8010704:	f000 f857 	bl	80107b6 <__swbuf_r>
 8010708:	3001      	adds	r0, #1
 801070a:	d1e7      	bne.n	80106dc <_puts_r+0x68>
 801070c:	e7ce      	b.n	80106ac <_puts_r+0x38>
 801070e:	3e01      	subs	r6, #1
 8010710:	e7e4      	b.n	80106dc <_puts_r+0x68>
 8010712:	6823      	ldr	r3, [r4, #0]
 8010714:	1c5a      	adds	r2, r3, #1
 8010716:	6022      	str	r2, [r4, #0]
 8010718:	220a      	movs	r2, #10
 801071a:	701a      	strb	r2, [r3, #0]
 801071c:	e7ee      	b.n	80106fc <_puts_r+0x88>
	...

08010720 <puts>:
 8010720:	4b02      	ldr	r3, [pc, #8]	@ (801072c <puts+0xc>)
 8010722:	4601      	mov	r1, r0
 8010724:	6818      	ldr	r0, [r3, #0]
 8010726:	f7ff bfa5 	b.w	8010674 <_puts_r>
 801072a:	bf00      	nop
 801072c:	2000001c 	.word	0x2000001c

08010730 <__sread>:
 8010730:	b510      	push	{r4, lr}
 8010732:	460c      	mov	r4, r1
 8010734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010738:	f000 f952 	bl	80109e0 <_read_r>
 801073c:	2800      	cmp	r0, #0
 801073e:	bfab      	itete	ge
 8010740:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010742:	89a3      	ldrhlt	r3, [r4, #12]
 8010744:	181b      	addge	r3, r3, r0
 8010746:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801074a:	bfac      	ite	ge
 801074c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801074e:	81a3      	strhlt	r3, [r4, #12]
 8010750:	bd10      	pop	{r4, pc}

08010752 <__swrite>:
 8010752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010756:	461f      	mov	r7, r3
 8010758:	898b      	ldrh	r3, [r1, #12]
 801075a:	05db      	lsls	r3, r3, #23
 801075c:	4605      	mov	r5, r0
 801075e:	460c      	mov	r4, r1
 8010760:	4616      	mov	r6, r2
 8010762:	d505      	bpl.n	8010770 <__swrite+0x1e>
 8010764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010768:	2302      	movs	r3, #2
 801076a:	2200      	movs	r2, #0
 801076c:	f000 f926 	bl	80109bc <_lseek_r>
 8010770:	89a3      	ldrh	r3, [r4, #12]
 8010772:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010776:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801077a:	81a3      	strh	r3, [r4, #12]
 801077c:	4632      	mov	r2, r6
 801077e:	463b      	mov	r3, r7
 8010780:	4628      	mov	r0, r5
 8010782:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010786:	f000 b93d 	b.w	8010a04 <_write_r>

0801078a <__sseek>:
 801078a:	b510      	push	{r4, lr}
 801078c:	460c      	mov	r4, r1
 801078e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010792:	f000 f913 	bl	80109bc <_lseek_r>
 8010796:	1c43      	adds	r3, r0, #1
 8010798:	89a3      	ldrh	r3, [r4, #12]
 801079a:	bf15      	itete	ne
 801079c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801079e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80107a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80107a6:	81a3      	strheq	r3, [r4, #12]
 80107a8:	bf18      	it	ne
 80107aa:	81a3      	strhne	r3, [r4, #12]
 80107ac:	bd10      	pop	{r4, pc}

080107ae <__sclose>:
 80107ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107b2:	f000 b89d 	b.w	80108f0 <_close_r>

080107b6 <__swbuf_r>:
 80107b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107b8:	460e      	mov	r6, r1
 80107ba:	4614      	mov	r4, r2
 80107bc:	4605      	mov	r5, r0
 80107be:	b118      	cbz	r0, 80107c8 <__swbuf_r+0x12>
 80107c0:	6a03      	ldr	r3, [r0, #32]
 80107c2:	b90b      	cbnz	r3, 80107c8 <__swbuf_r+0x12>
 80107c4:	f7ff ff0e 	bl	80105e4 <__sinit>
 80107c8:	69a3      	ldr	r3, [r4, #24]
 80107ca:	60a3      	str	r3, [r4, #8]
 80107cc:	89a3      	ldrh	r3, [r4, #12]
 80107ce:	071a      	lsls	r2, r3, #28
 80107d0:	d501      	bpl.n	80107d6 <__swbuf_r+0x20>
 80107d2:	6923      	ldr	r3, [r4, #16]
 80107d4:	b943      	cbnz	r3, 80107e8 <__swbuf_r+0x32>
 80107d6:	4621      	mov	r1, r4
 80107d8:	4628      	mov	r0, r5
 80107da:	f000 f82b 	bl	8010834 <__swsetup_r>
 80107de:	b118      	cbz	r0, 80107e8 <__swbuf_r+0x32>
 80107e0:	f04f 37ff 	mov.w	r7, #4294967295
 80107e4:	4638      	mov	r0, r7
 80107e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107e8:	6823      	ldr	r3, [r4, #0]
 80107ea:	6922      	ldr	r2, [r4, #16]
 80107ec:	1a98      	subs	r0, r3, r2
 80107ee:	6963      	ldr	r3, [r4, #20]
 80107f0:	b2f6      	uxtb	r6, r6
 80107f2:	4283      	cmp	r3, r0
 80107f4:	4637      	mov	r7, r6
 80107f6:	dc05      	bgt.n	8010804 <__swbuf_r+0x4e>
 80107f8:	4621      	mov	r1, r4
 80107fa:	4628      	mov	r0, r5
 80107fc:	f000 fd9c 	bl	8011338 <_fflush_r>
 8010800:	2800      	cmp	r0, #0
 8010802:	d1ed      	bne.n	80107e0 <__swbuf_r+0x2a>
 8010804:	68a3      	ldr	r3, [r4, #8]
 8010806:	3b01      	subs	r3, #1
 8010808:	60a3      	str	r3, [r4, #8]
 801080a:	6823      	ldr	r3, [r4, #0]
 801080c:	1c5a      	adds	r2, r3, #1
 801080e:	6022      	str	r2, [r4, #0]
 8010810:	701e      	strb	r6, [r3, #0]
 8010812:	6962      	ldr	r2, [r4, #20]
 8010814:	1c43      	adds	r3, r0, #1
 8010816:	429a      	cmp	r2, r3
 8010818:	d004      	beq.n	8010824 <__swbuf_r+0x6e>
 801081a:	89a3      	ldrh	r3, [r4, #12]
 801081c:	07db      	lsls	r3, r3, #31
 801081e:	d5e1      	bpl.n	80107e4 <__swbuf_r+0x2e>
 8010820:	2e0a      	cmp	r6, #10
 8010822:	d1df      	bne.n	80107e4 <__swbuf_r+0x2e>
 8010824:	4621      	mov	r1, r4
 8010826:	4628      	mov	r0, r5
 8010828:	f000 fd86 	bl	8011338 <_fflush_r>
 801082c:	2800      	cmp	r0, #0
 801082e:	d0d9      	beq.n	80107e4 <__swbuf_r+0x2e>
 8010830:	e7d6      	b.n	80107e0 <__swbuf_r+0x2a>
	...

08010834 <__swsetup_r>:
 8010834:	b538      	push	{r3, r4, r5, lr}
 8010836:	4b29      	ldr	r3, [pc, #164]	@ (80108dc <__swsetup_r+0xa8>)
 8010838:	4605      	mov	r5, r0
 801083a:	6818      	ldr	r0, [r3, #0]
 801083c:	460c      	mov	r4, r1
 801083e:	b118      	cbz	r0, 8010848 <__swsetup_r+0x14>
 8010840:	6a03      	ldr	r3, [r0, #32]
 8010842:	b90b      	cbnz	r3, 8010848 <__swsetup_r+0x14>
 8010844:	f7ff fece 	bl	80105e4 <__sinit>
 8010848:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801084c:	0719      	lsls	r1, r3, #28
 801084e:	d422      	bmi.n	8010896 <__swsetup_r+0x62>
 8010850:	06da      	lsls	r2, r3, #27
 8010852:	d407      	bmi.n	8010864 <__swsetup_r+0x30>
 8010854:	2209      	movs	r2, #9
 8010856:	602a      	str	r2, [r5, #0]
 8010858:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801085c:	81a3      	strh	r3, [r4, #12]
 801085e:	f04f 30ff 	mov.w	r0, #4294967295
 8010862:	e033      	b.n	80108cc <__swsetup_r+0x98>
 8010864:	0758      	lsls	r0, r3, #29
 8010866:	d512      	bpl.n	801088e <__swsetup_r+0x5a>
 8010868:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801086a:	b141      	cbz	r1, 801087e <__swsetup_r+0x4a>
 801086c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010870:	4299      	cmp	r1, r3
 8010872:	d002      	beq.n	801087a <__swsetup_r+0x46>
 8010874:	4628      	mov	r0, r5
 8010876:	f000 f913 	bl	8010aa0 <_free_r>
 801087a:	2300      	movs	r3, #0
 801087c:	6363      	str	r3, [r4, #52]	@ 0x34
 801087e:	89a3      	ldrh	r3, [r4, #12]
 8010880:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010884:	81a3      	strh	r3, [r4, #12]
 8010886:	2300      	movs	r3, #0
 8010888:	6063      	str	r3, [r4, #4]
 801088a:	6923      	ldr	r3, [r4, #16]
 801088c:	6023      	str	r3, [r4, #0]
 801088e:	89a3      	ldrh	r3, [r4, #12]
 8010890:	f043 0308 	orr.w	r3, r3, #8
 8010894:	81a3      	strh	r3, [r4, #12]
 8010896:	6923      	ldr	r3, [r4, #16]
 8010898:	b94b      	cbnz	r3, 80108ae <__swsetup_r+0x7a>
 801089a:	89a3      	ldrh	r3, [r4, #12]
 801089c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80108a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80108a4:	d003      	beq.n	80108ae <__swsetup_r+0x7a>
 80108a6:	4621      	mov	r1, r4
 80108a8:	4628      	mov	r0, r5
 80108aa:	f000 fd93 	bl	80113d4 <__smakebuf_r>
 80108ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80108b2:	f013 0201 	ands.w	r2, r3, #1
 80108b6:	d00a      	beq.n	80108ce <__swsetup_r+0x9a>
 80108b8:	2200      	movs	r2, #0
 80108ba:	60a2      	str	r2, [r4, #8]
 80108bc:	6962      	ldr	r2, [r4, #20]
 80108be:	4252      	negs	r2, r2
 80108c0:	61a2      	str	r2, [r4, #24]
 80108c2:	6922      	ldr	r2, [r4, #16]
 80108c4:	b942      	cbnz	r2, 80108d8 <__swsetup_r+0xa4>
 80108c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80108ca:	d1c5      	bne.n	8010858 <__swsetup_r+0x24>
 80108cc:	bd38      	pop	{r3, r4, r5, pc}
 80108ce:	0799      	lsls	r1, r3, #30
 80108d0:	bf58      	it	pl
 80108d2:	6962      	ldrpl	r2, [r4, #20]
 80108d4:	60a2      	str	r2, [r4, #8]
 80108d6:	e7f4      	b.n	80108c2 <__swsetup_r+0x8e>
 80108d8:	2000      	movs	r0, #0
 80108da:	e7f7      	b.n	80108cc <__swsetup_r+0x98>
 80108dc:	2000001c 	.word	0x2000001c

080108e0 <memset>:
 80108e0:	4402      	add	r2, r0
 80108e2:	4603      	mov	r3, r0
 80108e4:	4293      	cmp	r3, r2
 80108e6:	d100      	bne.n	80108ea <memset+0xa>
 80108e8:	4770      	bx	lr
 80108ea:	f803 1b01 	strb.w	r1, [r3], #1
 80108ee:	e7f9      	b.n	80108e4 <memset+0x4>

080108f0 <_close_r>:
 80108f0:	b538      	push	{r3, r4, r5, lr}
 80108f2:	4d06      	ldr	r5, [pc, #24]	@ (801090c <_close_r+0x1c>)
 80108f4:	2300      	movs	r3, #0
 80108f6:	4604      	mov	r4, r0
 80108f8:	4608      	mov	r0, r1
 80108fa:	602b      	str	r3, [r5, #0]
 80108fc:	f7f2 fb6d 	bl	8002fda <_close>
 8010900:	1c43      	adds	r3, r0, #1
 8010902:	d102      	bne.n	801090a <_close_r+0x1a>
 8010904:	682b      	ldr	r3, [r5, #0]
 8010906:	b103      	cbz	r3, 801090a <_close_r+0x1a>
 8010908:	6023      	str	r3, [r4, #0]
 801090a:	bd38      	pop	{r3, r4, r5, pc}
 801090c:	2000a6f0 	.word	0x2000a6f0

08010910 <_reclaim_reent>:
 8010910:	4b29      	ldr	r3, [pc, #164]	@ (80109b8 <_reclaim_reent+0xa8>)
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	4283      	cmp	r3, r0
 8010916:	b570      	push	{r4, r5, r6, lr}
 8010918:	4604      	mov	r4, r0
 801091a:	d04b      	beq.n	80109b4 <_reclaim_reent+0xa4>
 801091c:	69c3      	ldr	r3, [r0, #28]
 801091e:	b1ab      	cbz	r3, 801094c <_reclaim_reent+0x3c>
 8010920:	68db      	ldr	r3, [r3, #12]
 8010922:	b16b      	cbz	r3, 8010940 <_reclaim_reent+0x30>
 8010924:	2500      	movs	r5, #0
 8010926:	69e3      	ldr	r3, [r4, #28]
 8010928:	68db      	ldr	r3, [r3, #12]
 801092a:	5959      	ldr	r1, [r3, r5]
 801092c:	2900      	cmp	r1, #0
 801092e:	d13b      	bne.n	80109a8 <_reclaim_reent+0x98>
 8010930:	3504      	adds	r5, #4
 8010932:	2d80      	cmp	r5, #128	@ 0x80
 8010934:	d1f7      	bne.n	8010926 <_reclaim_reent+0x16>
 8010936:	69e3      	ldr	r3, [r4, #28]
 8010938:	4620      	mov	r0, r4
 801093a:	68d9      	ldr	r1, [r3, #12]
 801093c:	f000 f8b0 	bl	8010aa0 <_free_r>
 8010940:	69e3      	ldr	r3, [r4, #28]
 8010942:	6819      	ldr	r1, [r3, #0]
 8010944:	b111      	cbz	r1, 801094c <_reclaim_reent+0x3c>
 8010946:	4620      	mov	r0, r4
 8010948:	f000 f8aa 	bl	8010aa0 <_free_r>
 801094c:	6961      	ldr	r1, [r4, #20]
 801094e:	b111      	cbz	r1, 8010956 <_reclaim_reent+0x46>
 8010950:	4620      	mov	r0, r4
 8010952:	f000 f8a5 	bl	8010aa0 <_free_r>
 8010956:	69e1      	ldr	r1, [r4, #28]
 8010958:	b111      	cbz	r1, 8010960 <_reclaim_reent+0x50>
 801095a:	4620      	mov	r0, r4
 801095c:	f000 f8a0 	bl	8010aa0 <_free_r>
 8010960:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8010962:	b111      	cbz	r1, 801096a <_reclaim_reent+0x5a>
 8010964:	4620      	mov	r0, r4
 8010966:	f000 f89b 	bl	8010aa0 <_free_r>
 801096a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801096c:	b111      	cbz	r1, 8010974 <_reclaim_reent+0x64>
 801096e:	4620      	mov	r0, r4
 8010970:	f000 f896 	bl	8010aa0 <_free_r>
 8010974:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8010976:	b111      	cbz	r1, 801097e <_reclaim_reent+0x6e>
 8010978:	4620      	mov	r0, r4
 801097a:	f000 f891 	bl	8010aa0 <_free_r>
 801097e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8010980:	b111      	cbz	r1, 8010988 <_reclaim_reent+0x78>
 8010982:	4620      	mov	r0, r4
 8010984:	f000 f88c 	bl	8010aa0 <_free_r>
 8010988:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801098a:	b111      	cbz	r1, 8010992 <_reclaim_reent+0x82>
 801098c:	4620      	mov	r0, r4
 801098e:	f000 f887 	bl	8010aa0 <_free_r>
 8010992:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8010994:	b111      	cbz	r1, 801099c <_reclaim_reent+0x8c>
 8010996:	4620      	mov	r0, r4
 8010998:	f000 f882 	bl	8010aa0 <_free_r>
 801099c:	6a23      	ldr	r3, [r4, #32]
 801099e:	b14b      	cbz	r3, 80109b4 <_reclaim_reent+0xa4>
 80109a0:	4620      	mov	r0, r4
 80109a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80109a6:	4718      	bx	r3
 80109a8:	680e      	ldr	r6, [r1, #0]
 80109aa:	4620      	mov	r0, r4
 80109ac:	f000 f878 	bl	8010aa0 <_free_r>
 80109b0:	4631      	mov	r1, r6
 80109b2:	e7bb      	b.n	801092c <_reclaim_reent+0x1c>
 80109b4:	bd70      	pop	{r4, r5, r6, pc}
 80109b6:	bf00      	nop
 80109b8:	2000001c 	.word	0x2000001c

080109bc <_lseek_r>:
 80109bc:	b538      	push	{r3, r4, r5, lr}
 80109be:	4d07      	ldr	r5, [pc, #28]	@ (80109dc <_lseek_r+0x20>)
 80109c0:	4604      	mov	r4, r0
 80109c2:	4608      	mov	r0, r1
 80109c4:	4611      	mov	r1, r2
 80109c6:	2200      	movs	r2, #0
 80109c8:	602a      	str	r2, [r5, #0]
 80109ca:	461a      	mov	r2, r3
 80109cc:	f7f2 fb2c 	bl	8003028 <_lseek>
 80109d0:	1c43      	adds	r3, r0, #1
 80109d2:	d102      	bne.n	80109da <_lseek_r+0x1e>
 80109d4:	682b      	ldr	r3, [r5, #0]
 80109d6:	b103      	cbz	r3, 80109da <_lseek_r+0x1e>
 80109d8:	6023      	str	r3, [r4, #0]
 80109da:	bd38      	pop	{r3, r4, r5, pc}
 80109dc:	2000a6f0 	.word	0x2000a6f0

080109e0 <_read_r>:
 80109e0:	b538      	push	{r3, r4, r5, lr}
 80109e2:	4d07      	ldr	r5, [pc, #28]	@ (8010a00 <_read_r+0x20>)
 80109e4:	4604      	mov	r4, r0
 80109e6:	4608      	mov	r0, r1
 80109e8:	4611      	mov	r1, r2
 80109ea:	2200      	movs	r2, #0
 80109ec:	602a      	str	r2, [r5, #0]
 80109ee:	461a      	mov	r2, r3
 80109f0:	f7f2 fad6 	bl	8002fa0 <_read>
 80109f4:	1c43      	adds	r3, r0, #1
 80109f6:	d102      	bne.n	80109fe <_read_r+0x1e>
 80109f8:	682b      	ldr	r3, [r5, #0]
 80109fa:	b103      	cbz	r3, 80109fe <_read_r+0x1e>
 80109fc:	6023      	str	r3, [r4, #0]
 80109fe:	bd38      	pop	{r3, r4, r5, pc}
 8010a00:	2000a6f0 	.word	0x2000a6f0

08010a04 <_write_r>:
 8010a04:	b538      	push	{r3, r4, r5, lr}
 8010a06:	4d07      	ldr	r5, [pc, #28]	@ (8010a24 <_write_r+0x20>)
 8010a08:	4604      	mov	r4, r0
 8010a0a:	4608      	mov	r0, r1
 8010a0c:	4611      	mov	r1, r2
 8010a0e:	2200      	movs	r2, #0
 8010a10:	602a      	str	r2, [r5, #0]
 8010a12:	461a      	mov	r2, r3
 8010a14:	f7f0 f90c 	bl	8000c30 <_write>
 8010a18:	1c43      	adds	r3, r0, #1
 8010a1a:	d102      	bne.n	8010a22 <_write_r+0x1e>
 8010a1c:	682b      	ldr	r3, [r5, #0]
 8010a1e:	b103      	cbz	r3, 8010a22 <_write_r+0x1e>
 8010a20:	6023      	str	r3, [r4, #0]
 8010a22:	bd38      	pop	{r3, r4, r5, pc}
 8010a24:	2000a6f0 	.word	0x2000a6f0

08010a28 <__errno>:
 8010a28:	4b01      	ldr	r3, [pc, #4]	@ (8010a30 <__errno+0x8>)
 8010a2a:	6818      	ldr	r0, [r3, #0]
 8010a2c:	4770      	bx	lr
 8010a2e:	bf00      	nop
 8010a30:	2000001c 	.word	0x2000001c

08010a34 <__libc_init_array>:
 8010a34:	b570      	push	{r4, r5, r6, lr}
 8010a36:	4d0d      	ldr	r5, [pc, #52]	@ (8010a6c <__libc_init_array+0x38>)
 8010a38:	4c0d      	ldr	r4, [pc, #52]	@ (8010a70 <__libc_init_array+0x3c>)
 8010a3a:	1b64      	subs	r4, r4, r5
 8010a3c:	10a4      	asrs	r4, r4, #2
 8010a3e:	2600      	movs	r6, #0
 8010a40:	42a6      	cmp	r6, r4
 8010a42:	d109      	bne.n	8010a58 <__libc_init_array+0x24>
 8010a44:	4d0b      	ldr	r5, [pc, #44]	@ (8010a74 <__libc_init_array+0x40>)
 8010a46:	4c0c      	ldr	r4, [pc, #48]	@ (8010a78 <__libc_init_array+0x44>)
 8010a48:	f001 fa8c 	bl	8011f64 <_init>
 8010a4c:	1b64      	subs	r4, r4, r5
 8010a4e:	10a4      	asrs	r4, r4, #2
 8010a50:	2600      	movs	r6, #0
 8010a52:	42a6      	cmp	r6, r4
 8010a54:	d105      	bne.n	8010a62 <__libc_init_array+0x2e>
 8010a56:	bd70      	pop	{r4, r5, r6, pc}
 8010a58:	f855 3b04 	ldr.w	r3, [r5], #4
 8010a5c:	4798      	blx	r3
 8010a5e:	3601      	adds	r6, #1
 8010a60:	e7ee      	b.n	8010a40 <__libc_init_array+0xc>
 8010a62:	f855 3b04 	ldr.w	r3, [r5], #4
 8010a66:	4798      	blx	r3
 8010a68:	3601      	adds	r6, #1
 8010a6a:	e7f2      	b.n	8010a52 <__libc_init_array+0x1e>
 8010a6c:	0802f978 	.word	0x0802f978
 8010a70:	0802f978 	.word	0x0802f978
 8010a74:	0802f978 	.word	0x0802f978
 8010a78:	0802f97c 	.word	0x0802f97c

08010a7c <__retarget_lock_init_recursive>:
 8010a7c:	4770      	bx	lr

08010a7e <__retarget_lock_acquire_recursive>:
 8010a7e:	4770      	bx	lr

08010a80 <__retarget_lock_release_recursive>:
 8010a80:	4770      	bx	lr

08010a82 <memcpy>:
 8010a82:	440a      	add	r2, r1
 8010a84:	4291      	cmp	r1, r2
 8010a86:	f100 33ff 	add.w	r3, r0, #4294967295
 8010a8a:	d100      	bne.n	8010a8e <memcpy+0xc>
 8010a8c:	4770      	bx	lr
 8010a8e:	b510      	push	{r4, lr}
 8010a90:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010a94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010a98:	4291      	cmp	r1, r2
 8010a9a:	d1f9      	bne.n	8010a90 <memcpy+0xe>
 8010a9c:	bd10      	pop	{r4, pc}
	...

08010aa0 <_free_r>:
 8010aa0:	b538      	push	{r3, r4, r5, lr}
 8010aa2:	4605      	mov	r5, r0
 8010aa4:	2900      	cmp	r1, #0
 8010aa6:	d041      	beq.n	8010b2c <_free_r+0x8c>
 8010aa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010aac:	1f0c      	subs	r4, r1, #4
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	bfb8      	it	lt
 8010ab2:	18e4      	addlt	r4, r4, r3
 8010ab4:	f000 f8e0 	bl	8010c78 <__malloc_lock>
 8010ab8:	4a1d      	ldr	r2, [pc, #116]	@ (8010b30 <_free_r+0x90>)
 8010aba:	6813      	ldr	r3, [r2, #0]
 8010abc:	b933      	cbnz	r3, 8010acc <_free_r+0x2c>
 8010abe:	6063      	str	r3, [r4, #4]
 8010ac0:	6014      	str	r4, [r2, #0]
 8010ac2:	4628      	mov	r0, r5
 8010ac4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010ac8:	f000 b8dc 	b.w	8010c84 <__malloc_unlock>
 8010acc:	42a3      	cmp	r3, r4
 8010ace:	d908      	bls.n	8010ae2 <_free_r+0x42>
 8010ad0:	6820      	ldr	r0, [r4, #0]
 8010ad2:	1821      	adds	r1, r4, r0
 8010ad4:	428b      	cmp	r3, r1
 8010ad6:	bf01      	itttt	eq
 8010ad8:	6819      	ldreq	r1, [r3, #0]
 8010ada:	685b      	ldreq	r3, [r3, #4]
 8010adc:	1809      	addeq	r1, r1, r0
 8010ade:	6021      	streq	r1, [r4, #0]
 8010ae0:	e7ed      	b.n	8010abe <_free_r+0x1e>
 8010ae2:	461a      	mov	r2, r3
 8010ae4:	685b      	ldr	r3, [r3, #4]
 8010ae6:	b10b      	cbz	r3, 8010aec <_free_r+0x4c>
 8010ae8:	42a3      	cmp	r3, r4
 8010aea:	d9fa      	bls.n	8010ae2 <_free_r+0x42>
 8010aec:	6811      	ldr	r1, [r2, #0]
 8010aee:	1850      	adds	r0, r2, r1
 8010af0:	42a0      	cmp	r0, r4
 8010af2:	d10b      	bne.n	8010b0c <_free_r+0x6c>
 8010af4:	6820      	ldr	r0, [r4, #0]
 8010af6:	4401      	add	r1, r0
 8010af8:	1850      	adds	r0, r2, r1
 8010afa:	4283      	cmp	r3, r0
 8010afc:	6011      	str	r1, [r2, #0]
 8010afe:	d1e0      	bne.n	8010ac2 <_free_r+0x22>
 8010b00:	6818      	ldr	r0, [r3, #0]
 8010b02:	685b      	ldr	r3, [r3, #4]
 8010b04:	6053      	str	r3, [r2, #4]
 8010b06:	4408      	add	r0, r1
 8010b08:	6010      	str	r0, [r2, #0]
 8010b0a:	e7da      	b.n	8010ac2 <_free_r+0x22>
 8010b0c:	d902      	bls.n	8010b14 <_free_r+0x74>
 8010b0e:	230c      	movs	r3, #12
 8010b10:	602b      	str	r3, [r5, #0]
 8010b12:	e7d6      	b.n	8010ac2 <_free_r+0x22>
 8010b14:	6820      	ldr	r0, [r4, #0]
 8010b16:	1821      	adds	r1, r4, r0
 8010b18:	428b      	cmp	r3, r1
 8010b1a:	bf04      	itt	eq
 8010b1c:	6819      	ldreq	r1, [r3, #0]
 8010b1e:	685b      	ldreq	r3, [r3, #4]
 8010b20:	6063      	str	r3, [r4, #4]
 8010b22:	bf04      	itt	eq
 8010b24:	1809      	addeq	r1, r1, r0
 8010b26:	6021      	streq	r1, [r4, #0]
 8010b28:	6054      	str	r4, [r2, #4]
 8010b2a:	e7ca      	b.n	8010ac2 <_free_r+0x22>
 8010b2c:	bd38      	pop	{r3, r4, r5, pc}
 8010b2e:	bf00      	nop
 8010b30:	2000a6fc 	.word	0x2000a6fc

08010b34 <sbrk_aligned>:
 8010b34:	b570      	push	{r4, r5, r6, lr}
 8010b36:	4e0f      	ldr	r6, [pc, #60]	@ (8010b74 <sbrk_aligned+0x40>)
 8010b38:	460c      	mov	r4, r1
 8010b3a:	6831      	ldr	r1, [r6, #0]
 8010b3c:	4605      	mov	r5, r0
 8010b3e:	b911      	cbnz	r1, 8010b46 <sbrk_aligned+0x12>
 8010b40:	f000 fca6 	bl	8011490 <_sbrk_r>
 8010b44:	6030      	str	r0, [r6, #0]
 8010b46:	4621      	mov	r1, r4
 8010b48:	4628      	mov	r0, r5
 8010b4a:	f000 fca1 	bl	8011490 <_sbrk_r>
 8010b4e:	1c43      	adds	r3, r0, #1
 8010b50:	d103      	bne.n	8010b5a <sbrk_aligned+0x26>
 8010b52:	f04f 34ff 	mov.w	r4, #4294967295
 8010b56:	4620      	mov	r0, r4
 8010b58:	bd70      	pop	{r4, r5, r6, pc}
 8010b5a:	1cc4      	adds	r4, r0, #3
 8010b5c:	f024 0403 	bic.w	r4, r4, #3
 8010b60:	42a0      	cmp	r0, r4
 8010b62:	d0f8      	beq.n	8010b56 <sbrk_aligned+0x22>
 8010b64:	1a21      	subs	r1, r4, r0
 8010b66:	4628      	mov	r0, r5
 8010b68:	f000 fc92 	bl	8011490 <_sbrk_r>
 8010b6c:	3001      	adds	r0, #1
 8010b6e:	d1f2      	bne.n	8010b56 <sbrk_aligned+0x22>
 8010b70:	e7ef      	b.n	8010b52 <sbrk_aligned+0x1e>
 8010b72:	bf00      	nop
 8010b74:	2000a6f8 	.word	0x2000a6f8

08010b78 <_malloc_r>:
 8010b78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b7c:	1ccd      	adds	r5, r1, #3
 8010b7e:	f025 0503 	bic.w	r5, r5, #3
 8010b82:	3508      	adds	r5, #8
 8010b84:	2d0c      	cmp	r5, #12
 8010b86:	bf38      	it	cc
 8010b88:	250c      	movcc	r5, #12
 8010b8a:	2d00      	cmp	r5, #0
 8010b8c:	4606      	mov	r6, r0
 8010b8e:	db01      	blt.n	8010b94 <_malloc_r+0x1c>
 8010b90:	42a9      	cmp	r1, r5
 8010b92:	d904      	bls.n	8010b9e <_malloc_r+0x26>
 8010b94:	230c      	movs	r3, #12
 8010b96:	6033      	str	r3, [r6, #0]
 8010b98:	2000      	movs	r0, #0
 8010b9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010c74 <_malloc_r+0xfc>
 8010ba2:	f000 f869 	bl	8010c78 <__malloc_lock>
 8010ba6:	f8d8 3000 	ldr.w	r3, [r8]
 8010baa:	461c      	mov	r4, r3
 8010bac:	bb44      	cbnz	r4, 8010c00 <_malloc_r+0x88>
 8010bae:	4629      	mov	r1, r5
 8010bb0:	4630      	mov	r0, r6
 8010bb2:	f7ff ffbf 	bl	8010b34 <sbrk_aligned>
 8010bb6:	1c43      	adds	r3, r0, #1
 8010bb8:	4604      	mov	r4, r0
 8010bba:	d158      	bne.n	8010c6e <_malloc_r+0xf6>
 8010bbc:	f8d8 4000 	ldr.w	r4, [r8]
 8010bc0:	4627      	mov	r7, r4
 8010bc2:	2f00      	cmp	r7, #0
 8010bc4:	d143      	bne.n	8010c4e <_malloc_r+0xd6>
 8010bc6:	2c00      	cmp	r4, #0
 8010bc8:	d04b      	beq.n	8010c62 <_malloc_r+0xea>
 8010bca:	6823      	ldr	r3, [r4, #0]
 8010bcc:	4639      	mov	r1, r7
 8010bce:	4630      	mov	r0, r6
 8010bd0:	eb04 0903 	add.w	r9, r4, r3
 8010bd4:	f000 fc5c 	bl	8011490 <_sbrk_r>
 8010bd8:	4581      	cmp	r9, r0
 8010bda:	d142      	bne.n	8010c62 <_malloc_r+0xea>
 8010bdc:	6821      	ldr	r1, [r4, #0]
 8010bde:	1a6d      	subs	r5, r5, r1
 8010be0:	4629      	mov	r1, r5
 8010be2:	4630      	mov	r0, r6
 8010be4:	f7ff ffa6 	bl	8010b34 <sbrk_aligned>
 8010be8:	3001      	adds	r0, #1
 8010bea:	d03a      	beq.n	8010c62 <_malloc_r+0xea>
 8010bec:	6823      	ldr	r3, [r4, #0]
 8010bee:	442b      	add	r3, r5
 8010bf0:	6023      	str	r3, [r4, #0]
 8010bf2:	f8d8 3000 	ldr.w	r3, [r8]
 8010bf6:	685a      	ldr	r2, [r3, #4]
 8010bf8:	bb62      	cbnz	r2, 8010c54 <_malloc_r+0xdc>
 8010bfa:	f8c8 7000 	str.w	r7, [r8]
 8010bfe:	e00f      	b.n	8010c20 <_malloc_r+0xa8>
 8010c00:	6822      	ldr	r2, [r4, #0]
 8010c02:	1b52      	subs	r2, r2, r5
 8010c04:	d420      	bmi.n	8010c48 <_malloc_r+0xd0>
 8010c06:	2a0b      	cmp	r2, #11
 8010c08:	d917      	bls.n	8010c3a <_malloc_r+0xc2>
 8010c0a:	1961      	adds	r1, r4, r5
 8010c0c:	42a3      	cmp	r3, r4
 8010c0e:	6025      	str	r5, [r4, #0]
 8010c10:	bf18      	it	ne
 8010c12:	6059      	strne	r1, [r3, #4]
 8010c14:	6863      	ldr	r3, [r4, #4]
 8010c16:	bf08      	it	eq
 8010c18:	f8c8 1000 	streq.w	r1, [r8]
 8010c1c:	5162      	str	r2, [r4, r5]
 8010c1e:	604b      	str	r3, [r1, #4]
 8010c20:	4630      	mov	r0, r6
 8010c22:	f000 f82f 	bl	8010c84 <__malloc_unlock>
 8010c26:	f104 000b 	add.w	r0, r4, #11
 8010c2a:	1d23      	adds	r3, r4, #4
 8010c2c:	f020 0007 	bic.w	r0, r0, #7
 8010c30:	1ac2      	subs	r2, r0, r3
 8010c32:	bf1c      	itt	ne
 8010c34:	1a1b      	subne	r3, r3, r0
 8010c36:	50a3      	strne	r3, [r4, r2]
 8010c38:	e7af      	b.n	8010b9a <_malloc_r+0x22>
 8010c3a:	6862      	ldr	r2, [r4, #4]
 8010c3c:	42a3      	cmp	r3, r4
 8010c3e:	bf0c      	ite	eq
 8010c40:	f8c8 2000 	streq.w	r2, [r8]
 8010c44:	605a      	strne	r2, [r3, #4]
 8010c46:	e7eb      	b.n	8010c20 <_malloc_r+0xa8>
 8010c48:	4623      	mov	r3, r4
 8010c4a:	6864      	ldr	r4, [r4, #4]
 8010c4c:	e7ae      	b.n	8010bac <_malloc_r+0x34>
 8010c4e:	463c      	mov	r4, r7
 8010c50:	687f      	ldr	r7, [r7, #4]
 8010c52:	e7b6      	b.n	8010bc2 <_malloc_r+0x4a>
 8010c54:	461a      	mov	r2, r3
 8010c56:	685b      	ldr	r3, [r3, #4]
 8010c58:	42a3      	cmp	r3, r4
 8010c5a:	d1fb      	bne.n	8010c54 <_malloc_r+0xdc>
 8010c5c:	2300      	movs	r3, #0
 8010c5e:	6053      	str	r3, [r2, #4]
 8010c60:	e7de      	b.n	8010c20 <_malloc_r+0xa8>
 8010c62:	230c      	movs	r3, #12
 8010c64:	6033      	str	r3, [r6, #0]
 8010c66:	4630      	mov	r0, r6
 8010c68:	f000 f80c 	bl	8010c84 <__malloc_unlock>
 8010c6c:	e794      	b.n	8010b98 <_malloc_r+0x20>
 8010c6e:	6005      	str	r5, [r0, #0]
 8010c70:	e7d6      	b.n	8010c20 <_malloc_r+0xa8>
 8010c72:	bf00      	nop
 8010c74:	2000a6fc 	.word	0x2000a6fc

08010c78 <__malloc_lock>:
 8010c78:	4801      	ldr	r0, [pc, #4]	@ (8010c80 <__malloc_lock+0x8>)
 8010c7a:	f7ff bf00 	b.w	8010a7e <__retarget_lock_acquire_recursive>
 8010c7e:	bf00      	nop
 8010c80:	2000a6f4 	.word	0x2000a6f4

08010c84 <__malloc_unlock>:
 8010c84:	4801      	ldr	r0, [pc, #4]	@ (8010c8c <__malloc_unlock+0x8>)
 8010c86:	f7ff befb 	b.w	8010a80 <__retarget_lock_release_recursive>
 8010c8a:	bf00      	nop
 8010c8c:	2000a6f4 	.word	0x2000a6f4

08010c90 <__sfputc_r>:
 8010c90:	6893      	ldr	r3, [r2, #8]
 8010c92:	3b01      	subs	r3, #1
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	b410      	push	{r4}
 8010c98:	6093      	str	r3, [r2, #8]
 8010c9a:	da08      	bge.n	8010cae <__sfputc_r+0x1e>
 8010c9c:	6994      	ldr	r4, [r2, #24]
 8010c9e:	42a3      	cmp	r3, r4
 8010ca0:	db01      	blt.n	8010ca6 <__sfputc_r+0x16>
 8010ca2:	290a      	cmp	r1, #10
 8010ca4:	d103      	bne.n	8010cae <__sfputc_r+0x1e>
 8010ca6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010caa:	f7ff bd84 	b.w	80107b6 <__swbuf_r>
 8010cae:	6813      	ldr	r3, [r2, #0]
 8010cb0:	1c58      	adds	r0, r3, #1
 8010cb2:	6010      	str	r0, [r2, #0]
 8010cb4:	7019      	strb	r1, [r3, #0]
 8010cb6:	4608      	mov	r0, r1
 8010cb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010cbc:	4770      	bx	lr

08010cbe <__sfputs_r>:
 8010cbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cc0:	4606      	mov	r6, r0
 8010cc2:	460f      	mov	r7, r1
 8010cc4:	4614      	mov	r4, r2
 8010cc6:	18d5      	adds	r5, r2, r3
 8010cc8:	42ac      	cmp	r4, r5
 8010cca:	d101      	bne.n	8010cd0 <__sfputs_r+0x12>
 8010ccc:	2000      	movs	r0, #0
 8010cce:	e007      	b.n	8010ce0 <__sfputs_r+0x22>
 8010cd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010cd4:	463a      	mov	r2, r7
 8010cd6:	4630      	mov	r0, r6
 8010cd8:	f7ff ffda 	bl	8010c90 <__sfputc_r>
 8010cdc:	1c43      	adds	r3, r0, #1
 8010cde:	d1f3      	bne.n	8010cc8 <__sfputs_r+0xa>
 8010ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010ce4 <_vfiprintf_r>:
 8010ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ce8:	460d      	mov	r5, r1
 8010cea:	b09d      	sub	sp, #116	@ 0x74
 8010cec:	4614      	mov	r4, r2
 8010cee:	4698      	mov	r8, r3
 8010cf0:	4606      	mov	r6, r0
 8010cf2:	b118      	cbz	r0, 8010cfc <_vfiprintf_r+0x18>
 8010cf4:	6a03      	ldr	r3, [r0, #32]
 8010cf6:	b90b      	cbnz	r3, 8010cfc <_vfiprintf_r+0x18>
 8010cf8:	f7ff fc74 	bl	80105e4 <__sinit>
 8010cfc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010cfe:	07d9      	lsls	r1, r3, #31
 8010d00:	d405      	bmi.n	8010d0e <_vfiprintf_r+0x2a>
 8010d02:	89ab      	ldrh	r3, [r5, #12]
 8010d04:	059a      	lsls	r2, r3, #22
 8010d06:	d402      	bmi.n	8010d0e <_vfiprintf_r+0x2a>
 8010d08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010d0a:	f7ff feb8 	bl	8010a7e <__retarget_lock_acquire_recursive>
 8010d0e:	89ab      	ldrh	r3, [r5, #12]
 8010d10:	071b      	lsls	r3, r3, #28
 8010d12:	d501      	bpl.n	8010d18 <_vfiprintf_r+0x34>
 8010d14:	692b      	ldr	r3, [r5, #16]
 8010d16:	b99b      	cbnz	r3, 8010d40 <_vfiprintf_r+0x5c>
 8010d18:	4629      	mov	r1, r5
 8010d1a:	4630      	mov	r0, r6
 8010d1c:	f7ff fd8a 	bl	8010834 <__swsetup_r>
 8010d20:	b170      	cbz	r0, 8010d40 <_vfiprintf_r+0x5c>
 8010d22:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010d24:	07dc      	lsls	r4, r3, #31
 8010d26:	d504      	bpl.n	8010d32 <_vfiprintf_r+0x4e>
 8010d28:	f04f 30ff 	mov.w	r0, #4294967295
 8010d2c:	b01d      	add	sp, #116	@ 0x74
 8010d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d32:	89ab      	ldrh	r3, [r5, #12]
 8010d34:	0598      	lsls	r0, r3, #22
 8010d36:	d4f7      	bmi.n	8010d28 <_vfiprintf_r+0x44>
 8010d38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010d3a:	f7ff fea1 	bl	8010a80 <__retarget_lock_release_recursive>
 8010d3e:	e7f3      	b.n	8010d28 <_vfiprintf_r+0x44>
 8010d40:	2300      	movs	r3, #0
 8010d42:	9309      	str	r3, [sp, #36]	@ 0x24
 8010d44:	2320      	movs	r3, #32
 8010d46:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010d4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8010d4e:	2330      	movs	r3, #48	@ 0x30
 8010d50:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010f00 <_vfiprintf_r+0x21c>
 8010d54:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010d58:	f04f 0901 	mov.w	r9, #1
 8010d5c:	4623      	mov	r3, r4
 8010d5e:	469a      	mov	sl, r3
 8010d60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010d64:	b10a      	cbz	r2, 8010d6a <_vfiprintf_r+0x86>
 8010d66:	2a25      	cmp	r2, #37	@ 0x25
 8010d68:	d1f9      	bne.n	8010d5e <_vfiprintf_r+0x7a>
 8010d6a:	ebba 0b04 	subs.w	fp, sl, r4
 8010d6e:	d00b      	beq.n	8010d88 <_vfiprintf_r+0xa4>
 8010d70:	465b      	mov	r3, fp
 8010d72:	4622      	mov	r2, r4
 8010d74:	4629      	mov	r1, r5
 8010d76:	4630      	mov	r0, r6
 8010d78:	f7ff ffa1 	bl	8010cbe <__sfputs_r>
 8010d7c:	3001      	adds	r0, #1
 8010d7e:	f000 80a7 	beq.w	8010ed0 <_vfiprintf_r+0x1ec>
 8010d82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010d84:	445a      	add	r2, fp
 8010d86:	9209      	str	r2, [sp, #36]	@ 0x24
 8010d88:	f89a 3000 	ldrb.w	r3, [sl]
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	f000 809f 	beq.w	8010ed0 <_vfiprintf_r+0x1ec>
 8010d92:	2300      	movs	r3, #0
 8010d94:	f04f 32ff 	mov.w	r2, #4294967295
 8010d98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010d9c:	f10a 0a01 	add.w	sl, sl, #1
 8010da0:	9304      	str	r3, [sp, #16]
 8010da2:	9307      	str	r3, [sp, #28]
 8010da4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010da8:	931a      	str	r3, [sp, #104]	@ 0x68
 8010daa:	4654      	mov	r4, sl
 8010dac:	2205      	movs	r2, #5
 8010dae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010db2:	4853      	ldr	r0, [pc, #332]	@ (8010f00 <_vfiprintf_r+0x21c>)
 8010db4:	f7ef fa24 	bl	8000200 <memchr>
 8010db8:	9a04      	ldr	r2, [sp, #16]
 8010dba:	b9d8      	cbnz	r0, 8010df4 <_vfiprintf_r+0x110>
 8010dbc:	06d1      	lsls	r1, r2, #27
 8010dbe:	bf44      	itt	mi
 8010dc0:	2320      	movmi	r3, #32
 8010dc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010dc6:	0713      	lsls	r3, r2, #28
 8010dc8:	bf44      	itt	mi
 8010dca:	232b      	movmi	r3, #43	@ 0x2b
 8010dcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010dd0:	f89a 3000 	ldrb.w	r3, [sl]
 8010dd4:	2b2a      	cmp	r3, #42	@ 0x2a
 8010dd6:	d015      	beq.n	8010e04 <_vfiprintf_r+0x120>
 8010dd8:	9a07      	ldr	r2, [sp, #28]
 8010dda:	4654      	mov	r4, sl
 8010ddc:	2000      	movs	r0, #0
 8010dde:	f04f 0c0a 	mov.w	ip, #10
 8010de2:	4621      	mov	r1, r4
 8010de4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010de8:	3b30      	subs	r3, #48	@ 0x30
 8010dea:	2b09      	cmp	r3, #9
 8010dec:	d94b      	bls.n	8010e86 <_vfiprintf_r+0x1a2>
 8010dee:	b1b0      	cbz	r0, 8010e1e <_vfiprintf_r+0x13a>
 8010df0:	9207      	str	r2, [sp, #28]
 8010df2:	e014      	b.n	8010e1e <_vfiprintf_r+0x13a>
 8010df4:	eba0 0308 	sub.w	r3, r0, r8
 8010df8:	fa09 f303 	lsl.w	r3, r9, r3
 8010dfc:	4313      	orrs	r3, r2
 8010dfe:	9304      	str	r3, [sp, #16]
 8010e00:	46a2      	mov	sl, r4
 8010e02:	e7d2      	b.n	8010daa <_vfiprintf_r+0xc6>
 8010e04:	9b03      	ldr	r3, [sp, #12]
 8010e06:	1d19      	adds	r1, r3, #4
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	9103      	str	r1, [sp, #12]
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	bfbb      	ittet	lt
 8010e10:	425b      	neglt	r3, r3
 8010e12:	f042 0202 	orrlt.w	r2, r2, #2
 8010e16:	9307      	strge	r3, [sp, #28]
 8010e18:	9307      	strlt	r3, [sp, #28]
 8010e1a:	bfb8      	it	lt
 8010e1c:	9204      	strlt	r2, [sp, #16]
 8010e1e:	7823      	ldrb	r3, [r4, #0]
 8010e20:	2b2e      	cmp	r3, #46	@ 0x2e
 8010e22:	d10a      	bne.n	8010e3a <_vfiprintf_r+0x156>
 8010e24:	7863      	ldrb	r3, [r4, #1]
 8010e26:	2b2a      	cmp	r3, #42	@ 0x2a
 8010e28:	d132      	bne.n	8010e90 <_vfiprintf_r+0x1ac>
 8010e2a:	9b03      	ldr	r3, [sp, #12]
 8010e2c:	1d1a      	adds	r2, r3, #4
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	9203      	str	r2, [sp, #12]
 8010e32:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010e36:	3402      	adds	r4, #2
 8010e38:	9305      	str	r3, [sp, #20]
 8010e3a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010f10 <_vfiprintf_r+0x22c>
 8010e3e:	7821      	ldrb	r1, [r4, #0]
 8010e40:	2203      	movs	r2, #3
 8010e42:	4650      	mov	r0, sl
 8010e44:	f7ef f9dc 	bl	8000200 <memchr>
 8010e48:	b138      	cbz	r0, 8010e5a <_vfiprintf_r+0x176>
 8010e4a:	9b04      	ldr	r3, [sp, #16]
 8010e4c:	eba0 000a 	sub.w	r0, r0, sl
 8010e50:	2240      	movs	r2, #64	@ 0x40
 8010e52:	4082      	lsls	r2, r0
 8010e54:	4313      	orrs	r3, r2
 8010e56:	3401      	adds	r4, #1
 8010e58:	9304      	str	r3, [sp, #16]
 8010e5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e5e:	4829      	ldr	r0, [pc, #164]	@ (8010f04 <_vfiprintf_r+0x220>)
 8010e60:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010e64:	2206      	movs	r2, #6
 8010e66:	f7ef f9cb 	bl	8000200 <memchr>
 8010e6a:	2800      	cmp	r0, #0
 8010e6c:	d03f      	beq.n	8010eee <_vfiprintf_r+0x20a>
 8010e6e:	4b26      	ldr	r3, [pc, #152]	@ (8010f08 <_vfiprintf_r+0x224>)
 8010e70:	bb1b      	cbnz	r3, 8010eba <_vfiprintf_r+0x1d6>
 8010e72:	9b03      	ldr	r3, [sp, #12]
 8010e74:	3307      	adds	r3, #7
 8010e76:	f023 0307 	bic.w	r3, r3, #7
 8010e7a:	3308      	adds	r3, #8
 8010e7c:	9303      	str	r3, [sp, #12]
 8010e7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e80:	443b      	add	r3, r7
 8010e82:	9309      	str	r3, [sp, #36]	@ 0x24
 8010e84:	e76a      	b.n	8010d5c <_vfiprintf_r+0x78>
 8010e86:	fb0c 3202 	mla	r2, ip, r2, r3
 8010e8a:	460c      	mov	r4, r1
 8010e8c:	2001      	movs	r0, #1
 8010e8e:	e7a8      	b.n	8010de2 <_vfiprintf_r+0xfe>
 8010e90:	2300      	movs	r3, #0
 8010e92:	3401      	adds	r4, #1
 8010e94:	9305      	str	r3, [sp, #20]
 8010e96:	4619      	mov	r1, r3
 8010e98:	f04f 0c0a 	mov.w	ip, #10
 8010e9c:	4620      	mov	r0, r4
 8010e9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010ea2:	3a30      	subs	r2, #48	@ 0x30
 8010ea4:	2a09      	cmp	r2, #9
 8010ea6:	d903      	bls.n	8010eb0 <_vfiprintf_r+0x1cc>
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d0c6      	beq.n	8010e3a <_vfiprintf_r+0x156>
 8010eac:	9105      	str	r1, [sp, #20]
 8010eae:	e7c4      	b.n	8010e3a <_vfiprintf_r+0x156>
 8010eb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8010eb4:	4604      	mov	r4, r0
 8010eb6:	2301      	movs	r3, #1
 8010eb8:	e7f0      	b.n	8010e9c <_vfiprintf_r+0x1b8>
 8010eba:	ab03      	add	r3, sp, #12
 8010ebc:	9300      	str	r3, [sp, #0]
 8010ebe:	462a      	mov	r2, r5
 8010ec0:	4b12      	ldr	r3, [pc, #72]	@ (8010f0c <_vfiprintf_r+0x228>)
 8010ec2:	a904      	add	r1, sp, #16
 8010ec4:	4630      	mov	r0, r6
 8010ec6:	f3af 8000 	nop.w
 8010eca:	4607      	mov	r7, r0
 8010ecc:	1c78      	adds	r0, r7, #1
 8010ece:	d1d6      	bne.n	8010e7e <_vfiprintf_r+0x19a>
 8010ed0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010ed2:	07d9      	lsls	r1, r3, #31
 8010ed4:	d405      	bmi.n	8010ee2 <_vfiprintf_r+0x1fe>
 8010ed6:	89ab      	ldrh	r3, [r5, #12]
 8010ed8:	059a      	lsls	r2, r3, #22
 8010eda:	d402      	bmi.n	8010ee2 <_vfiprintf_r+0x1fe>
 8010edc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010ede:	f7ff fdcf 	bl	8010a80 <__retarget_lock_release_recursive>
 8010ee2:	89ab      	ldrh	r3, [r5, #12]
 8010ee4:	065b      	lsls	r3, r3, #25
 8010ee6:	f53f af1f 	bmi.w	8010d28 <_vfiprintf_r+0x44>
 8010eea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010eec:	e71e      	b.n	8010d2c <_vfiprintf_r+0x48>
 8010eee:	ab03      	add	r3, sp, #12
 8010ef0:	9300      	str	r3, [sp, #0]
 8010ef2:	462a      	mov	r2, r5
 8010ef4:	4b05      	ldr	r3, [pc, #20]	@ (8010f0c <_vfiprintf_r+0x228>)
 8010ef6:	a904      	add	r1, sp, #16
 8010ef8:	4630      	mov	r0, r6
 8010efa:	f000 f879 	bl	8010ff0 <_printf_i>
 8010efe:	e7e4      	b.n	8010eca <_vfiprintf_r+0x1e6>
 8010f00:	0802f56c 	.word	0x0802f56c
 8010f04:	0802f576 	.word	0x0802f576
 8010f08:	00000000 	.word	0x00000000
 8010f0c:	08010cbf 	.word	0x08010cbf
 8010f10:	0802f572 	.word	0x0802f572

08010f14 <_printf_common>:
 8010f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f18:	4616      	mov	r6, r2
 8010f1a:	4698      	mov	r8, r3
 8010f1c:	688a      	ldr	r2, [r1, #8]
 8010f1e:	690b      	ldr	r3, [r1, #16]
 8010f20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010f24:	4293      	cmp	r3, r2
 8010f26:	bfb8      	it	lt
 8010f28:	4613      	movlt	r3, r2
 8010f2a:	6033      	str	r3, [r6, #0]
 8010f2c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010f30:	4607      	mov	r7, r0
 8010f32:	460c      	mov	r4, r1
 8010f34:	b10a      	cbz	r2, 8010f3a <_printf_common+0x26>
 8010f36:	3301      	adds	r3, #1
 8010f38:	6033      	str	r3, [r6, #0]
 8010f3a:	6823      	ldr	r3, [r4, #0]
 8010f3c:	0699      	lsls	r1, r3, #26
 8010f3e:	bf42      	ittt	mi
 8010f40:	6833      	ldrmi	r3, [r6, #0]
 8010f42:	3302      	addmi	r3, #2
 8010f44:	6033      	strmi	r3, [r6, #0]
 8010f46:	6825      	ldr	r5, [r4, #0]
 8010f48:	f015 0506 	ands.w	r5, r5, #6
 8010f4c:	d106      	bne.n	8010f5c <_printf_common+0x48>
 8010f4e:	f104 0a19 	add.w	sl, r4, #25
 8010f52:	68e3      	ldr	r3, [r4, #12]
 8010f54:	6832      	ldr	r2, [r6, #0]
 8010f56:	1a9b      	subs	r3, r3, r2
 8010f58:	42ab      	cmp	r3, r5
 8010f5a:	dc26      	bgt.n	8010faa <_printf_common+0x96>
 8010f5c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010f60:	6822      	ldr	r2, [r4, #0]
 8010f62:	3b00      	subs	r3, #0
 8010f64:	bf18      	it	ne
 8010f66:	2301      	movne	r3, #1
 8010f68:	0692      	lsls	r2, r2, #26
 8010f6a:	d42b      	bmi.n	8010fc4 <_printf_common+0xb0>
 8010f6c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010f70:	4641      	mov	r1, r8
 8010f72:	4638      	mov	r0, r7
 8010f74:	47c8      	blx	r9
 8010f76:	3001      	adds	r0, #1
 8010f78:	d01e      	beq.n	8010fb8 <_printf_common+0xa4>
 8010f7a:	6823      	ldr	r3, [r4, #0]
 8010f7c:	6922      	ldr	r2, [r4, #16]
 8010f7e:	f003 0306 	and.w	r3, r3, #6
 8010f82:	2b04      	cmp	r3, #4
 8010f84:	bf02      	ittt	eq
 8010f86:	68e5      	ldreq	r5, [r4, #12]
 8010f88:	6833      	ldreq	r3, [r6, #0]
 8010f8a:	1aed      	subeq	r5, r5, r3
 8010f8c:	68a3      	ldr	r3, [r4, #8]
 8010f8e:	bf0c      	ite	eq
 8010f90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010f94:	2500      	movne	r5, #0
 8010f96:	4293      	cmp	r3, r2
 8010f98:	bfc4      	itt	gt
 8010f9a:	1a9b      	subgt	r3, r3, r2
 8010f9c:	18ed      	addgt	r5, r5, r3
 8010f9e:	2600      	movs	r6, #0
 8010fa0:	341a      	adds	r4, #26
 8010fa2:	42b5      	cmp	r5, r6
 8010fa4:	d11a      	bne.n	8010fdc <_printf_common+0xc8>
 8010fa6:	2000      	movs	r0, #0
 8010fa8:	e008      	b.n	8010fbc <_printf_common+0xa8>
 8010faa:	2301      	movs	r3, #1
 8010fac:	4652      	mov	r2, sl
 8010fae:	4641      	mov	r1, r8
 8010fb0:	4638      	mov	r0, r7
 8010fb2:	47c8      	blx	r9
 8010fb4:	3001      	adds	r0, #1
 8010fb6:	d103      	bne.n	8010fc0 <_printf_common+0xac>
 8010fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8010fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010fc0:	3501      	adds	r5, #1
 8010fc2:	e7c6      	b.n	8010f52 <_printf_common+0x3e>
 8010fc4:	18e1      	adds	r1, r4, r3
 8010fc6:	1c5a      	adds	r2, r3, #1
 8010fc8:	2030      	movs	r0, #48	@ 0x30
 8010fca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010fce:	4422      	add	r2, r4
 8010fd0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010fd4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010fd8:	3302      	adds	r3, #2
 8010fda:	e7c7      	b.n	8010f6c <_printf_common+0x58>
 8010fdc:	2301      	movs	r3, #1
 8010fde:	4622      	mov	r2, r4
 8010fe0:	4641      	mov	r1, r8
 8010fe2:	4638      	mov	r0, r7
 8010fe4:	47c8      	blx	r9
 8010fe6:	3001      	adds	r0, #1
 8010fe8:	d0e6      	beq.n	8010fb8 <_printf_common+0xa4>
 8010fea:	3601      	adds	r6, #1
 8010fec:	e7d9      	b.n	8010fa2 <_printf_common+0x8e>
	...

08010ff0 <_printf_i>:
 8010ff0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010ff4:	7e0f      	ldrb	r7, [r1, #24]
 8010ff6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010ff8:	2f78      	cmp	r7, #120	@ 0x78
 8010ffa:	4691      	mov	r9, r2
 8010ffc:	4680      	mov	r8, r0
 8010ffe:	460c      	mov	r4, r1
 8011000:	469a      	mov	sl, r3
 8011002:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011006:	d807      	bhi.n	8011018 <_printf_i+0x28>
 8011008:	2f62      	cmp	r7, #98	@ 0x62
 801100a:	d80a      	bhi.n	8011022 <_printf_i+0x32>
 801100c:	2f00      	cmp	r7, #0
 801100e:	f000 80d2 	beq.w	80111b6 <_printf_i+0x1c6>
 8011012:	2f58      	cmp	r7, #88	@ 0x58
 8011014:	f000 80b9 	beq.w	801118a <_printf_i+0x19a>
 8011018:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801101c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011020:	e03a      	b.n	8011098 <_printf_i+0xa8>
 8011022:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011026:	2b15      	cmp	r3, #21
 8011028:	d8f6      	bhi.n	8011018 <_printf_i+0x28>
 801102a:	a101      	add	r1, pc, #4	@ (adr r1, 8011030 <_printf_i+0x40>)
 801102c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011030:	08011089 	.word	0x08011089
 8011034:	0801109d 	.word	0x0801109d
 8011038:	08011019 	.word	0x08011019
 801103c:	08011019 	.word	0x08011019
 8011040:	08011019 	.word	0x08011019
 8011044:	08011019 	.word	0x08011019
 8011048:	0801109d 	.word	0x0801109d
 801104c:	08011019 	.word	0x08011019
 8011050:	08011019 	.word	0x08011019
 8011054:	08011019 	.word	0x08011019
 8011058:	08011019 	.word	0x08011019
 801105c:	0801119d 	.word	0x0801119d
 8011060:	080110c7 	.word	0x080110c7
 8011064:	08011157 	.word	0x08011157
 8011068:	08011019 	.word	0x08011019
 801106c:	08011019 	.word	0x08011019
 8011070:	080111bf 	.word	0x080111bf
 8011074:	08011019 	.word	0x08011019
 8011078:	080110c7 	.word	0x080110c7
 801107c:	08011019 	.word	0x08011019
 8011080:	08011019 	.word	0x08011019
 8011084:	0801115f 	.word	0x0801115f
 8011088:	6833      	ldr	r3, [r6, #0]
 801108a:	1d1a      	adds	r2, r3, #4
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	6032      	str	r2, [r6, #0]
 8011090:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011094:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011098:	2301      	movs	r3, #1
 801109a:	e09d      	b.n	80111d8 <_printf_i+0x1e8>
 801109c:	6833      	ldr	r3, [r6, #0]
 801109e:	6820      	ldr	r0, [r4, #0]
 80110a0:	1d19      	adds	r1, r3, #4
 80110a2:	6031      	str	r1, [r6, #0]
 80110a4:	0606      	lsls	r6, r0, #24
 80110a6:	d501      	bpl.n	80110ac <_printf_i+0xbc>
 80110a8:	681d      	ldr	r5, [r3, #0]
 80110aa:	e003      	b.n	80110b4 <_printf_i+0xc4>
 80110ac:	0645      	lsls	r5, r0, #25
 80110ae:	d5fb      	bpl.n	80110a8 <_printf_i+0xb8>
 80110b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80110b4:	2d00      	cmp	r5, #0
 80110b6:	da03      	bge.n	80110c0 <_printf_i+0xd0>
 80110b8:	232d      	movs	r3, #45	@ 0x2d
 80110ba:	426d      	negs	r5, r5
 80110bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80110c0:	4859      	ldr	r0, [pc, #356]	@ (8011228 <_printf_i+0x238>)
 80110c2:	230a      	movs	r3, #10
 80110c4:	e011      	b.n	80110ea <_printf_i+0xfa>
 80110c6:	6821      	ldr	r1, [r4, #0]
 80110c8:	6833      	ldr	r3, [r6, #0]
 80110ca:	0608      	lsls	r0, r1, #24
 80110cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80110d0:	d402      	bmi.n	80110d8 <_printf_i+0xe8>
 80110d2:	0649      	lsls	r1, r1, #25
 80110d4:	bf48      	it	mi
 80110d6:	b2ad      	uxthmi	r5, r5
 80110d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80110da:	4853      	ldr	r0, [pc, #332]	@ (8011228 <_printf_i+0x238>)
 80110dc:	6033      	str	r3, [r6, #0]
 80110de:	bf14      	ite	ne
 80110e0:	230a      	movne	r3, #10
 80110e2:	2308      	moveq	r3, #8
 80110e4:	2100      	movs	r1, #0
 80110e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80110ea:	6866      	ldr	r6, [r4, #4]
 80110ec:	60a6      	str	r6, [r4, #8]
 80110ee:	2e00      	cmp	r6, #0
 80110f0:	bfa2      	ittt	ge
 80110f2:	6821      	ldrge	r1, [r4, #0]
 80110f4:	f021 0104 	bicge.w	r1, r1, #4
 80110f8:	6021      	strge	r1, [r4, #0]
 80110fa:	b90d      	cbnz	r5, 8011100 <_printf_i+0x110>
 80110fc:	2e00      	cmp	r6, #0
 80110fe:	d04b      	beq.n	8011198 <_printf_i+0x1a8>
 8011100:	4616      	mov	r6, r2
 8011102:	fbb5 f1f3 	udiv	r1, r5, r3
 8011106:	fb03 5711 	mls	r7, r3, r1, r5
 801110a:	5dc7      	ldrb	r7, [r0, r7]
 801110c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011110:	462f      	mov	r7, r5
 8011112:	42bb      	cmp	r3, r7
 8011114:	460d      	mov	r5, r1
 8011116:	d9f4      	bls.n	8011102 <_printf_i+0x112>
 8011118:	2b08      	cmp	r3, #8
 801111a:	d10b      	bne.n	8011134 <_printf_i+0x144>
 801111c:	6823      	ldr	r3, [r4, #0]
 801111e:	07df      	lsls	r7, r3, #31
 8011120:	d508      	bpl.n	8011134 <_printf_i+0x144>
 8011122:	6923      	ldr	r3, [r4, #16]
 8011124:	6861      	ldr	r1, [r4, #4]
 8011126:	4299      	cmp	r1, r3
 8011128:	bfde      	ittt	le
 801112a:	2330      	movle	r3, #48	@ 0x30
 801112c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011130:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011134:	1b92      	subs	r2, r2, r6
 8011136:	6122      	str	r2, [r4, #16]
 8011138:	f8cd a000 	str.w	sl, [sp]
 801113c:	464b      	mov	r3, r9
 801113e:	aa03      	add	r2, sp, #12
 8011140:	4621      	mov	r1, r4
 8011142:	4640      	mov	r0, r8
 8011144:	f7ff fee6 	bl	8010f14 <_printf_common>
 8011148:	3001      	adds	r0, #1
 801114a:	d14a      	bne.n	80111e2 <_printf_i+0x1f2>
 801114c:	f04f 30ff 	mov.w	r0, #4294967295
 8011150:	b004      	add	sp, #16
 8011152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011156:	6823      	ldr	r3, [r4, #0]
 8011158:	f043 0320 	orr.w	r3, r3, #32
 801115c:	6023      	str	r3, [r4, #0]
 801115e:	4833      	ldr	r0, [pc, #204]	@ (801122c <_printf_i+0x23c>)
 8011160:	2778      	movs	r7, #120	@ 0x78
 8011162:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011166:	6823      	ldr	r3, [r4, #0]
 8011168:	6831      	ldr	r1, [r6, #0]
 801116a:	061f      	lsls	r7, r3, #24
 801116c:	f851 5b04 	ldr.w	r5, [r1], #4
 8011170:	d402      	bmi.n	8011178 <_printf_i+0x188>
 8011172:	065f      	lsls	r7, r3, #25
 8011174:	bf48      	it	mi
 8011176:	b2ad      	uxthmi	r5, r5
 8011178:	6031      	str	r1, [r6, #0]
 801117a:	07d9      	lsls	r1, r3, #31
 801117c:	bf44      	itt	mi
 801117e:	f043 0320 	orrmi.w	r3, r3, #32
 8011182:	6023      	strmi	r3, [r4, #0]
 8011184:	b11d      	cbz	r5, 801118e <_printf_i+0x19e>
 8011186:	2310      	movs	r3, #16
 8011188:	e7ac      	b.n	80110e4 <_printf_i+0xf4>
 801118a:	4827      	ldr	r0, [pc, #156]	@ (8011228 <_printf_i+0x238>)
 801118c:	e7e9      	b.n	8011162 <_printf_i+0x172>
 801118e:	6823      	ldr	r3, [r4, #0]
 8011190:	f023 0320 	bic.w	r3, r3, #32
 8011194:	6023      	str	r3, [r4, #0]
 8011196:	e7f6      	b.n	8011186 <_printf_i+0x196>
 8011198:	4616      	mov	r6, r2
 801119a:	e7bd      	b.n	8011118 <_printf_i+0x128>
 801119c:	6833      	ldr	r3, [r6, #0]
 801119e:	6825      	ldr	r5, [r4, #0]
 80111a0:	6961      	ldr	r1, [r4, #20]
 80111a2:	1d18      	adds	r0, r3, #4
 80111a4:	6030      	str	r0, [r6, #0]
 80111a6:	062e      	lsls	r6, r5, #24
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	d501      	bpl.n	80111b0 <_printf_i+0x1c0>
 80111ac:	6019      	str	r1, [r3, #0]
 80111ae:	e002      	b.n	80111b6 <_printf_i+0x1c6>
 80111b0:	0668      	lsls	r0, r5, #25
 80111b2:	d5fb      	bpl.n	80111ac <_printf_i+0x1bc>
 80111b4:	8019      	strh	r1, [r3, #0]
 80111b6:	2300      	movs	r3, #0
 80111b8:	6123      	str	r3, [r4, #16]
 80111ba:	4616      	mov	r6, r2
 80111bc:	e7bc      	b.n	8011138 <_printf_i+0x148>
 80111be:	6833      	ldr	r3, [r6, #0]
 80111c0:	1d1a      	adds	r2, r3, #4
 80111c2:	6032      	str	r2, [r6, #0]
 80111c4:	681e      	ldr	r6, [r3, #0]
 80111c6:	6862      	ldr	r2, [r4, #4]
 80111c8:	2100      	movs	r1, #0
 80111ca:	4630      	mov	r0, r6
 80111cc:	f7ef f818 	bl	8000200 <memchr>
 80111d0:	b108      	cbz	r0, 80111d6 <_printf_i+0x1e6>
 80111d2:	1b80      	subs	r0, r0, r6
 80111d4:	6060      	str	r0, [r4, #4]
 80111d6:	6863      	ldr	r3, [r4, #4]
 80111d8:	6123      	str	r3, [r4, #16]
 80111da:	2300      	movs	r3, #0
 80111dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80111e0:	e7aa      	b.n	8011138 <_printf_i+0x148>
 80111e2:	6923      	ldr	r3, [r4, #16]
 80111e4:	4632      	mov	r2, r6
 80111e6:	4649      	mov	r1, r9
 80111e8:	4640      	mov	r0, r8
 80111ea:	47d0      	blx	sl
 80111ec:	3001      	adds	r0, #1
 80111ee:	d0ad      	beq.n	801114c <_printf_i+0x15c>
 80111f0:	6823      	ldr	r3, [r4, #0]
 80111f2:	079b      	lsls	r3, r3, #30
 80111f4:	d413      	bmi.n	801121e <_printf_i+0x22e>
 80111f6:	68e0      	ldr	r0, [r4, #12]
 80111f8:	9b03      	ldr	r3, [sp, #12]
 80111fa:	4298      	cmp	r0, r3
 80111fc:	bfb8      	it	lt
 80111fe:	4618      	movlt	r0, r3
 8011200:	e7a6      	b.n	8011150 <_printf_i+0x160>
 8011202:	2301      	movs	r3, #1
 8011204:	4632      	mov	r2, r6
 8011206:	4649      	mov	r1, r9
 8011208:	4640      	mov	r0, r8
 801120a:	47d0      	blx	sl
 801120c:	3001      	adds	r0, #1
 801120e:	d09d      	beq.n	801114c <_printf_i+0x15c>
 8011210:	3501      	adds	r5, #1
 8011212:	68e3      	ldr	r3, [r4, #12]
 8011214:	9903      	ldr	r1, [sp, #12]
 8011216:	1a5b      	subs	r3, r3, r1
 8011218:	42ab      	cmp	r3, r5
 801121a:	dcf2      	bgt.n	8011202 <_printf_i+0x212>
 801121c:	e7eb      	b.n	80111f6 <_printf_i+0x206>
 801121e:	2500      	movs	r5, #0
 8011220:	f104 0619 	add.w	r6, r4, #25
 8011224:	e7f5      	b.n	8011212 <_printf_i+0x222>
 8011226:	bf00      	nop
 8011228:	0802f57d 	.word	0x0802f57d
 801122c:	0802f58e 	.word	0x0802f58e

08011230 <__sflush_r>:
 8011230:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011238:	0716      	lsls	r6, r2, #28
 801123a:	4605      	mov	r5, r0
 801123c:	460c      	mov	r4, r1
 801123e:	d454      	bmi.n	80112ea <__sflush_r+0xba>
 8011240:	684b      	ldr	r3, [r1, #4]
 8011242:	2b00      	cmp	r3, #0
 8011244:	dc02      	bgt.n	801124c <__sflush_r+0x1c>
 8011246:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011248:	2b00      	cmp	r3, #0
 801124a:	dd48      	ble.n	80112de <__sflush_r+0xae>
 801124c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801124e:	2e00      	cmp	r6, #0
 8011250:	d045      	beq.n	80112de <__sflush_r+0xae>
 8011252:	2300      	movs	r3, #0
 8011254:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011258:	682f      	ldr	r7, [r5, #0]
 801125a:	6a21      	ldr	r1, [r4, #32]
 801125c:	602b      	str	r3, [r5, #0]
 801125e:	d030      	beq.n	80112c2 <__sflush_r+0x92>
 8011260:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011262:	89a3      	ldrh	r3, [r4, #12]
 8011264:	0759      	lsls	r1, r3, #29
 8011266:	d505      	bpl.n	8011274 <__sflush_r+0x44>
 8011268:	6863      	ldr	r3, [r4, #4]
 801126a:	1ad2      	subs	r2, r2, r3
 801126c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801126e:	b10b      	cbz	r3, 8011274 <__sflush_r+0x44>
 8011270:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011272:	1ad2      	subs	r2, r2, r3
 8011274:	2300      	movs	r3, #0
 8011276:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011278:	6a21      	ldr	r1, [r4, #32]
 801127a:	4628      	mov	r0, r5
 801127c:	47b0      	blx	r6
 801127e:	1c43      	adds	r3, r0, #1
 8011280:	89a3      	ldrh	r3, [r4, #12]
 8011282:	d106      	bne.n	8011292 <__sflush_r+0x62>
 8011284:	6829      	ldr	r1, [r5, #0]
 8011286:	291d      	cmp	r1, #29
 8011288:	d82b      	bhi.n	80112e2 <__sflush_r+0xb2>
 801128a:	4a2a      	ldr	r2, [pc, #168]	@ (8011334 <__sflush_r+0x104>)
 801128c:	410a      	asrs	r2, r1
 801128e:	07d6      	lsls	r6, r2, #31
 8011290:	d427      	bmi.n	80112e2 <__sflush_r+0xb2>
 8011292:	2200      	movs	r2, #0
 8011294:	6062      	str	r2, [r4, #4]
 8011296:	04d9      	lsls	r1, r3, #19
 8011298:	6922      	ldr	r2, [r4, #16]
 801129a:	6022      	str	r2, [r4, #0]
 801129c:	d504      	bpl.n	80112a8 <__sflush_r+0x78>
 801129e:	1c42      	adds	r2, r0, #1
 80112a0:	d101      	bne.n	80112a6 <__sflush_r+0x76>
 80112a2:	682b      	ldr	r3, [r5, #0]
 80112a4:	b903      	cbnz	r3, 80112a8 <__sflush_r+0x78>
 80112a6:	6560      	str	r0, [r4, #84]	@ 0x54
 80112a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80112aa:	602f      	str	r7, [r5, #0]
 80112ac:	b1b9      	cbz	r1, 80112de <__sflush_r+0xae>
 80112ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80112b2:	4299      	cmp	r1, r3
 80112b4:	d002      	beq.n	80112bc <__sflush_r+0x8c>
 80112b6:	4628      	mov	r0, r5
 80112b8:	f7ff fbf2 	bl	8010aa0 <_free_r>
 80112bc:	2300      	movs	r3, #0
 80112be:	6363      	str	r3, [r4, #52]	@ 0x34
 80112c0:	e00d      	b.n	80112de <__sflush_r+0xae>
 80112c2:	2301      	movs	r3, #1
 80112c4:	4628      	mov	r0, r5
 80112c6:	47b0      	blx	r6
 80112c8:	4602      	mov	r2, r0
 80112ca:	1c50      	adds	r0, r2, #1
 80112cc:	d1c9      	bne.n	8011262 <__sflush_r+0x32>
 80112ce:	682b      	ldr	r3, [r5, #0]
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d0c6      	beq.n	8011262 <__sflush_r+0x32>
 80112d4:	2b1d      	cmp	r3, #29
 80112d6:	d001      	beq.n	80112dc <__sflush_r+0xac>
 80112d8:	2b16      	cmp	r3, #22
 80112da:	d11e      	bne.n	801131a <__sflush_r+0xea>
 80112dc:	602f      	str	r7, [r5, #0]
 80112de:	2000      	movs	r0, #0
 80112e0:	e022      	b.n	8011328 <__sflush_r+0xf8>
 80112e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80112e6:	b21b      	sxth	r3, r3
 80112e8:	e01b      	b.n	8011322 <__sflush_r+0xf2>
 80112ea:	690f      	ldr	r7, [r1, #16]
 80112ec:	2f00      	cmp	r7, #0
 80112ee:	d0f6      	beq.n	80112de <__sflush_r+0xae>
 80112f0:	0793      	lsls	r3, r2, #30
 80112f2:	680e      	ldr	r6, [r1, #0]
 80112f4:	bf08      	it	eq
 80112f6:	694b      	ldreq	r3, [r1, #20]
 80112f8:	600f      	str	r7, [r1, #0]
 80112fa:	bf18      	it	ne
 80112fc:	2300      	movne	r3, #0
 80112fe:	eba6 0807 	sub.w	r8, r6, r7
 8011302:	608b      	str	r3, [r1, #8]
 8011304:	f1b8 0f00 	cmp.w	r8, #0
 8011308:	dde9      	ble.n	80112de <__sflush_r+0xae>
 801130a:	6a21      	ldr	r1, [r4, #32]
 801130c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801130e:	4643      	mov	r3, r8
 8011310:	463a      	mov	r2, r7
 8011312:	4628      	mov	r0, r5
 8011314:	47b0      	blx	r6
 8011316:	2800      	cmp	r0, #0
 8011318:	dc08      	bgt.n	801132c <__sflush_r+0xfc>
 801131a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801131e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011322:	81a3      	strh	r3, [r4, #12]
 8011324:	f04f 30ff 	mov.w	r0, #4294967295
 8011328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801132c:	4407      	add	r7, r0
 801132e:	eba8 0800 	sub.w	r8, r8, r0
 8011332:	e7e7      	b.n	8011304 <__sflush_r+0xd4>
 8011334:	dfbffffe 	.word	0xdfbffffe

08011338 <_fflush_r>:
 8011338:	b538      	push	{r3, r4, r5, lr}
 801133a:	690b      	ldr	r3, [r1, #16]
 801133c:	4605      	mov	r5, r0
 801133e:	460c      	mov	r4, r1
 8011340:	b913      	cbnz	r3, 8011348 <_fflush_r+0x10>
 8011342:	2500      	movs	r5, #0
 8011344:	4628      	mov	r0, r5
 8011346:	bd38      	pop	{r3, r4, r5, pc}
 8011348:	b118      	cbz	r0, 8011352 <_fflush_r+0x1a>
 801134a:	6a03      	ldr	r3, [r0, #32]
 801134c:	b90b      	cbnz	r3, 8011352 <_fflush_r+0x1a>
 801134e:	f7ff f949 	bl	80105e4 <__sinit>
 8011352:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011356:	2b00      	cmp	r3, #0
 8011358:	d0f3      	beq.n	8011342 <_fflush_r+0xa>
 801135a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801135c:	07d0      	lsls	r0, r2, #31
 801135e:	d404      	bmi.n	801136a <_fflush_r+0x32>
 8011360:	0599      	lsls	r1, r3, #22
 8011362:	d402      	bmi.n	801136a <_fflush_r+0x32>
 8011364:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011366:	f7ff fb8a 	bl	8010a7e <__retarget_lock_acquire_recursive>
 801136a:	4628      	mov	r0, r5
 801136c:	4621      	mov	r1, r4
 801136e:	f7ff ff5f 	bl	8011230 <__sflush_r>
 8011372:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011374:	07da      	lsls	r2, r3, #31
 8011376:	4605      	mov	r5, r0
 8011378:	d4e4      	bmi.n	8011344 <_fflush_r+0xc>
 801137a:	89a3      	ldrh	r3, [r4, #12]
 801137c:	059b      	lsls	r3, r3, #22
 801137e:	d4e1      	bmi.n	8011344 <_fflush_r+0xc>
 8011380:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011382:	f7ff fb7d 	bl	8010a80 <__retarget_lock_release_recursive>
 8011386:	e7dd      	b.n	8011344 <_fflush_r+0xc>

08011388 <__swhatbuf_r>:
 8011388:	b570      	push	{r4, r5, r6, lr}
 801138a:	460c      	mov	r4, r1
 801138c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011390:	2900      	cmp	r1, #0
 8011392:	b096      	sub	sp, #88	@ 0x58
 8011394:	4615      	mov	r5, r2
 8011396:	461e      	mov	r6, r3
 8011398:	da0d      	bge.n	80113b6 <__swhatbuf_r+0x2e>
 801139a:	89a3      	ldrh	r3, [r4, #12]
 801139c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80113a0:	f04f 0100 	mov.w	r1, #0
 80113a4:	bf14      	ite	ne
 80113a6:	2340      	movne	r3, #64	@ 0x40
 80113a8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80113ac:	2000      	movs	r0, #0
 80113ae:	6031      	str	r1, [r6, #0]
 80113b0:	602b      	str	r3, [r5, #0]
 80113b2:	b016      	add	sp, #88	@ 0x58
 80113b4:	bd70      	pop	{r4, r5, r6, pc}
 80113b6:	466a      	mov	r2, sp
 80113b8:	f000 f848 	bl	801144c <_fstat_r>
 80113bc:	2800      	cmp	r0, #0
 80113be:	dbec      	blt.n	801139a <__swhatbuf_r+0x12>
 80113c0:	9901      	ldr	r1, [sp, #4]
 80113c2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80113c6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80113ca:	4259      	negs	r1, r3
 80113cc:	4159      	adcs	r1, r3
 80113ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80113d2:	e7eb      	b.n	80113ac <__swhatbuf_r+0x24>

080113d4 <__smakebuf_r>:
 80113d4:	898b      	ldrh	r3, [r1, #12]
 80113d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80113d8:	079d      	lsls	r5, r3, #30
 80113da:	4606      	mov	r6, r0
 80113dc:	460c      	mov	r4, r1
 80113de:	d507      	bpl.n	80113f0 <__smakebuf_r+0x1c>
 80113e0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80113e4:	6023      	str	r3, [r4, #0]
 80113e6:	6123      	str	r3, [r4, #16]
 80113e8:	2301      	movs	r3, #1
 80113ea:	6163      	str	r3, [r4, #20]
 80113ec:	b003      	add	sp, #12
 80113ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113f0:	ab01      	add	r3, sp, #4
 80113f2:	466a      	mov	r2, sp
 80113f4:	f7ff ffc8 	bl	8011388 <__swhatbuf_r>
 80113f8:	9f00      	ldr	r7, [sp, #0]
 80113fa:	4605      	mov	r5, r0
 80113fc:	4639      	mov	r1, r7
 80113fe:	4630      	mov	r0, r6
 8011400:	f7ff fbba 	bl	8010b78 <_malloc_r>
 8011404:	b948      	cbnz	r0, 801141a <__smakebuf_r+0x46>
 8011406:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801140a:	059a      	lsls	r2, r3, #22
 801140c:	d4ee      	bmi.n	80113ec <__smakebuf_r+0x18>
 801140e:	f023 0303 	bic.w	r3, r3, #3
 8011412:	f043 0302 	orr.w	r3, r3, #2
 8011416:	81a3      	strh	r3, [r4, #12]
 8011418:	e7e2      	b.n	80113e0 <__smakebuf_r+0xc>
 801141a:	89a3      	ldrh	r3, [r4, #12]
 801141c:	6020      	str	r0, [r4, #0]
 801141e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011422:	81a3      	strh	r3, [r4, #12]
 8011424:	9b01      	ldr	r3, [sp, #4]
 8011426:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801142a:	b15b      	cbz	r3, 8011444 <__smakebuf_r+0x70>
 801142c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011430:	4630      	mov	r0, r6
 8011432:	f000 f81d 	bl	8011470 <_isatty_r>
 8011436:	b128      	cbz	r0, 8011444 <__smakebuf_r+0x70>
 8011438:	89a3      	ldrh	r3, [r4, #12]
 801143a:	f023 0303 	bic.w	r3, r3, #3
 801143e:	f043 0301 	orr.w	r3, r3, #1
 8011442:	81a3      	strh	r3, [r4, #12]
 8011444:	89a3      	ldrh	r3, [r4, #12]
 8011446:	431d      	orrs	r5, r3
 8011448:	81a5      	strh	r5, [r4, #12]
 801144a:	e7cf      	b.n	80113ec <__smakebuf_r+0x18>

0801144c <_fstat_r>:
 801144c:	b538      	push	{r3, r4, r5, lr}
 801144e:	4d07      	ldr	r5, [pc, #28]	@ (801146c <_fstat_r+0x20>)
 8011450:	2300      	movs	r3, #0
 8011452:	4604      	mov	r4, r0
 8011454:	4608      	mov	r0, r1
 8011456:	4611      	mov	r1, r2
 8011458:	602b      	str	r3, [r5, #0]
 801145a:	f7f1 fdca 	bl	8002ff2 <_fstat>
 801145e:	1c43      	adds	r3, r0, #1
 8011460:	d102      	bne.n	8011468 <_fstat_r+0x1c>
 8011462:	682b      	ldr	r3, [r5, #0]
 8011464:	b103      	cbz	r3, 8011468 <_fstat_r+0x1c>
 8011466:	6023      	str	r3, [r4, #0]
 8011468:	bd38      	pop	{r3, r4, r5, pc}
 801146a:	bf00      	nop
 801146c:	2000a6f0 	.word	0x2000a6f0

08011470 <_isatty_r>:
 8011470:	b538      	push	{r3, r4, r5, lr}
 8011472:	4d06      	ldr	r5, [pc, #24]	@ (801148c <_isatty_r+0x1c>)
 8011474:	2300      	movs	r3, #0
 8011476:	4604      	mov	r4, r0
 8011478:	4608      	mov	r0, r1
 801147a:	602b      	str	r3, [r5, #0]
 801147c:	f7f1 fdc9 	bl	8003012 <_isatty>
 8011480:	1c43      	adds	r3, r0, #1
 8011482:	d102      	bne.n	801148a <_isatty_r+0x1a>
 8011484:	682b      	ldr	r3, [r5, #0]
 8011486:	b103      	cbz	r3, 801148a <_isatty_r+0x1a>
 8011488:	6023      	str	r3, [r4, #0]
 801148a:	bd38      	pop	{r3, r4, r5, pc}
 801148c:	2000a6f0 	.word	0x2000a6f0

08011490 <_sbrk_r>:
 8011490:	b538      	push	{r3, r4, r5, lr}
 8011492:	4d06      	ldr	r5, [pc, #24]	@ (80114ac <_sbrk_r+0x1c>)
 8011494:	2300      	movs	r3, #0
 8011496:	4604      	mov	r4, r0
 8011498:	4608      	mov	r0, r1
 801149a:	602b      	str	r3, [r5, #0]
 801149c:	f7f1 fdd2 	bl	8003044 <_sbrk>
 80114a0:	1c43      	adds	r3, r0, #1
 80114a2:	d102      	bne.n	80114aa <_sbrk_r+0x1a>
 80114a4:	682b      	ldr	r3, [r5, #0]
 80114a6:	b103      	cbz	r3, 80114aa <_sbrk_r+0x1a>
 80114a8:	6023      	str	r3, [r4, #0]
 80114aa:	bd38      	pop	{r3, r4, r5, pc}
 80114ac:	2000a6f0 	.word	0x2000a6f0

080114b0 <sqrtf>:
 80114b0:	b508      	push	{r3, lr}
 80114b2:	ed2d 8b02 	vpush	{d8}
 80114b6:	eeb0 8a40 	vmov.f32	s16, s0
 80114ba:	f000 f85b 	bl	8011574 <__ieee754_sqrtf>
 80114be:	eeb4 8a48 	vcmp.f32	s16, s16
 80114c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114c6:	d60c      	bvs.n	80114e2 <sqrtf+0x32>
 80114c8:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80114e8 <sqrtf+0x38>
 80114cc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80114d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114d4:	d505      	bpl.n	80114e2 <sqrtf+0x32>
 80114d6:	f7ff faa7 	bl	8010a28 <__errno>
 80114da:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80114de:	2321      	movs	r3, #33	@ 0x21
 80114e0:	6003      	str	r3, [r0, #0]
 80114e2:	ecbd 8b02 	vpop	{d8}
 80114e6:	bd08      	pop	{r3, pc}
 80114e8:	00000000 	.word	0x00000000

080114ec <cosf>:
 80114ec:	ee10 3a10 	vmov	r3, s0
 80114f0:	b507      	push	{r0, r1, r2, lr}
 80114f2:	4a1e      	ldr	r2, [pc, #120]	@ (801156c <cosf+0x80>)
 80114f4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80114f8:	4293      	cmp	r3, r2
 80114fa:	d806      	bhi.n	801150a <cosf+0x1e>
 80114fc:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8011570 <cosf+0x84>
 8011500:	b003      	add	sp, #12
 8011502:	f85d eb04 	ldr.w	lr, [sp], #4
 8011506:	f000 b839 	b.w	801157c <__kernel_cosf>
 801150a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801150e:	d304      	bcc.n	801151a <cosf+0x2e>
 8011510:	ee30 0a40 	vsub.f32	s0, s0, s0
 8011514:	b003      	add	sp, #12
 8011516:	f85d fb04 	ldr.w	pc, [sp], #4
 801151a:	4668      	mov	r0, sp
 801151c:	f000 f8ce 	bl	80116bc <__ieee754_rem_pio2f>
 8011520:	f000 0003 	and.w	r0, r0, #3
 8011524:	2801      	cmp	r0, #1
 8011526:	d009      	beq.n	801153c <cosf+0x50>
 8011528:	2802      	cmp	r0, #2
 801152a:	d010      	beq.n	801154e <cosf+0x62>
 801152c:	b9b0      	cbnz	r0, 801155c <cosf+0x70>
 801152e:	eddd 0a01 	vldr	s1, [sp, #4]
 8011532:	ed9d 0a00 	vldr	s0, [sp]
 8011536:	f000 f821 	bl	801157c <__kernel_cosf>
 801153a:	e7eb      	b.n	8011514 <cosf+0x28>
 801153c:	eddd 0a01 	vldr	s1, [sp, #4]
 8011540:	ed9d 0a00 	vldr	s0, [sp]
 8011544:	f000 f872 	bl	801162c <__kernel_sinf>
 8011548:	eeb1 0a40 	vneg.f32	s0, s0
 801154c:	e7e2      	b.n	8011514 <cosf+0x28>
 801154e:	eddd 0a01 	vldr	s1, [sp, #4]
 8011552:	ed9d 0a00 	vldr	s0, [sp]
 8011556:	f000 f811 	bl	801157c <__kernel_cosf>
 801155a:	e7f5      	b.n	8011548 <cosf+0x5c>
 801155c:	eddd 0a01 	vldr	s1, [sp, #4]
 8011560:	ed9d 0a00 	vldr	s0, [sp]
 8011564:	2001      	movs	r0, #1
 8011566:	f000 f861 	bl	801162c <__kernel_sinf>
 801156a:	e7d3      	b.n	8011514 <cosf+0x28>
 801156c:	3f490fd8 	.word	0x3f490fd8
 8011570:	00000000 	.word	0x00000000

08011574 <__ieee754_sqrtf>:
 8011574:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8011578:	4770      	bx	lr
	...

0801157c <__kernel_cosf>:
 801157c:	ee10 3a10 	vmov	r3, s0
 8011580:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011584:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8011588:	eef0 6a40 	vmov.f32	s13, s0
 801158c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8011590:	d204      	bcs.n	801159c <__kernel_cosf+0x20>
 8011592:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8011596:	ee17 2a90 	vmov	r2, s15
 801159a:	b342      	cbz	r2, 80115ee <__kernel_cosf+0x72>
 801159c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80115a0:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 801160c <__kernel_cosf+0x90>
 80115a4:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8011610 <__kernel_cosf+0x94>
 80115a8:	4a1a      	ldr	r2, [pc, #104]	@ (8011614 <__kernel_cosf+0x98>)
 80115aa:	eea7 6a27 	vfma.f32	s12, s14, s15
 80115ae:	4293      	cmp	r3, r2
 80115b0:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8011618 <__kernel_cosf+0x9c>
 80115b4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80115b8:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 801161c <__kernel_cosf+0xa0>
 80115bc:	eea7 6a87 	vfma.f32	s12, s15, s14
 80115c0:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8011620 <__kernel_cosf+0xa4>
 80115c4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80115c8:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8011624 <__kernel_cosf+0xa8>
 80115cc:	eea7 6a87 	vfma.f32	s12, s15, s14
 80115d0:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 80115d4:	ee26 6a07 	vmul.f32	s12, s12, s14
 80115d8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80115dc:	eee7 0a06 	vfma.f32	s1, s14, s12
 80115e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80115e4:	d804      	bhi.n	80115f0 <__kernel_cosf+0x74>
 80115e6:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80115ea:	ee30 0a67 	vsub.f32	s0, s0, s15
 80115ee:	4770      	bx	lr
 80115f0:	4a0d      	ldr	r2, [pc, #52]	@ (8011628 <__kernel_cosf+0xac>)
 80115f2:	4293      	cmp	r3, r2
 80115f4:	bf9a      	itte	ls
 80115f6:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 80115fa:	ee07 3a10 	vmovls	s14, r3
 80115fe:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8011602:	ee30 0a47 	vsub.f32	s0, s0, s14
 8011606:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801160a:	e7ec      	b.n	80115e6 <__kernel_cosf+0x6a>
 801160c:	ad47d74e 	.word	0xad47d74e
 8011610:	310f74f6 	.word	0x310f74f6
 8011614:	3e999999 	.word	0x3e999999
 8011618:	b493f27c 	.word	0xb493f27c
 801161c:	37d00d01 	.word	0x37d00d01
 8011620:	bab60b61 	.word	0xbab60b61
 8011624:	3d2aaaab 	.word	0x3d2aaaab
 8011628:	3f480000 	.word	0x3f480000

0801162c <__kernel_sinf>:
 801162c:	ee10 3a10 	vmov	r3, s0
 8011630:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011634:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8011638:	d204      	bcs.n	8011644 <__kernel_sinf+0x18>
 801163a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801163e:	ee17 3a90 	vmov	r3, s15
 8011642:	b35b      	cbz	r3, 801169c <__kernel_sinf+0x70>
 8011644:	ee20 7a00 	vmul.f32	s14, s0, s0
 8011648:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80116a0 <__kernel_sinf+0x74>
 801164c:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 80116a4 <__kernel_sinf+0x78>
 8011650:	eea7 6a27 	vfma.f32	s12, s14, s15
 8011654:	eddf 7a14 	vldr	s15, [pc, #80]	@ 80116a8 <__kernel_sinf+0x7c>
 8011658:	eee6 7a07 	vfma.f32	s15, s12, s14
 801165c:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 80116ac <__kernel_sinf+0x80>
 8011660:	eea7 6a87 	vfma.f32	s12, s15, s14
 8011664:	eddf 7a12 	vldr	s15, [pc, #72]	@ 80116b0 <__kernel_sinf+0x84>
 8011668:	ee60 6a07 	vmul.f32	s13, s0, s14
 801166c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011670:	b930      	cbnz	r0, 8011680 <__kernel_sinf+0x54>
 8011672:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 80116b4 <__kernel_sinf+0x88>
 8011676:	eea7 6a27 	vfma.f32	s12, s14, s15
 801167a:	eea6 0a26 	vfma.f32	s0, s12, s13
 801167e:	4770      	bx	lr
 8011680:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8011684:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8011688:	eee0 7a86 	vfma.f32	s15, s1, s12
 801168c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8011690:	eddf 7a09 	vldr	s15, [pc, #36]	@ 80116b8 <__kernel_sinf+0x8c>
 8011694:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8011698:	ee30 0a60 	vsub.f32	s0, s0, s1
 801169c:	4770      	bx	lr
 801169e:	bf00      	nop
 80116a0:	2f2ec9d3 	.word	0x2f2ec9d3
 80116a4:	b2d72f34 	.word	0xb2d72f34
 80116a8:	3638ef1b 	.word	0x3638ef1b
 80116ac:	b9500d01 	.word	0xb9500d01
 80116b0:	3c088889 	.word	0x3c088889
 80116b4:	be2aaaab 	.word	0xbe2aaaab
 80116b8:	3e2aaaab 	.word	0x3e2aaaab

080116bc <__ieee754_rem_pio2f>:
 80116bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80116be:	ee10 6a10 	vmov	r6, s0
 80116c2:	4b88      	ldr	r3, [pc, #544]	@ (80118e4 <__ieee754_rem_pio2f+0x228>)
 80116c4:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 80116c8:	429d      	cmp	r5, r3
 80116ca:	b087      	sub	sp, #28
 80116cc:	4604      	mov	r4, r0
 80116ce:	d805      	bhi.n	80116dc <__ieee754_rem_pio2f+0x20>
 80116d0:	2300      	movs	r3, #0
 80116d2:	ed80 0a00 	vstr	s0, [r0]
 80116d6:	6043      	str	r3, [r0, #4]
 80116d8:	2000      	movs	r0, #0
 80116da:	e022      	b.n	8011722 <__ieee754_rem_pio2f+0x66>
 80116dc:	4b82      	ldr	r3, [pc, #520]	@ (80118e8 <__ieee754_rem_pio2f+0x22c>)
 80116de:	429d      	cmp	r5, r3
 80116e0:	d83a      	bhi.n	8011758 <__ieee754_rem_pio2f+0x9c>
 80116e2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80116e6:	2e00      	cmp	r6, #0
 80116e8:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 80118ec <__ieee754_rem_pio2f+0x230>
 80116ec:	4a80      	ldr	r2, [pc, #512]	@ (80118f0 <__ieee754_rem_pio2f+0x234>)
 80116ee:	f023 030f 	bic.w	r3, r3, #15
 80116f2:	dd18      	ble.n	8011726 <__ieee754_rem_pio2f+0x6a>
 80116f4:	4293      	cmp	r3, r2
 80116f6:	ee70 7a47 	vsub.f32	s15, s0, s14
 80116fa:	bf09      	itett	eq
 80116fc:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 80118f4 <__ieee754_rem_pio2f+0x238>
 8011700:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 80118f8 <__ieee754_rem_pio2f+0x23c>
 8011704:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 80118fc <__ieee754_rem_pio2f+0x240>
 8011708:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801170c:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8011710:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011714:	ed80 7a00 	vstr	s14, [r0]
 8011718:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801171c:	edc0 7a01 	vstr	s15, [r0, #4]
 8011720:	2001      	movs	r0, #1
 8011722:	b007      	add	sp, #28
 8011724:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011726:	4293      	cmp	r3, r2
 8011728:	ee70 7a07 	vadd.f32	s15, s0, s14
 801172c:	bf09      	itett	eq
 801172e:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 80118f4 <__ieee754_rem_pio2f+0x238>
 8011732:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 80118f8 <__ieee754_rem_pio2f+0x23c>
 8011736:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 80118fc <__ieee754_rem_pio2f+0x240>
 801173a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801173e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8011742:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011746:	ed80 7a00 	vstr	s14, [r0]
 801174a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801174e:	edc0 7a01 	vstr	s15, [r0, #4]
 8011752:	f04f 30ff 	mov.w	r0, #4294967295
 8011756:	e7e4      	b.n	8011722 <__ieee754_rem_pio2f+0x66>
 8011758:	4b69      	ldr	r3, [pc, #420]	@ (8011900 <__ieee754_rem_pio2f+0x244>)
 801175a:	429d      	cmp	r5, r3
 801175c:	d873      	bhi.n	8011846 <__ieee754_rem_pio2f+0x18a>
 801175e:	f000 f8dd 	bl	801191c <fabsf>
 8011762:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8011904 <__ieee754_rem_pio2f+0x248>
 8011766:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801176a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801176e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011772:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8011776:	ee17 0a90 	vmov	r0, s15
 801177a:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80118ec <__ieee754_rem_pio2f+0x230>
 801177e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8011782:	281f      	cmp	r0, #31
 8011784:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80118f8 <__ieee754_rem_pio2f+0x23c>
 8011788:	ee67 7a27 	vmul.f32	s15, s14, s15
 801178c:	eeb1 6a47 	vneg.f32	s12, s14
 8011790:	ee70 6a67 	vsub.f32	s13, s0, s15
 8011794:	ee16 1a90 	vmov	r1, s13
 8011798:	dc09      	bgt.n	80117ae <__ieee754_rem_pio2f+0xf2>
 801179a:	4a5b      	ldr	r2, [pc, #364]	@ (8011908 <__ieee754_rem_pio2f+0x24c>)
 801179c:	1e47      	subs	r7, r0, #1
 801179e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80117a2:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 80117a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80117aa:	4293      	cmp	r3, r2
 80117ac:	d107      	bne.n	80117be <__ieee754_rem_pio2f+0x102>
 80117ae:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 80117b2:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 80117b6:	2a08      	cmp	r2, #8
 80117b8:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80117bc:	dc14      	bgt.n	80117e8 <__ieee754_rem_pio2f+0x12c>
 80117be:	6021      	str	r1, [r4, #0]
 80117c0:	ed94 7a00 	vldr	s14, [r4]
 80117c4:	ee30 0a47 	vsub.f32	s0, s0, s14
 80117c8:	2e00      	cmp	r6, #0
 80117ca:	ee30 0a67 	vsub.f32	s0, s0, s15
 80117ce:	ed84 0a01 	vstr	s0, [r4, #4]
 80117d2:	daa6      	bge.n	8011722 <__ieee754_rem_pio2f+0x66>
 80117d4:	eeb1 7a47 	vneg.f32	s14, s14
 80117d8:	eeb1 0a40 	vneg.f32	s0, s0
 80117dc:	ed84 7a00 	vstr	s14, [r4]
 80117e0:	ed84 0a01 	vstr	s0, [r4, #4]
 80117e4:	4240      	negs	r0, r0
 80117e6:	e79c      	b.n	8011722 <__ieee754_rem_pio2f+0x66>
 80117e8:	eddf 5a42 	vldr	s11, [pc, #264]	@ 80118f4 <__ieee754_rem_pio2f+0x238>
 80117ec:	eef0 6a40 	vmov.f32	s13, s0
 80117f0:	eee6 6a25 	vfma.f32	s13, s12, s11
 80117f4:	ee70 7a66 	vsub.f32	s15, s0, s13
 80117f8:	eee6 7a25 	vfma.f32	s15, s12, s11
 80117fc:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80118fc <__ieee754_rem_pio2f+0x240>
 8011800:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8011804:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8011808:	ee15 2a90 	vmov	r2, s11
 801180c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8011810:	1a5b      	subs	r3, r3, r1
 8011812:	2b19      	cmp	r3, #25
 8011814:	dc04      	bgt.n	8011820 <__ieee754_rem_pio2f+0x164>
 8011816:	edc4 5a00 	vstr	s11, [r4]
 801181a:	eeb0 0a66 	vmov.f32	s0, s13
 801181e:	e7cf      	b.n	80117c0 <__ieee754_rem_pio2f+0x104>
 8011820:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 801190c <__ieee754_rem_pio2f+0x250>
 8011824:	eeb0 0a66 	vmov.f32	s0, s13
 8011828:	eea6 0a25 	vfma.f32	s0, s12, s11
 801182c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8011830:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8011910 <__ieee754_rem_pio2f+0x254>
 8011834:	eee6 7a25 	vfma.f32	s15, s12, s11
 8011838:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801183c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8011840:	ed84 7a00 	vstr	s14, [r4]
 8011844:	e7bc      	b.n	80117c0 <__ieee754_rem_pio2f+0x104>
 8011846:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 801184a:	d306      	bcc.n	801185a <__ieee754_rem_pio2f+0x19e>
 801184c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8011850:	edc0 7a01 	vstr	s15, [r0, #4]
 8011854:	edc0 7a00 	vstr	s15, [r0]
 8011858:	e73e      	b.n	80116d8 <__ieee754_rem_pio2f+0x1c>
 801185a:	15ea      	asrs	r2, r5, #23
 801185c:	3a86      	subs	r2, #134	@ 0x86
 801185e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8011862:	ee07 3a90 	vmov	s15, r3
 8011866:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801186a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8011914 <__ieee754_rem_pio2f+0x258>
 801186e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011872:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011876:	ed8d 7a03 	vstr	s14, [sp, #12]
 801187a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801187e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8011882:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011886:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801188a:	ed8d 7a04 	vstr	s14, [sp, #16]
 801188e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011892:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801189a:	edcd 7a05 	vstr	s15, [sp, #20]
 801189e:	d11e      	bne.n	80118de <__ieee754_rem_pio2f+0x222>
 80118a0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80118a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118a8:	bf0c      	ite	eq
 80118aa:	2301      	moveq	r3, #1
 80118ac:	2302      	movne	r3, #2
 80118ae:	491a      	ldr	r1, [pc, #104]	@ (8011918 <__ieee754_rem_pio2f+0x25c>)
 80118b0:	9101      	str	r1, [sp, #4]
 80118b2:	2102      	movs	r1, #2
 80118b4:	9100      	str	r1, [sp, #0]
 80118b6:	a803      	add	r0, sp, #12
 80118b8:	4621      	mov	r1, r4
 80118ba:	f000 f837 	bl	801192c <__kernel_rem_pio2f>
 80118be:	2e00      	cmp	r6, #0
 80118c0:	f6bf af2f 	bge.w	8011722 <__ieee754_rem_pio2f+0x66>
 80118c4:	edd4 7a00 	vldr	s15, [r4]
 80118c8:	eef1 7a67 	vneg.f32	s15, s15
 80118cc:	edc4 7a00 	vstr	s15, [r4]
 80118d0:	edd4 7a01 	vldr	s15, [r4, #4]
 80118d4:	eef1 7a67 	vneg.f32	s15, s15
 80118d8:	edc4 7a01 	vstr	s15, [r4, #4]
 80118dc:	e782      	b.n	80117e4 <__ieee754_rem_pio2f+0x128>
 80118de:	2303      	movs	r3, #3
 80118e0:	e7e5      	b.n	80118ae <__ieee754_rem_pio2f+0x1f2>
 80118e2:	bf00      	nop
 80118e4:	3f490fd8 	.word	0x3f490fd8
 80118e8:	4016cbe3 	.word	0x4016cbe3
 80118ec:	3fc90f80 	.word	0x3fc90f80
 80118f0:	3fc90fd0 	.word	0x3fc90fd0
 80118f4:	37354400 	.word	0x37354400
 80118f8:	37354443 	.word	0x37354443
 80118fc:	2e85a308 	.word	0x2e85a308
 8011900:	43490f80 	.word	0x43490f80
 8011904:	3f22f984 	.word	0x3f22f984
 8011908:	0802f5a0 	.word	0x0802f5a0
 801190c:	2e85a300 	.word	0x2e85a300
 8011910:	248d3132 	.word	0x248d3132
 8011914:	43800000 	.word	0x43800000
 8011918:	0802f620 	.word	0x0802f620

0801191c <fabsf>:
 801191c:	ee10 3a10 	vmov	r3, s0
 8011920:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011924:	ee00 3a10 	vmov	s0, r3
 8011928:	4770      	bx	lr
	...

0801192c <__kernel_rem_pio2f>:
 801192c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011930:	ed2d 8b04 	vpush	{d8-d9}
 8011934:	b0d9      	sub	sp, #356	@ 0x164
 8011936:	4690      	mov	r8, r2
 8011938:	9001      	str	r0, [sp, #4]
 801193a:	4ab9      	ldr	r2, [pc, #740]	@ (8011c20 <__kernel_rem_pio2f+0x2f4>)
 801193c:	9866      	ldr	r0, [sp, #408]	@ 0x198
 801193e:	f118 0f04 	cmn.w	r8, #4
 8011942:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8011946:	460f      	mov	r7, r1
 8011948:	f103 3bff 	add.w	fp, r3, #4294967295
 801194c:	db27      	blt.n	801199e <__kernel_rem_pio2f+0x72>
 801194e:	f1b8 0203 	subs.w	r2, r8, #3
 8011952:	bf48      	it	mi
 8011954:	f108 0204 	addmi.w	r2, r8, #4
 8011958:	10d2      	asrs	r2, r2, #3
 801195a:	1c55      	adds	r5, r2, #1
 801195c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801195e:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8011c30 <__kernel_rem_pio2f+0x304>
 8011962:	00e8      	lsls	r0, r5, #3
 8011964:	eba2 060b 	sub.w	r6, r2, fp
 8011968:	9002      	str	r0, [sp, #8]
 801196a:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 801196e:	eb0a 0c0b 	add.w	ip, sl, fp
 8011972:	ac1c      	add	r4, sp, #112	@ 0x70
 8011974:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8011978:	2000      	movs	r0, #0
 801197a:	4560      	cmp	r0, ip
 801197c:	dd11      	ble.n	80119a2 <__kernel_rem_pio2f+0x76>
 801197e:	a91c      	add	r1, sp, #112	@ 0x70
 8011980:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8011984:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8011988:	f04f 0c00 	mov.w	ip, #0
 801198c:	45d4      	cmp	ip, sl
 801198e:	dc27      	bgt.n	80119e0 <__kernel_rem_pio2f+0xb4>
 8011990:	f8dd e004 	ldr.w	lr, [sp, #4]
 8011994:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 8011c30 <__kernel_rem_pio2f+0x304>
 8011998:	4606      	mov	r6, r0
 801199a:	2400      	movs	r4, #0
 801199c:	e016      	b.n	80119cc <__kernel_rem_pio2f+0xa0>
 801199e:	2200      	movs	r2, #0
 80119a0:	e7db      	b.n	801195a <__kernel_rem_pio2f+0x2e>
 80119a2:	42c6      	cmn	r6, r0
 80119a4:	bf5d      	ittte	pl
 80119a6:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 80119aa:	ee07 1a90 	vmovpl	s15, r1
 80119ae:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80119b2:	eef0 7a47 	vmovmi.f32	s15, s14
 80119b6:	ece4 7a01 	vstmia	r4!, {s15}
 80119ba:	3001      	adds	r0, #1
 80119bc:	e7dd      	b.n	801197a <__kernel_rem_pio2f+0x4e>
 80119be:	ecfe 6a01 	vldmia	lr!, {s13}
 80119c2:	ed96 7a00 	vldr	s14, [r6]
 80119c6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80119ca:	3401      	adds	r4, #1
 80119cc:	455c      	cmp	r4, fp
 80119ce:	f1a6 0604 	sub.w	r6, r6, #4
 80119d2:	ddf4      	ble.n	80119be <__kernel_rem_pio2f+0x92>
 80119d4:	ece9 7a01 	vstmia	r9!, {s15}
 80119d8:	f10c 0c01 	add.w	ip, ip, #1
 80119dc:	3004      	adds	r0, #4
 80119de:	e7d5      	b.n	801198c <__kernel_rem_pio2f+0x60>
 80119e0:	a908      	add	r1, sp, #32
 80119e2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80119e6:	9104      	str	r1, [sp, #16]
 80119e8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80119ea:	eddf 8a90 	vldr	s17, [pc, #576]	@ 8011c2c <__kernel_rem_pio2f+0x300>
 80119ee:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 8011c28 <__kernel_rem_pio2f+0x2fc>
 80119f2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80119f6:	9203      	str	r2, [sp, #12]
 80119f8:	4654      	mov	r4, sl
 80119fa:	00a2      	lsls	r2, r4, #2
 80119fc:	9205      	str	r2, [sp, #20]
 80119fe:	aa58      	add	r2, sp, #352	@ 0x160
 8011a00:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8011a04:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8011a08:	a944      	add	r1, sp, #272	@ 0x110
 8011a0a:	aa08      	add	r2, sp, #32
 8011a0c:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8011a10:	4694      	mov	ip, r2
 8011a12:	4626      	mov	r6, r4
 8011a14:	2e00      	cmp	r6, #0
 8011a16:	f1a0 0004 	sub.w	r0, r0, #4
 8011a1a:	dc4c      	bgt.n	8011ab6 <__kernel_rem_pio2f+0x18a>
 8011a1c:	4628      	mov	r0, r5
 8011a1e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011a22:	f000 f9f5 	bl	8011e10 <scalbnf>
 8011a26:	eeb0 8a40 	vmov.f32	s16, s0
 8011a2a:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8011a2e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8011a32:	f000 fa53 	bl	8011edc <floorf>
 8011a36:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8011a3a:	eea0 8a67 	vfms.f32	s16, s0, s15
 8011a3e:	2d00      	cmp	r5, #0
 8011a40:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011a44:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8011a48:	ee17 9a90 	vmov	r9, s15
 8011a4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011a50:	ee38 8a67 	vsub.f32	s16, s16, s15
 8011a54:	dd41      	ble.n	8011ada <__kernel_rem_pio2f+0x1ae>
 8011a56:	f104 3cff 	add.w	ip, r4, #4294967295
 8011a5a:	a908      	add	r1, sp, #32
 8011a5c:	f1c5 0e08 	rsb	lr, r5, #8
 8011a60:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8011a64:	fa46 f00e 	asr.w	r0, r6, lr
 8011a68:	4481      	add	r9, r0
 8011a6a:	fa00 f00e 	lsl.w	r0, r0, lr
 8011a6e:	1a36      	subs	r6, r6, r0
 8011a70:	f1c5 0007 	rsb	r0, r5, #7
 8011a74:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8011a78:	4106      	asrs	r6, r0
 8011a7a:	2e00      	cmp	r6, #0
 8011a7c:	dd3c      	ble.n	8011af8 <__kernel_rem_pio2f+0x1cc>
 8011a7e:	f04f 0e00 	mov.w	lr, #0
 8011a82:	f109 0901 	add.w	r9, r9, #1
 8011a86:	4670      	mov	r0, lr
 8011a88:	4574      	cmp	r4, lr
 8011a8a:	dc68      	bgt.n	8011b5e <__kernel_rem_pio2f+0x232>
 8011a8c:	2d00      	cmp	r5, #0
 8011a8e:	dd03      	ble.n	8011a98 <__kernel_rem_pio2f+0x16c>
 8011a90:	2d01      	cmp	r5, #1
 8011a92:	d074      	beq.n	8011b7e <__kernel_rem_pio2f+0x252>
 8011a94:	2d02      	cmp	r5, #2
 8011a96:	d07d      	beq.n	8011b94 <__kernel_rem_pio2f+0x268>
 8011a98:	2e02      	cmp	r6, #2
 8011a9a:	d12d      	bne.n	8011af8 <__kernel_rem_pio2f+0x1cc>
 8011a9c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8011aa0:	ee30 8a48 	vsub.f32	s16, s0, s16
 8011aa4:	b340      	cbz	r0, 8011af8 <__kernel_rem_pio2f+0x1cc>
 8011aa6:	4628      	mov	r0, r5
 8011aa8:	9306      	str	r3, [sp, #24]
 8011aaa:	f000 f9b1 	bl	8011e10 <scalbnf>
 8011aae:	9b06      	ldr	r3, [sp, #24]
 8011ab0:	ee38 8a40 	vsub.f32	s16, s16, s0
 8011ab4:	e020      	b.n	8011af8 <__kernel_rem_pio2f+0x1cc>
 8011ab6:	ee60 7a28 	vmul.f32	s15, s0, s17
 8011aba:	3e01      	subs	r6, #1
 8011abc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011ac0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011ac4:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8011ac8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8011acc:	ecac 0a01 	vstmia	ip!, {s0}
 8011ad0:	ed90 0a00 	vldr	s0, [r0]
 8011ad4:	ee37 0a80 	vadd.f32	s0, s15, s0
 8011ad8:	e79c      	b.n	8011a14 <__kernel_rem_pio2f+0xe8>
 8011ada:	d105      	bne.n	8011ae8 <__kernel_rem_pio2f+0x1bc>
 8011adc:	1e60      	subs	r0, r4, #1
 8011ade:	a908      	add	r1, sp, #32
 8011ae0:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8011ae4:	11f6      	asrs	r6, r6, #7
 8011ae6:	e7c8      	b.n	8011a7a <__kernel_rem_pio2f+0x14e>
 8011ae8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8011aec:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8011af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011af4:	da31      	bge.n	8011b5a <__kernel_rem_pio2f+0x22e>
 8011af6:	2600      	movs	r6, #0
 8011af8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8011afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b00:	f040 8098 	bne.w	8011c34 <__kernel_rem_pio2f+0x308>
 8011b04:	1e60      	subs	r0, r4, #1
 8011b06:	2200      	movs	r2, #0
 8011b08:	4550      	cmp	r0, sl
 8011b0a:	da4b      	bge.n	8011ba4 <__kernel_rem_pio2f+0x278>
 8011b0c:	2a00      	cmp	r2, #0
 8011b0e:	d065      	beq.n	8011bdc <__kernel_rem_pio2f+0x2b0>
 8011b10:	3c01      	subs	r4, #1
 8011b12:	ab08      	add	r3, sp, #32
 8011b14:	3d08      	subs	r5, #8
 8011b16:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d0f8      	beq.n	8011b10 <__kernel_rem_pio2f+0x1e4>
 8011b1e:	4628      	mov	r0, r5
 8011b20:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8011b24:	f000 f974 	bl	8011e10 <scalbnf>
 8011b28:	1c63      	adds	r3, r4, #1
 8011b2a:	aa44      	add	r2, sp, #272	@ 0x110
 8011b2c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8011c2c <__kernel_rem_pio2f+0x300>
 8011b30:	0099      	lsls	r1, r3, #2
 8011b32:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8011b36:	4623      	mov	r3, r4
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	f280 80a9 	bge.w	8011c90 <__kernel_rem_pio2f+0x364>
 8011b3e:	4623      	mov	r3, r4
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	f2c0 80c7 	blt.w	8011cd4 <__kernel_rem_pio2f+0x3a8>
 8011b46:	aa44      	add	r2, sp, #272	@ 0x110
 8011b48:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8011b4c:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8011c24 <__kernel_rem_pio2f+0x2f8>
 8011b50:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8011c30 <__kernel_rem_pio2f+0x304>
 8011b54:	2000      	movs	r0, #0
 8011b56:	1ae2      	subs	r2, r4, r3
 8011b58:	e0b1      	b.n	8011cbe <__kernel_rem_pio2f+0x392>
 8011b5a:	2602      	movs	r6, #2
 8011b5c:	e78f      	b.n	8011a7e <__kernel_rem_pio2f+0x152>
 8011b5e:	f852 1b04 	ldr.w	r1, [r2], #4
 8011b62:	b948      	cbnz	r0, 8011b78 <__kernel_rem_pio2f+0x24c>
 8011b64:	b121      	cbz	r1, 8011b70 <__kernel_rem_pio2f+0x244>
 8011b66:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8011b6a:	f842 1c04 	str.w	r1, [r2, #-4]
 8011b6e:	2101      	movs	r1, #1
 8011b70:	f10e 0e01 	add.w	lr, lr, #1
 8011b74:	4608      	mov	r0, r1
 8011b76:	e787      	b.n	8011a88 <__kernel_rem_pio2f+0x15c>
 8011b78:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8011b7c:	e7f5      	b.n	8011b6a <__kernel_rem_pio2f+0x23e>
 8011b7e:	f104 3cff 	add.w	ip, r4, #4294967295
 8011b82:	aa08      	add	r2, sp, #32
 8011b84:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8011b88:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8011b8c:	a908      	add	r1, sp, #32
 8011b8e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8011b92:	e781      	b.n	8011a98 <__kernel_rem_pio2f+0x16c>
 8011b94:	f104 3cff 	add.w	ip, r4, #4294967295
 8011b98:	aa08      	add	r2, sp, #32
 8011b9a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8011b9e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8011ba2:	e7f3      	b.n	8011b8c <__kernel_rem_pio2f+0x260>
 8011ba4:	a908      	add	r1, sp, #32
 8011ba6:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8011baa:	3801      	subs	r0, #1
 8011bac:	430a      	orrs	r2, r1
 8011bae:	e7ab      	b.n	8011b08 <__kernel_rem_pio2f+0x1dc>
 8011bb0:	3201      	adds	r2, #1
 8011bb2:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8011bb6:	2e00      	cmp	r6, #0
 8011bb8:	d0fa      	beq.n	8011bb0 <__kernel_rem_pio2f+0x284>
 8011bba:	9905      	ldr	r1, [sp, #20]
 8011bbc:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8011bc0:	eb0d 0001 	add.w	r0, sp, r1
 8011bc4:	18e6      	adds	r6, r4, r3
 8011bc6:	a91c      	add	r1, sp, #112	@ 0x70
 8011bc8:	f104 0c01 	add.w	ip, r4, #1
 8011bcc:	384c      	subs	r0, #76	@ 0x4c
 8011bce:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8011bd2:	4422      	add	r2, r4
 8011bd4:	4562      	cmp	r2, ip
 8011bd6:	da04      	bge.n	8011be2 <__kernel_rem_pio2f+0x2b6>
 8011bd8:	4614      	mov	r4, r2
 8011bda:	e70e      	b.n	80119fa <__kernel_rem_pio2f+0xce>
 8011bdc:	9804      	ldr	r0, [sp, #16]
 8011bde:	2201      	movs	r2, #1
 8011be0:	e7e7      	b.n	8011bb2 <__kernel_rem_pio2f+0x286>
 8011be2:	9903      	ldr	r1, [sp, #12]
 8011be4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8011be8:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8011bec:	9105      	str	r1, [sp, #20]
 8011bee:	ee07 1a90 	vmov	s15, r1
 8011bf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011bf6:	2400      	movs	r4, #0
 8011bf8:	ece6 7a01 	vstmia	r6!, {s15}
 8011bfc:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8011c30 <__kernel_rem_pio2f+0x304>
 8011c00:	46b1      	mov	r9, r6
 8011c02:	455c      	cmp	r4, fp
 8011c04:	dd04      	ble.n	8011c10 <__kernel_rem_pio2f+0x2e4>
 8011c06:	ece0 7a01 	vstmia	r0!, {s15}
 8011c0a:	f10c 0c01 	add.w	ip, ip, #1
 8011c0e:	e7e1      	b.n	8011bd4 <__kernel_rem_pio2f+0x2a8>
 8011c10:	ecfe 6a01 	vldmia	lr!, {s13}
 8011c14:	ed39 7a01 	vldmdb	r9!, {s14}
 8011c18:	3401      	adds	r4, #1
 8011c1a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011c1e:	e7f0      	b.n	8011c02 <__kernel_rem_pio2f+0x2d6>
 8011c20:	0802f964 	.word	0x0802f964
 8011c24:	0802f938 	.word	0x0802f938
 8011c28:	43800000 	.word	0x43800000
 8011c2c:	3b800000 	.word	0x3b800000
 8011c30:	00000000 	.word	0x00000000
 8011c34:	9b02      	ldr	r3, [sp, #8]
 8011c36:	eeb0 0a48 	vmov.f32	s0, s16
 8011c3a:	eba3 0008 	sub.w	r0, r3, r8
 8011c3e:	f000 f8e7 	bl	8011e10 <scalbnf>
 8011c42:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8011c28 <__kernel_rem_pio2f+0x2fc>
 8011c46:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8011c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c4e:	db19      	blt.n	8011c84 <__kernel_rem_pio2f+0x358>
 8011c50:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8011c2c <__kernel_rem_pio2f+0x300>
 8011c54:	ee60 7a27 	vmul.f32	s15, s0, s15
 8011c58:	aa08      	add	r2, sp, #32
 8011c5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011c5e:	3508      	adds	r5, #8
 8011c60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011c64:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8011c68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011c6c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8011c70:	ee10 3a10 	vmov	r3, s0
 8011c74:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8011c78:	ee17 3a90 	vmov	r3, s15
 8011c7c:	3401      	adds	r4, #1
 8011c7e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8011c82:	e74c      	b.n	8011b1e <__kernel_rem_pio2f+0x1f2>
 8011c84:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8011c88:	aa08      	add	r2, sp, #32
 8011c8a:	ee10 3a10 	vmov	r3, s0
 8011c8e:	e7f6      	b.n	8011c7e <__kernel_rem_pio2f+0x352>
 8011c90:	a808      	add	r0, sp, #32
 8011c92:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8011c96:	9001      	str	r0, [sp, #4]
 8011c98:	ee07 0a90 	vmov	s15, r0
 8011c9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011ca0:	3b01      	subs	r3, #1
 8011ca2:	ee67 7a80 	vmul.f32	s15, s15, s0
 8011ca6:	ee20 0a07 	vmul.f32	s0, s0, s14
 8011caa:	ed62 7a01 	vstmdb	r2!, {s15}
 8011cae:	e743      	b.n	8011b38 <__kernel_rem_pio2f+0x20c>
 8011cb0:	ecfc 6a01 	vldmia	ip!, {s13}
 8011cb4:	ecb5 7a01 	vldmia	r5!, {s14}
 8011cb8:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011cbc:	3001      	adds	r0, #1
 8011cbe:	4550      	cmp	r0, sl
 8011cc0:	dc01      	bgt.n	8011cc6 <__kernel_rem_pio2f+0x39a>
 8011cc2:	4282      	cmp	r2, r0
 8011cc4:	daf4      	bge.n	8011cb0 <__kernel_rem_pio2f+0x384>
 8011cc6:	a858      	add	r0, sp, #352	@ 0x160
 8011cc8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8011ccc:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8011cd0:	3b01      	subs	r3, #1
 8011cd2:	e735      	b.n	8011b40 <__kernel_rem_pio2f+0x214>
 8011cd4:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8011cd6:	2b02      	cmp	r3, #2
 8011cd8:	dc09      	bgt.n	8011cee <__kernel_rem_pio2f+0x3c2>
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	dc2b      	bgt.n	8011d36 <__kernel_rem_pio2f+0x40a>
 8011cde:	d044      	beq.n	8011d6a <__kernel_rem_pio2f+0x43e>
 8011ce0:	f009 0007 	and.w	r0, r9, #7
 8011ce4:	b059      	add	sp, #356	@ 0x164
 8011ce6:	ecbd 8b04 	vpop	{d8-d9}
 8011cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cee:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8011cf0:	2b03      	cmp	r3, #3
 8011cf2:	d1f5      	bne.n	8011ce0 <__kernel_rem_pio2f+0x3b4>
 8011cf4:	aa30      	add	r2, sp, #192	@ 0xc0
 8011cf6:	1f0b      	subs	r3, r1, #4
 8011cf8:	4413      	add	r3, r2
 8011cfa:	461a      	mov	r2, r3
 8011cfc:	4620      	mov	r0, r4
 8011cfe:	2800      	cmp	r0, #0
 8011d00:	f1a2 0204 	sub.w	r2, r2, #4
 8011d04:	dc52      	bgt.n	8011dac <__kernel_rem_pio2f+0x480>
 8011d06:	4622      	mov	r2, r4
 8011d08:	2a01      	cmp	r2, #1
 8011d0a:	f1a3 0304 	sub.w	r3, r3, #4
 8011d0e:	dc5d      	bgt.n	8011dcc <__kernel_rem_pio2f+0x4a0>
 8011d10:	ab30      	add	r3, sp, #192	@ 0xc0
 8011d12:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 8011c30 <__kernel_rem_pio2f+0x304>
 8011d16:	440b      	add	r3, r1
 8011d18:	2c01      	cmp	r4, #1
 8011d1a:	dc67      	bgt.n	8011dec <__kernel_rem_pio2f+0x4c0>
 8011d1c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8011d20:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8011d24:	2e00      	cmp	r6, #0
 8011d26:	d167      	bne.n	8011df8 <__kernel_rem_pio2f+0x4cc>
 8011d28:	edc7 6a00 	vstr	s13, [r7]
 8011d2c:	ed87 7a01 	vstr	s14, [r7, #4]
 8011d30:	edc7 7a02 	vstr	s15, [r7, #8]
 8011d34:	e7d4      	b.n	8011ce0 <__kernel_rem_pio2f+0x3b4>
 8011d36:	ab30      	add	r3, sp, #192	@ 0xc0
 8011d38:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 8011c30 <__kernel_rem_pio2f+0x304>
 8011d3c:	440b      	add	r3, r1
 8011d3e:	4622      	mov	r2, r4
 8011d40:	2a00      	cmp	r2, #0
 8011d42:	da24      	bge.n	8011d8e <__kernel_rem_pio2f+0x462>
 8011d44:	b34e      	cbz	r6, 8011d9a <__kernel_rem_pio2f+0x46e>
 8011d46:	eef1 7a47 	vneg.f32	s15, s14
 8011d4a:	edc7 7a00 	vstr	s15, [r7]
 8011d4e:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8011d52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011d56:	aa31      	add	r2, sp, #196	@ 0xc4
 8011d58:	2301      	movs	r3, #1
 8011d5a:	429c      	cmp	r4, r3
 8011d5c:	da20      	bge.n	8011da0 <__kernel_rem_pio2f+0x474>
 8011d5e:	b10e      	cbz	r6, 8011d64 <__kernel_rem_pio2f+0x438>
 8011d60:	eef1 7a67 	vneg.f32	s15, s15
 8011d64:	edc7 7a01 	vstr	s15, [r7, #4]
 8011d68:	e7ba      	b.n	8011ce0 <__kernel_rem_pio2f+0x3b4>
 8011d6a:	ab30      	add	r3, sp, #192	@ 0xc0
 8011d6c:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 8011c30 <__kernel_rem_pio2f+0x304>
 8011d70:	440b      	add	r3, r1
 8011d72:	2c00      	cmp	r4, #0
 8011d74:	da05      	bge.n	8011d82 <__kernel_rem_pio2f+0x456>
 8011d76:	b10e      	cbz	r6, 8011d7c <__kernel_rem_pio2f+0x450>
 8011d78:	eef1 7a67 	vneg.f32	s15, s15
 8011d7c:	edc7 7a00 	vstr	s15, [r7]
 8011d80:	e7ae      	b.n	8011ce0 <__kernel_rem_pio2f+0x3b4>
 8011d82:	ed33 7a01 	vldmdb	r3!, {s14}
 8011d86:	3c01      	subs	r4, #1
 8011d88:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011d8c:	e7f1      	b.n	8011d72 <__kernel_rem_pio2f+0x446>
 8011d8e:	ed73 7a01 	vldmdb	r3!, {s15}
 8011d92:	3a01      	subs	r2, #1
 8011d94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011d98:	e7d2      	b.n	8011d40 <__kernel_rem_pio2f+0x414>
 8011d9a:	eef0 7a47 	vmov.f32	s15, s14
 8011d9e:	e7d4      	b.n	8011d4a <__kernel_rem_pio2f+0x41e>
 8011da0:	ecb2 7a01 	vldmia	r2!, {s14}
 8011da4:	3301      	adds	r3, #1
 8011da6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011daa:	e7d6      	b.n	8011d5a <__kernel_rem_pio2f+0x42e>
 8011dac:	edd2 7a00 	vldr	s15, [r2]
 8011db0:	edd2 6a01 	vldr	s13, [r2, #4]
 8011db4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8011db8:	3801      	subs	r0, #1
 8011dba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011dbe:	ed82 7a00 	vstr	s14, [r2]
 8011dc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011dc6:	edc2 7a01 	vstr	s15, [r2, #4]
 8011dca:	e798      	b.n	8011cfe <__kernel_rem_pio2f+0x3d2>
 8011dcc:	edd3 7a00 	vldr	s15, [r3]
 8011dd0:	edd3 6a01 	vldr	s13, [r3, #4]
 8011dd4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8011dd8:	3a01      	subs	r2, #1
 8011dda:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011dde:	ed83 7a00 	vstr	s14, [r3]
 8011de2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011de6:	edc3 7a01 	vstr	s15, [r3, #4]
 8011dea:	e78d      	b.n	8011d08 <__kernel_rem_pio2f+0x3dc>
 8011dec:	ed33 7a01 	vldmdb	r3!, {s14}
 8011df0:	3c01      	subs	r4, #1
 8011df2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011df6:	e78f      	b.n	8011d18 <__kernel_rem_pio2f+0x3ec>
 8011df8:	eef1 6a66 	vneg.f32	s13, s13
 8011dfc:	eeb1 7a47 	vneg.f32	s14, s14
 8011e00:	edc7 6a00 	vstr	s13, [r7]
 8011e04:	ed87 7a01 	vstr	s14, [r7, #4]
 8011e08:	eef1 7a67 	vneg.f32	s15, s15
 8011e0c:	e790      	b.n	8011d30 <__kernel_rem_pio2f+0x404>
 8011e0e:	bf00      	nop

08011e10 <scalbnf>:
 8011e10:	ee10 3a10 	vmov	r3, s0
 8011e14:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8011e18:	d02b      	beq.n	8011e72 <scalbnf+0x62>
 8011e1a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8011e1e:	d302      	bcc.n	8011e26 <scalbnf+0x16>
 8011e20:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011e24:	4770      	bx	lr
 8011e26:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8011e2a:	d123      	bne.n	8011e74 <scalbnf+0x64>
 8011e2c:	4b24      	ldr	r3, [pc, #144]	@ (8011ec0 <scalbnf+0xb0>)
 8011e2e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8011ec4 <scalbnf+0xb4>
 8011e32:	4298      	cmp	r0, r3
 8011e34:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011e38:	db17      	blt.n	8011e6a <scalbnf+0x5a>
 8011e3a:	ee10 3a10 	vmov	r3, s0
 8011e3e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8011e42:	3a19      	subs	r2, #25
 8011e44:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8011e48:	4288      	cmp	r0, r1
 8011e4a:	dd15      	ble.n	8011e78 <scalbnf+0x68>
 8011e4c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8011ec8 <scalbnf+0xb8>
 8011e50:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8011ecc <scalbnf+0xbc>
 8011e54:	ee10 3a10 	vmov	r3, s0
 8011e58:	eeb0 7a67 	vmov.f32	s14, s15
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	bfb8      	it	lt
 8011e60:	eef0 7a66 	vmovlt.f32	s15, s13
 8011e64:	ee27 0a87 	vmul.f32	s0, s15, s14
 8011e68:	4770      	bx	lr
 8011e6a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8011ed0 <scalbnf+0xc0>
 8011e6e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8011e72:	4770      	bx	lr
 8011e74:	0dd2      	lsrs	r2, r2, #23
 8011e76:	e7e5      	b.n	8011e44 <scalbnf+0x34>
 8011e78:	4410      	add	r0, r2
 8011e7a:	28fe      	cmp	r0, #254	@ 0xfe
 8011e7c:	dce6      	bgt.n	8011e4c <scalbnf+0x3c>
 8011e7e:	2800      	cmp	r0, #0
 8011e80:	dd06      	ble.n	8011e90 <scalbnf+0x80>
 8011e82:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8011e86:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8011e8a:	ee00 3a10 	vmov	s0, r3
 8011e8e:	4770      	bx	lr
 8011e90:	f110 0f16 	cmn.w	r0, #22
 8011e94:	da09      	bge.n	8011eaa <scalbnf+0x9a>
 8011e96:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8011ed0 <scalbnf+0xc0>
 8011e9a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8011ed4 <scalbnf+0xc4>
 8011e9e:	ee10 3a10 	vmov	r3, s0
 8011ea2:	eeb0 7a67 	vmov.f32	s14, s15
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	e7d9      	b.n	8011e5e <scalbnf+0x4e>
 8011eaa:	3019      	adds	r0, #25
 8011eac:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8011eb0:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8011eb4:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8011ed8 <scalbnf+0xc8>
 8011eb8:	ee07 3a90 	vmov	s15, r3
 8011ebc:	e7d7      	b.n	8011e6e <scalbnf+0x5e>
 8011ebe:	bf00      	nop
 8011ec0:	ffff3cb0 	.word	0xffff3cb0
 8011ec4:	4c000000 	.word	0x4c000000
 8011ec8:	7149f2ca 	.word	0x7149f2ca
 8011ecc:	f149f2ca 	.word	0xf149f2ca
 8011ed0:	0da24260 	.word	0x0da24260
 8011ed4:	8da24260 	.word	0x8da24260
 8011ed8:	33000000 	.word	0x33000000

08011edc <floorf>:
 8011edc:	ee10 3a10 	vmov	r3, s0
 8011ee0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8011ee4:	3a7f      	subs	r2, #127	@ 0x7f
 8011ee6:	2a16      	cmp	r2, #22
 8011ee8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8011eec:	dc2b      	bgt.n	8011f46 <floorf+0x6a>
 8011eee:	2a00      	cmp	r2, #0
 8011ef0:	da12      	bge.n	8011f18 <floorf+0x3c>
 8011ef2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8011f58 <floorf+0x7c>
 8011ef6:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011efa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8011efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f02:	dd06      	ble.n	8011f12 <floorf+0x36>
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	da24      	bge.n	8011f52 <floorf+0x76>
 8011f08:	2900      	cmp	r1, #0
 8011f0a:	4b14      	ldr	r3, [pc, #80]	@ (8011f5c <floorf+0x80>)
 8011f0c:	bf08      	it	eq
 8011f0e:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8011f12:	ee00 3a10 	vmov	s0, r3
 8011f16:	4770      	bx	lr
 8011f18:	4911      	ldr	r1, [pc, #68]	@ (8011f60 <floorf+0x84>)
 8011f1a:	4111      	asrs	r1, r2
 8011f1c:	420b      	tst	r3, r1
 8011f1e:	d0fa      	beq.n	8011f16 <floorf+0x3a>
 8011f20:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8011f58 <floorf+0x7c>
 8011f24:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011f28:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8011f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f30:	ddef      	ble.n	8011f12 <floorf+0x36>
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	bfbe      	ittt	lt
 8011f36:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8011f3a:	fa40 f202 	asrlt.w	r2, r0, r2
 8011f3e:	189b      	addlt	r3, r3, r2
 8011f40:	ea23 0301 	bic.w	r3, r3, r1
 8011f44:	e7e5      	b.n	8011f12 <floorf+0x36>
 8011f46:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8011f4a:	d3e4      	bcc.n	8011f16 <floorf+0x3a>
 8011f4c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011f50:	4770      	bx	lr
 8011f52:	2300      	movs	r3, #0
 8011f54:	e7dd      	b.n	8011f12 <floorf+0x36>
 8011f56:	bf00      	nop
 8011f58:	7149f2ca 	.word	0x7149f2ca
 8011f5c:	bf800000 	.word	0xbf800000
 8011f60:	007fffff 	.word	0x007fffff

08011f64 <_init>:
 8011f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f66:	bf00      	nop
 8011f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f6a:	bc08      	pop	{r3}
 8011f6c:	469e      	mov	lr, r3
 8011f6e:	4770      	bx	lr

08011f70 <_fini>:
 8011f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f72:	bf00      	nop
 8011f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f76:	bc08      	pop	{r3}
 8011f78:	469e      	mov	lr, r3
 8011f7a:	4770      	bx	lr
